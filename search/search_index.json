{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09\u5237\u9898\u7b14\u8bb0 \u674e\u5a01 \u6211\u7684\u4e2a\u4eba\u7f51\u7ad9\uff1a https://www.liwei.party/ \u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09 \u4e60\u9898\u4ee3\u7801\uff1a https://github.com/liweiwei1419/sword-for-offer-solution \u7b80\u4e66\uff1a \u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09\u8bfb\u4e66\u7b14\u8bb0 mkdocs \u9759\u6001\u6587\u6863\uff1a https://liweiwei1419.github.io/sword-for-offer/ \u6211\u5728 AcWing \u4e0a\u4f5c\u7b54\u7684\u60c5\u51b5\uff1a https://www.acwing.com/activity/content/activity_person/content/1344/1/","title":"\u9996\u9875"},{"location":"#offer-2","text":"\u674e\u5a01 \u6211\u7684\u4e2a\u4eba\u7f51\u7ad9\uff1a https://www.liwei.party/ \u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09 \u4e60\u9898\u4ee3\u7801\uff1a https://github.com/liweiwei1419/sword-for-offer-solution \u7b80\u4e66\uff1a \u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09\u8bfb\u4e66\u7b14\u8bb0 mkdocs \u9759\u6001\u6587\u6863\uff1a https://liweiwei1419.github.io/sword-for-offer/ \u6211\u5728 AcWing \u4e0a\u4f5c\u7b54\u7684\u60c5\u51b5\uff1a https://www.acwing.com/activity/content/activity_person/content/1344/1/","title":"\u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09\u5237\u9898\u7b14\u8bb0"},{"location":"03-/","text":"\u65b9\u6cd5\u4e00\uff1a\u54c8\u5e0c\u8868 \u6700\u5bb9\u6613\u60f3\u5230\u7528\u54c8\u5e0c\u8868\u5224\u91cd\u3002\u7279\u522b\u5730\uff0c\u5728\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 $32$ \u7684\u65f6\u5019\uff0c\u4f7f\u7528\u4f4d\u8fd0\u7b97\u7684\u6280\u5de7\u53ef\u4ee5\u5b9e\u73b0 $O(1)$ \u7a7a\u95f4\u590d\u6742\u5ea6\u5224\u91cd\u3002 \u65b9\u6cd5\u4e8c\uff1a\u6392\u5e8f \u6392\u5e8f\u4ee5\u540e\uff0c\u518d\u904d\u5386\u4e00\u904d\u5c31\u77e5\u9053\u54ea\u4e2a\u91cd\u590d\u4e86\u3002 \u65b9\u6cd5\u4e09\uff1a\u6876\u7684\u601d\u60f3 + \u62bd\u5c49\u539f\u7406 \u7531\u4e8e\u6570\u7ec4\u5143\u7d20\u7684\u503c\u90fd\u5728\u6307\u5b9a\u7684\u8303\u56f4\u5185\uff0c\u8fd9\u4e2a\u8303\u56f4\u6070\u6070\u597d\u4e0e\u6570\u7ec4\u7684\u4e0b\u6807\u53ef\u4ee5\u4e00\u4e00\u5bf9\u5e94\uff1b \u56e0\u6b64\u770b\u5230\u6570\u503c\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u5b83\u5e94\u8be5\u653e\u5728\u4ec0\u4e48\u4f4d\u7f6e\uff0c\u8fd9\u91cc nums[i] \u5e94\u8be5\u653e\u5728\u4e0b\u6807\u4e3a i \u7684\u4f4d\u7f6e\u4e0a\uff0c\u5c31\u6839\u636e\u8fd9\u4e00\u70b9\u89e3\u9898\uff0c\u8fd9\u79cd\u601d\u60f3\u4e0e\u6876\u6392\u5e8f\u3001\u54c8\u5e0c\u8868\u7684\u601d\u60f3\u662f\u4e00\u81f4\u7684\uff1b \u7c7b\u4f3c\u95ee\u9898\u5982\u4e0b\uff1a \u95ee\u9898 \u9898\u89e3 41. \u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6570 \u6876\u7684\u601d\u60f3 + \u62bd\u5c49\u539f\u7406 442. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u636e \u201c\u62bd\u5c49\u539f\u7406\u201d + \u57fa\u4e8e\u201c\u5f02\u6216\u8fd0\u7b97\u201d\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u7684\u503c 448. \u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57 \u62bd\u5c49\u539f\u7406 + \u57fa\u4e8e\u201c\u5f02\u6216\u8fd0\u7b97\u201d\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u7684\u503c\uff08Python \u4ee3\u7801\u3001Java \u4ee3\u7801\uff09 Java \u4ee3\u7801\uff1a public class Solution { public int findRepeatNumber(int[] nums) { int len = nums.length; for (int i = 0; i < len; i++) { // nums[i] \u5e94\u8be5\u653e\u5728\u4e0b\u6807\u4e3a i \u7684\u4f4d\u7f6e\u4e0a while (nums[i] != i) { if (nums[i] == nums[nums[i]]) { return nums[i]; } swap(nums, i, nums[i]); } } throw new IllegalArgumentException(\"\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u6570\u5b57\uff01\"); } private void swap(int[] nums, int index1, int index2) { int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } } Python \u4ee3\u7801\uff1a \u6ce8\u610f\uff1a\u8fd9\u4e2a\u89e3\u6cd5\u4f1a\u4fee\u6539\u539f\u59cb\u6570\u7ec4 from typing import List class Solution: def findRepeatNumber(self, nums: List[int]) -> int: size = len(nums) if size == 0: return -1 for i in range(size): while nums[i] != i: if nums[i] == nums[nums[i]]: return nums[i] # \u6ce8\u610f\uff1a\u5343\u4e07\u4e0d\u80fd\u8fd9\u4e48\u5199\uff01\uff01\uff01 nums[i], nums[nums[i]] = nums[nums[i]], nums[i] nums[nums[i]], nums[i] = nums[i], nums[nums[i]] return -1 \u601d\u8def4\uff1a\u4e0b\u9762\u7684\u95ee\u9898\u53ef\u4ee5\u4e0d\u4fee\u6539\u6570\u7ec4\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57\uff0c\u5373\u4f7f\u7528\u201c\u4e8c\u5206\u6cd5\u201d\u3002 LeetCode \u7b2c 287 \u9898\uff1a \u5bfb\u627e\u91cd\u590d\u6570 \u4f20\u9001\u95e8\uff1a 287. \u5bfb\u627e\u91cd\u590d\u6570 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n + 1 \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums \uff0c\u5176\u6570\u5b57\u90fd\u5728 1 \u5230 n \u4e4b\u95f4\uff08\u5305\u62ec 1 \u548c n \uff09\uff0c\u53ef\u77e5\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\u3002\u5047\u8bbe\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\uff0c\u627e\u51fa\u8fd9\u4e2a\u91cd\u590d\u7684\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,3,4,2,2] \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: [3,1,3,4,2] \u8f93\u51fa: 3 \u8bf4\u660e\uff1a \u4e0d\u80fd \u66f4\u6539\u539f\u6570\u7ec4\uff08\u5047\u8bbe\u6570\u7ec4\u662f\u53ea\u8bfb\u7684\uff09\u3002 \u53ea\u80fd\u4f7f\u7528\u989d\u5916\u7684 $O(1)$ \u7684\u7a7a\u95f4\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u5c0f\u4e8e $O(n^2)$ \u3002 \u6570\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\uff0c\u4f46\u5b83\u53ef\u80fd\u4e0d\u6b62\u91cd\u590d\u51fa\u73b0\u4e00\u6b21\u3002 \u601d\u8def\uff1a\u5206\u6cbb\u6cd5\uff0c\u7528\u4e8c\u5206\u53bb\u505a\uff0c \u662f\u5bf9\u201c\u6570\u201d\u505a\u4e8c\u5206\uff0c\u800c\u4e0d\u662f\u5bf9\u201c\u7d22\u5f15\u201d \u505a\u4e8c\u5206\u3002 Python \u4ee3\u7801\uff1a\u4f7f\u7528\u4e86\u4e8c\u5206\u6cd5\u7684\u6a21\u677f\uff0c\u8981\u5b9a\u4f4d\u7684\u201c\u6570\u201d\u6839\u636e\u9898\u610f\u5728 $1$ \u548c $n$ \u4e4b\u95f4 class Solution: def findDuplicate(self, nums): \"\"\" \u3010\u4e0d\u4fee\u6539\u6570\u7ec4\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57\u3011 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n + 1 \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums\uff0c \u5176\u6570\u5b57\u90fd\u5728 1 \u5230 n \u4e4b\u95f4\uff08\u5305\u62ec 1 \u548c n\uff09\uff0c \u53ef\u77e5\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\u3002 \u5047\u8bbe\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\uff0c\u627e\u51fa\u8fd9\u4e2a\u91cd\u590d\u7684\u6570\u3002 :type nums: List[int] :rtype: int \"\"\" left = 1 right = len(nums) - 1 while left < right: # \u53d6\u4e2d\u70b9\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u504f\u5de6\u548c\u504f\u53f3 mid = left + (right - left + 1) // 2 # 4 count = 0 for num in nums: if num < mid: count += 1 if count < mid: # \u6bd4 4 \u5c0f\u7684\u4e2a\u6570\uff0c\u6700\u591a\u5c31\u53ea\u80fd\u662f 3 # \u6240\u4ee5\u91cd\u590d\u7684\u80af\u5b9a\u4e0d\u662f [1,2,3]\uff0c\u4e0d\u80fd\u6392\u9664 4 # \u56e0\u4e3a\u5de6\u8fb9\u4e0d\u53d8\uff0c\u6240\u4ee5\u53d6\u4e2d\u70b9\u7684\u65f6\u5019\uff0c\u5c31\u8981\u504f\u53f3 left = mid else: # \u6bd4 4 \u5c0f\u7684\u4e2a\u6570\uff0c\u8fbe\u5230 4 \u6216\u8005\u66f4\u591a # \u91cd\u590d\u7684\u5c31\u843d\u5728 [1,2,3] right = mid - 1 # \u8df3\u51fa\u5faa\u73af\u80af\u5b9a\u662f\u56e0\u4e3a start = end return left \u53c2\u8003\u8d44\u6599\uff1a \u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09\u7b2c 3 \u9898\uff1a\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 \u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } }); \u9898\u76ee\u5730\u5740\uff1a \u529b\u6263 \uff1b AcWing\uff1a\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u6570\u7ec4\u4e2d\u6240\u6709\u7684\u6570\u5b57\u90fd\u5728 $0\u223cn\u22121$ \u7684\u8303\u56f4\u5185\u3002 \u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\uff0c\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\u51e0\u6b21\u3002 \u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u6ce8\u610f \uff1a\u5982\u679c\u67d0\u4e9b\u6570\u5b57\u4e0d\u5728 $0\u223cn\u22121$ \u7684\u8303\u56f4\u5185\uff0c\u6216\u6570\u7ec4\u4e2d\u4e0d\u5305\u542b\u91cd\u590d\u6570\u5b57\uff0c\u5219\u8fd4\u56de $-1$\uff1b \u6837\u4f8b\uff1a \u7ed9\u5b9a nums = [2, 3, 5, 4, 3, 2, 6, 7] \u3002 \u8fd4\u56de $2$ \u6216 $3$\u3002 \u65b9\u6cd5\u4e00\uff1a \u6700\u5bb9\u6613\u60f3\u5230\u7528\u54c8\u5e0c\u8868\u5224\u91cd\u3002\u5728 $n$ \u4e0d\u8d85\u8fc7 $32$ \u7684\u65f6\u5019\uff0c\u4f7f\u7528\u4f4d\u8fd0\u7b97\u53ef\u4ee5\u5b9e\u73b0 $O(1)$ \u7a7a\u95f4\u590d\u6742\u5ea6\u5224\u91cd\u3002 \u65b9\u6cd5\u4e8c\uff1a\u6392\u5e8f\u4ee5\u540e\uff0c\u518d\u904d\u5386\u4e00\u904d\u5c31\u77e5\u9053\u54ea\u4e2a\u91cd\u590d\u4e86\u3002 \u65b9\u6cd5\u4e09\uff1a\u539f\u5730\u54c8\u5e0c\u3002\u8fd9\u9053\u9898\u5b9e\u9645\u4e0a\u662f\u8981\u6c42\u6211\u4eec\u4f7f\u7528\u6876\u6392\u5e8f\u7684\u601d\u60f3\uff08\u4e00\u4e2a\u841d\u535c\u4e00\u4e2a\u5751\uff09\uff0c\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57\u3002 Python \u4ee3\u7801\uff1a\u8fd9\u4e2a\u89e3\u6cd5\u4f1a\u4fee\u6539\u539f\u59cb\u6570\u7ec4 ```Python [] \u65b9\u6cd5\u56db\uff1a\u4e0b\u9762\u7684\u95ee\u9898\u53ef\u4ee5\u4e0d\u4fee\u6539\u6570\u7ec4\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57\uff0c\u5373\u4f7f\u7528\u300c\u4e8c\u5206\u6cd5\u300d\u3002 ### \u300c\u529b\u6263\u300d\u7b2c 287 \u9898\uff1a[\u5bfb\u627e\u91cd\u590d\u6570](https://leetcode-cn.com/problems/find-the-duplicate-number/) \u4f20\u9001\u95e8\uff1a[287. \u5bfb\u627e\u91cd\u590d\u6570](https://leetcode-cn.com/problems/find-the-duplicate-number/)\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b *n* + 1 \u4e2a\u6574\u6570\u7684\u6570\u7ec4 *nums*\uff0c\u5176\u6570\u5b57\u90fd\u5728 1 \u5230 *n* \u4e4b\u95f4\uff08\u5305\u62ec 1 \u548c *n*\uff09\uff0c\u53ef\u77e5\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\u3002\u5047\u8bbe\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\uff0c\u627e\u51fa\u8fd9\u4e2a\u91cd\u590d\u7684\u6570\u3002 **\u793a\u4f8b 1:** \u8f93\u5165: `[1,3,4,2,2]` \u8f93\u51fa: 2 **\u793a\u4f8b 2:** \u8f93\u5165: `[3,1,3,4,2]` \u8f93\u51fa: 3 **\u8bf4\u660e\uff1a** 1. **\u4e0d\u80fd**\u66f4\u6539\u539f\u6570\u7ec4\uff08\u5047\u8bbe\u6570\u7ec4\u662f\u53ea\u8bfb\u7684\uff09\u3002 2. \u53ea\u80fd\u4f7f\u7528\u989d\u5916\u7684 $O(1)$ \u7684\u7a7a\u95f4\u3002 3. \u65f6\u95f4\u590d\u6742\u5ea6\u5c0f\u4e8e $O(n^2)$ \u3002 4. \u6570\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\uff0c\u4f46\u5b83\u53ef\u80fd\u4e0d\u6b62\u91cd\u590d\u51fa\u73b0\u4e00\u6b21\u3002 **\u601d\u8def**\uff1a\u4e8c\u5206\u7b54\u6848\uff0c\u5373\u662f\u5bf9\u6570\u505a\u4e8c\u5206\uff0c\u800c\u4e0d\u662f\u5bf9\u4e0b\u6807\u505a\u4e8c\u5206\u3002\u6839\u636e\u9898\u610f\uff0c\u8981\u67e5\u627e\u6570\u5728 $1$ \u548c $n$ \u4e4b\u95f4\u3002 ```Python [] class Solution: def findDuplicate(self, nums): \"\"\" \u3010\u4e0d\u4fee\u6539\u6570\u7ec4\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57\u3011 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n + 1 \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums\uff0c \u5176\u6570\u5b57\u90fd\u5728 1 \u5230 n \u4e4b\u95f4\uff08\u5305\u62ec 1 \u548c n\uff09\uff0c \u53ef\u77e5\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\u3002 \u5047\u8bbe\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\uff0c\u627e\u51fa\u8fd9\u4e2a\u91cd\u590d\u7684\u6570\u3002 :type nums: List[int] :rtype: int \"\"\" left = 1 right = len(nums) - 1 while left < right: # \u53d6\u4e2d\u70b9\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u504f\u5de6\u548c\u504f\u53f3 mid = left + (right - left + 1) // 2 # 4 count = 0 for num in nums: if num < mid: count += 1 if count < mid: # \u6bd4 4 \u5c0f\u7684\u4e2a\u6570\uff0c\u6700\u591a\u5c31\u53ea\u80fd\u662f 3 # \u6240\u4ee5\u91cd\u590d\u7684\u80af\u5b9a\u4e0d\u662f [1,2,3]\uff0c\u4e0d\u80fd\u6392\u9664 4 # \u56e0\u4e3a\u5de6\u8fb9\u4e0d\u53d8\uff0c\u6240\u4ee5\u53d6\u4e2d\u70b9\u7684\u65f6\u5019\uff0c\u5c31\u8981\u504f\u53f3 left = mid else: # \u6bd4 4 \u5c0f\u7684\u4e2a\u6570\uff0c\u8fbe\u5230 4 \u6216\u8005\u66f4\u591a # \u91cd\u590d\u7684\u5c31\u843d\u5728 [1,2,3] right = mid - 1 # \u8df3\u51fa\u5faa\u73af\u80af\u5b9a\u662f\u56e0\u4e3a start = end return left \u53c2\u8003\u8d44\u6599\uff1a \u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09\u7b2c 3 \u9898\uff1a\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 \u3002","title":"03 "},{"location":"03-/#_1","text":"\u6700\u5bb9\u6613\u60f3\u5230\u7528\u54c8\u5e0c\u8868\u5224\u91cd\u3002\u7279\u522b\u5730\uff0c\u5728\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 $32$ \u7684\u65f6\u5019\uff0c\u4f7f\u7528\u4f4d\u8fd0\u7b97\u7684\u6280\u5de7\u53ef\u4ee5\u5b9e\u73b0 $O(1)$ \u7a7a\u95f4\u590d\u6742\u5ea6\u5224\u91cd\u3002","title":"\u65b9\u6cd5\u4e00\uff1a\u54c8\u5e0c\u8868"},{"location":"03-/#_2","text":"\u6392\u5e8f\u4ee5\u540e\uff0c\u518d\u904d\u5386\u4e00\u904d\u5c31\u77e5\u9053\u54ea\u4e2a\u91cd\u590d\u4e86\u3002","title":"\u65b9\u6cd5\u4e8c\uff1a\u6392\u5e8f"},{"location":"03-/#_3","text":"\u7531\u4e8e\u6570\u7ec4\u5143\u7d20\u7684\u503c\u90fd\u5728\u6307\u5b9a\u7684\u8303\u56f4\u5185\uff0c\u8fd9\u4e2a\u8303\u56f4\u6070\u6070\u597d\u4e0e\u6570\u7ec4\u7684\u4e0b\u6807\u53ef\u4ee5\u4e00\u4e00\u5bf9\u5e94\uff1b \u56e0\u6b64\u770b\u5230\u6570\u503c\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u5b83\u5e94\u8be5\u653e\u5728\u4ec0\u4e48\u4f4d\u7f6e\uff0c\u8fd9\u91cc nums[i] \u5e94\u8be5\u653e\u5728\u4e0b\u6807\u4e3a i \u7684\u4f4d\u7f6e\u4e0a\uff0c\u5c31\u6839\u636e\u8fd9\u4e00\u70b9\u89e3\u9898\uff0c\u8fd9\u79cd\u601d\u60f3\u4e0e\u6876\u6392\u5e8f\u3001\u54c8\u5e0c\u8868\u7684\u601d\u60f3\u662f\u4e00\u81f4\u7684\uff1b \u7c7b\u4f3c\u95ee\u9898\u5982\u4e0b\uff1a \u95ee\u9898 \u9898\u89e3 41. \u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6570 \u6876\u7684\u601d\u60f3 + \u62bd\u5c49\u539f\u7406 442. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u636e \u201c\u62bd\u5c49\u539f\u7406\u201d + \u57fa\u4e8e\u201c\u5f02\u6216\u8fd0\u7b97\u201d\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u7684\u503c 448. \u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57 \u62bd\u5c49\u539f\u7406 + \u57fa\u4e8e\u201c\u5f02\u6216\u8fd0\u7b97\u201d\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u7684\u503c\uff08Python \u4ee3\u7801\u3001Java \u4ee3\u7801\uff09 Java \u4ee3\u7801\uff1a public class Solution { public int findRepeatNumber(int[] nums) { int len = nums.length; for (int i = 0; i < len; i++) { // nums[i] \u5e94\u8be5\u653e\u5728\u4e0b\u6807\u4e3a i \u7684\u4f4d\u7f6e\u4e0a while (nums[i] != i) { if (nums[i] == nums[nums[i]]) { return nums[i]; } swap(nums, i, nums[i]); } } throw new IllegalArgumentException(\"\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u6570\u5b57\uff01\"); } private void swap(int[] nums, int index1, int index2) { int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } } Python \u4ee3\u7801\uff1a \u6ce8\u610f\uff1a\u8fd9\u4e2a\u89e3\u6cd5\u4f1a\u4fee\u6539\u539f\u59cb\u6570\u7ec4 from typing import List class Solution: def findRepeatNumber(self, nums: List[int]) -> int: size = len(nums) if size == 0: return -1 for i in range(size): while nums[i] != i: if nums[i] == nums[nums[i]]: return nums[i] # \u6ce8\u610f\uff1a\u5343\u4e07\u4e0d\u80fd\u8fd9\u4e48\u5199\uff01\uff01\uff01 nums[i], nums[nums[i]] = nums[nums[i]], nums[i] nums[nums[i]], nums[i] = nums[i], nums[nums[i]] return -1 \u601d\u8def4\uff1a\u4e0b\u9762\u7684\u95ee\u9898\u53ef\u4ee5\u4e0d\u4fee\u6539\u6570\u7ec4\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57\uff0c\u5373\u4f7f\u7528\u201c\u4e8c\u5206\u6cd5\u201d\u3002","title":"\u65b9\u6cd5\u4e09\uff1a\u6876\u7684\u601d\u60f3 + \u62bd\u5c49\u539f\u7406"},{"location":"03-/#leetcode-287","text":"\u4f20\u9001\u95e8\uff1a 287. \u5bfb\u627e\u91cd\u590d\u6570 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n + 1 \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums \uff0c\u5176\u6570\u5b57\u90fd\u5728 1 \u5230 n \u4e4b\u95f4\uff08\u5305\u62ec 1 \u548c n \uff09\uff0c\u53ef\u77e5\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\u3002\u5047\u8bbe\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\uff0c\u627e\u51fa\u8fd9\u4e2a\u91cd\u590d\u7684\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,3,4,2,2] \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: [3,1,3,4,2] \u8f93\u51fa: 3 \u8bf4\u660e\uff1a \u4e0d\u80fd \u66f4\u6539\u539f\u6570\u7ec4\uff08\u5047\u8bbe\u6570\u7ec4\u662f\u53ea\u8bfb\u7684\uff09\u3002 \u53ea\u80fd\u4f7f\u7528\u989d\u5916\u7684 $O(1)$ \u7684\u7a7a\u95f4\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u5c0f\u4e8e $O(n^2)$ \u3002 \u6570\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\uff0c\u4f46\u5b83\u53ef\u80fd\u4e0d\u6b62\u91cd\u590d\u51fa\u73b0\u4e00\u6b21\u3002 \u601d\u8def\uff1a\u5206\u6cbb\u6cd5\uff0c\u7528\u4e8c\u5206\u53bb\u505a\uff0c \u662f\u5bf9\u201c\u6570\u201d\u505a\u4e8c\u5206\uff0c\u800c\u4e0d\u662f\u5bf9\u201c\u7d22\u5f15\u201d \u505a\u4e8c\u5206\u3002 Python \u4ee3\u7801\uff1a\u4f7f\u7528\u4e86\u4e8c\u5206\u6cd5\u7684\u6a21\u677f\uff0c\u8981\u5b9a\u4f4d\u7684\u201c\u6570\u201d\u6839\u636e\u9898\u610f\u5728 $1$ \u548c $n$ \u4e4b\u95f4 class Solution: def findDuplicate(self, nums): \"\"\" \u3010\u4e0d\u4fee\u6539\u6570\u7ec4\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57\u3011 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n + 1 \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums\uff0c \u5176\u6570\u5b57\u90fd\u5728 1 \u5230 n \u4e4b\u95f4\uff08\u5305\u62ec 1 \u548c n\uff09\uff0c \u53ef\u77e5\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\u3002 \u5047\u8bbe\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\uff0c\u627e\u51fa\u8fd9\u4e2a\u91cd\u590d\u7684\u6570\u3002 :type nums: List[int] :rtype: int \"\"\" left = 1 right = len(nums) - 1 while left < right: # \u53d6\u4e2d\u70b9\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u504f\u5de6\u548c\u504f\u53f3 mid = left + (right - left + 1) // 2 # 4 count = 0 for num in nums: if num < mid: count += 1 if count < mid: # \u6bd4 4 \u5c0f\u7684\u4e2a\u6570\uff0c\u6700\u591a\u5c31\u53ea\u80fd\u662f 3 # \u6240\u4ee5\u91cd\u590d\u7684\u80af\u5b9a\u4e0d\u662f [1,2,3]\uff0c\u4e0d\u80fd\u6392\u9664 4 # \u56e0\u4e3a\u5de6\u8fb9\u4e0d\u53d8\uff0c\u6240\u4ee5\u53d6\u4e2d\u70b9\u7684\u65f6\u5019\uff0c\u5c31\u8981\u504f\u53f3 left = mid else: # \u6bd4 4 \u5c0f\u7684\u4e2a\u6570\uff0c\u8fbe\u5230 4 \u6216\u8005\u66f4\u591a # \u91cd\u590d\u7684\u5c31\u843d\u5728 [1,2,3] right = mid - 1 # \u8df3\u51fa\u5faa\u73af\u80af\u5b9a\u662f\u56e0\u4e3a start = end return left \u53c2\u8003\u8d44\u6599\uff1a \u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09\u7b2c 3 \u9898\uff1a\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 \u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } }); \u9898\u76ee\u5730\u5740\uff1a \u529b\u6263 \uff1b AcWing\uff1a\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u6570\u7ec4\u4e2d\u6240\u6709\u7684\u6570\u5b57\u90fd\u5728 $0\u223cn\u22121$ \u7684\u8303\u56f4\u5185\u3002 \u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\uff0c\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\u51e0\u6b21\u3002 \u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u6ce8\u610f \uff1a\u5982\u679c\u67d0\u4e9b\u6570\u5b57\u4e0d\u5728 $0\u223cn\u22121$ \u7684\u8303\u56f4\u5185\uff0c\u6216\u6570\u7ec4\u4e2d\u4e0d\u5305\u542b\u91cd\u590d\u6570\u5b57\uff0c\u5219\u8fd4\u56de $-1$\uff1b \u6837\u4f8b\uff1a \u7ed9\u5b9a nums = [2, 3, 5, 4, 3, 2, 6, 7] \u3002 \u8fd4\u56de $2$ \u6216 $3$\u3002","title":"LeetCode \u7b2c 287 \u9898\uff1a\u5bfb\u627e\u91cd\u590d\u6570"},{"location":"03-/#_4","text":"\u6700\u5bb9\u6613\u60f3\u5230\u7528\u54c8\u5e0c\u8868\u5224\u91cd\u3002\u5728 $n$ \u4e0d\u8d85\u8fc7 $32$ \u7684\u65f6\u5019\uff0c\u4f7f\u7528\u4f4d\u8fd0\u7b97\u53ef\u4ee5\u5b9e\u73b0 $O(1)$ \u7a7a\u95f4\u590d\u6742\u5ea6\u5224\u91cd\u3002","title":"\u65b9\u6cd5\u4e00\uff1a"},{"location":"03-/#_5","text":"","title":"\u65b9\u6cd5\u4e8c\uff1a\u6392\u5e8f\u4ee5\u540e\uff0c\u518d\u904d\u5386\u4e00\u904d\u5c31\u77e5\u9053\u54ea\u4e2a\u91cd\u590d\u4e86\u3002"},{"location":"03-/#_6","text":"Python \u4ee3\u7801\uff1a\u8fd9\u4e2a\u89e3\u6cd5\u4f1a\u4fee\u6539\u539f\u59cb\u6570\u7ec4 ```Python [] \u65b9\u6cd5\u56db\uff1a\u4e0b\u9762\u7684\u95ee\u9898\u53ef\u4ee5\u4e0d\u4fee\u6539\u6570\u7ec4\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57\uff0c\u5373\u4f7f\u7528\u300c\u4e8c\u5206\u6cd5\u300d\u3002 ### \u300c\u529b\u6263\u300d\u7b2c 287 \u9898\uff1a[\u5bfb\u627e\u91cd\u590d\u6570](https://leetcode-cn.com/problems/find-the-duplicate-number/) \u4f20\u9001\u95e8\uff1a[287. \u5bfb\u627e\u91cd\u590d\u6570](https://leetcode-cn.com/problems/find-the-duplicate-number/)\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b *n* + 1 \u4e2a\u6574\u6570\u7684\u6570\u7ec4 *nums*\uff0c\u5176\u6570\u5b57\u90fd\u5728 1 \u5230 *n* \u4e4b\u95f4\uff08\u5305\u62ec 1 \u548c *n*\uff09\uff0c\u53ef\u77e5\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\u3002\u5047\u8bbe\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\uff0c\u627e\u51fa\u8fd9\u4e2a\u91cd\u590d\u7684\u6570\u3002 **\u793a\u4f8b 1:** \u8f93\u5165: `[1,3,4,2,2]` \u8f93\u51fa: 2 **\u793a\u4f8b 2:** \u8f93\u5165: `[3,1,3,4,2]` \u8f93\u51fa: 3 **\u8bf4\u660e\uff1a** 1. **\u4e0d\u80fd**\u66f4\u6539\u539f\u6570\u7ec4\uff08\u5047\u8bbe\u6570\u7ec4\u662f\u53ea\u8bfb\u7684\uff09\u3002 2. \u53ea\u80fd\u4f7f\u7528\u989d\u5916\u7684 $O(1)$ \u7684\u7a7a\u95f4\u3002 3. \u65f6\u95f4\u590d\u6742\u5ea6\u5c0f\u4e8e $O(n^2)$ \u3002 4. \u6570\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\uff0c\u4f46\u5b83\u53ef\u80fd\u4e0d\u6b62\u91cd\u590d\u51fa\u73b0\u4e00\u6b21\u3002 **\u601d\u8def**\uff1a\u4e8c\u5206\u7b54\u6848\uff0c\u5373\u662f\u5bf9\u6570\u505a\u4e8c\u5206\uff0c\u800c\u4e0d\u662f\u5bf9\u4e0b\u6807\u505a\u4e8c\u5206\u3002\u6839\u636e\u9898\u610f\uff0c\u8981\u67e5\u627e\u6570\u5728 $1$ \u548c $n$ \u4e4b\u95f4\u3002 ```Python [] class Solution: def findDuplicate(self, nums): \"\"\" \u3010\u4e0d\u4fee\u6539\u6570\u7ec4\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57\u3011 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n + 1 \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums\uff0c \u5176\u6570\u5b57\u90fd\u5728 1 \u5230 n \u4e4b\u95f4\uff08\u5305\u62ec 1 \u548c n\uff09\uff0c \u53ef\u77e5\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\u3002 \u5047\u8bbe\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\uff0c\u627e\u51fa\u8fd9\u4e2a\u91cd\u590d\u7684\u6570\u3002 :type nums: List[int] :rtype: int \"\"\" left = 1 right = len(nums) - 1 while left < right: # \u53d6\u4e2d\u70b9\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u504f\u5de6\u548c\u504f\u53f3 mid = left + (right - left + 1) // 2 # 4 count = 0 for num in nums: if num < mid: count += 1 if count < mid: # \u6bd4 4 \u5c0f\u7684\u4e2a\u6570\uff0c\u6700\u591a\u5c31\u53ea\u80fd\u662f 3 # \u6240\u4ee5\u91cd\u590d\u7684\u80af\u5b9a\u4e0d\u662f [1,2,3]\uff0c\u4e0d\u80fd\u6392\u9664 4 # \u56e0\u4e3a\u5de6\u8fb9\u4e0d\u53d8\uff0c\u6240\u4ee5\u53d6\u4e2d\u70b9\u7684\u65f6\u5019\uff0c\u5c31\u8981\u504f\u53f3 left = mid else: # \u6bd4 4 \u5c0f\u7684\u4e2a\u6570\uff0c\u8fbe\u5230 4 \u6216\u8005\u66f4\u591a # \u91cd\u590d\u7684\u5c31\u843d\u5728 [1,2,3] right = mid - 1 # \u8df3\u51fa\u5faa\u73af\u80af\u5b9a\u662f\u56e0\u4e3a start = end return left \u53c2\u8003\u8d44\u6599\uff1a \u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09\u7b2c 3 \u9898\uff1a\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 \u3002","title":"\u65b9\u6cd5\u4e09\uff1a\u539f\u5730\u54c8\u5e0c\u3002\u8fd9\u9053\u9898\u5b9e\u9645\u4e0a\u662f\u8981\u6c42\u6211\u4eec\u4f7f\u7528\u6876\u6392\u5e8f\u7684\u601d\u60f3\uff08\u4e00\u4e2a\u841d\u535c\u4e00\u4e2a\u5751\uff09\uff0c\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57\u3002"},{"location":"03/","text":"\u7b2c 3 \u9898 \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 \u5251\u6307 Offer 03. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 \uff1b AcWing\uff1a\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \uff1b \u9898\u89e3\u5730\u5740 \u9898\u76ee\u63cf\u8ff0 \u627e\u51fa\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57\u3002 \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 nums \u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u5728 0\uff5en-1 \u7684\u8303\u56f4\u5185\u3002\u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\uff0c\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a [2, 3, 1, 0, 2, 5, 3] \u8f93\u51fa\uff1a2 \u6216 3 \u9650\u5236\uff1a 2 <= n <= 100000 \u65b9\u6cd5\u4e00\uff1a\u539f\u5730\u54c8\u5e0c \u53c2\u8003\u4ee3\u7801 \uff1a public class Solution { public int findRepeatNumber(int[] nums) { int len = nums.length; for (int i = 0; i < len; i++) { // \u628a nums[i] \u653e\u5728\u4e0b\u6807\u4e3a i \u7684\u4f4d\u7f6e\u4e0a while (nums[i] != i) { if (nums[i] == nums[nums[i]]) { return nums[i]; } swap(nums, i, nums[i]); } } throw new IllegalArgumentException(\"\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u6570\u5b57\uff01\"); } private void swap(int[] nums, int index1, int index2) { int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } }","title":"\u5251\u6307 Offer 03. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57"},{"location":"03/#3","text":"\u5251\u6307 Offer 03. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 \uff1b AcWing\uff1a\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \uff1b \u9898\u89e3\u5730\u5740","title":"\u7b2c 3 \u9898 \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57"},{"location":"03/#_1","text":"\u627e\u51fa\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57\u3002 \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 nums \u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u5728 0\uff5en-1 \u7684\u8303\u56f4\u5185\u3002\u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\uff0c\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a [2, 3, 1, 0, 2, 5, 3] \u8f93\u51fa\uff1a2 \u6216 3 \u9650\u5236\uff1a 2 <= n <= 100000","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"03/#_2","text":"\u53c2\u8003\u4ee3\u7801 \uff1a public class Solution { public int findRepeatNumber(int[] nums) { int len = nums.length; for (int i = 0; i < len; i++) { // \u628a nums[i] \u653e\u5728\u4e0b\u6807\u4e3a i \u7684\u4f4d\u7f6e\u4e0a while (nums[i] != i) { if (nums[i] == nums[nums[i]]) { return nums[i]; } swap(nums, i, nums[i]); } } throw new IllegalArgumentException(\"\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u6570\u5b57\uff01\"); } private void swap(int[] nums, int index1, int index2) { int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } }","title":"\u65b9\u6cd5\u4e00\uff1a\u539f\u5730\u54c8\u5e0c"},{"location":"04-/","text":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 4 \u9898] \u201c\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e\u201d\u505a\u9898\u8bb0\u5f55 \u601d\u8def\u5206\u6790 \u6709\u70b9\u50cf LeetCode \u4e0a\u5c9b\u5c7f\u7684\u95ee\u9898\uff0c\u7279\u522b\u4e4b\u5904\uff1a\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u627e\uff0c\u6216\u8005\u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u627e\uff0c \u4e3a\u4ec0\u4e48\u4e0d\u80fd\u9009\u5de6\u4e0a\u6216\u8005\u53f3\u4e0b\u5f00\u59cb\uff0c\u56e0\u4e3a\u4e0d\u80fd\u7f29\u5c0f\u67e5\u627e\u8303\u56f4 \u3002\u9996\u5148\u9009\u53d6\u6570\u7ec4\u4e2d\u53f3\u4e0a\u89d2\u7684\u6570\u5b57\u3002\u5982\u679c\u8be5\u6570\u5b57\u7b49\u4e8e\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u67e5\u627e\u8fc7\u7a0b\u7ed3\u675f\uff1b\u5982\u679c\u8be5\u6570\u5b57\u5927\u4e8e\u8981\u67e5\u627e\u7684\u6570\u7ec4\uff0c\u5254\u9664\u8fd9\u4e2a\u6570\u5b57\u6240\u5728\u7684\u5217\uff1b\u5982\u679c\u8be5\u6570\u5b57\u5c0f\u4e8e\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u5254\u9664\u8fd9\u4e2a\u6570\u5b57\u6240\u5728\u7684\u884c\u3002\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u8981\u67e5\u627e\u7684\u6570\u5b57\u4e0d\u5728\u6570\u7ec4\u7684\u53f3\u4e0a\u89d2\uff0c\u5219\u6bcf\u4e00\u6b21\u90fd\u5728\u6570\u7ec4\u7684\u67e5\u627e\u8303\u56f4\u4e2d\u5254\u9664\u4e00\u884c\u6216\u8005\u4e00\u5217\uff0c\u8fd9\u6837\u6bcf\u4e00\u6b65\u90fd\u53ef\u4ee5\u7f29\u5c0f\u67e5\u627e\u7684\u8303\u56f4\uff0c\u76f4\u5230\u627e\u5230\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u6216\u8005\u67e5\u627e\u8303\u56f4\u4e3a\u7a7a\u3002 \u53c2\u8003\u4ee3\u7801 1 \uff1a\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u627e\uff0c\u4e00\u4e2a\u4e00\u4e2a\u5730\u627e\u3002 \u5c0f\u4e86\u5411\u4e0b\u9762\u8d70\uff0c\u5927\u4e86\u5411\u5de6\u8fb9\u8d70 ```Python [] class Solution(object): def searchArray(self, array, target): rows = len(array) if rows == 0: return False cols = len(array[0]) if rows > 0 and cols > 0: row = 0 col = cols - 1 # \u6ce8\u610f\uff1a\u5728\u6a2a\u7eb5\u5750\u6807\u90fd\u6709\u610f\u4e49\u7684\u65f6\u5019\uff0c\u624d\u53ef\u4ee5\u641c\u7d22\uff0c\u56e0\u6b64\u7528 and while row < rows and col >= 0: if target == array[row][col]: return True elif target < array[row][col]: # [4, 5, 6, 12, 13] \u627e 7 col -= 1 else: # [7] # [8] # [12] \u627e 9 row += 1 # \u5168\u90e8\u8d70\u5b8c\u90fd\u627e\u4e0d\u5230\uff0c\u5c31\u8bf4\u660e\u6ca1\u6709 return False \u8bf4\u660e\uff1a\u5176\u5b9e\u4e0d\u7ba1\u662f\u6bcf\u884c\u8fd8\u662f\u6bcf\u5217\uff0c\u90fd\u662f\u6709\u5e8f\u6570\u7ec4\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u6cd5\u3002\u6211\u5199\u4e86\u4e2a\u4e8c\u5206\u6cd5\uff0c\u53ea\u662f\u4f5c\u4e3a\u7ec3\u4e60\u3002\u4f46\u662f\u4e8c\u5206\u6cd5\u4e0d\u80fd\u4fdd\u8bc1\u4e00\u6b21\u5199\u5bf9\uff0c\u6240\u4ee5\u4e0d\u5efa\u8bae\u5728\u9762\u8bd5\u7684\u65f6\u5019\u5199\u3002 + \u6b63\u786e\u7684\u641c\u7d22\u8d77\u70b9\u662f\u4ece\u5de6\u4e0b\u89d2\u6216\u8005\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22\uff0c\u8fd9\u662f\u56e0\u4e3a\uff1a \u4ece\u4e0b\u5230\u4e0a\uff0c\u6570\u5b57\u8d8a\u6765\u8d8a\u5c0f\uff1b \u4ece\u5de6\u5230\u53f3\uff0c\u6570\u5b57\u8d8a\u6765\u8d8a\u5927\u3002 + \u6ce8\u610f\u6307\u9488\u6ca1\u6709\u5fc5\u8981\u56de\u9000\uff0c\u8fd9\u4e00\u70b9\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u6ce8\u91ca\u4e2d\u505a\u4e86\u5f3a\u8c03\u3002 \u53c2\u8003\u4ee3\u7801 2\uff1a ```Java [] public class Solution { public boolean Find(int target, int[][] array) { int row = array.length; if (row == 0) { return false; } int col = array[0].length; // \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u641c\u7d22\uff0c\u5148\u4ece\u5de6\u5230\u53f3\uff0c\u518d\u4ece\u4e0b\u5230\u4e0a int i = row - 1; int j = 0; while (i >= 0) { while (j < col && array[i][j] < target) { j++; } if (j < col && array[i][j] == target) { return true; } i--; } return false; } } ```Python [] class Solution(object): # \u4e8c\u5206\u6cd5\u67e5\u627e\u89c4\u5f8b # 1\u3001\u4ece\u53f3\u5230\u5de6\uff0c\u627e\u7b2c 1 \u4e2a\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570 # 2\u3001\u4ece\u4e0a\u5230\u4e0b\uff0c\u627e\u7b2c 1 \u4e2a\u5927\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570 def searchArray(self, array, target): \"\"\" :type array: List[List[int]] :type target: int :rtype: bool \"\"\" rows = len(array) if rows == 0: return False cols = len(array[0]) col = cols - 1 row = 0 while row < rows and col >= 0: # print('row', row, 'col', col, array[row][0]) # 1\u3001\u4ece\u53f3\u5230\u5de6\uff0c\u627e\u7b2c 1 \u4e2a\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570 if col == 0 and array[row][0] > target: return False l = 0 r = col while l < r: mid = l + (r - l + 1) // 2 if array[row][mid] <= target: l = mid else: assert array[row][mid] > target r = mid - 1 col = l # 2\u3001\u4ece\u4e0a\u5230\u4e0b\uff0c\u627e\u7b2c 1 \u4e2a\u5927\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570 if row == rows - 1 and array[rows - 1][col] < target: return False l = row r = rows - 1 while l < r: mid = l + (r - l) // 2 if array[mid][col] >= target: r = mid else: assert array[mid][col] < target l = mid + 1 row = l if array[row][col] == target: return True return False --- ### \u300c\u529b\u6263\u300d\u7b2c 74 \u9898\uff1a\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 \u4f20\u9001\u95e8\uff1a[\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635](https://leetcode-cn.com/problems/search-a-2d-matrix)\u3002 \u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u5224\u65ad *m* x *n* \u77e9\u9635\u4e2d\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u76ee\u6807\u503c\u3002\u8be5\u77e9\u9635\u5177\u6709\u5982\u4e0b\u7279\u6027\uff1a - \u6bcf\u884c\u4e2d\u7684\u6574\u6570\u4ece\u5de6\u5230\u53f3\u6309\u5347\u5e8f\u6392\u5217\u3002 - \u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u5927\u4e8e\u524d\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6574\u6570\u3002 **\u793a\u4f8b 1:** \u8f93\u5165: matrix = [ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50] ] target = 3 \u8f93\u51fa: true **\u793a\u4f8b 2:** \u8f93\u5165: matrix = [ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50] ] target = 13 \u8f93\u51fa: false \u53c2\u8003\u4ee3\u7801\uff1a\u4e8c\u5206\u6cd5 ```Python [] class Solution(object): def searchMatrix(self, matrix, target): \"\"\" :type matrix: List[List[int]] :type target: int :rtype: bool \"\"\" m = len(matrix) if m == 0: return False n = len(matrix[0]) if n == 0: return False left = 0 # \u8fd9\u91cc\u4e00\u5b9a\u8981\u8bb0\u5f97\u51cf 1 right = m * n - 1 while left <= right: mid = left + (right - left) // 2 # \u5b9a\u4f4d\u5230\u77e9\u9635\u4e2d num = matrix[mid // n][mid % n] if num == target: return True elif num < target: left = mid + 1 else: right = mid - 1 return False ```Python [] class Solution(object): def searchMatrix(self, matrix, target): \"\"\" :type matrix: List[List[int]] :type target: int :rtype: bool \"\"\" m = len(matrix) if m == 0: return False n = len(matrix[0]) # [[]] \u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u8981\u7279\u5224 if n == 0: return False l = 0 r = m * n - 1 while l < r: mid = l + (r - l) // 2 if matrix[mid // n][mid % n] < target: l = mid + 1 else: r = mid # \u8fd9\u4e2a\u6a21\u677f\u5728\u9000\u51fa\u5faa\u73af\u7684\u65f6\u5019 l == r \u6210\u7acb\uff0c\u4f46\u662f\u6709\u53ef\u80fd\u5b58\u5728\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u65f6\u5019 # \u6240\u4ee5\u8981\u5355\u72ec\u5224\u65ad return matrix[l // n][l % n] == target ## \u7b2c 4 \u9898\uff1a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e \u300c\u529b\u6263\u300d\u4f20\u9001\u95e8\uff1a[\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e](https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof)\u3002 \u5728\u300c\u529b\u6263\u300d\u4e0a\u7684\u9898\u89e3\uff1a[\u51cf\u800c\u6cbb\u4e4b\u3001\u4e8c\u5206\u67e5\u627e](https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/solution/jian-er-zhi-zhi-er-fen-cha-zhao-by-liweiwei1419-3/)\u3002 \u540c LeetCode \u7b2c 240 \u9898\uff0cLeetCode \u4f20\u9001\u95e8\uff1a[\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II](https://leetcode-cn.com/problems/search-a-2d-matrix-ii)\uff0cAcWing\uff1a[\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e](https://www.acwing.com/problem/content/16/)\uff0c\u725b\u5ba2\u7f51\u4f20\u9001\u95e8\uff1a[\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e](https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\u3002 > \u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002 > > \u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002 > > \u6837\u4f8b\uff1a > > \u8f93\u5165\u6570\u7ec4\uff1a > > ``` > [ > [1,2,8,9]\uff0c > [2,4,9,12]\uff0c > [4,7,10,13]\uff0c > [6,8,11,15] > ] > ``` > > \u5982\u679c\u8f93\u5165\u67e5\u627e\u6570\u503c\u4e3a 7\uff0c\u5219\u8fd4\u56de true\uff0c > > \u5982\u679c\u8f93\u5165\u67e5\u627e\u6570\u503c\u4e3a 5 \uff0c\u5219\u8fd4\u56de false\u3002 ### \u601d\u8def\u4e00\uff1a\u51cf\u800c\u6cbb\u4e4b \u5206\u6790\uff1a\u6709\u70b9\u50cf LeetCode \u4e0a\u5c9b\u5c7f\u7684\u95ee\u9898\uff0c\u7279\u522b\u4e4b\u5904\uff1a\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u627e\uff0c\u6216\u8005\u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u627e\uff0c**\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u9009\u5de6\u4e0a\u6216\u8005\u53f3\u4e0b\u5f00\u59cb\uff0c\u56e0\u4e3a\u4e0d\u80fd\u7f29\u5c0f\u67e5\u627e\u8303\u56f4**\u3002\u9996\u5148\u9009\u53d6\u6570\u7ec4\u4e2d\u53f3\u4e0a\u89d2\u7684\u6570\u5b57\u3002\u5982\u679c\u8be5\u6570\u5b57\u7b49\u4e8e\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u67e5\u627e\u8fc7\u7a0b\u7ed3\u675f\uff1b\u5982\u679c\u8be5\u6570\u5b57\u5927\u4e8e\u8981\u67e5\u627e\u7684\u6570\u7ec4\uff0c\u5254\u9664\u8fd9\u4e2a\u6570\u5b57\u6240\u5728\u7684\u5217\uff1b\u5982\u679c\u8be5\u6570\u5b57\u5c0f\u4e8e\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u5254\u9664\u8fd9\u4e2a\u6570\u5b57\u6240\u5728\u7684\u884c\u3002\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u8981\u67e5\u627e\u7684\u6570\u5b57\u4e0d\u5728\u6570\u7ec4\u7684\u53f3\u4e0a\u89d2\uff0c\u5219\u6bcf\u4e00\u6b21\u90fd\u5728\u6570\u7ec4\u7684\u67e5\u627e\u8303\u56f4\u4e2d\u5254\u9664\u4e00\u884c\u6216\u8005\u4e00\u5217\uff0c\u8fd9\u6837\u6bcf\u4e00\u6b65\u90fd\u53ef\u4ee5\u7f29\u5c0f\u67e5\u627e\u7684\u8303\u56f4\uff0c\u76f4\u5230\u627e\u5230\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u6216\u8005\u67e5\u627e\u8303\u56f4\u4e3a\u7a7a\u3002 ![\u300a\u5251\u6307 Offer \uff08\u7b2c 2 \u7248\uff09\u300b\u7b2c 4 \u9898\uff1a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e-1](https://liweiwei1419.github.io/images/sword-for-offer/4-1.jpg) Python \u4ee3\u7801\uff1a\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u627e\uff0c\u4e00\u4e2a\u4e00\u4e2a\u5730\u627e\u3002**\u5c0f\u4e86\u5411\u4e0b\u9762\u8d70\uff0c\u5927\u4e86\u5411\u5de6\u8fb9\u8d70** ```python class Solution(object): def searchArray(self, array, target): rows = len(array) if rows == 0: return False cols = len(array[0]) if rows > 0 and cols > 0: row = 0 col = cols - 1 # \u6ce8\u610f\uff1a\u5728\u6a2a\u7eb5\u5750\u6807\u90fd\u6709\u610f\u4e49\u7684\u65f6\u5019\uff0c\u624d\u53ef\u4ee5\u641c\u7d22\uff0c\u56e0\u6b64\u7528 and while row < rows and col >= 0: if target == array[row][col]: return True elif target < array[row][col]: # [4, 5, 6, 12, 13] \u627e 7 col -= 1 else: # [7] # [8] # [12] \u627e 9 row += 1 # \u5168\u90e8\u8d70\u5b8c\u90fd\u627e\u4e0d\u5230\uff0c\u5c31\u8bf4\u660e\u6ca1\u6709 return False \u8bf4\u660e\uff1a\u5176\u5b9e\u4e0d\u7ba1\u662f\u6bcf\u884c\u8fd8\u662f\u6bcf\u5217\uff0c\u90fd\u662f\u6709\u5e8f\u6570\u7ec4\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u6cd5\u3002\u6211\u5199\u4e86\u4e2a\u4e8c\u5206\u6cd5\uff0c\u53ea\u662f\u4f5c\u4e3a\u7ec3\u4e60\u3002\u4f46\u662f\u4e8c\u5206\u6cd5\u4e0d\u80fd\u4fdd\u8bc1\u4e00\u6b21\u5199\u5bf9\uff0c\u6240\u4ee5\u4e0d\u5efa\u8bae\u5728\u9762\u8bd5\u7684\u65f6\u5019\u5199\u3002 \u6b63\u786e\u7684\u641c\u7d22\u8d77\u70b9\u662f\u4ece\u5de6\u4e0b\u89d2\u6216\u8005\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22\uff0c\u8fd9\u662f\u56e0\u4e3a\uff1a \u4ece\u4e0b\u5230\u4e0a\uff0c\u6570\u5b57\u8d8a\u6765\u8d8a\u5c0f\uff1b \u4ece\u5de6\u5230\u53f3\uff0c\u6570\u5b57\u8d8a\u6765\u8d8a\u5927\u3002 \u6ce8\u610f\u6307\u9488\u6ca1\u6709\u5fc5\u8981\u56de\u9000\uff0c\u8fd9\u4e00\u70b9\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u6ce8\u91ca\u4e2d\u505a\u4e86\u5f3a\u8c03\u3002 Java \u4ee3\u7801\uff1a public class Solution { public boolean Find(int target, int[][] array) { int row = array.length; if (row == 0) { return false; } int col = array[0].length; // \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u641c\u7d22\uff0c\u5148\u4ece\u5de6\u5230\u53f3\uff0c\u518d\u4ece\u4e0b\u5230\u4e0a int i = row - 1; int j = 0; while (i >= 0) { while (j < col && array[i][j] < target) { j++; } if (j < col && array[i][j] == target) { return true; } i--; } return false; } public static void main(String[] args) { int[][] matrix = new int[][]{ {1, 2, 8, 9}, {2, 4, 9, 12}, {4, 7, 10, 13}, {6, 8, 11, 15} }; Solution solution = new Solution(); boolean find = solution.Find(16, matrix); System.out.println(find); } } Python \u4ee3\u7801\uff1a\uff08\u4e86\u89e3\u5373\u53ef\uff09 # 4\u3001\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e class Solution(object): # \u4e8c\u5206\u6cd5\u67e5\u627e\u89c4\u5f8b # 1\u3001\u4ece\u53f3\u5230\u5de6\uff0c\u627e\u7b2c 1 \u4e2a\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570 # 2\u3001\u4ece\u4e0a\u5230\u4e0b\uff0c\u627e\u7b2c 1 \u4e2a\u5927\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570 def searchArray(self, array, target): \"\"\" :type array: List[List[int]] :type target: int :rtype: bool \"\"\" rows = len(array) if rows == 0: return False cols = len(array[0]) col = cols - 1 row = 0 while row < rows and col >= 0: # print('row', row, 'col', col, array[row][0]) # 1\u3001\u4ece\u53f3\u5230\u5de6\uff0c\u627e\u7b2c 1 \u4e2a\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570 if col == 0 and array[row][0] > target: return False l = 0 r = col while l < r: mid = l + (r - l + 1) // 2 if array[row][mid] <= target: l = mid else: assert array[row][mid] > target r = mid - 1 col = l # 2\u3001\u4ece\u4e0a\u5230\u4e0b\uff0c\u627e\u7b2c 1 \u4e2a\u5927\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570 if row == rows - 1 and array[rows - 1][col] < target: return False l = row r = rows - 1 while l < r: mid = l + (r - l) // 2 if array[mid][col] >= target: r = mid else: assert array[mid][col] < target l = mid + 1 row = l if array[row][col] == target: return True return False if __name__ == '__main__': array = [[1, 2, 8, 9], [2, 4, 9, 12], [4, 7, 10, 13], [6, 8, 11, 15]] target = 16 solution = Solution() result = solution.searchArray(array, target) print(result) LeetCode \u7b2c 74 \u9898\uff1a\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 \u4f20\u9001\u95e8\uff1a \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 \u3002 \u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u5224\u65ad m x n \u77e9\u9635\u4e2d\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u76ee\u6807\u503c\u3002\u8be5\u77e9\u9635\u5177\u6709\u5982\u4e0b\u7279\u6027\uff1a \u6bcf\u884c\u4e2d\u7684\u6574\u6570\u4ece\u5de6\u5230\u53f3\u6309\u5347\u5e8f\u6392\u5217\u3002 \u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u5927\u4e8e\u524d\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6574\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: matrix = [ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50] ] target = 3 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: matrix = [ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50] ] target = 13 \u8f93\u51fa: false Python \u4ee3\u78011\uff1a\u201c\u6807\u51c6\u7684\u201d\u4e8c\u5206\u6cd5 class Solution(object): def searchMatrix(self, matrix, target): \"\"\" :type matrix: List[List[int]] :type target: int :rtype: bool \"\"\" m = len(matrix) if m == 0: return False n = len(matrix[0]) if n == 0: return False left = 0 # \u8fd9\u91cc\u4e00\u5b9a\u8981\u8bb0\u5f97\u51cf 1 right = m * n - 1 while left <= right: mid = left + (right - left) // 2 # \u5b9a\u4f4d\u5230\u77e9\u9635\u4e2d num = matrix[mid // n][mid % n] if num == target: return True elif num < target: left = mid + 1 else: right = mid - 1 return False Python \u4ee3\u78012\uff1a\u201c\u795e\u5947\u7684\u201d\u4e8c\u5206\u6cd5\u6a21\u677f class Solution(object): def searchMatrix(self, matrix, target): \"\"\" :type matrix: List[List[int]] :type target: int :rtype: bool \"\"\" m = len(matrix) if m == 0: return False n = len(matrix[0]) # [[]] \u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u8981\u7279\u5224 if n == 0: return False l = 0 r = m * n - 1 while l < r: mid = l + (r - l) // 2 if matrix[mid // n][mid % n] < target: l = mid + 1 else: r = mid # \u8fd9\u4e2a\u6a21\u677f\u5728\u9000\u51fa\u5faa\u73af\u7684\u65f6\u5019 l == r \u6210\u7acb\uff0c\u4f46\u662f\u6709\u53ef\u80fd\u5b58\u5728\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u65f6\u5019 # \u6240\u4ee5\u8981\u5355\u72ec\u5224\u65ad return matrix[l // n][l % n] == target MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 4 \u9898] \u201c\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e\u201d\u505a\u9898\u8bb0\u5f55"},{"location":"04-/#offer-2-4","text":"","title":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 4 \u9898] \u201c\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e\u201d\u505a\u9898\u8bb0\u5f55"},{"location":"04-/#_1","text":"\u6709\u70b9\u50cf LeetCode \u4e0a\u5c9b\u5c7f\u7684\u95ee\u9898\uff0c\u7279\u522b\u4e4b\u5904\uff1a\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u627e\uff0c\u6216\u8005\u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u627e\uff0c \u4e3a\u4ec0\u4e48\u4e0d\u80fd\u9009\u5de6\u4e0a\u6216\u8005\u53f3\u4e0b\u5f00\u59cb\uff0c\u56e0\u4e3a\u4e0d\u80fd\u7f29\u5c0f\u67e5\u627e\u8303\u56f4 \u3002\u9996\u5148\u9009\u53d6\u6570\u7ec4\u4e2d\u53f3\u4e0a\u89d2\u7684\u6570\u5b57\u3002\u5982\u679c\u8be5\u6570\u5b57\u7b49\u4e8e\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u67e5\u627e\u8fc7\u7a0b\u7ed3\u675f\uff1b\u5982\u679c\u8be5\u6570\u5b57\u5927\u4e8e\u8981\u67e5\u627e\u7684\u6570\u7ec4\uff0c\u5254\u9664\u8fd9\u4e2a\u6570\u5b57\u6240\u5728\u7684\u5217\uff1b\u5982\u679c\u8be5\u6570\u5b57\u5c0f\u4e8e\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u5254\u9664\u8fd9\u4e2a\u6570\u5b57\u6240\u5728\u7684\u884c\u3002\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u8981\u67e5\u627e\u7684\u6570\u5b57\u4e0d\u5728\u6570\u7ec4\u7684\u53f3\u4e0a\u89d2\uff0c\u5219\u6bcf\u4e00\u6b21\u90fd\u5728\u6570\u7ec4\u7684\u67e5\u627e\u8303\u56f4\u4e2d\u5254\u9664\u4e00\u884c\u6216\u8005\u4e00\u5217\uff0c\u8fd9\u6837\u6bcf\u4e00\u6b65\u90fd\u53ef\u4ee5\u7f29\u5c0f\u67e5\u627e\u7684\u8303\u56f4\uff0c\u76f4\u5230\u627e\u5230\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u6216\u8005\u67e5\u627e\u8303\u56f4\u4e3a\u7a7a\u3002 \u53c2\u8003\u4ee3\u7801 1 \uff1a\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u627e\uff0c\u4e00\u4e2a\u4e00\u4e2a\u5730\u627e\u3002 \u5c0f\u4e86\u5411\u4e0b\u9762\u8d70\uff0c\u5927\u4e86\u5411\u5de6\u8fb9\u8d70 ```Python [] class Solution(object): def searchArray(self, array, target): rows = len(array) if rows == 0: return False cols = len(array[0]) if rows > 0 and cols > 0: row = 0 col = cols - 1 # \u6ce8\u610f\uff1a\u5728\u6a2a\u7eb5\u5750\u6807\u90fd\u6709\u610f\u4e49\u7684\u65f6\u5019\uff0c\u624d\u53ef\u4ee5\u641c\u7d22\uff0c\u56e0\u6b64\u7528 and while row < rows and col >= 0: if target == array[row][col]: return True elif target < array[row][col]: # [4, 5, 6, 12, 13] \u627e 7 col -= 1 else: # [7] # [8] # [12] \u627e 9 row += 1 # \u5168\u90e8\u8d70\u5b8c\u90fd\u627e\u4e0d\u5230\uff0c\u5c31\u8bf4\u660e\u6ca1\u6709 return False \u8bf4\u660e\uff1a\u5176\u5b9e\u4e0d\u7ba1\u662f\u6bcf\u884c\u8fd8\u662f\u6bcf\u5217\uff0c\u90fd\u662f\u6709\u5e8f\u6570\u7ec4\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u6cd5\u3002\u6211\u5199\u4e86\u4e2a\u4e8c\u5206\u6cd5\uff0c\u53ea\u662f\u4f5c\u4e3a\u7ec3\u4e60\u3002\u4f46\u662f\u4e8c\u5206\u6cd5\u4e0d\u80fd\u4fdd\u8bc1\u4e00\u6b21\u5199\u5bf9\uff0c\u6240\u4ee5\u4e0d\u5efa\u8bae\u5728\u9762\u8bd5\u7684\u65f6\u5019\u5199\u3002 + \u6b63\u786e\u7684\u641c\u7d22\u8d77\u70b9\u662f\u4ece\u5de6\u4e0b\u89d2\u6216\u8005\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22\uff0c\u8fd9\u662f\u56e0\u4e3a\uff1a \u4ece\u4e0b\u5230\u4e0a\uff0c\u6570\u5b57\u8d8a\u6765\u8d8a\u5c0f\uff1b \u4ece\u5de6\u5230\u53f3\uff0c\u6570\u5b57\u8d8a\u6765\u8d8a\u5927\u3002 + \u6ce8\u610f\u6307\u9488\u6ca1\u6709\u5fc5\u8981\u56de\u9000\uff0c\u8fd9\u4e00\u70b9\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u6ce8\u91ca\u4e2d\u505a\u4e86\u5f3a\u8c03\u3002 \u53c2\u8003\u4ee3\u7801 2\uff1a ```Java [] public class Solution { public boolean Find(int target, int[][] array) { int row = array.length; if (row == 0) { return false; } int col = array[0].length; // \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u641c\u7d22\uff0c\u5148\u4ece\u5de6\u5230\u53f3\uff0c\u518d\u4ece\u4e0b\u5230\u4e0a int i = row - 1; int j = 0; while (i >= 0) { while (j < col && array[i][j] < target) { j++; } if (j < col && array[i][j] == target) { return true; } i--; } return false; } } ```Python [] class Solution(object): # \u4e8c\u5206\u6cd5\u67e5\u627e\u89c4\u5f8b # 1\u3001\u4ece\u53f3\u5230\u5de6\uff0c\u627e\u7b2c 1 \u4e2a\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570 # 2\u3001\u4ece\u4e0a\u5230\u4e0b\uff0c\u627e\u7b2c 1 \u4e2a\u5927\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570 def searchArray(self, array, target): \"\"\" :type array: List[List[int]] :type target: int :rtype: bool \"\"\" rows = len(array) if rows == 0: return False cols = len(array[0]) col = cols - 1 row = 0 while row < rows and col >= 0: # print('row', row, 'col', col, array[row][0]) # 1\u3001\u4ece\u53f3\u5230\u5de6\uff0c\u627e\u7b2c 1 \u4e2a\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570 if col == 0 and array[row][0] > target: return False l = 0 r = col while l < r: mid = l + (r - l + 1) // 2 if array[row][mid] <= target: l = mid else: assert array[row][mid] > target r = mid - 1 col = l # 2\u3001\u4ece\u4e0a\u5230\u4e0b\uff0c\u627e\u7b2c 1 \u4e2a\u5927\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570 if row == rows - 1 and array[rows - 1][col] < target: return False l = row r = rows - 1 while l < r: mid = l + (r - l) // 2 if array[mid][col] >= target: r = mid else: assert array[mid][col] < target l = mid + 1 row = l if array[row][col] == target: return True return False --- ### \u300c\u529b\u6263\u300d\u7b2c 74 \u9898\uff1a\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 \u4f20\u9001\u95e8\uff1a[\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635](https://leetcode-cn.com/problems/search-a-2d-matrix)\u3002 \u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u5224\u65ad *m* x *n* \u77e9\u9635\u4e2d\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u76ee\u6807\u503c\u3002\u8be5\u77e9\u9635\u5177\u6709\u5982\u4e0b\u7279\u6027\uff1a - \u6bcf\u884c\u4e2d\u7684\u6574\u6570\u4ece\u5de6\u5230\u53f3\u6309\u5347\u5e8f\u6392\u5217\u3002 - \u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u5927\u4e8e\u524d\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6574\u6570\u3002 **\u793a\u4f8b 1:** \u8f93\u5165: matrix = [ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50] ] target = 3 \u8f93\u51fa: true **\u793a\u4f8b 2:** \u8f93\u5165: matrix = [ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50] ] target = 13 \u8f93\u51fa: false \u53c2\u8003\u4ee3\u7801\uff1a\u4e8c\u5206\u6cd5 ```Python [] class Solution(object): def searchMatrix(self, matrix, target): \"\"\" :type matrix: List[List[int]] :type target: int :rtype: bool \"\"\" m = len(matrix) if m == 0: return False n = len(matrix[0]) if n == 0: return False left = 0 # \u8fd9\u91cc\u4e00\u5b9a\u8981\u8bb0\u5f97\u51cf 1 right = m * n - 1 while left <= right: mid = left + (right - left) // 2 # \u5b9a\u4f4d\u5230\u77e9\u9635\u4e2d num = matrix[mid // n][mid % n] if num == target: return True elif num < target: left = mid + 1 else: right = mid - 1 return False ```Python [] class Solution(object): def searchMatrix(self, matrix, target): \"\"\" :type matrix: List[List[int]] :type target: int :rtype: bool \"\"\" m = len(matrix) if m == 0: return False n = len(matrix[0]) # [[]] \u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u8981\u7279\u5224 if n == 0: return False l = 0 r = m * n - 1 while l < r: mid = l + (r - l) // 2 if matrix[mid // n][mid % n] < target: l = mid + 1 else: r = mid # \u8fd9\u4e2a\u6a21\u677f\u5728\u9000\u51fa\u5faa\u73af\u7684\u65f6\u5019 l == r \u6210\u7acb\uff0c\u4f46\u662f\u6709\u53ef\u80fd\u5b58\u5728\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u65f6\u5019 # \u6240\u4ee5\u8981\u5355\u72ec\u5224\u65ad return matrix[l // n][l % n] == target ## \u7b2c 4 \u9898\uff1a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e \u300c\u529b\u6263\u300d\u4f20\u9001\u95e8\uff1a[\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e](https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof)\u3002 \u5728\u300c\u529b\u6263\u300d\u4e0a\u7684\u9898\u89e3\uff1a[\u51cf\u800c\u6cbb\u4e4b\u3001\u4e8c\u5206\u67e5\u627e](https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/solution/jian-er-zhi-zhi-er-fen-cha-zhao-by-liweiwei1419-3/)\u3002 \u540c LeetCode \u7b2c 240 \u9898\uff0cLeetCode \u4f20\u9001\u95e8\uff1a[\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II](https://leetcode-cn.com/problems/search-a-2d-matrix-ii)\uff0cAcWing\uff1a[\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e](https://www.acwing.com/problem/content/16/)\uff0c\u725b\u5ba2\u7f51\u4f20\u9001\u95e8\uff1a[\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e](https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\u3002 > \u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002 > > \u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002 > > \u6837\u4f8b\uff1a > > \u8f93\u5165\u6570\u7ec4\uff1a > > ``` > [ > [1,2,8,9]\uff0c > [2,4,9,12]\uff0c > [4,7,10,13]\uff0c > [6,8,11,15] > ] > ``` > > \u5982\u679c\u8f93\u5165\u67e5\u627e\u6570\u503c\u4e3a 7\uff0c\u5219\u8fd4\u56de true\uff0c > > \u5982\u679c\u8f93\u5165\u67e5\u627e\u6570\u503c\u4e3a 5 \uff0c\u5219\u8fd4\u56de false\u3002 ### \u601d\u8def\u4e00\uff1a\u51cf\u800c\u6cbb\u4e4b \u5206\u6790\uff1a\u6709\u70b9\u50cf LeetCode \u4e0a\u5c9b\u5c7f\u7684\u95ee\u9898\uff0c\u7279\u522b\u4e4b\u5904\uff1a\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u627e\uff0c\u6216\u8005\u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u627e\uff0c**\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u9009\u5de6\u4e0a\u6216\u8005\u53f3\u4e0b\u5f00\u59cb\uff0c\u56e0\u4e3a\u4e0d\u80fd\u7f29\u5c0f\u67e5\u627e\u8303\u56f4**\u3002\u9996\u5148\u9009\u53d6\u6570\u7ec4\u4e2d\u53f3\u4e0a\u89d2\u7684\u6570\u5b57\u3002\u5982\u679c\u8be5\u6570\u5b57\u7b49\u4e8e\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u67e5\u627e\u8fc7\u7a0b\u7ed3\u675f\uff1b\u5982\u679c\u8be5\u6570\u5b57\u5927\u4e8e\u8981\u67e5\u627e\u7684\u6570\u7ec4\uff0c\u5254\u9664\u8fd9\u4e2a\u6570\u5b57\u6240\u5728\u7684\u5217\uff1b\u5982\u679c\u8be5\u6570\u5b57\u5c0f\u4e8e\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u5254\u9664\u8fd9\u4e2a\u6570\u5b57\u6240\u5728\u7684\u884c\u3002\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u8981\u67e5\u627e\u7684\u6570\u5b57\u4e0d\u5728\u6570\u7ec4\u7684\u53f3\u4e0a\u89d2\uff0c\u5219\u6bcf\u4e00\u6b21\u90fd\u5728\u6570\u7ec4\u7684\u67e5\u627e\u8303\u56f4\u4e2d\u5254\u9664\u4e00\u884c\u6216\u8005\u4e00\u5217\uff0c\u8fd9\u6837\u6bcf\u4e00\u6b65\u90fd\u53ef\u4ee5\u7f29\u5c0f\u67e5\u627e\u7684\u8303\u56f4\uff0c\u76f4\u5230\u627e\u5230\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u6216\u8005\u67e5\u627e\u8303\u56f4\u4e3a\u7a7a\u3002 ![\u300a\u5251\u6307 Offer \uff08\u7b2c 2 \u7248\uff09\u300b\u7b2c 4 \u9898\uff1a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e-1](https://liweiwei1419.github.io/images/sword-for-offer/4-1.jpg) Python \u4ee3\u7801\uff1a\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u627e\uff0c\u4e00\u4e2a\u4e00\u4e2a\u5730\u627e\u3002**\u5c0f\u4e86\u5411\u4e0b\u9762\u8d70\uff0c\u5927\u4e86\u5411\u5de6\u8fb9\u8d70** ```python class Solution(object): def searchArray(self, array, target): rows = len(array) if rows == 0: return False cols = len(array[0]) if rows > 0 and cols > 0: row = 0 col = cols - 1 # \u6ce8\u610f\uff1a\u5728\u6a2a\u7eb5\u5750\u6807\u90fd\u6709\u610f\u4e49\u7684\u65f6\u5019\uff0c\u624d\u53ef\u4ee5\u641c\u7d22\uff0c\u56e0\u6b64\u7528 and while row < rows and col >= 0: if target == array[row][col]: return True elif target < array[row][col]: # [4, 5, 6, 12, 13] \u627e 7 col -= 1 else: # [7] # [8] # [12] \u627e 9 row += 1 # \u5168\u90e8\u8d70\u5b8c\u90fd\u627e\u4e0d\u5230\uff0c\u5c31\u8bf4\u660e\u6ca1\u6709 return False \u8bf4\u660e\uff1a\u5176\u5b9e\u4e0d\u7ba1\u662f\u6bcf\u884c\u8fd8\u662f\u6bcf\u5217\uff0c\u90fd\u662f\u6709\u5e8f\u6570\u7ec4\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u6cd5\u3002\u6211\u5199\u4e86\u4e2a\u4e8c\u5206\u6cd5\uff0c\u53ea\u662f\u4f5c\u4e3a\u7ec3\u4e60\u3002\u4f46\u662f\u4e8c\u5206\u6cd5\u4e0d\u80fd\u4fdd\u8bc1\u4e00\u6b21\u5199\u5bf9\uff0c\u6240\u4ee5\u4e0d\u5efa\u8bae\u5728\u9762\u8bd5\u7684\u65f6\u5019\u5199\u3002 \u6b63\u786e\u7684\u641c\u7d22\u8d77\u70b9\u662f\u4ece\u5de6\u4e0b\u89d2\u6216\u8005\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22\uff0c\u8fd9\u662f\u56e0\u4e3a\uff1a \u4ece\u4e0b\u5230\u4e0a\uff0c\u6570\u5b57\u8d8a\u6765\u8d8a\u5c0f\uff1b \u4ece\u5de6\u5230\u53f3\uff0c\u6570\u5b57\u8d8a\u6765\u8d8a\u5927\u3002 \u6ce8\u610f\u6307\u9488\u6ca1\u6709\u5fc5\u8981\u56de\u9000\uff0c\u8fd9\u4e00\u70b9\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u6ce8\u91ca\u4e2d\u505a\u4e86\u5f3a\u8c03\u3002 Java \u4ee3\u7801\uff1a public class Solution { public boolean Find(int target, int[][] array) { int row = array.length; if (row == 0) { return false; } int col = array[0].length; // \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u641c\u7d22\uff0c\u5148\u4ece\u5de6\u5230\u53f3\uff0c\u518d\u4ece\u4e0b\u5230\u4e0a int i = row - 1; int j = 0; while (i >= 0) { while (j < col && array[i][j] < target) { j++; } if (j < col && array[i][j] == target) { return true; } i--; } return false; } public static void main(String[] args) { int[][] matrix = new int[][]{ {1, 2, 8, 9}, {2, 4, 9, 12}, {4, 7, 10, 13}, {6, 8, 11, 15} }; Solution solution = new Solution(); boolean find = solution.Find(16, matrix); System.out.println(find); } } Python \u4ee3\u7801\uff1a\uff08\u4e86\u89e3\u5373\u53ef\uff09 # 4\u3001\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e class Solution(object): # \u4e8c\u5206\u6cd5\u67e5\u627e\u89c4\u5f8b # 1\u3001\u4ece\u53f3\u5230\u5de6\uff0c\u627e\u7b2c 1 \u4e2a\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570 # 2\u3001\u4ece\u4e0a\u5230\u4e0b\uff0c\u627e\u7b2c 1 \u4e2a\u5927\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570 def searchArray(self, array, target): \"\"\" :type array: List[List[int]] :type target: int :rtype: bool \"\"\" rows = len(array) if rows == 0: return False cols = len(array[0]) col = cols - 1 row = 0 while row < rows and col >= 0: # print('row', row, 'col', col, array[row][0]) # 1\u3001\u4ece\u53f3\u5230\u5de6\uff0c\u627e\u7b2c 1 \u4e2a\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570 if col == 0 and array[row][0] > target: return False l = 0 r = col while l < r: mid = l + (r - l + 1) // 2 if array[row][mid] <= target: l = mid else: assert array[row][mid] > target r = mid - 1 col = l # 2\u3001\u4ece\u4e0a\u5230\u4e0b\uff0c\u627e\u7b2c 1 \u4e2a\u5927\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570 if row == rows - 1 and array[rows - 1][col] < target: return False l = row r = rows - 1 while l < r: mid = l + (r - l) // 2 if array[mid][col] >= target: r = mid else: assert array[mid][col] < target l = mid + 1 row = l if array[row][col] == target: return True return False if __name__ == '__main__': array = [[1, 2, 8, 9], [2, 4, 9, 12], [4, 7, 10, 13], [6, 8, 11, 15]] target = 16 solution = Solution() result = solution.searchArray(array, target) print(result)","title":"\u601d\u8def\u5206\u6790"},{"location":"04-/#leetcode-74","text":"\u4f20\u9001\u95e8\uff1a \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 \u3002 \u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u5224\u65ad m x n \u77e9\u9635\u4e2d\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u76ee\u6807\u503c\u3002\u8be5\u77e9\u9635\u5177\u6709\u5982\u4e0b\u7279\u6027\uff1a \u6bcf\u884c\u4e2d\u7684\u6574\u6570\u4ece\u5de6\u5230\u53f3\u6309\u5347\u5e8f\u6392\u5217\u3002 \u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u5927\u4e8e\u524d\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6574\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: matrix = [ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50] ] target = 3 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: matrix = [ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50] ] target = 13 \u8f93\u51fa: false Python \u4ee3\u78011\uff1a\u201c\u6807\u51c6\u7684\u201d\u4e8c\u5206\u6cd5 class Solution(object): def searchMatrix(self, matrix, target): \"\"\" :type matrix: List[List[int]] :type target: int :rtype: bool \"\"\" m = len(matrix) if m == 0: return False n = len(matrix[0]) if n == 0: return False left = 0 # \u8fd9\u91cc\u4e00\u5b9a\u8981\u8bb0\u5f97\u51cf 1 right = m * n - 1 while left <= right: mid = left + (right - left) // 2 # \u5b9a\u4f4d\u5230\u77e9\u9635\u4e2d num = matrix[mid // n][mid % n] if num == target: return True elif num < target: left = mid + 1 else: right = mid - 1 return False Python \u4ee3\u78012\uff1a\u201c\u795e\u5947\u7684\u201d\u4e8c\u5206\u6cd5\u6a21\u677f class Solution(object): def searchMatrix(self, matrix, target): \"\"\" :type matrix: List[List[int]] :type target: int :rtype: bool \"\"\" m = len(matrix) if m == 0: return False n = len(matrix[0]) # [[]] \u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u8981\u7279\u5224 if n == 0: return False l = 0 r = m * n - 1 while l < r: mid = l + (r - l) // 2 if matrix[mid // n][mid % n] < target: l = mid + 1 else: r = mid # \u8fd9\u4e2a\u6a21\u677f\u5728\u9000\u51fa\u5faa\u73af\u7684\u65f6\u5019 l == r \u6210\u7acb\uff0c\u4f46\u662f\u6709\u53ef\u80fd\u5b58\u5728\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u65f6\u5019 # \u6240\u4ee5\u8981\u5355\u72ec\u5224\u65ad return matrix[l // n][l % n] == target MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"LeetCode \u7b2c 74 \u9898\uff1a\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635"},{"location":"04/","text":"\u5251\u6307 Offer 04. \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e \u529b\u6263\uff1a \u5251\u6307 Offer 04. \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e \uff1b AcWing\uff1a \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e \uff1b \u725b\u5ba2\u7f51\uff1a \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e \u3002 \u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u4e2a n * m \u7684\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u8bf7\u5b8c\u6210\u4e00\u4e2a\u9ad8\u6548\u7684\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002 \u793a\u4f8b: \u73b0\u6709\u77e9\u9635 matrix \u5982\u4e0b\uff1a [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] \u7ed9\u5b9a target = 5 \uff0c\u8fd4\u56de true \u3002 \u7ed9\u5b9a target = 20 \uff0c\u8fd4\u56de false \u3002 \u9650\u5236\uff1a 0 <= n <= 1000 0 <= m <= 1000 \u6ce8\u610f\uff1a \u672c\u9898\u4e0e\u4e3b\u7ad9 240 \u9898\u76f8\u540c\uff1ahttps://leetcode-cn.com/problems/search-a-2d-matrix-ii/ \u53c2\u8003\u4ee3\u7801 \uff1a public class Solution { public boolean findNumberIn2DArray(int[][] matrix, int target) { int rows = matrix.length; if (rows == 0) { return false; } int cols = matrix[0].length; if (cols == 0) { return false; } // \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u67e5\u627e int x = rows - 1; int y = 0; while (x >= 0) { while (y < cols && matrix[x][y] < target) { y++; } if (y < cols && matrix[x][y] == target) { return true; } x--; } return false; } }","title":"\u5251\u6307 Offer 04. \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e"},{"location":"04/#offer-04","text":"\u529b\u6263\uff1a \u5251\u6307 Offer 04. \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e \uff1b AcWing\uff1a \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e \uff1b \u725b\u5ba2\u7f51\uff1a \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e \u3002","title":"\u5251\u6307 Offer 04. \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e"},{"location":"04/#_1","text":"\u5728\u4e00\u4e2a n * m \u7684\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u8bf7\u5b8c\u6210\u4e00\u4e2a\u9ad8\u6548\u7684\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002 \u793a\u4f8b: \u73b0\u6709\u77e9\u9635 matrix \u5982\u4e0b\uff1a [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] \u7ed9\u5b9a target = 5 \uff0c\u8fd4\u56de true \u3002 \u7ed9\u5b9a target = 20 \uff0c\u8fd4\u56de false \u3002 \u9650\u5236\uff1a 0 <= n <= 1000 0 <= m <= 1000 \u6ce8\u610f\uff1a \u672c\u9898\u4e0e\u4e3b\u7ad9 240 \u9898\u76f8\u540c\uff1ahttps://leetcode-cn.com/problems/search-a-2d-matrix-ii/ \u53c2\u8003\u4ee3\u7801 \uff1a public class Solution { public boolean findNumberIn2DArray(int[][] matrix, int target) { int rows = matrix.length; if (rows == 0) { return false; } int cols = matrix[0].length; if (cols == 0) { return false; } // \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u67e5\u627e int x = rows - 1; int y = 0; while (x >= 0) { while (y < cols && matrix[x][y] < target) { y++; } if (y < cols && matrix[x][y] == target) { return true; } x--; } return false; } }","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"05-/","text":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 5 \u9898] \u201c\u66ff\u6362\u7a7a\u683c\u201d\u505a\u9898\u8bb0\u5f55 \u601d\u8def\u5206\u6790 \uff1a\u8fd9\u9053\u95ee\u9898\u5176\u5b9e\u5e94\u8be5\u5728 C++ \u8bed\u8a00\u4e2d\uff0c\u8003\u70b9\u4f1a\u66f4\u7a81\u51fa\u4e00\u4e9b\u3002\u8fd9\u9053\u9898\u4f7f\u7528 Java \u8bed\u8a00\u7684\u5199\u6cd5\u66f4\u7b80\u5355\u3002\u5176\u5b9e\u8fd9\u9053\u9898\u8003\u67e5\u70b9\u4e0e LeetCode \u7b2c 88 \u9898\uff0888. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\uff09\u4e00\u6837\uff0c\u4ece\u540e\u5411\u524d\u601d\u8003\uff0c\u6253\u7834\u601d\u7ef4\u5b9a\u52bf\u3002 \u7b2c 5 \u9898\uff1a\u66ff\u6362\u7a7a\u683c \u4f20\u9001\u95e8\uff1a \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\u66ff\u6362\u6210\u201c%20\u201d\u3002\u4f8b\u5982\uff0c\u5f53\u5b57\u7b26\u4e32\u4e3aWe Are Happy.\u5219\u7ecf\u8fc7\u66ff\u6362\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u4e3aWe%20Are%20Happy\u3002 \u5206\u6790\uff1a\u8fd9\u9053\u95ee\u9898\u5176\u5b9e\u5e94\u8be5\u5728 C++ \u8bed\u8a00\u4e2d\uff0c\u8003\u70b9\u4f1a\u66f4\u7a81\u51fa\u4e00\u4e9b\u3002\u8fd9\u9053\u9898\u4f7f\u7528 Java \u8bed\u8a00\u7684\u5199\u6cd5\u66f4\u7b80\u5355\u3002\u5176\u5b9e\u8fd9\u9053\u9898\u8003\u67e5\u70b9\u4e0e LeetCode \u7b2c 88 \u9898\uff0888. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\uff09\u4e00\u6837\uff0c\u4ece\u540e\u5411\u524d\u601d\u8003\uff0c\u6253\u7834\u601d\u7ef4\u5b9a\u52bf\u3002 Java \u4ee3\u7801\uff1a public class Solution { public String replaceSpace(StringBuffer str) { int len = str.length(); if (len == 0) { return \"\"; } StringBuilder stringBuilder = new StringBuilder(); for (int i = 0; i < len; i++) { char c = str.charAt(i); if (c == ' ') { stringBuilder.append(\"%20\"); } else { stringBuilder.append(c); } } return stringBuilder.toString(); } } Java \u4ee3\u7801\uff1a public class Solution2 { public String replaceSpace(StringBuffer str) { return str.toString().replaceAll(\"\\\\s\", \"%20\"); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 5 \u9898] \u201c\u66ff\u6362\u7a7a\u683c\u201d\u505a\u9898\u8bb0\u5f55"},{"location":"05-/#offer-2-5","text":"\u601d\u8def\u5206\u6790 \uff1a\u8fd9\u9053\u95ee\u9898\u5176\u5b9e\u5e94\u8be5\u5728 C++ \u8bed\u8a00\u4e2d\uff0c\u8003\u70b9\u4f1a\u66f4\u7a81\u51fa\u4e00\u4e9b\u3002\u8fd9\u9053\u9898\u4f7f\u7528 Java \u8bed\u8a00\u7684\u5199\u6cd5\u66f4\u7b80\u5355\u3002\u5176\u5b9e\u8fd9\u9053\u9898\u8003\u67e5\u70b9\u4e0e LeetCode \u7b2c 88 \u9898\uff0888. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\uff09\u4e00\u6837\uff0c\u4ece\u540e\u5411\u524d\u601d\u8003\uff0c\u6253\u7834\u601d\u7ef4\u5b9a\u52bf\u3002","title":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 5 \u9898] \u201c\u66ff\u6362\u7a7a\u683c\u201d\u505a\u9898\u8bb0\u5f55"},{"location":"05-/#5","text":"\u4f20\u9001\u95e8\uff1a \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\u66ff\u6362\u6210\u201c%20\u201d\u3002\u4f8b\u5982\uff0c\u5f53\u5b57\u7b26\u4e32\u4e3aWe Are Happy.\u5219\u7ecf\u8fc7\u66ff\u6362\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u4e3aWe%20Are%20Happy\u3002 \u5206\u6790\uff1a\u8fd9\u9053\u95ee\u9898\u5176\u5b9e\u5e94\u8be5\u5728 C++ \u8bed\u8a00\u4e2d\uff0c\u8003\u70b9\u4f1a\u66f4\u7a81\u51fa\u4e00\u4e9b\u3002\u8fd9\u9053\u9898\u4f7f\u7528 Java \u8bed\u8a00\u7684\u5199\u6cd5\u66f4\u7b80\u5355\u3002\u5176\u5b9e\u8fd9\u9053\u9898\u8003\u67e5\u70b9\u4e0e LeetCode \u7b2c 88 \u9898\uff0888. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\uff09\u4e00\u6837\uff0c\u4ece\u540e\u5411\u524d\u601d\u8003\uff0c\u6253\u7834\u601d\u7ef4\u5b9a\u52bf\u3002 Java \u4ee3\u7801\uff1a public class Solution { public String replaceSpace(StringBuffer str) { int len = str.length(); if (len == 0) { return \"\"; } StringBuilder stringBuilder = new StringBuilder(); for (int i = 0; i < len; i++) { char c = str.charAt(i); if (c == ' ') { stringBuilder.append(\"%20\"); } else { stringBuilder.append(c); } } return stringBuilder.toString(); } } Java \u4ee3\u7801\uff1a public class Solution2 { public String replaceSpace(StringBuffer str) { return str.toString().replaceAll(\"\\\\s\", \"%20\"); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 5 \u9898\uff1a\u66ff\u6362\u7a7a\u683c"},{"location":"05/","text":"\u5251\u6307 Offer 05. \u66ff\u6362\u7a7a\u683c \u529b\u6263\uff1a \u5251\u6307 Offer 05. \u66ff\u6362\u7a7a\u683c \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u628a\u5b57\u7b26\u4e32 s \u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210\"%20\"\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1as = \"We are happy.\" \u8f93\u51fa\uff1a\"We%20are%20happy.\" \u9650\u5236\uff1a 0 <= s \u7684\u957f\u5ea6 <= 10000 \u53c2\u8003\u4ee3\u7801 1 \uff1a public class Solution { public String replaceSpace(String s) { int len = s.length(); if (len == 0) { return \"\"; } StringBuilder stringBuilder = new StringBuilder(); for (int i = 0; i < len; i++) { char c = s.charAt(i); if (c == ' ') { stringBuilder.append(\"%20\"); } else { stringBuilder.append(c); } } return stringBuilder.toString(); } } \u53c2\u8003\u4ee3\u7801 2 \uff1a public class Solution { public String replaceSpace(String s) { return s.replaceAll(\"\\\\s\", \"%20\"); } }","title":"\u5251\u6307 Offer 05. \u66ff\u6362\u7a7a\u683c"},{"location":"05/#offer-05","text":"\u529b\u6263\uff1a \u5251\u6307 Offer 05. \u66ff\u6362\u7a7a\u683c \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002","title":"\u5251\u6307 Offer 05. \u66ff\u6362\u7a7a\u683c"},{"location":"05/#_1","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u628a\u5b57\u7b26\u4e32 s \u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210\"%20\"\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1as = \"We are happy.\" \u8f93\u51fa\uff1a\"We%20are%20happy.\" \u9650\u5236\uff1a 0 <= s \u7684\u957f\u5ea6 <= 10000 \u53c2\u8003\u4ee3\u7801 1 \uff1a public class Solution { public String replaceSpace(String s) { int len = s.length(); if (len == 0) { return \"\"; } StringBuilder stringBuilder = new StringBuilder(); for (int i = 0; i < len; i++) { char c = s.charAt(i); if (c == ' ') { stringBuilder.append(\"%20\"); } else { stringBuilder.append(c); } } return stringBuilder.toString(); } } \u53c2\u8003\u4ee3\u7801 2 \uff1a public class Solution { public String replaceSpace(String s) { return s.replaceAll(\"\\\\s\", \"%20\"); } }","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"06-/","text":"\u65b9\u6cd5\u4e00\uff1a\u6808 \u9996\u5148\u5e94\u8be5\u60f3\u5230\uff0c\u4f7f\u7528\u6808\u4f5c\u4e3a\u8f85\u52a9\u3002 \u53c2\u8003\u4ee3\u7801 1 \uff1aPython \u4e2d\u7684\u5217\u8868\u6709\u53ef\u4ee5\u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\uff0c\u6211\u4eec\u5c31\u6bcf\u6b21\u5728\u7d22\u5f15 $0$ \u5904\u63d2\u5165\u5143\u7d20\u597d\u4e86 ```Python [] Definition for singly-linked list. class ListNode(object): def init (self, x): self.val = x self.next = None class Solution(object): def printListReversingly(self, head): \"\"\" :type head: ListNode :rtype: List[int] \"\"\" p = head stack = [] while p: stack.append(p.val) p = p.next return stack[::-1] ```Python [] # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def printListReversingly(self, head): \"\"\" :type head: ListNode :rtype: List[int] \"\"\" p = head stack = [] while p: stack.insert(0, p.val) p = p.next return stack ```Java [] import java.util.ArrayList; import java.util.Stack; class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } } public class Solution { public ArrayList printListFromTailToHead(ListNode listNode) { ArrayList res = new ArrayList<>(); if (listNode == null) { return res; } Stack stack = new Stack<>(); ListNode curNode = listNode; while (curNode != null) { stack.add(curNode.val); curNode = curNode.next; } while (!stack.isEmpty()) { res.add(stack.pop()); } return res; } } ## \u65b9\u6cd5\u4e8c\uff1a\u9012\u5f52 \u5173\u952e\u5728\u4e8e\u9012\u5f52\u51fd\u6570\u7684\u7f16\u5199\uff0c\u7279\u522b\u6ce8\u610f\uff1a\u5728\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u6dfb\u52a0\u5f53\u524d\u7ed3\u70b9\u7684\u503c\u5230\u7ed3\u679c\u96c6\u4e2d\u3002 **\u53c2\u8003\u4ee3\u7801 2**\uff1a ```Java [] import java.util.ArrayList; public class Solution2 { public ArrayList<Integer> printListFromTailToHead(ListNode listNode) { ArrayList<Integer> res = new ArrayList<>(); if (listNode == null) { return res; } printListFromTailToHead(listNode, res); return res; } private void printListFromTailToHead(ListNode listNode, ArrayList<Integer> res) { if (listNode == null) { return; } // \u5199\u5728\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u662f\u6b63\u5e8f if (listNode.next != null) { printListFromTailToHead(listNode.next, res); } // \u5199\u5728\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u662f\u5012\u5e8f res.add(listNode.val); } } ```Python [] class Solution(object): def printListReversingly(self, head): \"\"\" :type head: ListNode :rtype: List[int] \"\"\" res = [] self.helper(res, head) return res def helper(self, res, listnode): if listnode is None: return # \u5e94\u8be5\u5148\u5224\u65ad\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u5219\u9012\u5f52\u8c03\u7528\uff0c\u5728\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u624d\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d if listnode.next: self.helper(res, listnode.next) # \u8fd9\u4e00\u6b65\u7279\u522b\u5173\u952e\uff1a\u56de\u6eaf\u65f6\u6dfb\u52a0 res.append(listnode.val) \u601d\u8003\u4e0b\u9762\u8fd9\u4e2a\u5199\u6cd5\u4e3a\u4ec0\u4e48\u662f\u9519\u7684\u3002 ![image.png](https://pic.leetcode-cn.com/1604113649-kIGpeB-image.png) \u62ff\u5177\u4f53\u7684\u6d4b\u8bd5\u7528\u4f8b\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u60f3\u660e\u767d\uff0c\u4e0d\u80fd\u4f7f\u7528 if else \u8bed\u53e5\u3002 ![image.png](https://pic.leetcode-cn.com/1604113664-qBSDqn-image.png) # [\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 6 \u9898] \u201c\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868\u201d\u505a\u9898\u8bb0\u5f55 ### \u7b2c 6 \u9898\uff1a\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868 \u4f20\u9001\u95e8\uff1a[AcWing\uff1a\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868](https://www.acwing.com/problem/content/18/)\uff0c[\u725b\u5ba2\u7f51 online judge \u5730\u5740](https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035?tpId=13&tqId=11156&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\u3002 > \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u6309\u7167 **\u4ece\u5c3e\u5230\u5934** \u7684\u987a\u5e8f\u8fd4\u56de\u8282\u70b9\u7684\u503c\u3002 > > \u8fd4\u56de\u7684\u7ed3\u679c\u7528\u6570\u7ec4\u5b58\u50a8\u3002 > > \u6837\u4f8b\uff1a > > \u8f93\u5165\uff1a`[2, 3, 5]` > \u8fd4\u56de\uff1a`[5, 3, 2]` \u5206\u6790\uff1a + \u4f7f\u7528\u6808\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5e94\u8be5\u5f88\u5bb9\u6613\u60f3\u5230\u7684\u3002 + \u65e2\u7136\u4f7f\u7528\u4e86\u6808\uff0c\u9012\u5f52\u6c42\u89e3\u5c31\u6210\u4e3a\u4e86\u4e00\u4e2a\u601d\u8def\u3002 \u601d\u8def1\uff1a\u9996\u5148\u5e94\u8be5\u60f3\u5230\uff0c\u4f7f\u7528\u6808\u4f5c\u4e3a\u8f85\u52a9\u3002 Python \u4ee3\u78011\uff1aPython \u4e2d\u7684\u5217\u8868\u6709\u53ef\u4ee5\u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\uff0c\u6211\u4eec\u5c31\u6bcf\u6b21\u5728\u7d22\u5f15 $0$ \u5904\u63d2\u5165\u5143\u7d20\u597d\u4e86 ```python # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def printListReversingly(self, head): \"\"\" :type head: ListNode :rtype: List[int] \"\"\" p = head stack = [] while p: stack.append(p.val) p = p.next return stack[::-1] Python \u4ee3\u78012\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def printListReversingly(self, head): \"\"\" :type head: ListNode :rtype: List[int] \"\"\" p = head stack = [] while p: stack.insert(0, p.val) p = p.next return stack Java \u4ee3\u7801\uff1a\u4f7f\u7528\u6808\u8f85\u52a9\u5b8c\u6210 import java.util.ArrayList; import java.util.Stack; class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } } public class Solution { public ArrayList<Integer> printListFromTailToHead(ListNode listNode) { ArrayList<Integer> res = new ArrayList<>(); if (listNode == null) { return res; } Stack<Integer> stack = new Stack<>(); ListNode curNode = listNode; while (curNode != null) { stack.add(curNode.val); curNode = curNode.next; } while (!stack.isEmpty()) { res.add(stack.pop()); } return res; } } \u601d\u8def2\uff1a\u4f7f\u7528\u9012\u5f52\uff0c\u5173\u952e\u5728\u4e8e\u9012\u5f52\u51fd\u6570\u7684\u7f16\u5199\uff0c\u7279\u522b\u6ce8\u610f\uff1a\u5728\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u6dfb\u52a0\u5f53\u524d\u7ed3\u70b9\u7684\u503c\u5230\u7ed3\u679c\u96c6\u4e2d\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def printListReversingly(self, head): \"\"\" :type head: ListNode :rtype: List[int] \"\"\" res = [] self.helper(res, head) return res def helper(self, res, listnode): if listnode is None: return # \u5e94\u8be5\u5148\u5224\u65ad\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u5219\u9012\u5f52\u8c03\u7528\uff0c\u5728\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u624d\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d if listnode.next: self.helper(res, listnode.next) # \u8fd9\u4e00\u6b65\u7279\u522b\u5173\u952e\uff1a\u56de\u6eaf\u65f6\u6dfb\u52a0 res.append(listnode.val) Java \u4ee3\u7801\uff1a import java.util.ArrayList; public class Solution2 { public ArrayList<Integer> printListFromTailToHead(ListNode listNode) { ArrayList<Integer> res = new ArrayList<>(); if (listNode == null) { return res; } printListFromTailToHead(listNode, res); return res; } private void printListFromTailToHead(ListNode listNode, ArrayList<Integer> res) { if (listNode == null) { return; } // \u5199\u5728\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u662f\u6b63\u5e8f if (listNode.next != null) { printListFromTailToHead(listNode.next, res); } // \u5199\u5728\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u662f\u5012\u5e8f res.add(listNode.val); } } \u601d\u8003\u4e0b\u9762\u8fd9\u4e2a\u5199\u6cd5\u4e3a\u4ec0\u4e48\u662f\u9519\u7684\u3002 \u62ff\u5177\u4f53\u7684\u6d4b\u8bd5\u7528\u4f8b\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u60f3\u660e\u767d\uff0c\u4e0d\u80fd\u4f7f\u7528 if else \u8bed\u53e5\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"06 "},{"location":"06-/#_1","text":"\u9996\u5148\u5e94\u8be5\u60f3\u5230\uff0c\u4f7f\u7528\u6808\u4f5c\u4e3a\u8f85\u52a9\u3002 \u53c2\u8003\u4ee3\u7801 1 \uff1aPython \u4e2d\u7684\u5217\u8868\u6709\u53ef\u4ee5\u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\uff0c\u6211\u4eec\u5c31\u6bcf\u6b21\u5728\u7d22\u5f15 $0$ \u5904\u63d2\u5165\u5143\u7d20\u597d\u4e86 ```Python []","title":"\u65b9\u6cd5\u4e00\uff1a\u6808"},{"location":"06-/#definition-for-singly-linked-list","text":"","title":"Definition for singly-linked list."},{"location":"06-/#class-listnodeobject","text":"","title":"class ListNode(object):"},{"location":"06-/#def-initself-x","text":"","title":"def init(self, x):"},{"location":"06-/#selfval-x","text":"","title":"self.val = x"},{"location":"06-/#selfnext-none","text":"class Solution(object): def printListReversingly(self, head): \"\"\" :type head: ListNode :rtype: List[int] \"\"\" p = head stack = [] while p: stack.append(p.val) p = p.next return stack[::-1] ```Python [] # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def printListReversingly(self, head): \"\"\" :type head: ListNode :rtype: List[int] \"\"\" p = head stack = [] while p: stack.insert(0, p.val) p = p.next return stack ```Java [] import java.util.ArrayList; import java.util.Stack; class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } } public class Solution { public ArrayList printListFromTailToHead(ListNode listNode) { ArrayList res = new ArrayList<>(); if (listNode == null) { return res; } Stack stack = new Stack<>(); ListNode curNode = listNode; while (curNode != null) { stack.add(curNode.val); curNode = curNode.next; } while (!stack.isEmpty()) { res.add(stack.pop()); } return res; } } ## \u65b9\u6cd5\u4e8c\uff1a\u9012\u5f52 \u5173\u952e\u5728\u4e8e\u9012\u5f52\u51fd\u6570\u7684\u7f16\u5199\uff0c\u7279\u522b\u6ce8\u610f\uff1a\u5728\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u6dfb\u52a0\u5f53\u524d\u7ed3\u70b9\u7684\u503c\u5230\u7ed3\u679c\u96c6\u4e2d\u3002 **\u53c2\u8003\u4ee3\u7801 2**\uff1a ```Java [] import java.util.ArrayList; public class Solution2 { public ArrayList<Integer> printListFromTailToHead(ListNode listNode) { ArrayList<Integer> res = new ArrayList<>(); if (listNode == null) { return res; } printListFromTailToHead(listNode, res); return res; } private void printListFromTailToHead(ListNode listNode, ArrayList<Integer> res) { if (listNode == null) { return; } // \u5199\u5728\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u662f\u6b63\u5e8f if (listNode.next != null) { printListFromTailToHead(listNode.next, res); } // \u5199\u5728\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u662f\u5012\u5e8f res.add(listNode.val); } } ```Python [] class Solution(object): def printListReversingly(self, head): \"\"\" :type head: ListNode :rtype: List[int] \"\"\" res = [] self.helper(res, head) return res def helper(self, res, listnode): if listnode is None: return # \u5e94\u8be5\u5148\u5224\u65ad\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u5219\u9012\u5f52\u8c03\u7528\uff0c\u5728\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u624d\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d if listnode.next: self.helper(res, listnode.next) # \u8fd9\u4e00\u6b65\u7279\u522b\u5173\u952e\uff1a\u56de\u6eaf\u65f6\u6dfb\u52a0 res.append(listnode.val) \u601d\u8003\u4e0b\u9762\u8fd9\u4e2a\u5199\u6cd5\u4e3a\u4ec0\u4e48\u662f\u9519\u7684\u3002 ![image.png](https://pic.leetcode-cn.com/1604113649-kIGpeB-image.png) \u62ff\u5177\u4f53\u7684\u6d4b\u8bd5\u7528\u4f8b\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u60f3\u660e\u767d\uff0c\u4e0d\u80fd\u4f7f\u7528 if else \u8bed\u53e5\u3002 ![image.png](https://pic.leetcode-cn.com/1604113664-qBSDqn-image.png) # [\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 6 \u9898] \u201c\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868\u201d\u505a\u9898\u8bb0\u5f55 ### \u7b2c 6 \u9898\uff1a\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868 \u4f20\u9001\u95e8\uff1a[AcWing\uff1a\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868](https://www.acwing.com/problem/content/18/)\uff0c[\u725b\u5ba2\u7f51 online judge \u5730\u5740](https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035?tpId=13&tqId=11156&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\u3002 > \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u6309\u7167 **\u4ece\u5c3e\u5230\u5934** \u7684\u987a\u5e8f\u8fd4\u56de\u8282\u70b9\u7684\u503c\u3002 > > \u8fd4\u56de\u7684\u7ed3\u679c\u7528\u6570\u7ec4\u5b58\u50a8\u3002 > > \u6837\u4f8b\uff1a > > \u8f93\u5165\uff1a`[2, 3, 5]` > \u8fd4\u56de\uff1a`[5, 3, 2]` \u5206\u6790\uff1a + \u4f7f\u7528\u6808\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5e94\u8be5\u5f88\u5bb9\u6613\u60f3\u5230\u7684\u3002 + \u65e2\u7136\u4f7f\u7528\u4e86\u6808\uff0c\u9012\u5f52\u6c42\u89e3\u5c31\u6210\u4e3a\u4e86\u4e00\u4e2a\u601d\u8def\u3002 \u601d\u8def1\uff1a\u9996\u5148\u5e94\u8be5\u60f3\u5230\uff0c\u4f7f\u7528\u6808\u4f5c\u4e3a\u8f85\u52a9\u3002 Python \u4ee3\u78011\uff1aPython \u4e2d\u7684\u5217\u8868\u6709\u53ef\u4ee5\u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\uff0c\u6211\u4eec\u5c31\u6bcf\u6b21\u5728\u7d22\u5f15 $0$ \u5904\u63d2\u5165\u5143\u7d20\u597d\u4e86 ```python # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def printListReversingly(self, head): \"\"\" :type head: ListNode :rtype: List[int] \"\"\" p = head stack = [] while p: stack.append(p.val) p = p.next return stack[::-1] Python \u4ee3\u78012\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def printListReversingly(self, head): \"\"\" :type head: ListNode :rtype: List[int] \"\"\" p = head stack = [] while p: stack.insert(0, p.val) p = p.next return stack Java \u4ee3\u7801\uff1a\u4f7f\u7528\u6808\u8f85\u52a9\u5b8c\u6210 import java.util.ArrayList; import java.util.Stack; class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } } public class Solution { public ArrayList<Integer> printListFromTailToHead(ListNode listNode) { ArrayList<Integer> res = new ArrayList<>(); if (listNode == null) { return res; } Stack<Integer> stack = new Stack<>(); ListNode curNode = listNode; while (curNode != null) { stack.add(curNode.val); curNode = curNode.next; } while (!stack.isEmpty()) { res.add(stack.pop()); } return res; } } \u601d\u8def2\uff1a\u4f7f\u7528\u9012\u5f52\uff0c\u5173\u952e\u5728\u4e8e\u9012\u5f52\u51fd\u6570\u7684\u7f16\u5199\uff0c\u7279\u522b\u6ce8\u610f\uff1a\u5728\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u6dfb\u52a0\u5f53\u524d\u7ed3\u70b9\u7684\u503c\u5230\u7ed3\u679c\u96c6\u4e2d\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def printListReversingly(self, head): \"\"\" :type head: ListNode :rtype: List[int] \"\"\" res = [] self.helper(res, head) return res def helper(self, res, listnode): if listnode is None: return # \u5e94\u8be5\u5148\u5224\u65ad\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u5219\u9012\u5f52\u8c03\u7528\uff0c\u5728\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u624d\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d if listnode.next: self.helper(res, listnode.next) # \u8fd9\u4e00\u6b65\u7279\u522b\u5173\u952e\uff1a\u56de\u6eaf\u65f6\u6dfb\u52a0 res.append(listnode.val) Java \u4ee3\u7801\uff1a import java.util.ArrayList; public class Solution2 { public ArrayList<Integer> printListFromTailToHead(ListNode listNode) { ArrayList<Integer> res = new ArrayList<>(); if (listNode == null) { return res; } printListFromTailToHead(listNode, res); return res; } private void printListFromTailToHead(ListNode listNode, ArrayList<Integer> res) { if (listNode == null) { return; } // \u5199\u5728\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u662f\u6b63\u5e8f if (listNode.next != null) { printListFromTailToHead(listNode.next, res); } // \u5199\u5728\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u662f\u5012\u5e8f res.add(listNode.val); } } \u601d\u8003\u4e0b\u9762\u8fd9\u4e2a\u5199\u6cd5\u4e3a\u4ec0\u4e48\u662f\u9519\u7684\u3002 \u62ff\u5177\u4f53\u7684\u6d4b\u8bd5\u7528\u4f8b\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u60f3\u660e\u767d\uff0c\u4e0d\u80fd\u4f7f\u7528 if else \u8bed\u53e5\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"self.next = None"},{"location":"06/","text":"\u5251\u6307 Offer 06. \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868 \u529b\u6263\uff1a \u5251\u6307 Offer 06. \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868 AcWing\uff1a\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u4ece\u5c3e\u5230\u5934\u53cd\u8fc7\u6765\u8fd4\u56de\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\uff08\u7528\u6570\u7ec4\u8fd4\u56de\uff09\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1ahead = [1,3,2] \u8f93\u51fa\uff1a[2,3,1] \u9650\u5236\uff1a 0 <= \u94fe\u8868\u957f\u5ea6 <= 10000 \u53c2\u8003\u4ee3\u7801 1 \uff1a import java.util.ArrayDeque; import java.util.Deque; public class Solution { public int[] reversePrint(ListNode head) { if (head == null) { return new int[0]; } // Java \u5728 Stack \u7c7b\u7684\u6587\u6863\u91cc\u5efa\u8bae\u4f7f\u7528 Deque Deque<Integer> stack = new ArrayDeque<>(); ListNode curNode = head; while (curNode != null) { stack.addLast(curNode.val); curNode = curNode.next; } int size = stack.size(); int[] res = new int[size]; for (int i = 0; i < size; i++) { // \u8fd9\u91cc\u56e0\u4e3a\u63d0\u524d\u8bfb\u53d6\u4e86 size\uff0c\u56e0\u6b64\u5728 stack \u53d1\u9001 pop \u7684\u65f6\u5019\uff0c\u4e0d\u5fc5\u68c0\u6d4b stack \u662f\u5426\u4e3a\u7a7a res[i] = stack.removeLast(); } return res; } } \u53c2\u8003\u4ee3\u7801 2 \uff1a import java.util.ArrayList; import java.util.List; public class Solution { public int[] reversePrint(ListNode head) { if (head == null) { return new int[0]; } List<Integer> res = new ArrayList<>(); printListFromTailToHead(head, res); // \u8fd9\u91cc\u4ee3\u7801\u6709\u70b9\u957f\uff0c\u4f46\u505a\u7684\u4e8b\u60c5\u53ea\u662f\u628a res \u8f6c\u5230 int[] int size = res.size(); int[] resArray = new int[size]; for (int i = 0; i < size; i++) { resArray[i] = res.get(i); } return resArray; } private void printListFromTailToHead(ListNode node, List<Integer> res) { if (node == null) { return; } // \u5982\u679c\u6709\u540e\u7ee7\u7ed3\u70b9\uff0c\u5c31\u4e00\u76f4\u9012\u5f52\u4e0b\u53bb if (node.next != null) { printListFromTailToHead(node.next, res); } // \u91cd\u70b9\uff1a\u5728\u9012\u5f52\u8fd4\u56de\u7684\u65f6\u5019\u628a\u5f53\u524d\u7ed3\u70b9\u7684\u503c\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d res.add(node.val); } }","title":"\u5251\u6307 Offer 06. \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868"},{"location":"06/#offer-06","text":"\u529b\u6263\uff1a \u5251\u6307 Offer 06. \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868 AcWing\uff1a\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002","title":"\u5251\u6307 Offer 06. \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868"},{"location":"06/#_1","text":"\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u4ece\u5c3e\u5230\u5934\u53cd\u8fc7\u6765\u8fd4\u56de\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\uff08\u7528\u6570\u7ec4\u8fd4\u56de\uff09\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1ahead = [1,3,2] \u8f93\u51fa\uff1a[2,3,1] \u9650\u5236\uff1a 0 <= \u94fe\u8868\u957f\u5ea6 <= 10000 \u53c2\u8003\u4ee3\u7801 1 \uff1a import java.util.ArrayDeque; import java.util.Deque; public class Solution { public int[] reversePrint(ListNode head) { if (head == null) { return new int[0]; } // Java \u5728 Stack \u7c7b\u7684\u6587\u6863\u91cc\u5efa\u8bae\u4f7f\u7528 Deque Deque<Integer> stack = new ArrayDeque<>(); ListNode curNode = head; while (curNode != null) { stack.addLast(curNode.val); curNode = curNode.next; } int size = stack.size(); int[] res = new int[size]; for (int i = 0; i < size; i++) { // \u8fd9\u91cc\u56e0\u4e3a\u63d0\u524d\u8bfb\u53d6\u4e86 size\uff0c\u56e0\u6b64\u5728 stack \u53d1\u9001 pop \u7684\u65f6\u5019\uff0c\u4e0d\u5fc5\u68c0\u6d4b stack \u662f\u5426\u4e3a\u7a7a res[i] = stack.removeLast(); } return res; } } \u53c2\u8003\u4ee3\u7801 2 \uff1a import java.util.ArrayList; import java.util.List; public class Solution { public int[] reversePrint(ListNode head) { if (head == null) { return new int[0]; } List<Integer> res = new ArrayList<>(); printListFromTailToHead(head, res); // \u8fd9\u91cc\u4ee3\u7801\u6709\u70b9\u957f\uff0c\u4f46\u505a\u7684\u4e8b\u60c5\u53ea\u662f\u628a res \u8f6c\u5230 int[] int size = res.size(); int[] resArray = new int[size]; for (int i = 0; i < size; i++) { resArray[i] = res.get(i); } return resArray; } private void printListFromTailToHead(ListNode node, List<Integer> res) { if (node == null) { return; } // \u5982\u679c\u6709\u540e\u7ee7\u7ed3\u70b9\uff0c\u5c31\u4e00\u76f4\u9012\u5f52\u4e0b\u53bb if (node.next != null) { printListFromTailToHead(node.next, res); } // \u91cd\u70b9\uff1a\u5728\u9012\u5f52\u8fd4\u56de\u7684\u65f6\u5019\u628a\u5f53\u524d\u7ed3\u70b9\u7684\u503c\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d res.add(node.val); } }","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"07-/","text":"\u601d\u8def\u5206\u6790 \u753b\u56fe\u662f\u89e3\u51b3\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u5173\u952e\uff0c\u5343\u4e07\u4e0d\u8981\u72af\u61d2\uff0c\u62ff\u51fa\u7eb8\u548c\u7b14\uff0c\u52a8\u624b\u64cd\u4f5c\u4e00\u4e0b\uff0c\u5f80\u5f80\u601d\u8def\u5c31\u5f88\u6e05\u6670\u4e86\uff1b \u7528\u7c7b\u4f3c\u4e8c\u53c9\u6811\u63d2\u5165\u8282\u70b9\u7684\u65b9\u5f0f\u5efa\u7acb\u4e8c\u53c9\u6811\uff0c\u5373\u4f7f\u7528\u9012\u5f52\u51fd\u6570\uff0c\u8fd4\u56de\u65b0\u521b\u5efa\u4e8c\u53c9\u6811\u6839\u8282\u70b9\u7684\u65b9\u5f0f\uff0c\u5c06\u65b0\u7684\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\u6302\u63a5\u5230\u539f\u6765\u7684\u4e8c\u53c9\u6811\u7684\u5de6\u53f3\u7ed3\u70b9\u4e2d\uff1b \u524d\u5e8f\u904d\u5386\u7684\u7b2c 1 \u4e2a\u5143\u7d20\u5c31\u662f\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\u3002\u6839\u636e\u8fd9\u4e00\u70b9\uff0c\u4e0d\u96be\u5199\u51fa\u9012\u5f52\u51fd\u6570\u7684\u4ee3\u7801\u3002\u6ce8\u610f\u8fd9\u662f\u4ee5\u201c\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u201d\u4e3a\u524d\u63d0\u7684\u3002 \u601d\u8def\uff1a\u9012\u5f52\u91cd\u5efa\u3002\u4e8c\u53c9\u6811\u7684 DFS \u6709\u5982\u4e0b\u4e09\u79cd\u904d\u5386\u65b9\u5f0f\uff1a \u524d\u5e8f\u904d\u5386\uff1a\u5148\u8bbf\u95ee\u6839\u7ed3\u70b9\uff0c\u518d\u8bbf\u95ee\u5de6\u5b50\u7ed3\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u53f3\u5b50\u7ed3\u70b9\u3002 \u4e2d\u5e8f\u904d\u5386\uff1a\u5148\u8bbf\u95ee\u5de6\u5b50\u7ed3\u70b9\uff0c\u518d\u8bbf\u95ee\u6839\u7ed3\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u53f3\u5b50\u7ed3\u70b9\u3002 \u540e\u5e8f\u904d\u5386\uff1a\u5148\u8bbf\u95ee\u5de6\u5b50\u7ed3\u70b9\uff0c\u518d\u8bbf\u95ee\u53f3\u5b50\u7ed3\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u6839\u7ed3\u70b9\u3002 \u672c\u9898\u4e3a\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\uff0c\u6700\u5c11\u9700\u8981\u4e24\u79cd\u904d\u5386\u65b9\u5f0f\uff0c\u624d\u80fd\u91cd\u5efa\u4e8c\u53c9\u6811\u3002 \u5173\u952e\uff1a\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u7b2c $1$ \u4e2a\u6570\uff08\u7d22\u5f15\u4e3a $0$\uff09\u7684\u6570\u4e00\u5b9a\u662f\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u4e8e\u662f\u53ef\u4ee5\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u8fd9\u4e2a\u6839\u7ed3\u70b9\u7684\u7d22\u5f15\uff0c\u7136\u540e\u628a\u201c\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u201d\u548c\u201c\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u201d\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u5c31\u5206\u522b\u5bf9\u5e94\u4e8c\u53c9\u6811\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\uff0c\u5206\u522b\u9012\u5f52\u5b8c\u6210\u5c31\u53ef\u4ee5\u4e86\u3002 \u6ce8\u610f\uff1a1\u3001\u7f16\u5199\u9012\u5f52\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u5148\u5199\u7279\u6b8a\u60c5\u51b5\uff1b 2\u3001\u7d22\u5f15\u662f\u591a\u5c11\u4e0d\u597d\u5224\u65ad\u7684\u65f6\u5019\uff0c\u5e72\u8106\u5c31\u7528\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u5c31\u6bd4\u5982\u6211\u4e0a\u9762\u753b\u7684\u8fd9\u4e2a\u56fe\uff0c\u628a\u5177\u4f53\u7684\u6570\u6362\u6210\u6211\u4eec\u4f7f\u7528\u7684\u53d8\u91cf\uff0c\u8fd9\u6837\u601d\u8003\u7684\u96be\u5ea6\u4f1a\u964d\u4f4e\uff0c\u800c\u4e14\u8fd8\u4e0d\u5bb9\u6613\u51fa\u9519\u3002 Python \u4ee3\u7801\uff1a class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def buildTree(self, preorder, inorder): \"\"\" \u8fd4\u56de\u6784\u9020\u7684 TreeNode \u6839\u7ed3\u70b9 :type preorder: List[int] :type inorder: List[int] :rtype: TreeNode \"\"\" # \u5728\u7f16\u7801\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u5b9a\u8981\u4fdd\u8bc1 len(pre) == len(tin)\uff0c\u5426\u5219\u903b\u8f91\u4e00\u5b9a\u4e0d\u6b63\u786e if len(preorder) == 0: return None if len(preorder) == 1: # \u8fd9\u91cc\u8981\u8fd4\u56de\u7ed3\u70b9\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u5177\u4f53\u7684\u6570 return TreeNode(preorder[0]) root = TreeNode(preorder[0]) # \u76f4\u63a5\u5f97\u5230\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4e0b\u9762\u7b97\u597d\u504f\u79fb\u91cf\u5c31\u597d\u4e86\uff0c\u5982\u679c\u5bb9\u6613\u7b97\u9519\uff0c\u8bb0\u5f97\u62ff\u5177\u4f53\u4f8b\u5b50 pos = inorder.index(preorder[0]) root.left = self.buildTree(preorder[1:pos + 1], inorder[:pos]) root.right = self.buildTree(preorder[pos + 1:], inorder[pos + 1:]) return root Java \u4ee3\u7801\uff1a class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public TreeNode reConstructBinaryTree(int[] pre, int[] in) { TreeNode root = reConstructBinaryTree(pre, 0, pre.length - 1, in, 0, in.length - 1); return root; } /** * \u6839\u636e\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684 [preL, preR] \u548c \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684 [inL, inR] \u91cd\u65b0\u7ec4\u5efa\u4e8c\u53c9\u6811 * * @param pre \u524d\u5e8f\u904d\u5386\u6570\u7ec4 * @param preL \u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u5de6\u7aef\u70b9 * @param preR \u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u53f3\u7aef\u70b9 * @param in \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4 * @param inL \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u5de6\u7aef\u70b9 * @param inR \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u53f3\u7aef\u70b9 * @return \u6784\u5efa\u7684\u65b0\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9 */ private TreeNode reConstructBinaryTree(int[] pre, int preL, int preR, int[] in, int inL, int inR) { if (preL > preR || inL > inR) { return null; } // \u6784\u5efa\u7684\u65b0\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\u4e00\u5b9a\u662f\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u7b2c 1 \u4e2a\u5143\u7d20 TreeNode root = new TreeNode(pre[preL]); // \u4ece\u4e2d\u5e8f\u904d\u5386\u7684\u5de6\u533a\u95f4\u7aef\u70b9\u5f00\u59cb\u627e\uff0c\u627e\u5230\u548c\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u7b2c 1 \u4e2a\u5143\u7d20\u7684\u503c\u76f8\u7b49\u7684\u8282\u70b9 int i = inL; while (in[i] != pre[preL] && i <= inR) { i++; } // \u5728\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u4e2d\u904d\u5386\u4e86\u51e0\u4e2a\u5143\u7d20\uff1a i - inL // \u63a5\u4e0b\u6765\u5c31\u662f\u9012\u5f52\u8c03\u7528\uff0c\u5173\u952e\u7684\u5730\u65b9\u5728\u4e8e\u627e\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u548c\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u5bf9\u5e94\u7684\u533a\u95f4\u7684\u7aef\u70b9 root.left = reConstructBinaryTree(pre, preL + 1, preL + (i - inL), in, inL, i - 1); root.right = reConstructBinaryTree(pre, preL + (i - inL) + 1, preR, in, i + 1, inR); return root; } } \u7c7b\u4f3c\u95ee\u9898\uff1aLeetCode \u7b2c 106 \u9898\u3002 LeetCode \u7b2c 106 \u9898\uff1a \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u4f20\u9001\u95e8\uff1a 106. \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u3002 \u6839\u636e\u4e00\u68f5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e0e\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002 \u6ce8\u610f: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002 \u4f8b\u5982\uff0c\u7ed9\u51fa \u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7] \u540e\u5e8f\u904d\u5386 postorder = [9,15,7,20,3] \u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a 3 / \\ 9 20 / \\ 15 7 \u601d\u8def\uff1a\u4e8c\u53c9\u6811\u7684\u95ee\u9898\uff0c\u5728\u7eb8\u4e0a\u5199\u5199\u753b\u753b\u66f4\u5f62\u8c61\u3002 Python \u4ee3\u7801\uff1a class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution: def buildTree(self, inorder, postorder): \"\"\" :type inorder: List[int] :type postorder: List[int] :rtype: TreeNode \"\"\" assert len(inorder) == len(postorder) if len(inorder) == 0: return None if len(inorder) == 1: # \u8fd9\u91cc\u8981\u8fd4\u56de\u7ed3\u70b9\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u5177\u4f53\u7684\u6570 return TreeNode(inorder[0]) # \u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u662f\u6839\u7ed3\u70b9 root = TreeNode(postorder[-1]) pos = inorder.index(postorder[-1]) root.left = self.buildTree(inorder[:pos], postorder[:pos]) root.right = self.buildTree(inorder[pos + 1:], postorder[pos:-1]) return root # \u7528\u4e8e\u9a8c\u8bc1\u7684\u65b9\u6cd5 def validate(node): if node is None: return validate(node.left) print(node.val, end=' ') validate(node.right) if __name__ == '__main__': inorder = [9, 3, 15, 20, 7] postorder = [9, 15, 7, 20, 3] solution = Solution() root = solution.buildTree(inorder, postorder) validate(root) MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } }); \u7b2c 7 \u9898\uff1a\u91cd\u5efa\u4e8c\u53c9\u6811\uff08\u9012\u5f52\uff09 \u540c LeetCode \u7b2c 105 \u9898\uff0c\u4f20\u9001\u95e8\uff1a \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u3002 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u91cd\u5efa\u4e8c\u53c9\u6811 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u91cd\u5efa\u8be5\u4e8c\u53c9\u6811\u3002 \u6ce8\u610f : \u4e8c\u53c9\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u4e92\u4e0d\u76f8\u540c\uff1b \u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u4e00\u5b9a\u5408\u6cd5\uff1b \u6837\u4f8b\uff1a \u7ed9\u5b9a\uff1a \u524d\u5e8f\u904d\u5386\u662f\uff1a [3, 9, 20, 15, 7] \u4e2d\u5e8f\u904d\u5386\u662f\uff1a [9, 3, 15, 20, 7] \u8fd4\u56de\uff1a [3, 9, 20, null, null, 15, 7, null, null, null, null] \u8fd4\u56de\u7684\u4e8c\u53c9\u6811\u5982\u4e0b\u6240\u793a\uff1a 3 / \\ 9 20 / \\ 15 7 \u601d\u8def\u5206\u6790 \uff1a \u753b\u56fe\u662f\u89e3\u51b3\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u5173\u952e\uff0c\u5343\u4e07\u4e0d\u8981\u72af\u61d2\uff0c\u62ff\u51fa\u7eb8\u548c\u7b14\uff0c\u52a8\u624b\u64cd\u4f5c\u4e00\u4e0b\uff0c\u5f80\u5f80\u601d\u8def\u5c31\u5f88\u6e05\u6670\u4e86\uff1b \u7528\u7c7b\u4f3c\u4e8c\u53c9\u6811\u63d2\u5165\u8282\u70b9\u7684\u65b9\u5f0f\u5efa\u7acb\u4e8c\u53c9\u6811\uff0c\u5373\u4f7f\u7528\u9012\u5f52\u51fd\u6570\uff0c\u8fd4\u56de\u65b0\u521b\u5efa\u4e8c\u53c9\u6811\u6839\u8282\u70b9\u7684\u65b9\u5f0f\uff0c\u5c06\u65b0\u7684\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\u6302\u63a5\u5230\u539f\u6765\u7684\u4e8c\u53c9\u6811\u7684\u5de6\u53f3\u7ed3\u70b9\u4e2d\uff1b \u524d\u5e8f\u904d\u5386\u7684\u7b2c 1 \u4e2a\u5143\u7d20\u5c31\u662f\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\u3002\u6839\u636e\u8fd9\u4e00\u70b9\uff0c\u4e0d\u96be\u5199\u51fa\u9012\u5f52\u51fd\u6570\u7684\u4ee3\u7801\u3002\u6ce8\u610f\u8fd9\u662f\u4ee5\u201c\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u201d\u4e3a\u524d\u63d0\u7684\u3002 \u601d\u8def\uff1a\u9012\u5f52\u91cd\u5efa\u3002 \u4e8c\u53c9\u6811\u7684 DFS \u6709\u5982\u4e0b\u4e09\u79cd\u904d\u5386\u65b9\u5f0f\uff1a \u524d\u5e8f\u904d\u5386\uff1a\u5148\u8bbf\u95ee\u6839\u7ed3\u70b9\uff0c\u518d\u8bbf\u95ee\u5de6\u5b50\u7ed3\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u53f3\u5b50\u7ed3\u70b9\u3002 \u4e2d\u5e8f\u904d\u5386\uff1a\u5148\u8bbf\u95ee\u5de6\u5b50\u7ed3\u70b9\uff0c\u518d\u8bbf\u95ee\u6839\u7ed3\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u53f3\u5b50\u7ed3\u70b9\u3002 \u540e\u5e8f\u904d\u5386\uff1a\u5148\u8bbf\u95ee\u5de6\u5b50\u7ed3\u70b9\uff0c\u518d\u8bbf\u95ee\u53f3\u5b50\u7ed3\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u6839\u7ed3\u70b9\u3002 \u672c\u9898\u4e3a\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\uff0c\u6700\u5c11\u9700\u8981\u4e24\u79cd\u904d\u5386\u65b9\u5f0f\uff0c\u624d\u80fd\u91cd\u5efa\u4e8c\u53c9\u6811\u3002 \u5173\u952e\uff1a\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u7b2c $1$ \u4e2a\u6570\uff08\u7d22\u5f15\u4e3a $0$\uff09\u7684\u6570\u4e00\u5b9a\u662f\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u4e8e\u662f\u53ef\u4ee5\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u8fd9\u4e2a\u6839\u7ed3\u70b9\u7684\u7d22\u5f15\uff0c\u7136\u540e\u628a\u201c\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u201d\u548c\u201c\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u201d\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u5c31\u5206\u522b\u5bf9\u5e94\u4e8c\u53c9\u6811\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\uff0c\u5206\u522b\u9012\u5f52\u5b8c\u6210\u5c31\u53ef\u4ee5\u4e86\u3002 \u6ce8\u610f\uff1a1\u3001\u7f16\u5199\u9012\u5f52\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u5148\u5199\u7279\u6b8a\u60c5\u51b5\uff1b 2\u3001\u7d22\u5f15\u662f\u591a\u5c11\u4e0d\u597d\u5224\u65ad\u7684\u65f6\u5019\uff0c\u5e72\u8106\u5c31\u7528\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u5c31\u6bd4\u5982\u6211\u4e0a\u9762\u753b\u7684\u8fd9\u4e2a\u56fe\uff0c\u628a\u5177\u4f53\u7684\u6570\u6362\u6210\u6211\u4eec\u4f7f\u7528\u7684\u53d8\u91cf\uff0c\u8fd9\u6837\u601d\u8003\u7684\u96be\u5ea6\u4f1a\u964d\u4f4e\uff0c\u800c\u4e14\u8fd8\u4e0d\u5bb9\u6613\u51fa\u9519\u3002 Python \u4ee3\u7801\uff1a class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def buildTree(self, preorder, inorder): \"\"\" \u8fd4\u56de\u6784\u9020\u7684 TreeNode \u6839\u7ed3\u70b9 :type preorder: List[int] :type inorder: List[int] :rtype: TreeNode \"\"\" # \u5728\u7f16\u7801\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u5b9a\u8981\u4fdd\u8bc1 len(pre) == len(tin)\uff0c\u5426\u5219\u903b\u8f91\u4e00\u5b9a\u4e0d\u6b63\u786e if len(preorder) == 0: return None if len(preorder) == 1: # \u8fd9\u91cc\u8981\u8fd4\u56de\u7ed3\u70b9\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u5177\u4f53\u7684\u6570 return TreeNode(preorder[0]) root = TreeNode(preorder[0]) # \u76f4\u63a5\u5f97\u5230\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4e0b\u9762\u7b97\u597d\u504f\u79fb\u91cf\u5c31\u597d\u4e86\uff0c\u5982\u679c\u5bb9\u6613\u7b97\u9519\uff0c\u8bb0\u5f97\u62ff\u5177\u4f53\u4f8b\u5b50 pos = inorder.index(preorder[0]) root.left = self.buildTree(preorder[1:pos + 1], inorder[:pos]) root.right = self.buildTree(preorder[pos + 1:], inorder[pos + 1:]) return root Java \u4ee3\u7801\uff1a class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public TreeNode reConstructBinaryTree(int[] pre, int[] in) { TreeNode root = reConstructBinaryTree(pre, 0, pre.length - 1, in, 0, in.length - 1); return root; } /** * \u6839\u636e\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684 [preL, preR] \u548c \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684 [inL, inR] \u91cd\u65b0\u7ec4\u5efa\u4e8c\u53c9\u6811 * * @param pre \u524d\u5e8f\u904d\u5386\u6570\u7ec4 * @param preL \u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u5de6\u7aef\u70b9 * @param preR \u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u53f3\u7aef\u70b9 * @param in \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4 * @param inL \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u5de6\u7aef\u70b9 * @param inR \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u53f3\u7aef\u70b9 * @return \u6784\u5efa\u7684\u65b0\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9 */ private TreeNode reConstructBinaryTree(int[] pre, int preL, int preR, int[] in, int inL, int inR) { if (preL > preR || inL > inR) { return null; } // \u6784\u5efa\u7684\u65b0\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\u4e00\u5b9a\u662f\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u7b2c 1 \u4e2a\u5143\u7d20 TreeNode root = new TreeNode(pre[preL]); // \u4ece\u4e2d\u5e8f\u904d\u5386\u7684\u5de6\u533a\u95f4\u7aef\u70b9\u5f00\u59cb\u627e\uff0c\u627e\u5230\u548c\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u7b2c 1 \u4e2a\u5143\u7d20\u7684\u503c\u76f8\u7b49\u7684\u8282\u70b9 int i = inL; while (in[i] != pre[preL] && i <= inR) { i++; } // \u5728\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u4e2d\u904d\u5386\u4e86\u51e0\u4e2a\u5143\u7d20\uff1a i - inL // \u63a5\u4e0b\u6765\u5c31\u662f\u9012\u5f52\u8c03\u7528\uff0c\u5173\u952e\u7684\u5730\u65b9\u5728\u4e8e\u627e\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u548c\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u5bf9\u5e94\u7684\u533a\u95f4\u7684\u7aef\u70b9 root.left = reConstructBinaryTree(pre, preL + 1, preL + (i - inL), in, inL, i - 1); root.right = reConstructBinaryTree(pre, preL + (i - inL) + 1, preR, in, i + 1, inR); return root; } } \u7c7b\u4f3c\u95ee\u9898\uff1aLeetCode \u7b2c 106 \u9898\u3002 LeetCode \u7b2c 106 \u9898\uff1a \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u4f20\u9001\u95e8\uff1a 106. \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u3002 \u6839\u636e\u4e00\u68f5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e0e\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002 \u6ce8\u610f: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002 \u4f8b\u5982\uff0c\u7ed9\u51fa \u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7] \u540e\u5e8f\u904d\u5386 postorder = [9,15,7,20,3] \u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a 3 / \\ 9 20 / \\ 15 7 \u601d\u8def\uff1a\u4e8c\u53c9\u6811\u7684\u95ee\u9898\uff0c\u5728\u7eb8\u4e0a\u5199\u5199\u753b\u753b\u66f4\u5f62\u8c61\u3002 Python \u4ee3\u7801\uff1a class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution: def buildTree(self, inorder, postorder): assert len(inorder) == len(postorder) if len(inorder) == 0: return None if len(inorder) == 1: # \u8fd9\u91cc\u8981\u8fd4\u56de\u7ed3\u70b9\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u5177\u4f53\u7684\u6570 return TreeNode(inorder[0]) # \u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u662f\u6839\u7ed3\u70b9 root = TreeNode(postorder[-1]) pos = inorder.index(postorder[-1]) root.left = self.buildTree(inorder[:pos], postorder[:pos]) root.right = self.buildTree(inorder[pos + 1:], postorder[pos:-1]) return root # \u7528\u4e8e\u9a8c\u8bc1\u7684\u65b9\u6cd5 def validate(node): if node is None: return validate(node.left) print(node.val, end=' ') validate(node.right)","title":"07 "},{"location":"07-/#_1","text":"\u753b\u56fe\u662f\u89e3\u51b3\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u5173\u952e\uff0c\u5343\u4e07\u4e0d\u8981\u72af\u61d2\uff0c\u62ff\u51fa\u7eb8\u548c\u7b14\uff0c\u52a8\u624b\u64cd\u4f5c\u4e00\u4e0b\uff0c\u5f80\u5f80\u601d\u8def\u5c31\u5f88\u6e05\u6670\u4e86\uff1b \u7528\u7c7b\u4f3c\u4e8c\u53c9\u6811\u63d2\u5165\u8282\u70b9\u7684\u65b9\u5f0f\u5efa\u7acb\u4e8c\u53c9\u6811\uff0c\u5373\u4f7f\u7528\u9012\u5f52\u51fd\u6570\uff0c\u8fd4\u56de\u65b0\u521b\u5efa\u4e8c\u53c9\u6811\u6839\u8282\u70b9\u7684\u65b9\u5f0f\uff0c\u5c06\u65b0\u7684\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\u6302\u63a5\u5230\u539f\u6765\u7684\u4e8c\u53c9\u6811\u7684\u5de6\u53f3\u7ed3\u70b9\u4e2d\uff1b \u524d\u5e8f\u904d\u5386\u7684\u7b2c 1 \u4e2a\u5143\u7d20\u5c31\u662f\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\u3002\u6839\u636e\u8fd9\u4e00\u70b9\uff0c\u4e0d\u96be\u5199\u51fa\u9012\u5f52\u51fd\u6570\u7684\u4ee3\u7801\u3002\u6ce8\u610f\u8fd9\u662f\u4ee5\u201c\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u201d\u4e3a\u524d\u63d0\u7684\u3002 \u601d\u8def\uff1a\u9012\u5f52\u91cd\u5efa\u3002\u4e8c\u53c9\u6811\u7684 DFS \u6709\u5982\u4e0b\u4e09\u79cd\u904d\u5386\u65b9\u5f0f\uff1a \u524d\u5e8f\u904d\u5386\uff1a\u5148\u8bbf\u95ee\u6839\u7ed3\u70b9\uff0c\u518d\u8bbf\u95ee\u5de6\u5b50\u7ed3\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u53f3\u5b50\u7ed3\u70b9\u3002 \u4e2d\u5e8f\u904d\u5386\uff1a\u5148\u8bbf\u95ee\u5de6\u5b50\u7ed3\u70b9\uff0c\u518d\u8bbf\u95ee\u6839\u7ed3\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u53f3\u5b50\u7ed3\u70b9\u3002 \u540e\u5e8f\u904d\u5386\uff1a\u5148\u8bbf\u95ee\u5de6\u5b50\u7ed3\u70b9\uff0c\u518d\u8bbf\u95ee\u53f3\u5b50\u7ed3\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u6839\u7ed3\u70b9\u3002 \u672c\u9898\u4e3a\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\uff0c\u6700\u5c11\u9700\u8981\u4e24\u79cd\u904d\u5386\u65b9\u5f0f\uff0c\u624d\u80fd\u91cd\u5efa\u4e8c\u53c9\u6811\u3002 \u5173\u952e\uff1a\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u7b2c $1$ \u4e2a\u6570\uff08\u7d22\u5f15\u4e3a $0$\uff09\u7684\u6570\u4e00\u5b9a\u662f\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u4e8e\u662f\u53ef\u4ee5\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u8fd9\u4e2a\u6839\u7ed3\u70b9\u7684\u7d22\u5f15\uff0c\u7136\u540e\u628a\u201c\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u201d\u548c\u201c\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u201d\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u5c31\u5206\u522b\u5bf9\u5e94\u4e8c\u53c9\u6811\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\uff0c\u5206\u522b\u9012\u5f52\u5b8c\u6210\u5c31\u53ef\u4ee5\u4e86\u3002 \u6ce8\u610f\uff1a1\u3001\u7f16\u5199\u9012\u5f52\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u5148\u5199\u7279\u6b8a\u60c5\u51b5\uff1b 2\u3001\u7d22\u5f15\u662f\u591a\u5c11\u4e0d\u597d\u5224\u65ad\u7684\u65f6\u5019\uff0c\u5e72\u8106\u5c31\u7528\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u5c31\u6bd4\u5982\u6211\u4e0a\u9762\u753b\u7684\u8fd9\u4e2a\u56fe\uff0c\u628a\u5177\u4f53\u7684\u6570\u6362\u6210\u6211\u4eec\u4f7f\u7528\u7684\u53d8\u91cf\uff0c\u8fd9\u6837\u601d\u8003\u7684\u96be\u5ea6\u4f1a\u964d\u4f4e\uff0c\u800c\u4e14\u8fd8\u4e0d\u5bb9\u6613\u51fa\u9519\u3002 Python \u4ee3\u7801\uff1a class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def buildTree(self, preorder, inorder): \"\"\" \u8fd4\u56de\u6784\u9020\u7684 TreeNode \u6839\u7ed3\u70b9 :type preorder: List[int] :type inorder: List[int] :rtype: TreeNode \"\"\" # \u5728\u7f16\u7801\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u5b9a\u8981\u4fdd\u8bc1 len(pre) == len(tin)\uff0c\u5426\u5219\u903b\u8f91\u4e00\u5b9a\u4e0d\u6b63\u786e if len(preorder) == 0: return None if len(preorder) == 1: # \u8fd9\u91cc\u8981\u8fd4\u56de\u7ed3\u70b9\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u5177\u4f53\u7684\u6570 return TreeNode(preorder[0]) root = TreeNode(preorder[0]) # \u76f4\u63a5\u5f97\u5230\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4e0b\u9762\u7b97\u597d\u504f\u79fb\u91cf\u5c31\u597d\u4e86\uff0c\u5982\u679c\u5bb9\u6613\u7b97\u9519\uff0c\u8bb0\u5f97\u62ff\u5177\u4f53\u4f8b\u5b50 pos = inorder.index(preorder[0]) root.left = self.buildTree(preorder[1:pos + 1], inorder[:pos]) root.right = self.buildTree(preorder[pos + 1:], inorder[pos + 1:]) return root Java \u4ee3\u7801\uff1a class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public TreeNode reConstructBinaryTree(int[] pre, int[] in) { TreeNode root = reConstructBinaryTree(pre, 0, pre.length - 1, in, 0, in.length - 1); return root; } /** * \u6839\u636e\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684 [preL, preR] \u548c \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684 [inL, inR] \u91cd\u65b0\u7ec4\u5efa\u4e8c\u53c9\u6811 * * @param pre \u524d\u5e8f\u904d\u5386\u6570\u7ec4 * @param preL \u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u5de6\u7aef\u70b9 * @param preR \u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u53f3\u7aef\u70b9 * @param in \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4 * @param inL \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u5de6\u7aef\u70b9 * @param inR \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u53f3\u7aef\u70b9 * @return \u6784\u5efa\u7684\u65b0\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9 */ private TreeNode reConstructBinaryTree(int[] pre, int preL, int preR, int[] in, int inL, int inR) { if (preL > preR || inL > inR) { return null; } // \u6784\u5efa\u7684\u65b0\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\u4e00\u5b9a\u662f\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u7b2c 1 \u4e2a\u5143\u7d20 TreeNode root = new TreeNode(pre[preL]); // \u4ece\u4e2d\u5e8f\u904d\u5386\u7684\u5de6\u533a\u95f4\u7aef\u70b9\u5f00\u59cb\u627e\uff0c\u627e\u5230\u548c\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u7b2c 1 \u4e2a\u5143\u7d20\u7684\u503c\u76f8\u7b49\u7684\u8282\u70b9 int i = inL; while (in[i] != pre[preL] && i <= inR) { i++; } // \u5728\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u4e2d\u904d\u5386\u4e86\u51e0\u4e2a\u5143\u7d20\uff1a i - inL // \u63a5\u4e0b\u6765\u5c31\u662f\u9012\u5f52\u8c03\u7528\uff0c\u5173\u952e\u7684\u5730\u65b9\u5728\u4e8e\u627e\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u548c\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u5bf9\u5e94\u7684\u533a\u95f4\u7684\u7aef\u70b9 root.left = reConstructBinaryTree(pre, preL + 1, preL + (i - inL), in, inL, i - 1); root.right = reConstructBinaryTree(pre, preL + (i - inL) + 1, preR, in, i + 1, inR); return root; } } \u7c7b\u4f3c\u95ee\u9898\uff1aLeetCode \u7b2c 106 \u9898\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"07-/#leetcode-106","text":"\u4f20\u9001\u95e8\uff1a 106. \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u3002 \u6839\u636e\u4e00\u68f5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e0e\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002 \u6ce8\u610f: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002 \u4f8b\u5982\uff0c\u7ed9\u51fa \u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7] \u540e\u5e8f\u904d\u5386 postorder = [9,15,7,20,3] \u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a 3 / \\ 9 20 / \\ 15 7 \u601d\u8def\uff1a\u4e8c\u53c9\u6811\u7684\u95ee\u9898\uff0c\u5728\u7eb8\u4e0a\u5199\u5199\u753b\u753b\u66f4\u5f62\u8c61\u3002 Python \u4ee3\u7801\uff1a class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution: def buildTree(self, inorder, postorder): \"\"\" :type inorder: List[int] :type postorder: List[int] :rtype: TreeNode \"\"\" assert len(inorder) == len(postorder) if len(inorder) == 0: return None if len(inorder) == 1: # \u8fd9\u91cc\u8981\u8fd4\u56de\u7ed3\u70b9\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u5177\u4f53\u7684\u6570 return TreeNode(inorder[0]) # \u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u662f\u6839\u7ed3\u70b9 root = TreeNode(postorder[-1]) pos = inorder.index(postorder[-1]) root.left = self.buildTree(inorder[:pos], postorder[:pos]) root.right = self.buildTree(inorder[pos + 1:], postorder[pos:-1]) return root # \u7528\u4e8e\u9a8c\u8bc1\u7684\u65b9\u6cd5 def validate(node): if node is None: return validate(node.left) print(node.val, end=' ') validate(node.right) if __name__ == '__main__': inorder = [9, 3, 15, 20, 7] postorder = [9, 15, 7, 20, 3] solution = Solution() root = solution.buildTree(inorder, postorder) validate(root) MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"LeetCode \u7b2c 106 \u9898\uff1a\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"},{"location":"07-/#7","text":"\u540c LeetCode \u7b2c 105 \u9898\uff0c\u4f20\u9001\u95e8\uff1a \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u3002 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u91cd\u5efa\u4e8c\u53c9\u6811 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u91cd\u5efa\u8be5\u4e8c\u53c9\u6811\u3002 \u6ce8\u610f : \u4e8c\u53c9\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u4e92\u4e0d\u76f8\u540c\uff1b \u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u4e00\u5b9a\u5408\u6cd5\uff1b \u6837\u4f8b\uff1a \u7ed9\u5b9a\uff1a \u524d\u5e8f\u904d\u5386\u662f\uff1a [3, 9, 20, 15, 7] \u4e2d\u5e8f\u904d\u5386\u662f\uff1a [9, 3, 15, 20, 7] \u8fd4\u56de\uff1a [3, 9, 20, null, null, 15, 7, null, null, null, null] \u8fd4\u56de\u7684\u4e8c\u53c9\u6811\u5982\u4e0b\u6240\u793a\uff1a 3 / \\ 9 20 / \\ 15 7 \u601d\u8def\u5206\u6790 \uff1a \u753b\u56fe\u662f\u89e3\u51b3\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u5173\u952e\uff0c\u5343\u4e07\u4e0d\u8981\u72af\u61d2\uff0c\u62ff\u51fa\u7eb8\u548c\u7b14\uff0c\u52a8\u624b\u64cd\u4f5c\u4e00\u4e0b\uff0c\u5f80\u5f80\u601d\u8def\u5c31\u5f88\u6e05\u6670\u4e86\uff1b \u7528\u7c7b\u4f3c\u4e8c\u53c9\u6811\u63d2\u5165\u8282\u70b9\u7684\u65b9\u5f0f\u5efa\u7acb\u4e8c\u53c9\u6811\uff0c\u5373\u4f7f\u7528\u9012\u5f52\u51fd\u6570\uff0c\u8fd4\u56de\u65b0\u521b\u5efa\u4e8c\u53c9\u6811\u6839\u8282\u70b9\u7684\u65b9\u5f0f\uff0c\u5c06\u65b0\u7684\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\u6302\u63a5\u5230\u539f\u6765\u7684\u4e8c\u53c9\u6811\u7684\u5de6\u53f3\u7ed3\u70b9\u4e2d\uff1b \u524d\u5e8f\u904d\u5386\u7684\u7b2c 1 \u4e2a\u5143\u7d20\u5c31\u662f\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\u3002\u6839\u636e\u8fd9\u4e00\u70b9\uff0c\u4e0d\u96be\u5199\u51fa\u9012\u5f52\u51fd\u6570\u7684\u4ee3\u7801\u3002\u6ce8\u610f\u8fd9\u662f\u4ee5\u201c\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u201d\u4e3a\u524d\u63d0\u7684\u3002 \u601d\u8def\uff1a\u9012\u5f52\u91cd\u5efa\u3002 \u4e8c\u53c9\u6811\u7684 DFS \u6709\u5982\u4e0b\u4e09\u79cd\u904d\u5386\u65b9\u5f0f\uff1a \u524d\u5e8f\u904d\u5386\uff1a\u5148\u8bbf\u95ee\u6839\u7ed3\u70b9\uff0c\u518d\u8bbf\u95ee\u5de6\u5b50\u7ed3\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u53f3\u5b50\u7ed3\u70b9\u3002 \u4e2d\u5e8f\u904d\u5386\uff1a\u5148\u8bbf\u95ee\u5de6\u5b50\u7ed3\u70b9\uff0c\u518d\u8bbf\u95ee\u6839\u7ed3\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u53f3\u5b50\u7ed3\u70b9\u3002 \u540e\u5e8f\u904d\u5386\uff1a\u5148\u8bbf\u95ee\u5de6\u5b50\u7ed3\u70b9\uff0c\u518d\u8bbf\u95ee\u53f3\u5b50\u7ed3\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u6839\u7ed3\u70b9\u3002 \u672c\u9898\u4e3a\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\uff0c\u6700\u5c11\u9700\u8981\u4e24\u79cd\u904d\u5386\u65b9\u5f0f\uff0c\u624d\u80fd\u91cd\u5efa\u4e8c\u53c9\u6811\u3002 \u5173\u952e\uff1a\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u7b2c $1$ \u4e2a\u6570\uff08\u7d22\u5f15\u4e3a $0$\uff09\u7684\u6570\u4e00\u5b9a\u662f\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u4e8e\u662f\u53ef\u4ee5\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u8fd9\u4e2a\u6839\u7ed3\u70b9\u7684\u7d22\u5f15\uff0c\u7136\u540e\u628a\u201c\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u201d\u548c\u201c\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u201d\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u5c31\u5206\u522b\u5bf9\u5e94\u4e8c\u53c9\u6811\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\uff0c\u5206\u522b\u9012\u5f52\u5b8c\u6210\u5c31\u53ef\u4ee5\u4e86\u3002 \u6ce8\u610f\uff1a1\u3001\u7f16\u5199\u9012\u5f52\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u5148\u5199\u7279\u6b8a\u60c5\u51b5\uff1b 2\u3001\u7d22\u5f15\u662f\u591a\u5c11\u4e0d\u597d\u5224\u65ad\u7684\u65f6\u5019\uff0c\u5e72\u8106\u5c31\u7528\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u5c31\u6bd4\u5982\u6211\u4e0a\u9762\u753b\u7684\u8fd9\u4e2a\u56fe\uff0c\u628a\u5177\u4f53\u7684\u6570\u6362\u6210\u6211\u4eec\u4f7f\u7528\u7684\u53d8\u91cf\uff0c\u8fd9\u6837\u601d\u8003\u7684\u96be\u5ea6\u4f1a\u964d\u4f4e\uff0c\u800c\u4e14\u8fd8\u4e0d\u5bb9\u6613\u51fa\u9519\u3002 Python \u4ee3\u7801\uff1a class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def buildTree(self, preorder, inorder): \"\"\" \u8fd4\u56de\u6784\u9020\u7684 TreeNode \u6839\u7ed3\u70b9 :type preorder: List[int] :type inorder: List[int] :rtype: TreeNode \"\"\" # \u5728\u7f16\u7801\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u5b9a\u8981\u4fdd\u8bc1 len(pre) == len(tin)\uff0c\u5426\u5219\u903b\u8f91\u4e00\u5b9a\u4e0d\u6b63\u786e if len(preorder) == 0: return None if len(preorder) == 1: # \u8fd9\u91cc\u8981\u8fd4\u56de\u7ed3\u70b9\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u5177\u4f53\u7684\u6570 return TreeNode(preorder[0]) root = TreeNode(preorder[0]) # \u76f4\u63a5\u5f97\u5230\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4e0b\u9762\u7b97\u597d\u504f\u79fb\u91cf\u5c31\u597d\u4e86\uff0c\u5982\u679c\u5bb9\u6613\u7b97\u9519\uff0c\u8bb0\u5f97\u62ff\u5177\u4f53\u4f8b\u5b50 pos = inorder.index(preorder[0]) root.left = self.buildTree(preorder[1:pos + 1], inorder[:pos]) root.right = self.buildTree(preorder[pos + 1:], inorder[pos + 1:]) return root Java \u4ee3\u7801\uff1a class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public TreeNode reConstructBinaryTree(int[] pre, int[] in) { TreeNode root = reConstructBinaryTree(pre, 0, pre.length - 1, in, 0, in.length - 1); return root; } /** * \u6839\u636e\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684 [preL, preR] \u548c \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684 [inL, inR] \u91cd\u65b0\u7ec4\u5efa\u4e8c\u53c9\u6811 * * @param pre \u524d\u5e8f\u904d\u5386\u6570\u7ec4 * @param preL \u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u5de6\u7aef\u70b9 * @param preR \u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u53f3\u7aef\u70b9 * @param in \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4 * @param inL \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u5de6\u7aef\u70b9 * @param inR \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u53f3\u7aef\u70b9 * @return \u6784\u5efa\u7684\u65b0\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9 */ private TreeNode reConstructBinaryTree(int[] pre, int preL, int preR, int[] in, int inL, int inR) { if (preL > preR || inL > inR) { return null; } // \u6784\u5efa\u7684\u65b0\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\u4e00\u5b9a\u662f\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u7b2c 1 \u4e2a\u5143\u7d20 TreeNode root = new TreeNode(pre[preL]); // \u4ece\u4e2d\u5e8f\u904d\u5386\u7684\u5de6\u533a\u95f4\u7aef\u70b9\u5f00\u59cb\u627e\uff0c\u627e\u5230\u548c\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u7b2c 1 \u4e2a\u5143\u7d20\u7684\u503c\u76f8\u7b49\u7684\u8282\u70b9 int i = inL; while (in[i] != pre[preL] && i <= inR) { i++; } // \u5728\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u4e2d\u904d\u5386\u4e86\u51e0\u4e2a\u5143\u7d20\uff1a i - inL // \u63a5\u4e0b\u6765\u5c31\u662f\u9012\u5f52\u8c03\u7528\uff0c\u5173\u952e\u7684\u5730\u65b9\u5728\u4e8e\u627e\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u548c\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u5bf9\u5e94\u7684\u533a\u95f4\u7684\u7aef\u70b9 root.left = reConstructBinaryTree(pre, preL + 1, preL + (i - inL), in, inL, i - 1); root.right = reConstructBinaryTree(pre, preL + (i - inL) + 1, preR, in, i + 1, inR); return root; } } \u7c7b\u4f3c\u95ee\u9898\uff1aLeetCode \u7b2c 106 \u9898\u3002","title":"\u7b2c 7 \u9898\uff1a\u91cd\u5efa\u4e8c\u53c9\u6811\uff08\u9012\u5f52\uff09"},{"location":"07-/#leetcode-106_1","text":"\u4f20\u9001\u95e8\uff1a 106. \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u3002 \u6839\u636e\u4e00\u68f5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e0e\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002 \u6ce8\u610f: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002 \u4f8b\u5982\uff0c\u7ed9\u51fa \u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7] \u540e\u5e8f\u904d\u5386 postorder = [9,15,7,20,3] \u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a 3 / \\ 9 20 / \\ 15 7 \u601d\u8def\uff1a\u4e8c\u53c9\u6811\u7684\u95ee\u9898\uff0c\u5728\u7eb8\u4e0a\u5199\u5199\u753b\u753b\u66f4\u5f62\u8c61\u3002 Python \u4ee3\u7801\uff1a class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution: def buildTree(self, inorder, postorder): assert len(inorder) == len(postorder) if len(inorder) == 0: return None if len(inorder) == 1: # \u8fd9\u91cc\u8981\u8fd4\u56de\u7ed3\u70b9\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u5177\u4f53\u7684\u6570 return TreeNode(inorder[0]) # \u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u662f\u6839\u7ed3\u70b9 root = TreeNode(postorder[-1]) pos = inorder.index(postorder[-1]) root.left = self.buildTree(inorder[:pos], postorder[:pos]) root.right = self.buildTree(inorder[pos + 1:], postorder[pos:-1]) return root # \u7528\u4e8e\u9a8c\u8bc1\u7684\u65b9\u6cd5 def validate(node): if node is None: return validate(node.left) print(node.val, end=' ') validate(node.right)","title":"LeetCode \u7b2c 106 \u9898\uff1a\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"},{"location":"07/","text":"\u5251\u6307 Offer 07. \u91cd\u5efa\u4e8c\u53c9\u6811 \u529b\u6263\uff1a \u5251\u6307 Offer 07. \u91cd\u5efa\u4e8c\u53c9\u6811 \uff1b \u540c LeetCode \u7b2c 105 \u9898\uff0c\u9898\u76ee\u94fe\u63a5\uff1a \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \uff1b AcWing\uff1a\u91cd\u5efa\u4e8c\u53c9\u6811 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u67d0\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u6784\u5efa\u8be5\u4e8c\u53c9\u6811\u5e76\u8fd4\u56de\u5176\u6839\u8282\u70b9\u3002 \u5047\u8bbe\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u3002 \u793a\u4f8b 1: Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7] Output: [3,9,20,null,null,15,7] \u793a\u4f8b 2: Input: preorder = [-1], inorder = [-1] Output: [-1] \u9650\u5236\uff1a 0 <= \u8282\u70b9\u4e2a\u6570 <= 5000 \u6ce8\u610f\uff1a\u672c\u9898\u4e0e\u4e3b\u7ad9 105 \u9898\u91cd\u590d\uff1ahttps://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/ \u53c2\u8003\u4ee3\u7801 \uff1a import java.util.HashMap; import java.util.Map; public class Solution { // \u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u662f\u4e3a\u4e86\u8ba9\u9012\u5f52\u65b9\u6cd5\u5c11\u4f20\u4e00\u4e9b\u53c2\u6570\uff0c\u4e0d\u4e00\u5b9a\u975e\u8981\u8fd9\u4e48\u505a private Map<Integer, Integer> reverses; private int[] preorder; public TreeNode buildTree(int[] preorder, int[] inorder) { int preLen = preorder.length; int inLen = inorder.length; // \u53ef\u4ee5\u4e0d\u505a\u5224\u65ad\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u6570\u636e\u90fd\u662f\u6709\u6548\u7684 if (preLen != inLen) { return null; } this.preorder = preorder; // \u4ee5\u7a7a\u95f4\u6362\u65f6\u95f4\uff0c\u5426\u5219\uff0c\u627e\u6839\u7ed3\u70b9\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u4f4d\u7f6e\u9700\u8981\u904d\u5386 reverses = new HashMap<>(inLen); for (int i = 0; i < inLen; i++) { reverses.put(inorder[i], i); } return buildTree(0, preLen - 1, 0, inLen - 1); } /** * \u6839\u636e\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684 [preL, preR] \u548c \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684 [inL, inR] \u91cd\u65b0\u7ec4\u5efa\u4e8c\u53c9\u6811 * * @param preL \u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u5de6\u7aef\u70b9 * @param preR \u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u53f3\u7aef\u70b9 * @param inL \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u5de6\u7aef\u70b9 * @param inR \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u53f3\u7aef\u70b9 * @return \u6784\u5efa\u7684\u65b0\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9 */ private TreeNode buildTree(int preL, int preR, int inL, int inR) { if (preL > preR || inL > inR) { return null; } // \u6784\u5efa\u7684\u65b0\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\u4e00\u5b9a\u662f\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u7b2c 1 \u4e2a\u5143\u7d20 int pivot = preorder[preL]; TreeNode root = new TreeNode(pivot); int pivotIndex = reverses.get(pivot); // \u8fd9\u4e00\u6b65\u5f97\u753b\u8349\u7a3f\uff0c\u8ba1\u7b97\u8fb9\u754c\u7684\u53d6\u503c\uff0c\u5fc5\u8981\u65f6\u9700\u8981\u89e3\u65b9\u7a0b\uff0c\u5e76\u4e0d\u96be root.left = buildTree(preL + 1, preL + (pivotIndex - inL), inL, pivotIndex - 1); root.right = buildTree(preL + (pivotIndex - inL) + 1, preR, pivotIndex + 1, inR); return root; } }","title":"\u5251\u6307 Offer 07. \u91cd\u5efa\u4e8c\u53c9\u6811"},{"location":"07/#offer-07","text":"\u529b\u6263\uff1a \u5251\u6307 Offer 07. \u91cd\u5efa\u4e8c\u53c9\u6811 \uff1b \u540c LeetCode \u7b2c 105 \u9898\uff0c\u9898\u76ee\u94fe\u63a5\uff1a \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \uff1b AcWing\uff1a\u91cd\u5efa\u4e8c\u53c9\u6811 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002","title":"\u5251\u6307 Offer 07. \u91cd\u5efa\u4e8c\u53c9\u6811"},{"location":"07/#_1","text":"\u8f93\u5165\u67d0\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u6784\u5efa\u8be5\u4e8c\u53c9\u6811\u5e76\u8fd4\u56de\u5176\u6839\u8282\u70b9\u3002 \u5047\u8bbe\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u3002 \u793a\u4f8b 1: Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7] Output: [3,9,20,null,null,15,7] \u793a\u4f8b 2: Input: preorder = [-1], inorder = [-1] Output: [-1] \u9650\u5236\uff1a 0 <= \u8282\u70b9\u4e2a\u6570 <= 5000 \u6ce8\u610f\uff1a\u672c\u9898\u4e0e\u4e3b\u7ad9 105 \u9898\u91cd\u590d\uff1ahttps://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/ \u53c2\u8003\u4ee3\u7801 \uff1a import java.util.HashMap; import java.util.Map; public class Solution { // \u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u662f\u4e3a\u4e86\u8ba9\u9012\u5f52\u65b9\u6cd5\u5c11\u4f20\u4e00\u4e9b\u53c2\u6570\uff0c\u4e0d\u4e00\u5b9a\u975e\u8981\u8fd9\u4e48\u505a private Map<Integer, Integer> reverses; private int[] preorder; public TreeNode buildTree(int[] preorder, int[] inorder) { int preLen = preorder.length; int inLen = inorder.length; // \u53ef\u4ee5\u4e0d\u505a\u5224\u65ad\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u6570\u636e\u90fd\u662f\u6709\u6548\u7684 if (preLen != inLen) { return null; } this.preorder = preorder; // \u4ee5\u7a7a\u95f4\u6362\u65f6\u95f4\uff0c\u5426\u5219\uff0c\u627e\u6839\u7ed3\u70b9\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u4f4d\u7f6e\u9700\u8981\u904d\u5386 reverses = new HashMap<>(inLen); for (int i = 0; i < inLen; i++) { reverses.put(inorder[i], i); } return buildTree(0, preLen - 1, 0, inLen - 1); } /** * \u6839\u636e\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684 [preL, preR] \u548c \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684 [inL, inR] \u91cd\u65b0\u7ec4\u5efa\u4e8c\u53c9\u6811 * * @param preL \u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u5de6\u7aef\u70b9 * @param preR \u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u53f3\u7aef\u70b9 * @param inL \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u5de6\u7aef\u70b9 * @param inR \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u53f3\u7aef\u70b9 * @return \u6784\u5efa\u7684\u65b0\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9 */ private TreeNode buildTree(int preL, int preR, int inL, int inR) { if (preL > preR || inL > inR) { return null; } // \u6784\u5efa\u7684\u65b0\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\u4e00\u5b9a\u662f\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u7b2c 1 \u4e2a\u5143\u7d20 int pivot = preorder[preL]; TreeNode root = new TreeNode(pivot); int pivotIndex = reverses.get(pivot); // \u8fd9\u4e00\u6b65\u5f97\u753b\u8349\u7a3f\uff0c\u8ba1\u7b97\u8fb9\u754c\u7684\u53d6\u503c\uff0c\u5fc5\u8981\u65f6\u9700\u8981\u89e3\u65b9\u7a0b\uff0c\u5e76\u4e0d\u96be root.left = buildTree(preL + 1, preL + (pivotIndex - inL), inL, pivotIndex - 1); root.right = buildTree(preL + (pivotIndex - inL) + 1, preR, pivotIndex + 1, inR); return root; } }","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"08-/","text":"\u7b2c 8 \u9898\uff1a\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u5176\u4e2d\u4e00\u4e2a\u8282\u70b9\uff0c\u8bf7\u627e\u51fa\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002 \u6ce8\u610f\uff1a \u5982\u679c\u7ed9\u5b9a\u7684\u8282\u70b9\u662f\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u5219\u8fd4\u56de\u7a7a\u8282\u70b9; \u4e8c\u53c9\u6811\u4e00\u5b9a\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u7ed9\u5b9a\u7684\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u7a7a\u8282\u70b9\uff1b \u6837\u4f8b\uff1a \u5047\u5b9a\u4e8c\u53c9\u6811\u662f\uff1a [2, 1, 3, null, null, null, null] \uff0c \u7ed9\u51fa\u7684\u662f\u503c\u7b49\u4e8e 2 \u7684\u8282\u70b9\u3002 \u5219\u5e94\u8fd4\u56de\u503c\u7b49\u4e8e3\u7684\u8282\u70b9\u3002 \u89e3\u91ca\uff1a\u8be5\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u5982\u4e0b\uff0c2 \u7684\u540e\u7ee7\u8282\u70b9\u662f 3 \u3002 2 / \\ 1 3 \u601d\u8def\uff1a\u7528\u300a\u7b97\u5bfc\u300b\u4e2d\u63d0\u51fa\u7684\u65b9\u6cd5\uff0c\u753b\u56fe\u5206\u6790\uff0c\u628a\u8981\u5206\u7c7b\u8ba8\u8bba\u7684\u60c5\u51b5\u5206\u6790\u6e05\u695a\uff0c\u7f16\u7801\u5c31\u5f88\u5bb9\u6613\u4e86\u3002\u8fd9\u9053\u9898\u7684\u5173\u952e\u5728\u4e8e\uff1a \u770b\u662f\u5426\u6709\u53f3\u5b50\u6811 \u3002 \u753b\u4e2a\u6e05\u695a\u7684\u56fe\u5e2e\u52a9\u7406\u89e3\uff1a Python \u4ee3\u7801\uff1a class Solution(object): def inorderSuccessor(self, q): \"\"\" :type q: TreeNode :rtype: TreeNode \"\"\" if q is None: return None # \u5206\u7c7b\u8ba8\u8bba1\uff1a\u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u6709\u53f3\u5b50\u6811\uff0c\u8fd4\u56de\u8fd9\u4e2a\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u8005 if q.right: node = q.right while node.left: node = node.left return node # \u5206\u7c7b\u8ba8\u8bba2\uff1a\u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u6ca1\u6709\u53f3\u5b50\u6811\uff0c\u5411\u4e0a\u8ffd\u6eaf\uff0c\u8ffd\u5230\u7236\u4eb2\u7ed3\u70b9\u7684\u5de6\u7ed3\u70b9\u662f\u81ea\u5df1 while q.father: if q.father.left == q: return q.father q = q.father return None","title":"08 "},{"location":"08-/#8","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u5176\u4e2d\u4e00\u4e2a\u8282\u70b9\uff0c\u8bf7\u627e\u51fa\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002 \u6ce8\u610f\uff1a \u5982\u679c\u7ed9\u5b9a\u7684\u8282\u70b9\u662f\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u5219\u8fd4\u56de\u7a7a\u8282\u70b9; \u4e8c\u53c9\u6811\u4e00\u5b9a\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u7ed9\u5b9a\u7684\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u7a7a\u8282\u70b9\uff1b \u6837\u4f8b\uff1a \u5047\u5b9a\u4e8c\u53c9\u6811\u662f\uff1a [2, 1, 3, null, null, null, null] \uff0c \u7ed9\u51fa\u7684\u662f\u503c\u7b49\u4e8e 2 \u7684\u8282\u70b9\u3002 \u5219\u5e94\u8fd4\u56de\u503c\u7b49\u4e8e3\u7684\u8282\u70b9\u3002 \u89e3\u91ca\uff1a\u8be5\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u5982\u4e0b\uff0c2 \u7684\u540e\u7ee7\u8282\u70b9\u662f 3 \u3002 2 / \\ 1 3 \u601d\u8def\uff1a\u7528\u300a\u7b97\u5bfc\u300b\u4e2d\u63d0\u51fa\u7684\u65b9\u6cd5\uff0c\u753b\u56fe\u5206\u6790\uff0c\u628a\u8981\u5206\u7c7b\u8ba8\u8bba\u7684\u60c5\u51b5\u5206\u6790\u6e05\u695a\uff0c\u7f16\u7801\u5c31\u5f88\u5bb9\u6613\u4e86\u3002\u8fd9\u9053\u9898\u7684\u5173\u952e\u5728\u4e8e\uff1a \u770b\u662f\u5426\u6709\u53f3\u5b50\u6811 \u3002 \u753b\u4e2a\u6e05\u695a\u7684\u56fe\u5e2e\u52a9\u7406\u89e3\uff1a Python \u4ee3\u7801\uff1a class Solution(object): def inorderSuccessor(self, q): \"\"\" :type q: TreeNode :rtype: TreeNode \"\"\" if q is None: return None # \u5206\u7c7b\u8ba8\u8bba1\uff1a\u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u6709\u53f3\u5b50\u6811\uff0c\u8fd4\u56de\u8fd9\u4e2a\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u8005 if q.right: node = q.right while node.left: node = node.left return node # \u5206\u7c7b\u8ba8\u8bba2\uff1a\u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u6ca1\u6709\u53f3\u5b50\u6811\uff0c\u5411\u4e0a\u8ffd\u6eaf\uff0c\u8ffd\u5230\u7236\u4eb2\u7ed3\u70b9\u7684\u5de6\u7ed3\u70b9\u662f\u81ea\u5df1 while q.father: if q.father.left == q: return q.father q = q.father return None","title":"\u7b2c 8 \u9898\uff1a\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9"},{"location":"08/","text":"\u5251\u6307 Offer 08. \u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u5176\u4e2d\u4e00\u4e2a\u8282\u70b9\uff0c\u8bf7\u627e\u51fa\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002 \u6ce8\u610f\uff1a \u5982\u679c\u7ed9\u5b9a\u7684\u8282\u70b9\u662f\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u5219\u8fd4\u56de\u7a7a\u8282\u70b9; \u4e8c\u53c9\u6811\u4e00\u5b9a\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u7ed9\u5b9a\u7684\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u7a7a\u8282\u70b9\uff1b \u6837\u4f8b\uff1a \u5047\u5b9a\u4e8c\u53c9\u6811\u662f\uff1a [2, 1, 3, null, null, null, null] \uff0c \u7ed9\u51fa\u7684\u662f\u503c\u7b49\u4e8e 2 \u7684\u8282\u70b9\u3002 \u5219\u5e94\u8fd4\u56de\u503c\u7b49\u4e8e3\u7684\u8282\u70b9\u3002 \u89e3\u91ca\uff1a\u8be5\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u5982\u4e0b\uff0c2 \u7684\u540e\u7ee7\u8282\u70b9\u662f 3 \u3002 2 / \\ 1 3 \u601d\u8def\u5206\u6790 \u7528\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u4e2d\u63d0\u51fa\u7684\u65b9\u6cd5\uff0c\u753b\u56fe\u5206\u6790\uff0c\u628a\u8981\u5206\u7c7b\u8ba8\u8bba\u7684\u60c5\u51b5\u5206\u6790\u6e05\u695a\uff0c\u7f16\u7801\u5c31\u5f88\u5bb9\u6613\u4e86\u3002\u8fd9\u9053\u9898\u7684\u5173\u952e\u5728\u4e8e\uff1a \u770b\u662f\u5426\u6709\u53f3\u5b50\u6811 \u3002 \u753b\u4e2a\u6e05\u695a\u7684\u56fe\u5e2e\u52a9\u7406\u89e3\uff1a Python \u4ee3\u7801\uff1a class Solution(object): def inorderSuccessor(self, q): \"\"\" :type q: TreeNode :rtype: TreeNode \"\"\" if q is None: return None # \u5206\u7c7b\u8ba8\u8bba1\uff1a\u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u6709\u53f3\u5b50\u6811\uff0c\u8fd4\u56de\u8fd9\u4e2a\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u8005 if q.right: node = q.right while node.left: node = node.left return node # \u5206\u7c7b\u8ba8\u8bba2\uff1a\u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u6ca1\u6709\u53f3\u5b50\u6811\uff0c\u5411\u4e0a\u8ffd\u6eaf\uff0c\u8ffd\u5230\u7236\u4eb2\u7ed3\u70b9\u7684\u5de6\u7ed3\u70b9\u662f\u81ea\u5df1 while q.father: if q.father.left == q: return q.father q = q.father return None","title":"\u5251\u6307 Offer 08. \u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9"},{"location":"08/#offer-08","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002","title":"\u5251\u6307 Offer 08. \u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9"},{"location":"08/#_1","text":"\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u5176\u4e2d\u4e00\u4e2a\u8282\u70b9\uff0c\u8bf7\u627e\u51fa\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002 \u6ce8\u610f\uff1a \u5982\u679c\u7ed9\u5b9a\u7684\u8282\u70b9\u662f\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u5219\u8fd4\u56de\u7a7a\u8282\u70b9; \u4e8c\u53c9\u6811\u4e00\u5b9a\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u7ed9\u5b9a\u7684\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u7a7a\u8282\u70b9\uff1b \u6837\u4f8b\uff1a \u5047\u5b9a\u4e8c\u53c9\u6811\u662f\uff1a [2, 1, 3, null, null, null, null] \uff0c \u7ed9\u51fa\u7684\u662f\u503c\u7b49\u4e8e 2 \u7684\u8282\u70b9\u3002 \u5219\u5e94\u8fd4\u56de\u503c\u7b49\u4e8e3\u7684\u8282\u70b9\u3002 \u89e3\u91ca\uff1a\u8be5\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u5982\u4e0b\uff0c2 \u7684\u540e\u7ee7\u8282\u70b9\u662f 3 \u3002 2 / \\ 1 3","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"08/#_2","text":"\u7528\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u4e2d\u63d0\u51fa\u7684\u65b9\u6cd5\uff0c\u753b\u56fe\u5206\u6790\uff0c\u628a\u8981\u5206\u7c7b\u8ba8\u8bba\u7684\u60c5\u51b5\u5206\u6790\u6e05\u695a\uff0c\u7f16\u7801\u5c31\u5f88\u5bb9\u6613\u4e86\u3002\u8fd9\u9053\u9898\u7684\u5173\u952e\u5728\u4e8e\uff1a \u770b\u662f\u5426\u6709\u53f3\u5b50\u6811 \u3002 \u753b\u4e2a\u6e05\u695a\u7684\u56fe\u5e2e\u52a9\u7406\u89e3\uff1a Python \u4ee3\u7801\uff1a class Solution(object): def inorderSuccessor(self, q): \"\"\" :type q: TreeNode :rtype: TreeNode \"\"\" if q is None: return None # \u5206\u7c7b\u8ba8\u8bba1\uff1a\u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u6709\u53f3\u5b50\u6811\uff0c\u8fd4\u56de\u8fd9\u4e2a\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u8005 if q.right: node = q.right while node.left: node = node.left return node # \u5206\u7c7b\u8ba8\u8bba2\uff1a\u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u6ca1\u6709\u53f3\u5b50\u6811\uff0c\u5411\u4e0a\u8ffd\u6eaf\uff0c\u8ffd\u5230\u7236\u4eb2\u7ed3\u70b9\u7684\u5de6\u7ed3\u70b9\u662f\u81ea\u5df1 while q.father: if q.father.left == q: return q.father q = q.father return None","title":"\u601d\u8def\u5206\u6790"},{"location":"09-/","text":"\u5206\u6790\uff1a+ \u76f8\u5173\u7684\u7ec3\u4e60\u8fd8\u6709 LeetCode \u7b2c 232 \u9898\uff0c\u8fd8\u6709\u7b2c 225 \u9898\u3002 + \u5728\u8fd9\u91cc\u6211\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u201c\u4e0a\u4e00\u6b21\u7684\u64cd\u4f5c\u201d\u4f5c\u4e3a\u72b6\u6001\u3002\u5177\u4f53\u5e94\u7528\u5982\u4e0b\uff1a \u5982\u679c\u201c\u4e0a\u4e00\u6b21\u7684\u64cd\u4f5c\u201d\u662f push\uff1a 1\u3001\u6211\u7ee7\u7eed push \u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u5f80\u6808\u91cc\u5b58\u6570\u636e\uff1b 2\u3001\u4f46\u662f\u5982\u679c\u6211 pop \u7684\u8bdd\uff0c\u5c31\u8981\u628a\u201c\u6808\u5e95\u201d\u7684\u5143\u7d20\u62ff\u51fa\u6765\uff0c\u62ff\u51fa\u4e4b\u524d\uff0c\u8981\u628a\u201c\u6808\u5e95\u201d\u4ee5\u4e0a\u7684\u6240\u6709\u5143\u7d20\u5f39\u51fa\u5230\u53e6\u4e00\u4e2a\u6808\u4e2d\u3002\u6b64\u65f6\uff0c\u5982\u679c\u7ee7\u7eed\u51fa\u961f\u7684\u8bdd\uff0c\u5c31\u4ece\u4e34\u65f6\u6808\u4e2d\u9646\u7eed\u5f39\u51fa\u201c\u6808\u9876\u201d\u5143\u7d20\u5c31\u53ef\u4ee5\u4e86\u3002 \u5982\u679c\u201c\u4e0a\u4e00\u6b21\u7684\u64cd\u4f5c\u201d\u662f pop\uff1a 1\u3001\u5982\u679c\u6211\u7ee7\u7eed pop\uff0c\u56e0\u4e3a\u5728\u4e0a\u4e00\u6b21 pop \u7684\u65f6\u5019\uff0c\u5c31\u628a\u4e4b\u524d\u90a3\u4e2a\u6808\u4e2d\u7684\u5143\u7d20\u5168\u90e8\u5f39\u51fa\u5230\u4e00\u4e2a\u65b0\u7684\u6808\uff0c\u6b64\u65f6\u8fd9\u4e2a\u65b0\u6808\u7ee7\u7eed\u5f39\u51fa\u201c\u6808\u9876\u201d\u5143\u7d20\uff0c\u5176\u5b9e\u5c31\u662f\u539f\u6765\u5165\u961f\u7684\u987a\u5e8f\uff1b 2\u3001\u5982\u679c\u6211 push\uff0c\u5c31\u5f97\u6062\u590d\u4e4b\u524d\u5165\u961f\u7684\u987a\u5e8f\uff0c\u56e0\u6b64\uff0c\u8981\u628a\u8fd9\u4e2a\u6808\u4e2d\u7684\u6570\u636e\u5168\u90e8\u5f39\u51fa\u5230\u4e4b\u524d\u5165\u961f\u7684\u90a3\u4e2a\u6808\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u53ef\u4ee5\u51c6\u5907\u4e24\u4e2a\u6808 stack1 \u548c stack2 \uff1a 1\u3001\u4f7f\u7528 stack1 \u4e13\u95e8\u7528\u4e8e push \u7684\u65f6\u5019\u7528\uff0c\u8981\u201c\u51fa\u961f\u201d\u4e4b\u524d\uff0c\u5168\u90e8\u5f39\u51fa\u5230 stack2\uff0c\u4ece stack2 \u5f39\u51fa \uff1b 2\u3001\u4f7f\u7528 stack2 \u4e13\u95e8\u7528\u4e8e pop \u7684\u65f6\u5019\u7528\uff0c\u8981\u201c\u5165\u961f\u201d\u4e4b\u524d\uff0c\u5168\u90e8\u5f39\u51fa\u5230 stack1\uff0c\u4ece stack1 \u538b\u5165 \u3002 Java \u4ee3\u7801\uff1a import java.util.Stack; public class Solution { /** * \u4e13\u95e8 push \u7684\u65f6\u5019\u7528 */ private Stack<Integer> stack1 = new Stack<Integer>(); /** * \u4e13\u95e8 pop \u7684\u65f6\u5019\u7528 */ private Stack<Integer> stack2 = new Stack<Integer>(); private State lastState = State.PUSH; enum State { PUSH, POP } public void push(int node) { if (lastState == State.PUSH) { stack1.add(node); } else { assert lastState == State.POP; // \u5982\u679c\u4e0a\u4e00\u6b65\u662f pop \u7684\u8bdd\uff0c while (!stack2.isEmpty()) { stack1.add(stack2.pop()); } stack1.add(node); lastState = State.PUSH; } } public int pop() { if (lastState == State.POP) { if (stack2.empty()) { throw new IllegalArgumentException(\"queue is empty\"); } return stack2.pop(); } else { // \u5982\u679c\u4e0a\u4e00\u6b65\u662f PUSH \u7684\u8bdd while (!stack1.empty()) { stack2.add(stack1.pop()); } lastState = State.POP; return stack2.pop(); } } } \u6ce8\u610f\uff1a\u4e0b\u9762\u8fd9\u4e2a\u903b\u8f91\u662f\u9519\u7684\uff0c\u5e94\u8be5\u662f\u53ea\u8981 stack2 \u662f\u7a7a\u7684\uff0c\u624d\u628a stack1 \u7684\u5143\u7d20\u5168\u90e8\u642c\u5230 stack2\uff0c\u8fd9\u91cc\u8981\u5c0f\u5fc3\u3002 def __shift(self): if self.stack1: while self.stack1: self.stack2.append(self.stack1.pop()) Python \u4ee3\u7801\uff1a class MyQueue(object): def __init__(self): \"\"\" Initialize your data structure here. \"\"\" self.stack1 = [] self.stack2 = [] def push(self, x): \"\"\" Push element x to the back of queue. :type x: int :rtype: void \"\"\" self.stack1.append(x) def __shift(self): if len(self.stack2) == 0: while self.stack1: self.stack2.append(self.stack1.pop()) def pop(self): \"\"\" Removes the element from in front of queue and returns that element. :rtype: int \"\"\" self.__shift() return self.stack2.pop() def peek(self): \"\"\" Get the front element. :rtype: int \"\"\" self.__shift() return self.stack2[-1] def empty(self): \"\"\" Returns whether the queue is empty. :rtype: bool \"\"\" return len(self.stack1) == 0 and len(self.stack2) == 0 # Your MyQueue object will be instantiated and called as such: # obj = MyQueue() # obj.push(x) # param_2 = obj.pop() # param_3 = obj.peek() # param_4 = obj.empty() MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } }); \u7b2c 9-1 \u9898\uff1a\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u7528\u6808\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\uff0c\u652f\u6301\u5982\u4e0b\u56db\u79cd\u64cd\u4f5c\uff1a push(x) \u2013 \u5c06\u5143\u7d20x\u63d2\u5230\u961f\u5c3e\uff1b pop() \u2013 \u5c06\u961f\u9996\u7684\u5143\u7d20\u5f39\u51fa\uff0c\u5e76\u8fd4\u56de\u8be5\u5143\u7d20\uff1b peek() \u2013 \u8fd4\u56de\u961f\u9996\u5143\u7d20\uff1b empty() \u2013 \u8fd4\u56de\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff1b \u6ce8\u610f\uff1a \u4f60\u53ea\u80fd\u4f7f\u7528\u6808\u7684\u6807\u51c6\u64cd\u4f5c\uff1a push to top \uff0c peek/pop from top , size \u548c is empty \uff1b \u5982\u679c\u4f60\u9009\u62e9\u7684\u7f16\u7a0b\u8bed\u8a00\u6ca1\u6709\u6808\u7684\u6807\u51c6\u5e93\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528list\u6216\u8005deque\u7b49\u6a21\u62df\u6808\u7684\u64cd\u4f5c\uff1b \u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u5408\u6cd5\uff0c\u4f8b\u5982\uff0c\u5728\u961f\u5217\u4e3a\u7a7a\u65f6\uff0c\u4e0d\u4f1a\u8fdb\u884c pop \u6216\u8005 peek \u7b49\u64cd\u4f5c\uff1b \u6837\u4f8b ``` MyQueue queue = new MyQueue(); queue.push(1); queue.push(2); queue.peek(); // returns 1 queue.pop(); // returns 1 queue.empty(); // returns false ``` \u5206\u6790\uff1a+ \u76f8\u5173\u7684\u7ec3\u4e60\u8fd8\u6709 LeetCode \u7b2c 232 \u9898\uff0c\u8fd8\u6709\u7b2c 225 \u9898\u3002 + \u5728\u8fd9\u91cc\u6211\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u201c\u4e0a\u4e00\u6b21\u7684\u64cd\u4f5c\u201d\u4f5c\u4e3a\u72b6\u6001\u3002\u5177\u4f53\u5e94\u7528\u5982\u4e0b\uff1a \u5982\u679c\u201c\u4e0a\u4e00\u6b21\u7684\u64cd\u4f5c\u201d\u662f push\uff1a 1\u3001\u6211\u7ee7\u7eed push \u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u5f80\u6808\u91cc\u5b58\u6570\u636e\uff1b 2\u3001\u4f46\u662f\u5982\u679c\u6211 pop \u7684\u8bdd\uff0c\u5c31\u8981\u628a\u201c\u6808\u5e95\u201d\u7684\u5143\u7d20\u62ff\u51fa\u6765\uff0c\u62ff\u51fa\u4e4b\u524d\uff0c\u8981\u628a\u201c\u6808\u5e95\u201d\u4ee5\u4e0a\u7684\u6240\u6709\u5143\u7d20\u5f39\u51fa\u5230\u53e6\u4e00\u4e2a\u6808\u4e2d\u3002\u6b64\u65f6\uff0c\u5982\u679c\u7ee7\u7eed\u51fa\u961f\u7684\u8bdd\uff0c\u5c31\u4ece\u4e34\u65f6\u6808\u4e2d\u9646\u7eed\u5f39\u51fa\u201c\u6808\u9876\u201d\u5143\u7d20\u5c31\u53ef\u4ee5\u4e86\u3002 \u5982\u679c\u201c\u4e0a\u4e00\u6b21\u7684\u64cd\u4f5c\u201d\u662f pop\uff1a 1\u3001\u5982\u679c\u6211\u7ee7\u7eed pop\uff0c\u56e0\u4e3a\u5728\u4e0a\u4e00\u6b21 pop \u7684\u65f6\u5019\uff0c\u5c31\u628a\u4e4b\u524d\u90a3\u4e2a\u6808\u4e2d\u7684\u5143\u7d20\u5168\u90e8\u5f39\u51fa\u5230\u4e00\u4e2a\u65b0\u7684\u6808\uff0c\u6b64\u65f6\u8fd9\u4e2a\u65b0\u6808\u7ee7\u7eed\u5f39\u51fa\u201c\u6808\u9876\u201d\u5143\u7d20\uff0c\u5176\u5b9e\u5c31\u662f\u539f\u6765\u5165\u961f\u7684\u987a\u5e8f\uff1b 2\u3001\u5982\u679c\u6211 push\uff0c\u5c31\u5f97\u6062\u590d\u4e4b\u524d\u5165\u961f\u7684\u987a\u5e8f\uff0c\u56e0\u6b64\uff0c\u8981\u628a\u8fd9\u4e2a\u6808\u4e2d\u7684\u6570\u636e\u5168\u90e8\u5f39\u51fa\u5230\u4e4b\u524d\u5165\u961f\u7684\u90a3\u4e2a\u6808\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u53ef\u4ee5\u51c6\u5907\u4e24\u4e2a\u6808 stack1 \u548c stack2 \uff1a 1\u3001\u4f7f\u7528 stack1 \u4e13\u95e8\u7528\u4e8e push \u7684\u65f6\u5019\u7528\uff0c\u8981\u201c\u51fa\u961f\u201d\u4e4b\u524d\uff0c\u5168\u90e8\u5f39\u51fa\u5230 stack2\uff0c\u4ece stack2 \u5f39\u51fa \uff1b 2\u3001\u4f7f\u7528 stack2 \u4e13\u95e8\u7528\u4e8e pop \u7684\u65f6\u5019\u7528\uff0c\u8981\u201c\u5165\u961f\u201d\u4e4b\u524d\uff0c\u5168\u90e8\u5f39\u51fa\u5230 stack1\uff0c\u4ece stack1 \u538b\u5165 \u3002 Java \u4ee3\u7801\uff1a import java.util.Stack; public class Solution { /** * \u4e13\u95e8 push \u7684\u65f6\u5019\u7528 */ private Stack<Integer> stack1 = new Stack<Integer>(); /** * \u4e13\u95e8 pop \u7684\u65f6\u5019\u7528 */ private Stack<Integer> stack2 = new Stack<Integer>(); private State lastState = State.PUSH; enum State { PUSH, POP } public void push(int node) { if (lastState == State.PUSH) { stack1.add(node); } else { assert lastState == State.POP; // \u5982\u679c\u4e0a\u4e00\u6b65\u662f pop \u7684\u8bdd\uff0c while (!stack2.isEmpty()) { stack1.add(stack2.pop()); } stack1.add(node); lastState = State.PUSH; } } public int pop() { if (lastState == State.POP) { if (stack2.empty()) { throw new IllegalArgumentException(\"queue is empty\"); } return stack2.pop(); } else { // \u5982\u679c\u4e0a\u4e00\u6b65\u662f PUSH \u7684\u8bdd while (!stack1.empty()) { stack2.add(stack1.pop()); } lastState = State.POP; return stack2.pop(); } } } \u6ce8\u610f\uff1a\u4e0b\u9762\u8fd9\u4e2a\u903b\u8f91\u662f\u9519\u7684\uff0c\u5e94\u8be5\u662f\u53ea\u8981 stack2 \u662f\u7a7a\u7684\uff0c\u624d\u628a stack1 \u7684\u5143\u7d20\u5168\u90e8\u642c\u5230 stack2\uff0c\u8fd9\u91cc\u8981\u5c0f\u5fc3\u3002 def __shift(self): if self.stack1: while self.stack1: self.stack2.append(self.stack1.pop()) Python \u4ee3\u7801\uff1a class MyQueue(object): def __init__(self): \"\"\" Initialize your data structure here. \"\"\" self.stack1 = [] self.stack2 = [] def push(self, x): \"\"\" Push element x to the back of queue. :type x: int :rtype: void \"\"\" self.stack1.append(x) def __shift(self): if len(self.stack2) == 0: while self.stack1: self.stack2.append(self.stack1.pop()) def pop(self): \"\"\" Removes the element from in front of queue and returns that element. :rtype: int \"\"\" self.__shift() return self.stack2.pop() def peek(self): \"\"\" Get the front element. :rtype: int \"\"\" self.__shift() return self.stack2[-1] def empty(self): \"\"\" Returns whether the queue is empty. :rtype: bool \"\"\" return len(self.stack1) == 0 and len(self.stack2) == 0 # Your MyQueue object will be instantiated and called as such: # obj = MyQueue() # obj.push(x) # param_2 = obj.pop() # param_3 = obj.peek() # param_4 = obj.empty() \u7b2c 9-2 \u9898\uff1a\u7528\u961f\u5217\u5b9e\u73b0\u6808 \u540c LeetCode \u7b2c 225 \u9898\u3002 \u4f20\u9001\u95e8\uff1a 225. \u7528\u961f\u5217\u5b9e\u73b0\u6808 \u4f7f\u7528\u961f\u5217\u5b9e\u73b0\u6808\u7684\u4e0b\u5217\u64cd\u4f5c\uff1a push(x) -- \u5143\u7d20 x \u5165\u6808 pop() -- \u79fb\u9664\u6808\u9876\u5143\u7d20 top() -- \u83b7\u53d6\u6808\u9876\u5143\u7d20 empty() -- \u8fd4\u56de\u6808\u662f\u5426\u4e3a\u7a7a \u6ce8\u610f: \u4f60\u53ea\u80fd\u4f7f\u7528\u961f\u5217\u7684\u57fa\u672c\u64cd\u4f5c-- \u4e5f\u5c31\u662f push to back , peek/pop from front , size , \u548c is empty \u8fd9\u4e9b\u64cd\u4f5c\u662f\u5408\u6cd5\u7684\u3002 \u4f60\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u4e5f\u8bb8\u4e0d\u652f\u6301\u961f\u5217\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 list \u6216\u8005 deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u6765\u6a21\u62df\u4e00\u4e2a\u961f\u5217 , \u53ea\u8981\u662f\u6807\u51c6\u7684\u961f\u5217\u64cd\u4f5c\u5373\u53ef\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684\uff08\u4f8b\u5982, \u5bf9\u4e00\u4e2a\u7a7a\u7684\u6808\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 top \u64cd\u4f5c\uff09\u3002 Python \u4ee3\u7801\uff1a class MyStack: def __init__(self): \"\"\" Initialize your data structure here. \"\"\" self.queue = [] def push(self, x): \"\"\" Push element x onto stack. :type x: int :rtype: void \"\"\" self.queue.append(x) # \u5c06\u961f\u5217\u4e2d\u524d\u9762\u5df2\u7ecf\u9006\u5e8f\u7684\u5143\u7d20\u653e\u5728 x \u5143\u7d20\u540e\u9762\uff0c\u4f7f\u5f97\u6574\u4f53\u9006\u5e8f for _ in range(len(self.queue) - 1): ele = self.queue.pop(0) self.queue.append(ele) def pop(self): \"\"\" Removes the element on top of the stack and returns that element. :rtype: int \"\"\" if self.queue: return self.queue.pop(0) def top(self): \"\"\" Get the top element. :rtype: int \"\"\" if self.queue: return self.queue[0] def empty(self): \"\"\" Returns whether the stack is empty. :rtype: bool \"\"\" return len(self.queue) == 0 # Your MyStack object will be instantiated and called as such: # obj = MyStack() # obj.push(x) # param_2 = obj.pop() # param_3 = obj.top() # param_4 = obj.empty() [\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 9-2 \u9898] \u201c\u7528\u961f\u5217\u5b9e\u73b0\u6808\u201d\u505a\u9898\u8bb0\u5f55 \u7b2c 9-2 \u9898\uff1a\u7528\u961f\u5217\u5b9e\u73b0\u6808 \u540c LeetCode \u7b2c 225 \u9898\u3002 \u4f20\u9001\u95e8\uff1a 225. \u7528\u961f\u5217\u5b9e\u73b0\u6808 \u4f7f\u7528\u961f\u5217\u5b9e\u73b0\u6808\u7684\u4e0b\u5217\u64cd\u4f5c\uff1a push(x) -- \u5143\u7d20 x \u5165\u6808 pop() -- \u79fb\u9664\u6808\u9876\u5143\u7d20 top() -- \u83b7\u53d6\u6808\u9876\u5143\u7d20 empty() -- \u8fd4\u56de\u6808\u662f\u5426\u4e3a\u7a7a \u6ce8\u610f: \u4f60\u53ea\u80fd\u4f7f\u7528\u961f\u5217\u7684\u57fa\u672c\u64cd\u4f5c-- \u4e5f\u5c31\u662f push to back , peek/pop from front , size , \u548c is empty \u8fd9\u4e9b\u64cd\u4f5c\u662f\u5408\u6cd5\u7684\u3002 \u4f60\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u4e5f\u8bb8\u4e0d\u652f\u6301\u961f\u5217\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 list \u6216\u8005 deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u6765\u6a21\u62df\u4e00\u4e2a\u961f\u5217 , \u53ea\u8981\u662f\u6807\u51c6\u7684\u961f\u5217\u64cd\u4f5c\u5373\u53ef\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684\uff08\u4f8b\u5982, \u5bf9\u4e00\u4e2a\u7a7a\u7684\u6808\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 top \u64cd\u4f5c\uff09\u3002 Python \u4ee3\u7801\uff1a class MyStack: def __init__(self): \"\"\" Initialize your data structure here. \"\"\" self.queue = [] def push(self, x): \"\"\" Push element x onto stack. :type x: int :rtype: void \"\"\" self.queue.append(x) # \u5c06\u961f\u5217\u4e2d\u524d\u9762\u5df2\u7ecf\u9006\u5e8f\u7684\u5143\u7d20\u653e\u5728 x \u5143\u7d20\u540e\u9762\uff0c\u4f7f\u5f97\u6574\u4f53\u9006\u5e8f for _ in range(len(self.queue) - 1): ele = self.queue.pop(0) self.queue.append(ele) def pop(self): \"\"\" Removes the element on top of the stack and returns that element. :rtype: int \"\"\" if self.queue: return self.queue.pop(0) def top(self): \"\"\" Get the top element. :rtype: int \"\"\" if self.queue: return self.queue[0] def empty(self): \"\"\" Returns whether the stack is empty. :rtype: bool \"\"\" return len(self.queue) == 0 # Your MyStack object will be instantiated and called as such: # obj = MyStack() # obj.push(x) # param_2 = obj.pop() # param_3 = obj.top() # param_4 = obj.empty() MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"09 "},{"location":"09-/#9-1","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u7528\u6808\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\uff0c\u652f\u6301\u5982\u4e0b\u56db\u79cd\u64cd\u4f5c\uff1a push(x) \u2013 \u5c06\u5143\u7d20x\u63d2\u5230\u961f\u5c3e\uff1b pop() \u2013 \u5c06\u961f\u9996\u7684\u5143\u7d20\u5f39\u51fa\uff0c\u5e76\u8fd4\u56de\u8be5\u5143\u7d20\uff1b peek() \u2013 \u8fd4\u56de\u961f\u9996\u5143\u7d20\uff1b empty() \u2013 \u8fd4\u56de\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff1b \u6ce8\u610f\uff1a \u4f60\u53ea\u80fd\u4f7f\u7528\u6808\u7684\u6807\u51c6\u64cd\u4f5c\uff1a push to top \uff0c peek/pop from top , size \u548c is empty \uff1b \u5982\u679c\u4f60\u9009\u62e9\u7684\u7f16\u7a0b\u8bed\u8a00\u6ca1\u6709\u6808\u7684\u6807\u51c6\u5e93\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528list\u6216\u8005deque\u7b49\u6a21\u62df\u6808\u7684\u64cd\u4f5c\uff1b \u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u5408\u6cd5\uff0c\u4f8b\u5982\uff0c\u5728\u961f\u5217\u4e3a\u7a7a\u65f6\uff0c\u4e0d\u4f1a\u8fdb\u884c pop \u6216\u8005 peek \u7b49\u64cd\u4f5c\uff1b \u6837\u4f8b ``` MyQueue queue = new MyQueue(); queue.push(1); queue.push(2); queue.peek(); // returns 1 queue.pop(); // returns 1 queue.empty(); // returns false ``` \u5206\u6790\uff1a+ \u76f8\u5173\u7684\u7ec3\u4e60\u8fd8\u6709 LeetCode \u7b2c 232 \u9898\uff0c\u8fd8\u6709\u7b2c 225 \u9898\u3002 + \u5728\u8fd9\u91cc\u6211\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u201c\u4e0a\u4e00\u6b21\u7684\u64cd\u4f5c\u201d\u4f5c\u4e3a\u72b6\u6001\u3002\u5177\u4f53\u5e94\u7528\u5982\u4e0b\uff1a \u5982\u679c\u201c\u4e0a\u4e00\u6b21\u7684\u64cd\u4f5c\u201d\u662f push\uff1a 1\u3001\u6211\u7ee7\u7eed push \u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u5f80\u6808\u91cc\u5b58\u6570\u636e\uff1b 2\u3001\u4f46\u662f\u5982\u679c\u6211 pop \u7684\u8bdd\uff0c\u5c31\u8981\u628a\u201c\u6808\u5e95\u201d\u7684\u5143\u7d20\u62ff\u51fa\u6765\uff0c\u62ff\u51fa\u4e4b\u524d\uff0c\u8981\u628a\u201c\u6808\u5e95\u201d\u4ee5\u4e0a\u7684\u6240\u6709\u5143\u7d20\u5f39\u51fa\u5230\u53e6\u4e00\u4e2a\u6808\u4e2d\u3002\u6b64\u65f6\uff0c\u5982\u679c\u7ee7\u7eed\u51fa\u961f\u7684\u8bdd\uff0c\u5c31\u4ece\u4e34\u65f6\u6808\u4e2d\u9646\u7eed\u5f39\u51fa\u201c\u6808\u9876\u201d\u5143\u7d20\u5c31\u53ef\u4ee5\u4e86\u3002 \u5982\u679c\u201c\u4e0a\u4e00\u6b21\u7684\u64cd\u4f5c\u201d\u662f pop\uff1a 1\u3001\u5982\u679c\u6211\u7ee7\u7eed pop\uff0c\u56e0\u4e3a\u5728\u4e0a\u4e00\u6b21 pop \u7684\u65f6\u5019\uff0c\u5c31\u628a\u4e4b\u524d\u90a3\u4e2a\u6808\u4e2d\u7684\u5143\u7d20\u5168\u90e8\u5f39\u51fa\u5230\u4e00\u4e2a\u65b0\u7684\u6808\uff0c\u6b64\u65f6\u8fd9\u4e2a\u65b0\u6808\u7ee7\u7eed\u5f39\u51fa\u201c\u6808\u9876\u201d\u5143\u7d20\uff0c\u5176\u5b9e\u5c31\u662f\u539f\u6765\u5165\u961f\u7684\u987a\u5e8f\uff1b 2\u3001\u5982\u679c\u6211 push\uff0c\u5c31\u5f97\u6062\u590d\u4e4b\u524d\u5165\u961f\u7684\u987a\u5e8f\uff0c\u56e0\u6b64\uff0c\u8981\u628a\u8fd9\u4e2a\u6808\u4e2d\u7684\u6570\u636e\u5168\u90e8\u5f39\u51fa\u5230\u4e4b\u524d\u5165\u961f\u7684\u90a3\u4e2a\u6808\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u53ef\u4ee5\u51c6\u5907\u4e24\u4e2a\u6808 stack1 \u548c stack2 \uff1a 1\u3001\u4f7f\u7528 stack1 \u4e13\u95e8\u7528\u4e8e push \u7684\u65f6\u5019\u7528\uff0c\u8981\u201c\u51fa\u961f\u201d\u4e4b\u524d\uff0c\u5168\u90e8\u5f39\u51fa\u5230 stack2\uff0c\u4ece stack2 \u5f39\u51fa \uff1b 2\u3001\u4f7f\u7528 stack2 \u4e13\u95e8\u7528\u4e8e pop \u7684\u65f6\u5019\u7528\uff0c\u8981\u201c\u5165\u961f\u201d\u4e4b\u524d\uff0c\u5168\u90e8\u5f39\u51fa\u5230 stack1\uff0c\u4ece stack1 \u538b\u5165 \u3002 Java \u4ee3\u7801\uff1a import java.util.Stack; public class Solution { /** * \u4e13\u95e8 push \u7684\u65f6\u5019\u7528 */ private Stack<Integer> stack1 = new Stack<Integer>(); /** * \u4e13\u95e8 pop \u7684\u65f6\u5019\u7528 */ private Stack<Integer> stack2 = new Stack<Integer>(); private State lastState = State.PUSH; enum State { PUSH, POP } public void push(int node) { if (lastState == State.PUSH) { stack1.add(node); } else { assert lastState == State.POP; // \u5982\u679c\u4e0a\u4e00\u6b65\u662f pop \u7684\u8bdd\uff0c while (!stack2.isEmpty()) { stack1.add(stack2.pop()); } stack1.add(node); lastState = State.PUSH; } } public int pop() { if (lastState == State.POP) { if (stack2.empty()) { throw new IllegalArgumentException(\"queue is empty\"); } return stack2.pop(); } else { // \u5982\u679c\u4e0a\u4e00\u6b65\u662f PUSH \u7684\u8bdd while (!stack1.empty()) { stack2.add(stack1.pop()); } lastState = State.POP; return stack2.pop(); } } } \u6ce8\u610f\uff1a\u4e0b\u9762\u8fd9\u4e2a\u903b\u8f91\u662f\u9519\u7684\uff0c\u5e94\u8be5\u662f\u53ea\u8981 stack2 \u662f\u7a7a\u7684\uff0c\u624d\u628a stack1 \u7684\u5143\u7d20\u5168\u90e8\u642c\u5230 stack2\uff0c\u8fd9\u91cc\u8981\u5c0f\u5fc3\u3002 def __shift(self): if self.stack1: while self.stack1: self.stack2.append(self.stack1.pop()) Python \u4ee3\u7801\uff1a class MyQueue(object): def __init__(self): \"\"\" Initialize your data structure here. \"\"\" self.stack1 = [] self.stack2 = [] def push(self, x): \"\"\" Push element x to the back of queue. :type x: int :rtype: void \"\"\" self.stack1.append(x) def __shift(self): if len(self.stack2) == 0: while self.stack1: self.stack2.append(self.stack1.pop()) def pop(self): \"\"\" Removes the element from in front of queue and returns that element. :rtype: int \"\"\" self.__shift() return self.stack2.pop() def peek(self): \"\"\" Get the front element. :rtype: int \"\"\" self.__shift() return self.stack2[-1] def empty(self): \"\"\" Returns whether the queue is empty. :rtype: bool \"\"\" return len(self.stack1) == 0 and len(self.stack2) == 0 # Your MyQueue object will be instantiated and called as such: # obj = MyQueue() # obj.push(x) # param_2 = obj.pop() # param_3 = obj.peek() # param_4 = obj.empty()","title":"\u7b2c 9-1 \u9898\uff1a\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217"},{"location":"09-/#9-2","text":"\u540c LeetCode \u7b2c 225 \u9898\u3002 \u4f20\u9001\u95e8\uff1a 225. \u7528\u961f\u5217\u5b9e\u73b0\u6808 \u4f7f\u7528\u961f\u5217\u5b9e\u73b0\u6808\u7684\u4e0b\u5217\u64cd\u4f5c\uff1a push(x) -- \u5143\u7d20 x \u5165\u6808 pop() -- \u79fb\u9664\u6808\u9876\u5143\u7d20 top() -- \u83b7\u53d6\u6808\u9876\u5143\u7d20 empty() -- \u8fd4\u56de\u6808\u662f\u5426\u4e3a\u7a7a \u6ce8\u610f: \u4f60\u53ea\u80fd\u4f7f\u7528\u961f\u5217\u7684\u57fa\u672c\u64cd\u4f5c-- \u4e5f\u5c31\u662f push to back , peek/pop from front , size , \u548c is empty \u8fd9\u4e9b\u64cd\u4f5c\u662f\u5408\u6cd5\u7684\u3002 \u4f60\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u4e5f\u8bb8\u4e0d\u652f\u6301\u961f\u5217\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 list \u6216\u8005 deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u6765\u6a21\u62df\u4e00\u4e2a\u961f\u5217 , \u53ea\u8981\u662f\u6807\u51c6\u7684\u961f\u5217\u64cd\u4f5c\u5373\u53ef\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684\uff08\u4f8b\u5982, \u5bf9\u4e00\u4e2a\u7a7a\u7684\u6808\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 top \u64cd\u4f5c\uff09\u3002 Python \u4ee3\u7801\uff1a class MyStack: def __init__(self): \"\"\" Initialize your data structure here. \"\"\" self.queue = [] def push(self, x): \"\"\" Push element x onto stack. :type x: int :rtype: void \"\"\" self.queue.append(x) # \u5c06\u961f\u5217\u4e2d\u524d\u9762\u5df2\u7ecf\u9006\u5e8f\u7684\u5143\u7d20\u653e\u5728 x \u5143\u7d20\u540e\u9762\uff0c\u4f7f\u5f97\u6574\u4f53\u9006\u5e8f for _ in range(len(self.queue) - 1): ele = self.queue.pop(0) self.queue.append(ele) def pop(self): \"\"\" Removes the element on top of the stack and returns that element. :rtype: int \"\"\" if self.queue: return self.queue.pop(0) def top(self): \"\"\" Get the top element. :rtype: int \"\"\" if self.queue: return self.queue[0] def empty(self): \"\"\" Returns whether the stack is empty. :rtype: bool \"\"\" return len(self.queue) == 0 # Your MyStack object will be instantiated and called as such: # obj = MyStack() # obj.push(x) # param_2 = obj.pop() # param_3 = obj.top() # param_4 = obj.empty()","title":"\u7b2c 9-2 \u9898\uff1a\u7528\u961f\u5217\u5b9e\u73b0\u6808"},{"location":"09-/#offer-2-9-2","text":"","title":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 9-2 \u9898] \u201c\u7528\u961f\u5217\u5b9e\u73b0\u6808\u201d\u505a\u9898\u8bb0\u5f55"},{"location":"09-/#9-2_1","text":"\u540c LeetCode \u7b2c 225 \u9898\u3002 \u4f20\u9001\u95e8\uff1a 225. \u7528\u961f\u5217\u5b9e\u73b0\u6808 \u4f7f\u7528\u961f\u5217\u5b9e\u73b0\u6808\u7684\u4e0b\u5217\u64cd\u4f5c\uff1a push(x) -- \u5143\u7d20 x \u5165\u6808 pop() -- \u79fb\u9664\u6808\u9876\u5143\u7d20 top() -- \u83b7\u53d6\u6808\u9876\u5143\u7d20 empty() -- \u8fd4\u56de\u6808\u662f\u5426\u4e3a\u7a7a \u6ce8\u610f: \u4f60\u53ea\u80fd\u4f7f\u7528\u961f\u5217\u7684\u57fa\u672c\u64cd\u4f5c-- \u4e5f\u5c31\u662f push to back , peek/pop from front , size , \u548c is empty \u8fd9\u4e9b\u64cd\u4f5c\u662f\u5408\u6cd5\u7684\u3002 \u4f60\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u4e5f\u8bb8\u4e0d\u652f\u6301\u961f\u5217\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 list \u6216\u8005 deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u6765\u6a21\u62df\u4e00\u4e2a\u961f\u5217 , \u53ea\u8981\u662f\u6807\u51c6\u7684\u961f\u5217\u64cd\u4f5c\u5373\u53ef\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684\uff08\u4f8b\u5982, \u5bf9\u4e00\u4e2a\u7a7a\u7684\u6808\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 top \u64cd\u4f5c\uff09\u3002 Python \u4ee3\u7801\uff1a class MyStack: def __init__(self): \"\"\" Initialize your data structure here. \"\"\" self.queue = [] def push(self, x): \"\"\" Push element x onto stack. :type x: int :rtype: void \"\"\" self.queue.append(x) # \u5c06\u961f\u5217\u4e2d\u524d\u9762\u5df2\u7ecf\u9006\u5e8f\u7684\u5143\u7d20\u653e\u5728 x \u5143\u7d20\u540e\u9762\uff0c\u4f7f\u5f97\u6574\u4f53\u9006\u5e8f for _ in range(len(self.queue) - 1): ele = self.queue.pop(0) self.queue.append(ele) def pop(self): \"\"\" Removes the element on top of the stack and returns that element. :rtype: int \"\"\" if self.queue: return self.queue.pop(0) def top(self): \"\"\" Get the top element. :rtype: int \"\"\" if self.queue: return self.queue[0] def empty(self): \"\"\" Returns whether the stack is empty. :rtype: bool \"\"\" return len(self.queue) == 0 # Your MyStack object will be instantiated and called as such: # obj = MyStack() # obj.push(x) # param_2 = obj.pop() # param_3 = obj.top() # param_4 = obj.empty() MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 9-2 \u9898\uff1a\u7528\u961f\u5217\u5b9e\u73b0\u6808"},{"location":"09/","text":"\u5251\u6307 Offer 09. \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \u529b\u6263\uff1a \u5251\u6307 Offer 09. \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \uff1b AcWing\uff1a\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u7528\u6808\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\uff0c\u652f\u6301\u5982\u4e0b\u56db\u79cd\u64cd\u4f5c\uff1a push(x) \u2013 \u5c06\u5143\u7d20x\u63d2\u5230\u961f\u5c3e\uff1b pop() \u2013 \u5c06\u961f\u9996\u7684\u5143\u7d20\u5f39\u51fa\uff0c\u5e76\u8fd4\u56de\u8be5\u5143\u7d20\uff1b peek() \u2013 \u8fd4\u56de\u961f\u9996\u5143\u7d20\uff1b empty() \u2013 \u8fd4\u56de\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff1b \u6ce8\u610f\uff1a \u4f60\u53ea\u80fd\u4f7f\u7528\u6808\u7684\u6807\u51c6\u64cd\u4f5c\uff1a push to top \uff0c peek/pop from top , size \u548c is empty \uff1b \u5982\u679c\u4f60\u9009\u62e9\u7684\u7f16\u7a0b\u8bed\u8a00\u6ca1\u6709\u6808\u7684\u6807\u51c6\u5e93\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528list\u6216\u8005deque\u7b49\u6a21\u62df\u6808\u7684\u64cd\u4f5c\uff1b \u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u5408\u6cd5\uff0c\u4f8b\u5982\uff0c\u5728\u961f\u5217\u4e3a\u7a7a\u65f6\uff0c\u4e0d\u4f1a\u8fdb\u884c pop \u6216\u8005 peek \u7b49\u64cd\u4f5c\uff1b \u6837\u4f8b ``` MyQueue queue = new MyQueue(); queue.push(1); queue.push(2); queue.peek(); // returns 1 queue.pop(); // returns 1 queue.empty(); // returns false ```","title":"\u5251\u6307 Offer 09. \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217"},{"location":"09/#offer-09","text":"\u529b\u6263\uff1a \u5251\u6307 Offer 09. \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \uff1b AcWing\uff1a\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u7528\u6808\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\uff0c\u652f\u6301\u5982\u4e0b\u56db\u79cd\u64cd\u4f5c\uff1a push(x) \u2013 \u5c06\u5143\u7d20x\u63d2\u5230\u961f\u5c3e\uff1b pop() \u2013 \u5c06\u961f\u9996\u7684\u5143\u7d20\u5f39\u51fa\uff0c\u5e76\u8fd4\u56de\u8be5\u5143\u7d20\uff1b peek() \u2013 \u8fd4\u56de\u961f\u9996\u5143\u7d20\uff1b empty() \u2013 \u8fd4\u56de\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff1b \u6ce8\u610f\uff1a \u4f60\u53ea\u80fd\u4f7f\u7528\u6808\u7684\u6807\u51c6\u64cd\u4f5c\uff1a push to top \uff0c peek/pop from top , size \u548c is empty \uff1b \u5982\u679c\u4f60\u9009\u62e9\u7684\u7f16\u7a0b\u8bed\u8a00\u6ca1\u6709\u6808\u7684\u6807\u51c6\u5e93\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528list\u6216\u8005deque\u7b49\u6a21\u62df\u6808\u7684\u64cd\u4f5c\uff1b \u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u5408\u6cd5\uff0c\u4f8b\u5982\uff0c\u5728\u961f\u5217\u4e3a\u7a7a\u65f6\uff0c\u4e0d\u4f1a\u8fdb\u884c pop \u6216\u8005 peek \u7b49\u64cd\u4f5c\uff1b \u6837\u4f8b ``` MyQueue queue = new MyQueue(); queue.push(1); queue.push(2); queue.peek(); // returns 1 queue.pop(); // returns 1 queue.empty(); // returns false ```","title":"\u5251\u6307 Offer 09. \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217"},{"location":"10-1-%E8%B7%B3%E5%8F%B0%E9%98%B6/","text":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 10 \u9898] \u201c\u8df3\u53f0\u9636\u201d\u505a\u9898\u8bb0\u5f55 \u7b2c 10-1 \u9898\uff1a\u8df3\u53f0\u9636\uff08\u6590\u6ce2\u62c9\u5951\u6570\u5217\u3001\u6eda\u52a8\u53d8\u91cf\uff09 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u8df3\u53f0\u9636 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u6574\u6570 $n$ \uff0c\u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2c $n$ \u9879\u3002 \u5047\u5b9a\u4ece $0$ \u5f00\u59cb\uff0c\u7b2c $0$ \u9879\u4e3a $0$ \u3002($n \\le 39$) \u6837\u4f8b\uff1a \u8f93\u5165\u6574\u6570 $n=5 $ \u8fd4\u56de $5$\u3002 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a 1 \u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a 2 \u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a n \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u601d\u8def\uff1a\u8fd9\u9898\u7684\u6570\u636e\u8303\u56f4\u5f88\u5c0f\uff0c\u6211\u4eec\u76f4\u63a5\u6a21\u62df\u5373\u53ef\u3002\u5f53\u6570\u636e\u8303\u56f4\u5f88\u5927\u65f6\uff0c\u5c31\u9700\u8981\u91c7\u7528\u5176\u4ed6\u65b9\u5f0f\u4e86\uff0c\u53ef\u4ee5\u53c2\u8003 \u6c42\u89e3\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u82e5\u5e72\u65b9\u6cd5 \u3002\u5199\u6210\u52a8\u6001\u89c4\u5212\uff0c\u5982\u679c\u4f7f\u7528\u9012\u5f52\uff0c\u4e00\u5b9a\u8981\u52a0\u4e0a\u7f13\u5b58\uff0c\u5426\u5219\u4f1a\u91cd\u590d\u6c42\u89e3\u5b50\u95ee\u9898\uff0c\u5bfc\u81f4\u6548\u7387\u4f4e\u4e0b\u3002 \u9898\u76ee\u80cc\u666f\u662f\u6590\u6ce2\u62c9\u5951\u6570\u5217\u3002 \u5728\u5b9e\u73b0\u7684\u65f6\u5019\u601d\u8003\u5982\u4f55\u8282\u7ea6\u7a7a\u95f4\uff0c\u5176\u5b9e\u4f7f\u7528\u5e38\u6570\u7ea7\u522b\u7684\u8f85\u52a9\u7a7a\u95f4\u5c31\u53ef\u4ee5\u4e86\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u603b\u5171\u9700\u8981\u8ba1\u7b97 $n$ \u6b21\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n)$ \u3002 Python \u4ee3\u78011\uff1a\u7528\u4e24\u4e2a\u53d8\u91cf\u6eda\u52a8\u5f0f\u5f80\u540e\u8ba1\u7b97\uff0c$a$ \u8868\u793a\u7b2c $n\u22121$ \u9879\uff0c$b$ \u8868\u793a\u7b2c $n$ \u9879\u3002\u5219\u4ee4 $c=a+b$ \u8868\u793a\u7b2c $n+1$ \u9879\uff0c\u7136\u540e\u8ba9 $a$\u3001$b$ \u987a\u6b21\u5f80\u540e\u79fb\u4e00\u4f4d\u3002 class Solution(object): def Fibonacci(self, n): \"\"\" :type n: int :rtype: int \"\"\" if n == 0: return 0 if n == 1: return 1 a = 0 b = 1 while n: c = a + b # \u201c\u6eda\u52a8\u53d8\u91cf\u201d\uff1a\u63a5\u4e0b\u6765\u91cd\u65b0\u5b9a\u4e49 a \u548c b a = b b = c n -= 1 return a Python \u4ee3\u78012\uff1aPython \u8bed\u6cd5\u7cd6\uff0c\u4e86\u89e3\u5373\u53ef class Solution(object): def Fibonacci(self, n): \"\"\" :type n: int :rtype: int \"\"\" if n == 0: return 0 if n == 1: return 1 a = 0 b = 1 while n: a , b = a + b , a n -= 1 return a Python \u4ee3\u78013\uff1a class Solution: def climbStairs(self, n): \"\"\" :type n: int :rtype: int \"\"\" a = 0 b = 1 while n: a , b = b , a + b n -= 1 return b \u53c2\u8003\u8d44\u6599\uff1a \u9762\u8bd5\u5b98\u95ee\u4f60\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u65f6\u5019\u4e0d\u8981\u9ad8\u5174\u5f97\u592a\u65e9 \u3002\u4e66\u4e0a\u6590\u6ce2\u62c9\u5951\u6570\u5217\u6570\u5217\u7a7a\u95f4\u66f4\u7701\u7684\u5199\u6cd5\uff0cP76\u3002 Java \u4ee3\u7801\uff1a public class Solution { // 1 1 2 3 5 8 // 0 1 2 3 4 5 public int Fibonacci(int n) { if (n == 0) { return 0; } if (n == 1) { return 1; } int[] dp = new int[n + 1]; dp[0] = 0; dp[1] = 1; for (int i = 2; i <= n; i++) { dp[i] = dp[i - 1] + dp[i - 2]; } return dp[n]; } public static void main(String[] args) { Solution solution = new Solution(); int fibonacci = solution.Fibonacci(5); System.out.println(fibonacci); } } Java \u4ee3\u7801\uff1a public class Solution { // 1 2 3 5 8 // 1 2 3 4 5 public int JumpFloor(int target) { int n = target; int[] dp = new int[n + 1]; dp[0] = 1; dp[1] = 1; for (int i = 2; i <= n; i++) { dp[i] = dp[i - 1] + dp[i - 2]; } return dp[n]; } // i j \uff08i+j\uff09 // 1 2 3 5 // 1 2 3 4 public int JumpFloor1(int target) { if (target == 1) { return 1; } int n = target; int i = 1; int j = 2; int temp; for (int k = 3; k <= n; k++) { temp = j; j = i + j; i = temp; } return j; } public static void main(String[] args) { Solution solution = new Solution(); for (int i = 1; i < 5; i++) { int jumpFloor = solution.JumpFloor1(i); System.out.println(jumpFloor); } } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 10 \u9898] \u201c\u8df3\u53f0\u9636\u201d\u505a\u9898\u8bb0\u5f55"},{"location":"10-1-%E8%B7%B3%E5%8F%B0%E9%98%B6/#offer-2-10","text":"","title":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 10 \u9898] \u201c\u8df3\u53f0\u9636\u201d\u505a\u9898\u8bb0\u5f55"},{"location":"10-1-%E8%B7%B3%E5%8F%B0%E9%98%B6/#10-1","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u8df3\u53f0\u9636 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u6574\u6570 $n$ \uff0c\u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2c $n$ \u9879\u3002 \u5047\u5b9a\u4ece $0$ \u5f00\u59cb\uff0c\u7b2c $0$ \u9879\u4e3a $0$ \u3002($n \\le 39$) \u6837\u4f8b\uff1a \u8f93\u5165\u6574\u6570 $n=5 $ \u8fd4\u56de $5$\u3002 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a 1 \u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a 2 \u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a n \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u601d\u8def\uff1a\u8fd9\u9898\u7684\u6570\u636e\u8303\u56f4\u5f88\u5c0f\uff0c\u6211\u4eec\u76f4\u63a5\u6a21\u62df\u5373\u53ef\u3002\u5f53\u6570\u636e\u8303\u56f4\u5f88\u5927\u65f6\uff0c\u5c31\u9700\u8981\u91c7\u7528\u5176\u4ed6\u65b9\u5f0f\u4e86\uff0c\u53ef\u4ee5\u53c2\u8003 \u6c42\u89e3\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u82e5\u5e72\u65b9\u6cd5 \u3002\u5199\u6210\u52a8\u6001\u89c4\u5212\uff0c\u5982\u679c\u4f7f\u7528\u9012\u5f52\uff0c\u4e00\u5b9a\u8981\u52a0\u4e0a\u7f13\u5b58\uff0c\u5426\u5219\u4f1a\u91cd\u590d\u6c42\u89e3\u5b50\u95ee\u9898\uff0c\u5bfc\u81f4\u6548\u7387\u4f4e\u4e0b\u3002 \u9898\u76ee\u80cc\u666f\u662f\u6590\u6ce2\u62c9\u5951\u6570\u5217\u3002 \u5728\u5b9e\u73b0\u7684\u65f6\u5019\u601d\u8003\u5982\u4f55\u8282\u7ea6\u7a7a\u95f4\uff0c\u5176\u5b9e\u4f7f\u7528\u5e38\u6570\u7ea7\u522b\u7684\u8f85\u52a9\u7a7a\u95f4\u5c31\u53ef\u4ee5\u4e86\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u603b\u5171\u9700\u8981\u8ba1\u7b97 $n$ \u6b21\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n)$ \u3002 Python \u4ee3\u78011\uff1a\u7528\u4e24\u4e2a\u53d8\u91cf\u6eda\u52a8\u5f0f\u5f80\u540e\u8ba1\u7b97\uff0c$a$ \u8868\u793a\u7b2c $n\u22121$ \u9879\uff0c$b$ \u8868\u793a\u7b2c $n$ \u9879\u3002\u5219\u4ee4 $c=a+b$ \u8868\u793a\u7b2c $n+1$ \u9879\uff0c\u7136\u540e\u8ba9 $a$\u3001$b$ \u987a\u6b21\u5f80\u540e\u79fb\u4e00\u4f4d\u3002 class Solution(object): def Fibonacci(self, n): \"\"\" :type n: int :rtype: int \"\"\" if n == 0: return 0 if n == 1: return 1 a = 0 b = 1 while n: c = a + b # \u201c\u6eda\u52a8\u53d8\u91cf\u201d\uff1a\u63a5\u4e0b\u6765\u91cd\u65b0\u5b9a\u4e49 a \u548c b a = b b = c n -= 1 return a Python \u4ee3\u78012\uff1aPython \u8bed\u6cd5\u7cd6\uff0c\u4e86\u89e3\u5373\u53ef class Solution(object): def Fibonacci(self, n): \"\"\" :type n: int :rtype: int \"\"\" if n == 0: return 0 if n == 1: return 1 a = 0 b = 1 while n: a , b = a + b , a n -= 1 return a Python \u4ee3\u78013\uff1a class Solution: def climbStairs(self, n): \"\"\" :type n: int :rtype: int \"\"\" a = 0 b = 1 while n: a , b = b , a + b n -= 1 return b \u53c2\u8003\u8d44\u6599\uff1a \u9762\u8bd5\u5b98\u95ee\u4f60\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u65f6\u5019\u4e0d\u8981\u9ad8\u5174\u5f97\u592a\u65e9 \u3002\u4e66\u4e0a\u6590\u6ce2\u62c9\u5951\u6570\u5217\u6570\u5217\u7a7a\u95f4\u66f4\u7701\u7684\u5199\u6cd5\uff0cP76\u3002 Java \u4ee3\u7801\uff1a public class Solution { // 1 1 2 3 5 8 // 0 1 2 3 4 5 public int Fibonacci(int n) { if (n == 0) { return 0; } if (n == 1) { return 1; } int[] dp = new int[n + 1]; dp[0] = 0; dp[1] = 1; for (int i = 2; i <= n; i++) { dp[i] = dp[i - 1] + dp[i - 2]; } return dp[n]; } public static void main(String[] args) { Solution solution = new Solution(); int fibonacci = solution.Fibonacci(5); System.out.println(fibonacci); } } Java \u4ee3\u7801\uff1a public class Solution { // 1 2 3 5 8 // 1 2 3 4 5 public int JumpFloor(int target) { int n = target; int[] dp = new int[n + 1]; dp[0] = 1; dp[1] = 1; for (int i = 2; i <= n; i++) { dp[i] = dp[i - 1] + dp[i - 2]; } return dp[n]; } // i j \uff08i+j\uff09 // 1 2 3 5 // 1 2 3 4 public int JumpFloor1(int target) { if (target == 1) { return 1; } int n = target; int i = 1; int j = 2; int temp; for (int k = 3; k <= n; k++) { temp = j; j = i + j; i = temp; } return j; } public static void main(String[] args) { Solution solution = new Solution(); for (int i = 1; i < 5; i++) { int jumpFloor = solution.JumpFloor1(i); System.out.println(jumpFloor); } } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 10-1 \u9898\uff1a\u8df3\u53f0\u9636\uff08\u6590\u6ce2\u62c9\u5951\u6570\u5217\u3001\u6eda\u52a8\u53d8\u91cf\uff09"},{"location":"10-1/","text":"\u5251\u6307 Offer 10- I. \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u5251\u6307 Offer 10- I. \u6590\u6ce2\u90a3\u5951\u6570\u5217 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 10- I. \u6590\u6ce2\u90a3\u5951\u6570\u5217"},{"location":"10-1/#offer-10-i","text":"","title":"\u5251\u6307 Offer 10- I. \u6590\u6ce2\u90a3\u5951\u6570\u5217"},{"location":"10-1/#offer-10-i_1","text":"MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 10- I. \u6590\u6ce2\u90a3\u5951\u6570\u5217"},{"location":"10-2/","text":"\u5251\u6307 Offer 10- II. \u9752\u86d9\u8df3\u53f0\u9636\u95ee\u9898 \u5251\u6307 Offer 10- II. \u9752\u86d9\u8df3\u53f0\u9636\u95ee\u9898 \u4f20\u9001\u95e8\uff1a \u725b\u5ba2\u7f51\uff1a\u53d8\u6001\u8df3\u53f0\u9636 \u3002 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a $1$ \u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a $2$ \u7ea7\uff0c\u2026\u2026\uff0c\u5b83\u4e5f\u53ef\u4ee5\u8df3\u4e0a $n$ \u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a $n$ \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u5206\u6790\uff1a\u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u2026\u2026\u5b83\u4e5f\u53ef\u4ee5\u8df3\u4e0an\u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2an\u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u9898\u76ee\u80cc\u666f\u5176\u5b9e\u662f\u6590\u6ce2\u62c9\u5951\u6570\u5217\uff0c\u662f\u5178\u578b\u7684\u4f7f\u7528\u201c\u52a8\u6001\u89c4\u5212\u201d\u89e3\u51b3\u7684\u95ee\u9898\uff1b \u6ce8\u610f\u8fb9\u754c\u60c5\u51b5\uff0c\u4e00\u6b21\u8df3\u4e0a $n$ \u4e2a\u53f0\u9636\uff0c\u8fd9\u5355\u72ec\u7b97\u4e00\u79cd\u65b9\u6cd5\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u8d77\u70b9\u4e3a $1$\uff0c\u8fd9\u5c31\u662f\u4e0b\u9762\u4ee3\u7801\u4e2d\u7b2c $13$ \u884c\u7684\u610f\u601d\uff1b \u53ef\u4ee5\u8fdb\u4e00\u6b65\u5f52\u7eb3\uff0c\u5177\u4f53\u89c1\u8ba8\u8bba\u533a\u76f8\u5e94\u7684\u89e3\u7b54\u3002 Java \u4ee3\u7801\uff1a public class Solution { // 1 2 3 public int JumpFloorII(int target) { if (target == 0 || target == 1) { return 1; } int n = target; int[] dp = new int[n + 1]; dp[1] = 1; dp[2] = 2; for (int i = 3; i <= n; i++) { // \u8d77\u70b9\u662f 1 \u8fd9\u4e00\u70b9\u8981\u7279\u522b\u5c0f\u5fc3 int res = 1; for (int j = 1; j < i; j++) { res += dp[j]; } dp[i] = res; } return dp[n]; } public static void main(String[] args) { Solution solution = new Solution(); int jumpFloorII = solution.JumpFloorII(3); System.out.println(jumpFloorII); } } Python \u4ee3\u7801\uff1a\u56e0\u4e3a\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4efb\u610f\u53f0\u9636\uff0c\u6211\u4eec\u5c31\u8ba9\u5b83\u8df3 $n$ \u9636\uff0c\u6240\u4ee5\u521d\u59cb\u503c\u8bbe\u7f6e\u4e3a $1$ \u3002 class Solution: def jumpFloorII(self, number): if number == 0: return 1 if number == 1: return 1 dp = [1 for _ in range(number + 1)] dp[0] = 0 dp[1] = 1 for i in range(2, number + 1): for j in range(1, i): dp[i] += dp[j] return dp[number] \u601d\u8def2\uff1a \u5f53 $n=1$ \u65f6\uff0c\u7ed3\u679c\u4e3a $1$\uff1b \u5f53 $n=2$ \u65f6\uff0c\u7ed3\u679c\u4e3a $2$\uff1b \u5f53 $n=3$ \u65f6\uff0c\u7ed3\u679c\u4e3a $4$\uff1b \u2026\u2026 \u4ee5\u6b64\u7c7b\u63a8\uff0c\u4f7f\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u4e0d\u96be\u53d1\u73b0\uff0c\u8df3\u6cd5 $f(n)=2^{n-1}$\u3002 Python \u4ee3\u7801\uff1a class Solution: def jumpFloorII(self, number): # write code here if number <= 2: return number total = 1 for _ in range(1, number): total *= 2 return total MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 10- II. \u9752\u86d9\u8df3\u53f0\u9636\u95ee\u9898"},{"location":"10-2/#offer-10-ii","text":"\u5251\u6307 Offer 10- II. \u9752\u86d9\u8df3\u53f0\u9636\u95ee\u9898 \u4f20\u9001\u95e8\uff1a \u725b\u5ba2\u7f51\uff1a\u53d8\u6001\u8df3\u53f0\u9636 \u3002 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a $1$ \u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a $2$ \u7ea7\uff0c\u2026\u2026\uff0c\u5b83\u4e5f\u53ef\u4ee5\u8df3\u4e0a $n$ \u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a $n$ \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u5206\u6790\uff1a\u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u2026\u2026\u5b83\u4e5f\u53ef\u4ee5\u8df3\u4e0an\u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2an\u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u9898\u76ee\u80cc\u666f\u5176\u5b9e\u662f\u6590\u6ce2\u62c9\u5951\u6570\u5217\uff0c\u662f\u5178\u578b\u7684\u4f7f\u7528\u201c\u52a8\u6001\u89c4\u5212\u201d\u89e3\u51b3\u7684\u95ee\u9898\uff1b \u6ce8\u610f\u8fb9\u754c\u60c5\u51b5\uff0c\u4e00\u6b21\u8df3\u4e0a $n$ \u4e2a\u53f0\u9636\uff0c\u8fd9\u5355\u72ec\u7b97\u4e00\u79cd\u65b9\u6cd5\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u8d77\u70b9\u4e3a $1$\uff0c\u8fd9\u5c31\u662f\u4e0b\u9762\u4ee3\u7801\u4e2d\u7b2c $13$ \u884c\u7684\u610f\u601d\uff1b \u53ef\u4ee5\u8fdb\u4e00\u6b65\u5f52\u7eb3\uff0c\u5177\u4f53\u89c1\u8ba8\u8bba\u533a\u76f8\u5e94\u7684\u89e3\u7b54\u3002 Java \u4ee3\u7801\uff1a public class Solution { // 1 2 3 public int JumpFloorII(int target) { if (target == 0 || target == 1) { return 1; } int n = target; int[] dp = new int[n + 1]; dp[1] = 1; dp[2] = 2; for (int i = 3; i <= n; i++) { // \u8d77\u70b9\u662f 1 \u8fd9\u4e00\u70b9\u8981\u7279\u522b\u5c0f\u5fc3 int res = 1; for (int j = 1; j < i; j++) { res += dp[j]; } dp[i] = res; } return dp[n]; } public static void main(String[] args) { Solution solution = new Solution(); int jumpFloorII = solution.JumpFloorII(3); System.out.println(jumpFloorII); } } Python \u4ee3\u7801\uff1a\u56e0\u4e3a\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4efb\u610f\u53f0\u9636\uff0c\u6211\u4eec\u5c31\u8ba9\u5b83\u8df3 $n$ \u9636\uff0c\u6240\u4ee5\u521d\u59cb\u503c\u8bbe\u7f6e\u4e3a $1$ \u3002 class Solution: def jumpFloorII(self, number): if number == 0: return 1 if number == 1: return 1 dp = [1 for _ in range(number + 1)] dp[0] = 0 dp[1] = 1 for i in range(2, number + 1): for j in range(1, i): dp[i] += dp[j] return dp[number] \u601d\u8def2\uff1a \u5f53 $n=1$ \u65f6\uff0c\u7ed3\u679c\u4e3a $1$\uff1b \u5f53 $n=2$ \u65f6\uff0c\u7ed3\u679c\u4e3a $2$\uff1b \u5f53 $n=3$ \u65f6\uff0c\u7ed3\u679c\u4e3a $4$\uff1b \u2026\u2026 \u4ee5\u6b64\u7c7b\u63a8\uff0c\u4f7f\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u4e0d\u96be\u53d1\u73b0\uff0c\u8df3\u6cd5 $f(n)=2^{n-1}$\u3002 Python \u4ee3\u7801\uff1a class Solution: def jumpFloorII(self, number): # write code here if number <= 2: return number total = 1 for _ in range(1, number): total *= 2 return total MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 10- II. \u9752\u86d9\u8df3\u53f0\u9636\u95ee\u9898"},{"location":"10-3-%E7%9F%A9%E5%BD%A2%E8%A6%86%E7%9B%96/","text":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 10 \u9898] \u201c\u77e9\u5f62\u8986\u76d6\u201d\u505a\u9898\u8bb0\u5f55 \u7b2c 10-3 \u9898\uff1a\u6590\u6ce2\u62c9\u5951\u6570\u5217\u77e9\u9635\u6c42\u6cd5 \u53c2\u8003\u8d44\u6599\uff1a \u6c42\u89e3\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u82e5\u5e72\u65b9\u6cd5 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u6211\u4eec\u53ef\u4ee5\u7528 2 1 \u7684\u5c0f\u77e9\u5f62\u6a2a\u7740\u6216\u8005\u7ad6\u7740\u53bb\u8986\u76d6\u66f4\u5927\u7684\u77e9\u5f62\u3002\u8bf7\u95ee\u7528 n \u4e2a 2 1 \u7684\u5c0f\u77e9\u5f62\u65e0\u91cd\u53e0\u5730\u8986\u76d6\u4e00\u4e2a 2*n \u7684\u5927\u77e9\u5f62\uff0c\u603b\u5171\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\uff1f Java \u4ee3\u7801\uff1a\u672c\u8d28\u5176\u5b9e\u8fd8\u662f\u6590\u6ce2\u62c9\u5951\u6570\u5217\u3002 public class Solution { public int RectCover(int target) { if (target <= 2) { return target; } int a = 1; int b = 2; int c = 0; for (int i = 3; i <= target; i++) { c = a + b; a = b; b = c; } return c; } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 10 \u9898] \u201c\u77e9\u5f62\u8986\u76d6\u201d\u505a\u9898\u8bb0\u5f55"},{"location":"10-3-%E7%9F%A9%E5%BD%A2%E8%A6%86%E7%9B%96/#offer-2-10","text":"","title":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 10 \u9898] \u201c\u77e9\u5f62\u8986\u76d6\u201d\u505a\u9898\u8bb0\u5f55"},{"location":"10-3-%E7%9F%A9%E5%BD%A2%E8%A6%86%E7%9B%96/#10-3","text":"\u53c2\u8003\u8d44\u6599\uff1a \u6c42\u89e3\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u82e5\u5e72\u65b9\u6cd5 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u6211\u4eec\u53ef\u4ee5\u7528 2 1 \u7684\u5c0f\u77e9\u5f62\u6a2a\u7740\u6216\u8005\u7ad6\u7740\u53bb\u8986\u76d6\u66f4\u5927\u7684\u77e9\u5f62\u3002\u8bf7\u95ee\u7528 n \u4e2a 2 1 \u7684\u5c0f\u77e9\u5f62\u65e0\u91cd\u53e0\u5730\u8986\u76d6\u4e00\u4e2a 2*n \u7684\u5927\u77e9\u5f62\uff0c\u603b\u5171\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\uff1f Java \u4ee3\u7801\uff1a\u672c\u8d28\u5176\u5b9e\u8fd8\u662f\u6590\u6ce2\u62c9\u5951\u6570\u5217\u3002 public class Solution { public int RectCover(int target) { if (target <= 2) { return target; } int a = 1; int b = 2; int c = 0; for (int i = 3; i <= target; i++) { c = a + b; a = b; b = c; } return c; } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 10-3 \u9898\uff1a\u6590\u6ce2\u62c9\u5951\u6570\u5217\u77e9\u9635\u6c42\u6cd5"},{"location":"10/","text":"\u7b2c 10-1 \u9898\uff1a\u8df3\u53f0\u9636\uff08\u6590\u6ce2\u62c9\u5951\u6570\u5217\u3001\u6eda\u52a8\u53d8\u91cf\uff09 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u8df3\u53f0\u9636 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u6574\u6570 $n$ \uff0c\u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2c $n$ \u9879\u3002 \u5047\u5b9a\u4ece $0$ \u5f00\u59cb\uff0c\u7b2c $0$ \u9879\u4e3a $0$ \u3002($n \\le 39$) \u6837\u4f8b\uff1a \u8f93\u5165\u6574\u6570 $n=5 $ \u8fd4\u56de $5$\u3002 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a 1 \u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a 2 \u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a n \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u601d\u8def\uff1a\u8fd9\u9898\u7684\u6570\u636e\u8303\u56f4\u5f88\u5c0f\uff0c\u6211\u4eec\u76f4\u63a5\u6a21\u62df\u5373\u53ef\u3002\u5f53\u6570\u636e\u8303\u56f4\u5f88\u5927\u65f6\uff0c\u5c31\u9700\u8981\u91c7\u7528\u5176\u4ed6\u65b9\u5f0f\u4e86\uff0c\u53ef\u4ee5\u53c2\u8003 \u6c42\u89e3\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u82e5\u5e72\u65b9\u6cd5 \u3002\u5199\u6210\u52a8\u6001\u89c4\u5212\uff0c\u5982\u679c\u4f7f\u7528\u9012\u5f52\uff0c\u4e00\u5b9a\u8981\u52a0\u4e0a\u7f13\u5b58\uff0c\u5426\u5219\u4f1a\u91cd\u590d\u6c42\u89e3\u5b50\u95ee\u9898\uff0c\u5bfc\u81f4\u6548\u7387\u4f4e\u4e0b\u3002 \u9898\u76ee\u80cc\u666f\u662f\u6590\u6ce2\u62c9\u5951\u6570\u5217\u3002 \u5728\u5b9e\u73b0\u7684\u65f6\u5019\u601d\u8003\u5982\u4f55\u8282\u7ea6\u7a7a\u95f4\uff0c\u5176\u5b9e\u4f7f\u7528\u5e38\u6570\u7ea7\u522b\u7684\u8f85\u52a9\u7a7a\u95f4\u5c31\u53ef\u4ee5\u4e86\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u603b\u5171\u9700\u8981\u8ba1\u7b97 $n$ \u6b21\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n)$ \u3002 Python \u4ee3\u78011\uff1a\u7528\u4e24\u4e2a\u53d8\u91cf\u6eda\u52a8\u5f0f\u5f80\u540e\u8ba1\u7b97\uff0c$a$ \u8868\u793a\u7b2c $n\u22121$ \u9879\uff0c$b$ \u8868\u793a\u7b2c $n$ \u9879\u3002\u5219\u4ee4 $c=a+b$ \u8868\u793a\u7b2c $n+1$ \u9879\uff0c\u7136\u540e\u8ba9 $a$\u3001$b$ \u987a\u6b21\u5f80\u540e\u79fb\u4e00\u4f4d\u3002 class Solution(object): def Fibonacci(self, n): \"\"\" :type n: int :rtype: int \"\"\" if n == 0: return 0 if n == 1: return 1 a = 0 b = 1 while n: c = a + b # \u201c\u6eda\u52a8\u53d8\u91cf\u201d\uff1a\u63a5\u4e0b\u6765\u91cd\u65b0\u5b9a\u4e49 a \u548c b a = b b = c n -= 1 return a Python \u4ee3\u78012\uff1aPython \u8bed\u6cd5\u7cd6\uff0c\u4e86\u89e3\u5373\u53ef class Solution(object): def Fibonacci(self, n): \"\"\" :type n: int :rtype: int \"\"\" if n == 0: return 0 if n == 1: return 1 a = 0 b = 1 while n: a , b = a + b , a n -= 1 return a Python \u4ee3\u78013\uff1a class Solution: def climbStairs(self, n): \"\"\" :type n: int :rtype: int \"\"\" a = 0 b = 1 while n: a , b = b , a + b n -= 1 return b \u53c2\u8003\u8d44\u6599\uff1a \u9762\u8bd5\u5b98\u95ee\u4f60\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u65f6\u5019\u4e0d\u8981\u9ad8\u5174\u5f97\u592a\u65e9 \u3002\u4e66\u4e0a\u6590\u6ce2\u62c9\u5951\u6570\u5217\u6570\u5217\u7a7a\u95f4\u66f4\u7701\u7684\u5199\u6cd5\uff0cP76\u3002 Java \u4ee3\u7801\uff1a public class Solution { // 1 1 2 3 5 8 // 0 1 2 3 4 5 public int Fibonacci(int n) { if (n == 0) { return 0; } if (n == 1) { return 1; } int[] dp = new int[n + 1]; dp[0] = 0; dp[1] = 1; for (int i = 2; i <= n; i++) { dp[i] = dp[i - 1] + dp[i - 2]; } return dp[n]; } public static void main(String[] args) { Solution solution = new Solution(); int fibonacci = solution.Fibonacci(5); System.out.println(fibonacci); } } Java \u4ee3\u7801\uff1a public class Solution { // 1 2 3 5 8 // 1 2 3 4 5 public int JumpFloor(int target) { int n = target; int[] dp = new int[n + 1]; dp[0] = 1; dp[1] = 1; for (int i = 2; i <= n; i++) { dp[i] = dp[i - 1] + dp[i - 2]; } return dp[n]; } // i j \uff08i+j\uff09 // 1 2 3 5 // 1 2 3 4 public int JumpFloor1(int target) { if (target == 1) { return 1; } int n = target; int i = 1; int j = 2; int temp; for (int k = 3; k <= n; k++) { temp = j; j = i + j; i = temp; } return j; } public static void main(String[] args) { Solution solution = new Solution(); for (int i = 1; i < 5; i++) { int jumpFloor = solution.JumpFloor1(i); System.out.println(jumpFloor); } } } \u7b2c 10-2 \u9898\uff1a\u53d8\u6001\u8df3\u53f0\u9636 \u4f20\u9001\u95e8\uff1a \u725b\u5ba2\u7f51\uff1a\u53d8\u6001\u8df3\u53f0\u9636 \u3002 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a $1$ \u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a $2$ \u7ea7\uff0c\u2026\u2026\uff0c\u5b83\u4e5f\u53ef\u4ee5\u8df3\u4e0a $n$ \u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a $n$ \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u5206\u6790\uff1a\u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u2026\u2026\u5b83\u4e5f\u53ef\u4ee5\u8df3\u4e0an\u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2an\u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u9898\u76ee\u80cc\u666f\u5176\u5b9e\u662f\u6590\u6ce2\u62c9\u5951\u6570\u5217\uff0c\u662f\u5178\u578b\u7684\u4f7f\u7528\u201c\u52a8\u6001\u89c4\u5212\u201d\u89e3\u51b3\u7684\u95ee\u9898\uff1b \u6ce8\u610f\u8fb9\u754c\u60c5\u51b5\uff0c\u4e00\u6b21\u8df3\u4e0a $n$ \u4e2a\u53f0\u9636\uff0c\u8fd9\u5355\u72ec\u7b97\u4e00\u79cd\u65b9\u6cd5\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u8d77\u70b9\u4e3a $1$\uff0c\u8fd9\u5c31\u662f\u4e0b\u9762\u4ee3\u7801\u4e2d\u7b2c $13$ \u884c\u7684\u610f\u601d\uff1b \u53ef\u4ee5\u8fdb\u4e00\u6b65\u5f52\u7eb3\uff0c\u5177\u4f53\u89c1\u8ba8\u8bba\u533a\u76f8\u5e94\u7684\u89e3\u7b54\u3002 Java \u4ee3\u7801\uff1a public class Solution { // 1 2 3 public int JumpFloorII(int target) { if (target == 0 || target == 1) { return 1; } int n = target; int[] dp = new int[n + 1]; dp[1] = 1; dp[2] = 2; for (int i = 3; i <= n; i++) { // \u8d77\u70b9\u662f 1 \u8fd9\u4e00\u70b9\u8981\u7279\u522b\u5c0f\u5fc3 int res = 1; for (int j = 1; j < i; j++) { res += dp[j]; } dp[i] = res; } return dp[n]; } public static void main(String[] args) { Solution solution = new Solution(); int jumpFloorII = solution.JumpFloorII(3); System.out.println(jumpFloorII); } } Python \u4ee3\u7801\uff1a\u56e0\u4e3a\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4efb\u610f\u53f0\u9636\uff0c\u6211\u4eec\u5c31\u8ba9\u5b83\u8df3 $n$ \u9636\uff0c\u6240\u4ee5\u521d\u59cb\u503c\u8bbe\u7f6e\u4e3a $1$ \u3002 class Solution: def jumpFloorII(self, number): if number == 0: return 1 if number == 1: return 1 dp = [1 for _ in range(number + 1)] dp[0] = 0 dp[1] = 1 for i in range(2, number + 1): for j in range(1, i): dp[i] += dp[j] return dp[number] \u601d\u8def2\uff1a \u5f53 $n=1$ \u65f6\uff0c\u7ed3\u679c\u4e3a $1$\uff1b \u5f53 $n=2$ \u65f6\uff0c\u7ed3\u679c\u4e3a $2$\uff1b \u5f53 $n=3$ \u65f6\uff0c\u7ed3\u679c\u4e3a $4$\uff1b \u2026\u2026 \u4ee5\u6b64\u7c7b\u63a8\uff0c\u4f7f\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u4e0d\u96be\u53d1\u73b0\uff0c\u8df3\u6cd5 $f(n)=2^{n-1}$\u3002 Python \u4ee3\u7801\uff1a class Solution: def jumpFloorII(self, number): # write code here if number <= 2: return number total = 1 for _ in range(1, number): total *= 2 return total \u7b2c 10-3 \u9898\uff1a\u6590\u6ce2\u62c9\u5951\u6570\u5217\u77e9\u9635\u6c42\u6cd5 \u53c2\u8003\u8d44\u6599\uff1a \u6c42\u89e3\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u82e5\u5e72\u65b9\u6cd5 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u6211\u4eec\u53ef\u4ee5\u7528 2 1 \u7684\u5c0f\u77e9\u5f62\u6a2a\u7740\u6216\u8005\u7ad6\u7740\u53bb\u8986\u76d6\u66f4\u5927\u7684\u77e9\u5f62\u3002\u8bf7\u95ee\u7528 n \u4e2a 2 1 \u7684\u5c0f\u77e9\u5f62\u65e0\u91cd\u53e0\u5730\u8986\u76d6\u4e00\u4e2a 2*n \u7684\u5927\u77e9\u5f62\uff0c\u603b\u5171\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\uff1f Java \u4ee3\u7801\uff1a\u672c\u8d28\u5176\u5b9e\u8fd8\u662f\u6590\u6ce2\u62c9\u5951\u6570\u5217\u3002 public class Solution { public int RectCover(int target) { if (target <= 2) { return target; } int a = 1; int b = 2; int c = 0; for (int i = 3; i <= target; i++) { c = a + b; a = b; b = c; } return c; } }","title":"10"},{"location":"10/#10-1","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u8df3\u53f0\u9636 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u6574\u6570 $n$ \uff0c\u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2c $n$ \u9879\u3002 \u5047\u5b9a\u4ece $0$ \u5f00\u59cb\uff0c\u7b2c $0$ \u9879\u4e3a $0$ \u3002($n \\le 39$) \u6837\u4f8b\uff1a \u8f93\u5165\u6574\u6570 $n=5 $ \u8fd4\u56de $5$\u3002 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a 1 \u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a 2 \u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a n \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u601d\u8def\uff1a\u8fd9\u9898\u7684\u6570\u636e\u8303\u56f4\u5f88\u5c0f\uff0c\u6211\u4eec\u76f4\u63a5\u6a21\u62df\u5373\u53ef\u3002\u5f53\u6570\u636e\u8303\u56f4\u5f88\u5927\u65f6\uff0c\u5c31\u9700\u8981\u91c7\u7528\u5176\u4ed6\u65b9\u5f0f\u4e86\uff0c\u53ef\u4ee5\u53c2\u8003 \u6c42\u89e3\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u82e5\u5e72\u65b9\u6cd5 \u3002\u5199\u6210\u52a8\u6001\u89c4\u5212\uff0c\u5982\u679c\u4f7f\u7528\u9012\u5f52\uff0c\u4e00\u5b9a\u8981\u52a0\u4e0a\u7f13\u5b58\uff0c\u5426\u5219\u4f1a\u91cd\u590d\u6c42\u89e3\u5b50\u95ee\u9898\uff0c\u5bfc\u81f4\u6548\u7387\u4f4e\u4e0b\u3002 \u9898\u76ee\u80cc\u666f\u662f\u6590\u6ce2\u62c9\u5951\u6570\u5217\u3002 \u5728\u5b9e\u73b0\u7684\u65f6\u5019\u601d\u8003\u5982\u4f55\u8282\u7ea6\u7a7a\u95f4\uff0c\u5176\u5b9e\u4f7f\u7528\u5e38\u6570\u7ea7\u522b\u7684\u8f85\u52a9\u7a7a\u95f4\u5c31\u53ef\u4ee5\u4e86\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u603b\u5171\u9700\u8981\u8ba1\u7b97 $n$ \u6b21\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n)$ \u3002 Python \u4ee3\u78011\uff1a\u7528\u4e24\u4e2a\u53d8\u91cf\u6eda\u52a8\u5f0f\u5f80\u540e\u8ba1\u7b97\uff0c$a$ \u8868\u793a\u7b2c $n\u22121$ \u9879\uff0c$b$ \u8868\u793a\u7b2c $n$ \u9879\u3002\u5219\u4ee4 $c=a+b$ \u8868\u793a\u7b2c $n+1$ \u9879\uff0c\u7136\u540e\u8ba9 $a$\u3001$b$ \u987a\u6b21\u5f80\u540e\u79fb\u4e00\u4f4d\u3002 class Solution(object): def Fibonacci(self, n): \"\"\" :type n: int :rtype: int \"\"\" if n == 0: return 0 if n == 1: return 1 a = 0 b = 1 while n: c = a + b # \u201c\u6eda\u52a8\u53d8\u91cf\u201d\uff1a\u63a5\u4e0b\u6765\u91cd\u65b0\u5b9a\u4e49 a \u548c b a = b b = c n -= 1 return a Python \u4ee3\u78012\uff1aPython \u8bed\u6cd5\u7cd6\uff0c\u4e86\u89e3\u5373\u53ef class Solution(object): def Fibonacci(self, n): \"\"\" :type n: int :rtype: int \"\"\" if n == 0: return 0 if n == 1: return 1 a = 0 b = 1 while n: a , b = a + b , a n -= 1 return a Python \u4ee3\u78013\uff1a class Solution: def climbStairs(self, n): \"\"\" :type n: int :rtype: int \"\"\" a = 0 b = 1 while n: a , b = b , a + b n -= 1 return b \u53c2\u8003\u8d44\u6599\uff1a \u9762\u8bd5\u5b98\u95ee\u4f60\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u65f6\u5019\u4e0d\u8981\u9ad8\u5174\u5f97\u592a\u65e9 \u3002\u4e66\u4e0a\u6590\u6ce2\u62c9\u5951\u6570\u5217\u6570\u5217\u7a7a\u95f4\u66f4\u7701\u7684\u5199\u6cd5\uff0cP76\u3002 Java \u4ee3\u7801\uff1a public class Solution { // 1 1 2 3 5 8 // 0 1 2 3 4 5 public int Fibonacci(int n) { if (n == 0) { return 0; } if (n == 1) { return 1; } int[] dp = new int[n + 1]; dp[0] = 0; dp[1] = 1; for (int i = 2; i <= n; i++) { dp[i] = dp[i - 1] + dp[i - 2]; } return dp[n]; } public static void main(String[] args) { Solution solution = new Solution(); int fibonacci = solution.Fibonacci(5); System.out.println(fibonacci); } } Java \u4ee3\u7801\uff1a public class Solution { // 1 2 3 5 8 // 1 2 3 4 5 public int JumpFloor(int target) { int n = target; int[] dp = new int[n + 1]; dp[0] = 1; dp[1] = 1; for (int i = 2; i <= n; i++) { dp[i] = dp[i - 1] + dp[i - 2]; } return dp[n]; } // i j \uff08i+j\uff09 // 1 2 3 5 // 1 2 3 4 public int JumpFloor1(int target) { if (target == 1) { return 1; } int n = target; int i = 1; int j = 2; int temp; for (int k = 3; k <= n; k++) { temp = j; j = i + j; i = temp; } return j; } public static void main(String[] args) { Solution solution = new Solution(); for (int i = 1; i < 5; i++) { int jumpFloor = solution.JumpFloor1(i); System.out.println(jumpFloor); } } }","title":"\u7b2c 10-1 \u9898\uff1a\u8df3\u53f0\u9636\uff08\u6590\u6ce2\u62c9\u5951\u6570\u5217\u3001\u6eda\u52a8\u53d8\u91cf\uff09"},{"location":"10/#10-2","text":"\u4f20\u9001\u95e8\uff1a \u725b\u5ba2\u7f51\uff1a\u53d8\u6001\u8df3\u53f0\u9636 \u3002 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a $1$ \u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a $2$ \u7ea7\uff0c\u2026\u2026\uff0c\u5b83\u4e5f\u53ef\u4ee5\u8df3\u4e0a $n$ \u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a $n$ \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u5206\u6790\uff1a\u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u2026\u2026\u5b83\u4e5f\u53ef\u4ee5\u8df3\u4e0an\u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2an\u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u9898\u76ee\u80cc\u666f\u5176\u5b9e\u662f\u6590\u6ce2\u62c9\u5951\u6570\u5217\uff0c\u662f\u5178\u578b\u7684\u4f7f\u7528\u201c\u52a8\u6001\u89c4\u5212\u201d\u89e3\u51b3\u7684\u95ee\u9898\uff1b \u6ce8\u610f\u8fb9\u754c\u60c5\u51b5\uff0c\u4e00\u6b21\u8df3\u4e0a $n$ \u4e2a\u53f0\u9636\uff0c\u8fd9\u5355\u72ec\u7b97\u4e00\u79cd\u65b9\u6cd5\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u8d77\u70b9\u4e3a $1$\uff0c\u8fd9\u5c31\u662f\u4e0b\u9762\u4ee3\u7801\u4e2d\u7b2c $13$ \u884c\u7684\u610f\u601d\uff1b \u53ef\u4ee5\u8fdb\u4e00\u6b65\u5f52\u7eb3\uff0c\u5177\u4f53\u89c1\u8ba8\u8bba\u533a\u76f8\u5e94\u7684\u89e3\u7b54\u3002 Java \u4ee3\u7801\uff1a public class Solution { // 1 2 3 public int JumpFloorII(int target) { if (target == 0 || target == 1) { return 1; } int n = target; int[] dp = new int[n + 1]; dp[1] = 1; dp[2] = 2; for (int i = 3; i <= n; i++) { // \u8d77\u70b9\u662f 1 \u8fd9\u4e00\u70b9\u8981\u7279\u522b\u5c0f\u5fc3 int res = 1; for (int j = 1; j < i; j++) { res += dp[j]; } dp[i] = res; } return dp[n]; } public static void main(String[] args) { Solution solution = new Solution(); int jumpFloorII = solution.JumpFloorII(3); System.out.println(jumpFloorII); } } Python \u4ee3\u7801\uff1a\u56e0\u4e3a\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4efb\u610f\u53f0\u9636\uff0c\u6211\u4eec\u5c31\u8ba9\u5b83\u8df3 $n$ \u9636\uff0c\u6240\u4ee5\u521d\u59cb\u503c\u8bbe\u7f6e\u4e3a $1$ \u3002 class Solution: def jumpFloorII(self, number): if number == 0: return 1 if number == 1: return 1 dp = [1 for _ in range(number + 1)] dp[0] = 0 dp[1] = 1 for i in range(2, number + 1): for j in range(1, i): dp[i] += dp[j] return dp[number] \u601d\u8def2\uff1a \u5f53 $n=1$ \u65f6\uff0c\u7ed3\u679c\u4e3a $1$\uff1b \u5f53 $n=2$ \u65f6\uff0c\u7ed3\u679c\u4e3a $2$\uff1b \u5f53 $n=3$ \u65f6\uff0c\u7ed3\u679c\u4e3a $4$\uff1b \u2026\u2026 \u4ee5\u6b64\u7c7b\u63a8\uff0c\u4f7f\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u4e0d\u96be\u53d1\u73b0\uff0c\u8df3\u6cd5 $f(n)=2^{n-1}$\u3002 Python \u4ee3\u7801\uff1a class Solution: def jumpFloorII(self, number): # write code here if number <= 2: return number total = 1 for _ in range(1, number): total *= 2 return total","title":"\u7b2c 10-2 \u9898\uff1a\u53d8\u6001\u8df3\u53f0\u9636"},{"location":"10/#10-3","text":"\u53c2\u8003\u8d44\u6599\uff1a \u6c42\u89e3\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u82e5\u5e72\u65b9\u6cd5 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u6211\u4eec\u53ef\u4ee5\u7528 2 1 \u7684\u5c0f\u77e9\u5f62\u6a2a\u7740\u6216\u8005\u7ad6\u7740\u53bb\u8986\u76d6\u66f4\u5927\u7684\u77e9\u5f62\u3002\u8bf7\u95ee\u7528 n \u4e2a 2 1 \u7684\u5c0f\u77e9\u5f62\u65e0\u91cd\u53e0\u5730\u8986\u76d6\u4e00\u4e2a 2*n \u7684\u5927\u77e9\u5f62\uff0c\u603b\u5171\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\uff1f Java \u4ee3\u7801\uff1a\u672c\u8d28\u5176\u5b9e\u8fd8\u662f\u6590\u6ce2\u62c9\u5951\u6570\u5217\u3002 public class Solution { public int RectCover(int target) { if (target <= 2) { return target; } int a = 1; int b = 2; int c = 0; for (int i = 3; i <= target; i++) { c = a + b; a = b; b = c; } return c; } }","title":"\u7b2c 10-3 \u9898\uff1a\u6590\u6ce2\u62c9\u5951\u6570\u5217\u77e9\u9635\u6c42\u6cd5"},{"location":"11-20/","text":"\u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09 \u9898\u89e3\uff08Python \u8bed\u8a00\u5b9e\u73b0\uff09\u7b2c 11-20 \u9898 \u7b2c 11 \u9898\uff1a\u65cb\u8f6c\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u6570\u5b57 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c\u3002 \u8f93\u5165\u4e00\u4e2a\u5347\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20\u3002 \u4f8b\u5982\u6570\u7ec4 [3,4,5,1,2] \u4e3a [1,2,3,4,5] \u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8be5\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e3a $1$\u3002 \u6570\u7ec4\u53ef\u80fd\u5305\u542b\u91cd\u590d\u9879\u3002 \u6ce8\u610f \uff1a\u6570\u7ec4\u5185\u6240\u542b\u5143\u7d20\u975e\u8d1f\uff0c\u82e5\u6570\u7ec4\u5927\u5c0f\u4e3a0\uff0c\u8bf7\u8fd4\u56de-1\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a nums=[2, 2, 2, 0, 1] \u8f93\u51fa\uff1a0 Java \u4ee3\u7801\uff1a public class Solution { // \u867d\u7136\u53ef\u4ee5\u901a\u8fc7\uff0c\u4f46\u662f O(n) \u7684\u590d\u6742\u5ea6\u5e76\u4e0d\u7406\u60f3 public int minNumberInRotateArray(int[] array) { // {3,4,5,1,2} // 1 2 3 4 5 int len = array.length; for (int i = 1; i < len - 1; i++) { if (array[i] < array[i - 1]) { return array[i]; } } // \u5982\u679c\u8d70\u5230\u8fd9\u91cc\uff0c\u8bf4\u660e\u6570\u7ec4\u662f\u5347\u5e8f\u7684\uff0c\u76f4\u63a5\u8fd4\u56de\u7b2c 0 \u53f7\u7d22\u5f15\u7684\u5143\u7d20\u5c31\u53ef\u4ee5\u4e86 return array[0]; } public static void main(String[] args) { // int[] nums = new int[]{3, 4, 5, 1, 2}; int[] nums = new int[]{1, 2, 3, 4, 5}; Solution solution = new Solution(); int minNumberInRotateArray = solution.minNumberInRotateArray(nums); System.out.println(minNumberInRotateArray); } } \u601d\u8def1 \uff1a\u8fd9\u662f\u5178\u578b\u7684\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u6cd5\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u5e94\u7528\u4e8c\u5206\u6cd5\u7684\u6a21\u677f\u3002\u7279\u522b\u6ce8\u610f\uff0c\u6570\u7ec4\u53ef\u80fd\u5305\u542b\u91cd\u590d\u9879\uff0c\u56e0\u6b64\u4e2d\u95f4\u9879\u5982\u679c\u7b49\u4e8e\u672b\u5c3e\u9879\uff0c\u4f8b\u5982\uff1a [1, 1, 1, 1, 1, 0, 1] \uff0c\u4e0d\u80fd\u780d\u6389\u4e00\u534a\uff0c\u53ea\u80fd\u628a\u672b\u5c3e\u9879\u6392\u9664\u6389\u3002 Python \u4ee3\u7801\uff1a class Solution: def findMin(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" size = len(nums) if size == 0: return -1 l = 0 r = size - 1 while l < r: mid = l + (r - l) // 2 if nums[mid] < nums[r]: # mid \u6709\u53ef\u80fd\u662f\u6700\u5c0f\u503c # [7,8,1,2,3] r = mid elif nums[mid] > nums[r]: # mid \u80af\u5b9a\u4e0d\u662f\u6700\u5c0f\u503c # [7,8,9,10,11,1,2,3] l = mid + 1 else: # \u90fd\u6709\u53ef\u80fd\uff0c\u6240\u4ee5\u5c31\u628a r \u6392\u9664\u4e86 # [1,1,1,1,1,0,1] assert nums[mid] == nums[r] r = r - 1 return nums[l] \u601d\u8def2 \uff1a\u8fd8\u53ef\u4ee5\u4f7f\u7528\u201c\u5206\u6cbb\u6cd5\u201d\uff0c\u201c\u5206\u6cbb\u6cd5\u201d\u5c31\u4e0d\u7528\u5728\u4e4e\u6709\u6ca1\u6709\u91cd\u590d\u9879\u4e86\u3002\u4f46\u662f\u201c\u5206\u6cbb\u6cd5\u201d\u65e0\u5f02\u4e8e\u628a\u6574\u4e2a\u6570\u7ec4\u90fd\u770b\u4e00\u904d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002 Python \u4ee3\u7801\uff1a class Solution: def findMin(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" size = len(nums) if size == 0: return -1 if size == 1: return nums[0] return self.__findMin(nums, 0, size - 1) def __findMin(self, nums, left, right): if left == right: return nums[left] if left + 1 == right: return min(nums[left], nums[right]) mid = left + (right - left) // 2 return min(self.__findMin(nums, left, mid), self.__findMin(nums, mid + 1, right)) \u5206\u6790\uff1a\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7684\u601d\u60f3\uff0c\u56e0\u4e3a\u6700\u5c0f\u7684\u6570\u5b57\u5f88\u53ef\u80fd\u51fa\u73b0\u5728\u9996\u4f4d\uff0c\u4ece\u540e\u5411\u524d\u626b\u63cf\u662f\u6c42\u89e3\u8fd9\u9053\u9898\u7684\u91cd\u8981\u6280\u5de7\uff0c\u5426\u5219\u9700\u8981\u5206\u7c7b\u8ba8\u8bba\uff0c\u5c31\u53d8\u5f97\u9ebb\u70e6\u4e86\uff08\u5373\u8ba9\u540e\u9762\u7684\u6307\u9488\u5411\u524d\u79fb\u52a8\uff09\u3002 Java \u4ee3\u7801\uff1a public class Solution2 { public int minNumberInRotateArray(int[] array) { int len = array.length; if (len == 0) { return 0; } int first = 0; int last = len - 1; while (first < last) { int mid = first + (last - first) / 2; if (array[mid] > array[last]) { first = mid + 1; } else if (array[mid] == array[last]) { last = last - 1; } else { last = mid; } } return array[first]; } public static void main(String[] args) { // int[] nums = new int[]{3}; // int[] nums = new int[]{3, 4, 5, 6, 7, 8, 9, 1, 2}; // int[] nums = new int[]{1, 2, 3, 4, 5}; int[] nums = new int[]{2, 2, 2, 1, 2}; Solution2 solution2 = new Solution2(); int minNumberInRotateArray = solution2.minNumberInRotateArray(nums); System.out.println(minNumberInRotateArray); } } \u7b2c 12 \u9898\uff1a\u77e9\u9635\u4e2d\u7684\u8def\u5f84 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u77e9\u9635\u4e2d\u7684\u8def\u5f84 \u3002 \u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u5728\u4e00\u4e2a\u77e9\u9635\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u6761\u5305\u542b\u67d0\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u7684\u8def\u5f84\u3002 \u8def\u5f84\u53ef\u4ee5\u4ece\u77e9\u9635\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u683c\u5b50\u5f00\u59cb\uff0c\u6bcf\u4e00\u6b65\u53ef\u4ee5\u5728\u77e9\u9635\u4e2d\u5411\u5de6\uff0c\u5411\u53f3\uff0c\u5411\u4e0a\uff0c\u5411\u4e0b\u79fb\u52a8\u4e00\u4e2a\u683c\u5b50\u3002 \u5982\u679c\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u4e86\u77e9\u9635\u4e2d\u7684\u67d0\u4e00\u4e2a\u683c\u5b50\uff0c\u5219\u4e4b\u540e\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8fd9\u4e2a\u683c\u5b50\u3002 \u6ce8\u610f\uff1a \u8f93\u5165\u7684\u8def\u5f84\u4e0d\u4e3a\u7a7a\uff1b \u6240\u6709\u51fa\u73b0\u7684\u5b57\u7b26\u5747\u4e3a\u5927\u5199\u82f1\u6587\u5b57\u6bcd\uff1b \u6837\u4f8b\uff1a ``` matrix= [ [\"A\",\"B\",\"C\",\"E\"], [\"S\",\"F\",\"C\",\"S\"], [\"A\",\"D\",\"E\",\"E\"] ] str=\"BCCE\" , return \"true\" str=\"ASAE\" , return \"false\" ``` \u601d\u8def\uff1a\u5178\u578b\u7684 floodfill \u89e3\u6cd5\uff0c\u672c\u8d28\u4e0a\u662f\u9012\u5f52\u56de\u6eaf\u7b97\u6cd5\u3002 Python \u4ee3\u7801\uff1a class Solution(object): directions = [(-1, 0), (1, 0), (0, 1), (0, -1)] def hasPath(self, matrix, string): \"\"\" :type matrix: List[List[str]] :type string: str :rtype: bool \"\"\" rows = len(matrix) if rows == 0: return False cols = len(matrix[0]) marked = [[False for _ in range(cols)] for _ in range(rows)] for i in range(rows): for j in range(cols): if self.__has_path(matrix, string, 0, i, j, marked, rows, cols): return True return False def __has_path(self, matrix, word, index, start_x, start_y, marked, m, n): # \u6ce8\u610f\uff1a\u9996\u5148\u5224\u65ad\u6781\u7aef\u60c5\u51b5 if index == len(word) - 1: return matrix[start_x][start_y] == word[-1] if matrix[start_x][start_y] == word[index]: # \u5148\u5360\u4f4f\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u641c\u7d22\u4e0d\u6210\u529f\u7684\u8bdd\uff0c\u8981\u91ca\u653e\u6389 marked[start_x][start_y] = True for direction in self.directions: new_x = start_x + direction[0] new_y = start_y + direction[1] if 0 <= new_x < m and 0 <= new_y < n and not marked[new_x][new_y]: if self.__has_path(matrix, word, index + 1, new_x, new_y, marked, m, n): return True marked[start_x][start_y] = False return False if __name__ == '__main__': matrix = [ [\"A\", \"B\", \"C\", \"E\"], [\"S\", \"F\", \"E\", \"S\"], [\"A\", \"D\", \"E\", \"E\"] ] str = \"ABCEFSADEESE\" solution = Solution() result = solution.hasPath(matrix, str) print(result) \u540c LeetCode \u7b2c 79 \u9898\uff0c\u4f20\u9001\u95e8\uff1a 79. \u5355\u8bcd\u641c\u7d22 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683c\u548c\u4e00\u4e2a\u5355\u8bcd\uff0c\u627e\u51fa\u8be5\u5355\u8bcd\u662f\u5426\u5b58\u5728\u4e8e\u7f51\u683c\u4e2d\u3002 \u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002 \u793a\u4f8b: board = [ ['A','B','C','E'], ['S','F','C','S'], ['A','D','E','E'] ] \u7ed9\u5b9a word = \"ABCCED\", \u8fd4\u56de true. \u7ed9\u5b9a word = \"SEE\", \u8fd4\u56de true. \u7ed9\u5b9a word = \"ABCB\", \u8fd4\u56de false. \u601d\u8def\uff1a\u5176\u5b9e\u5c31\u662f floodfill \u7b97\u6cd5\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u7840\u7684\u7b97\u6cd5\uff0c\u4e00\u5b9a\u8981\u638c\u63e1\u3002\u7279\u522b\u8981\u5f04\u6e05\u695a\uff0c marked \u6570\u7ec4\u7684\u4f5c\u7528\uff0c\u4e00\u5f00\u59cb\u8981\u5360\u4f4f\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u53d1\u73b0\u6b64\u8def\u4e0d\u901a\u7684\u65f6\u5019\uff0c\u8981\u91ca\u653e\u6389\u3002 Python \u4ee3\u7801\uff1a class Solution: # (x-1,y) # (x,y-1) (x,y) (x,y+1) # (x+1,y) directions = [(0, -1), (-1, 0), (0, 1), (1, 0)] def exist(self, board, word): \"\"\" :type board: List[List[str]] :type word: str :rtype: bool \"\"\" m = len(board) n = len(board[0]) marked = [[False for _ in range(n)] for _ in range(m)] for i in range(m): for j in range(n): # \u5bf9\u6bcf\u4e00\u4e2a\u683c\u5b50\u90fd\u4ece\u5934\u5f00\u59cb\u641c\u7d22 if self.__search_word(board, word, 0, i, j, marked, m, n): return True return False def __search_word(self, board, word, index, start_x, start_y, marked, m, n): # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if index == len(word) - 1: return board[start_x][start_y] == word[index] # \u4e2d\u95f4\u5339\u914d\u4e86\uff0c\u518d\u7ee7\u7eed\u641c\u7d22 if board[start_x][start_y] == word[index]: # \u5148\u5360\u4f4f\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u641c\u7d22\u4e0d\u6210\u529f\u7684\u8bdd\uff0c\u8981\u91ca\u653e\u6389 marked[start_x][start_y] = True for direction in self.directions: new_x = start_x + direction[0] new_y = start_y + direction[1] if 0 <= new_x < m and 0 <= new_y < n and \\ not marked[new_x][new_y] and \\ self.__search_word(board, word, index + 1, new_x, new_y, marked, m, n): return True marked[start_x][start_y] = False return False Java \u4ee3\u7801\uff1a public class Solution { /** * x-1,y * x,y-1 x,y x,y+1 * x+1,y */ private int[][] direct = new int[][]{{-1, 0}, {0, 1}, {1, 0}, {0, -1}}; public boolean hasPath(char[] matrix, int rows, int cols, char[] str) { int len = matrix.length; if (len == 0) { return false; } boolean[] marked = new boolean[len]; for (int i = 0; i < rows; i++) { for (int j = 0; j < cols; j++) { if (dfs(matrix, rows, cols, str, str.length, marked, i, j, 0)) { return true; } } } return false; } private boolean dfs(char[] matrix, int rows, int cols, char[] str, int len, boolean[] marked, int i, int j, int start) { // \u5339\u914d\u5230\u6700\u540e\uff0c\u8bf4\u660e\u627e\u5230\u4e00\u6761\u8def\u5f84 int index = getIndex(i, j, cols); if (start == len - 1) { return matrix[index] == str[start]; } // \u8981\u7279\u522b\u5c0f\u5fc3\uff01 marked[index] = true; if (matrix[index] == str[start]) { // \u5f53\u524d\u5339\u914d\u4e86\uff0c\u624d\u5f00\u59cb\u5c1d\u8bd5\u8d70\u540e\u9762\u7684\u8def for (int k = 0; k < 4; k++) { // \u7279\u522b\u5c0f\u5fc3\uff0c\u4e00\u5b9a\u662f\u4e00\u4e2a\u521d\u59cb\u5316\u7684\u65b0\u7684\u53d8\u91cf int newi = i + direct[k][0]; int newj = j + direct[k][1]; int nextIndex = getIndex(newi, newj, cols); if (inArea(newi, newj, rows, cols) && !marked[nextIndex]) { // marked[nextIndex] = true; \u4e0d\u5728\u8fd9\u91cc\u8bbe\u7f6e if (dfs(matrix, rows, cols, str, len, marked, newi, newj, start + 1)) { return true; } // marked[nextIndex] = false; \u4e0d\u5728\u8fd9\u91cc\u8bbe\u7f6e } } } // \u8981\u7279\u522b\u5c0f\u5fc3\uff01 marked[index] = false; return false; } private int getIndex(int x, int y, int cols) { return x * cols + y; } private boolean inArea(int x, int y, int rows, int cols) { return x >= 0 && x < rows && y >= 0 && y < cols; } public static void main(String[] args) { char[] matrix = new char[]{'a', 'b', 't', 'g', 'c', 'f', 'c', 's', 'j', 'd', 'e', 'h'}; int rows = 3; int cols = 4; Solution solution = new Solution(); char[] str = \"hscfdeh\".toCharArray(); boolean hasPath = solution.hasPath(matrix, rows, cols, str); System.out.println(hasPath); } } Java \u4ee3\u7801\uff1a public class Solution { /** * x-1,y * x,y-1 x,y x,y+1 * x+1,y */ private int[][] direct = new int[][]{{-1, 0}, {0, 1}, {1, 0}, {0, -1}}; public boolean hasPath(char[] matrix, int rows, int cols, char[] str) { int len = matrix.length; if (len == 0) { return false; } boolean[] marked = new boolean[len]; for (int i = 0; i < rows; i++) { for (int j = 0; j < cols; j++) { if (dfs(matrix, rows, cols, str, str.length, marked, i, j, 0)) { return true; } } } return false; } private boolean dfs(char[] matrix, int rows, int cols, char[] str, int len, boolean[] marked, int i, int j, int start) { // \u5339\u914d\u5230\u6700\u540e\uff0c\u8bf4\u660e\u627e\u5230\u4e00\u6761\u8def\u5f84 int index = getIndex(i, j, cols); if (start == len - 1) { return matrix[index] == str[start]; } // \u8981\u7279\u522b\u5c0f\u5fc3\uff01 marked[index] = true; if (matrix[index] == str[start]) { // \u5f53\u524d\u5339\u914d\u4e86\uff0c\u624d\u5f00\u59cb\u5c1d\u8bd5\u8d70\u540e\u9762\u7684\u8def for (int k = 0; k < 4; k++) { // \u7279\u522b\u5c0f\u5fc3\uff0c\u4e00\u5b9a\u662f\u4e00\u4e2a\u521d\u59cb\u5316\u7684\u65b0\u7684\u53d8\u91cf int newi = i + direct[k][0]; int newj = j + direct[k][1]; int nextIndex = getIndex(newi, newj, cols); if (inArea(newi, newj, rows, cols) && !marked[nextIndex]) { // marked[nextIndex] = true; \u4e0d\u5728\u8fd9\u91cc\u8bbe\u7f6e if (dfs(matrix, rows, cols, str, len, marked, newi, newj, start + 1)) { return true; } // marked[nextIndex] = false; \u4e0d\u5728\u8fd9\u91cc\u8bbe\u7f6e } } } // \u8981\u7279\u522b\u5c0f\u5fc3\uff01 marked[index] = false; return false; } private int getIndex(int x, int y, int cols) { return x * cols + y; } private boolean inArea(int x, int y, int rows, int cols) { return x >= 0 && x < rows && y >= 0 && y < cols; } public static void main(String[] args) { char[] matrix = new char[]{'a', 'b', 't', 'g', 'c', 'f', 'c', 's', 'j', 'd', 'e', 'h'}; int rows = 3; int cols = 4; Solution solution = new Solution(); char[] str = \"hscfdeh\".toCharArray(); boolean hasPath = solution.hasPath(matrix, rows, cols, str); System.out.println(hasPath); } } \u7b2c 13 \u9898\uff1a\u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5730\u4e0a\u6709\u4e00\u4e2a $m$ \u884c\u548c $n$ \u5217\u7684\u65b9\u683c\uff0c\u6a2a\u7eb5\u5750\u6807\u8303\u56f4\u5206\u522b\u662f $0\u223cm\u22121$ \u548c $0\u223cn\u22121$\u3002 \u4e00\u4e2a\u673a\u5668\u4eba\u4ece\u5750\u6807 $(0,0)$ \u7684\u683c\u5b50\u5f00\u59cb\u79fb\u52a8\uff0c\u6bcf\u4e00\u6b21\u53ea\u80fd\u5411\u5de6\uff0c\u53f3\uff0c\u4e0a\uff0c\u4e0b\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\u4e00\u683c\u3002 \u4f46\u662f\u4e0d\u80fd\u8fdb\u5165\u884c\u5750\u6807\u548c\u5217\u5750\u6807\u7684\u6570\u4f4d\u4e4b\u548c\u5927\u4e8e $k$ \u7684\u683c\u5b50\u3002 \u8bf7\u95ee\u8be5\u673a\u5668\u4eba\u80fd\u591f\u8fbe\u5230\u591a\u5c11\u4e2a\u683c\u5b50\uff1f \u6837\u4f8b1\uff1a \u8f93\u5165\uff1a$k=7$\uff0c$m=4$\uff0c$n=5$ \u8f93\u51fa\uff1a20 \u6837\u4f8b2\uff1a \u8f93\u5165\uff1a$k=18$\uff0c$m=40$\uff0c$n=40$ \u8f93\u51fa\uff1a1484 \u89e3\u91ca\uff1a\u5f53 k \u4e3a 18 \u65f6\uff0c\u673a\u5668\u4eba\u80fd\u591f\u8fdb\u5165\u65b9\u683c\uff0835,37\uff09\uff0c\u56e0\u4e3a 3+5+3+7 = 18\u3002 \u4f46\u662f\uff0c\u5b83\u4e0d\u80fd\u8fdb\u5165\u65b9\u683c\uff0835,38\uff09\uff0c\u56e0\u4e3a 3+5+3+8 = 19\u3002 \u6ce8\u610f : 0<=m<=50 0<=n<=50 0<=k<=100 \u601d\u8def\uff1a\u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff08BFS\uff09\uff0c\u6ce8\u610f\u4e0d\u662f\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08DFS\uff09\u3002 Python \u4ee3\u7801\uff1a \u7279\u522b\u6ce8\u610f\uff0cmark \u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u662f\u653e\u5165\u961f\u5217\u7684\u65f6\u5019\u5c31 mark\uff0c\u4e0d\u662f\u7b49\u5230\u51fa\u961f\u7684\u65f6\u5019 mark\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u5f88\u591a\u91cd\u590d class Solution(object): def __count_bit_sum(self, num): res = 0 while num: res += num % 10 num //= 10 return res def __in_area(self, x, y, rows, cols): return 0 <= x < rows and 0 <= y < cols def movingCount(self, threshold, rows, cols): \"\"\" :type threshold: int :type rows: int :type cols: int :rtype: int \"\"\" if threshold < 0 or rows == 0 or cols == 0: return 0 if threshold == 0: return 1 directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] marked = [[False for _ in range(cols)] for _ in range(rows)] queue = [(0, 0)] res = 0 while queue: top_x, top_y = queue.pop(0) for direction in directions: new_x = top_x + direction[0] new_y = top_y + direction[1] if self.__in_area(new_x, new_y, rows, cols) \\ and not marked[new_x][new_y] \\ and self.__count_bit_sum(new_x) + self.__count_bit_sum(new_y) <= threshold: queue.append((new_x, new_y)) # \u6ce8\u610f\uff1a\u5e94\u8be5\u5199\u5728\u8fd9\u91cc\uff0c\u800c\u4e0d\u662f pop \u51fa\u961f\u5217\u7684\u65f6\u5019 marked[new_x][new_y] = True res += 1 return res if __name__ == '__main__': k = 18 m = 40 n = 40 solution = Solution() result = solution.movingCount(k, m, n) print(result) \u7b2c 14 \u9898\uff1a\u526a\u7ef3\u5b50 \u8bf4\u660e\uff1a\u540c LeetCode 343 \u9898\u3002 \u4f20\u9001\u95e8\uff1a AcWing 25. \u526a\u7ef3\u5b50 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u4f60\u4e00\u6839\u957f\u5ea6\u4e3a $n$ \u7684\u7ef3\u5b50\uff0c\u8bf7\u628a\u7ef3\u5b50\u526a\u6210 $m$ \u6bb5\uff08$m$\u3001$n$ \u90fd\u662f\u6574\u6570\uff0c$2 \\le n \\le 58^2$ \u5e76\u4e14 $m \\ge2$\uff09\u3002 \u6bcf\u6bb5\u7684\u7ef3\u5b50\u7684\u957f\u5ea6\u8bb0\u4e3a k[0]\u3001k[1]\u3001\u2026\u2026\u3001k[m] \u3002 k[0]k[1] \u2026 k[m] \u53ef\u80fd\u7684\u6700\u5927\u4e58\u79ef\u662f\u591a\u5c11\uff1f \u4f8b\u5982\u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u662f8\u65f6\uff0c\u6211\u4eec\u628a\u5b83\u526a\u6210\u957f\u5ea6\u5206\u522b\u4e3a2\u30013\u30013\u7684\u4e09\u6bb5\uff0c\u6b64\u65f6\u5f97\u5230\u6700\u5927\u7684\u4e58\u79ef18\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a8 \u8f93\u51fa\uff1a18 \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u57280\u5230n-1\u7684\u8303\u56f4\u5185\u3002 \u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u662f\u91cd\u590d\u7684\u3002\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u957f\u5ea6\u4e3a7\u7684\u6570\u7ec4{2,3,1,0,2,5,3}\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u8f93\u51fa\u662f\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b572\u3002 \u5206\u6790\uff1a\u8fd9\u9053\u9898\u5728\u725b\u5ba2\u7f51\u4e0a\u6ca1\u6709 online judge \uff0c\u6211\u4eec\u53ef\u4ee5\u53bb\u5b8c\u6210 LeetCode \u4e0a\u7b2c 343 \u9898\u68c0\u9a8c\u81ea\u5df1\u7684\u4ee3\u7801\u662f\u5426\u7f16\u5199\u6b63\u786e\u3002 \u52a8\u6001\u89c4\u5212\u3002\u5173\u952e\u5728\u4e8e\u753b\u51fa\u6811\u5f62\u7ed3\u6784\u56fe\u3002 \u72b6\u6001\uff1a\u8fd9\u4e2a\u72b6\u6001\u5c31\u662f\u9898\u76ee\u4e2d\u8981\u6211\u4eec\u6c42\u7684\u3002\u628a\u6574\u6570 i \u81f3\u5c11\u5206\u5272\u6210 $2$ \u4e2a\u90e8\u5206\uff0c\u5404\u4e2a\u90e8\u5206\u90fd\u5927\u4e8e $0$\uff0c\u5b83\u4eec\u7684\u4e58\u79ef\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u7528 j \u904d\u5386 1, 2, ..., i - 1 \uff0c\u8981\u4e48\u5206\u5272\u6210 i - j \u548c j \uff0c\u8981\u4e48\u5206\u9694\u6210 j \u548c dp[i - j] \uff0c\u53d6\u6700\u5927\u8005\u3002 Python \u4ee3\u7801\uff1a dp[0] \u8fd9\u4e2a\u4f4d\u7f6e\u6ca1\u6709\u4f7f\u7528 class Solution(object): def maxProductAfterCutting(self, length): \"\"\" :type length: int :rtype: int \"\"\" assert length > 1 dp = [0 for _ in range(length + 1)] dp[1] = 1 for i in range(2, length + 1): for j in range(1, i): dp[i] = max(dp[i], j * (i - j), j * dp[i - j]) return dp[length] Java \u4ee3\u7801\uff1a\u4f7f\u7528\u52a8\u6001\u89c4\u5212 class Solution { public int integerBreak(int n) { if (n <= 1) { return 1; } int[] dp = new int[n + 1]; dp[0] = 1; dp[1] = 1; for (int i = 2; i <= n; i++) { int max = 0; for (int j = 1; j < i; j++) { max = max3(max, j * (i - j), j * dp[i - j]); } dp[i] = max; } return dp[n]; } private int max3(int num1, int num2, int num3) { return Integer.max(Integer.max(num1, num2), num3); } public static void main(String[] args) { Solution solution = new Solution(); int integerBreak = solution.integerBreak(8); System.out.println(integerBreak); } } Java \u4ee3\u7801\uff1a\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5 class Solution2 { public int integerBreak(int n) { if (n <= 2) { return 1; } if (n == 3) { return 2; } if (n == 4) { return 4; } // \u63a5\u4e0b\u6765\u5c31\u662f n >= 5 \u7684\u65f6\u5019\u7684\u903b\u8f91\u4e86 int res = 1; while (n > 4) { res *= 3; n -= 3; } res *= n; return res; } public static void main(String[] args) { Solution2 solution2 = new Solution2(); int integerBreak = solution2.integerBreak(8); System.out.println(integerBreak); } } LeetCode 343 \u9898\uff1a\u6574\u6570\u62c6\u5206 \u4f20\u9001\u95e8\uff1a 343. \u6574\u6570\u62c6\u5206 \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u5c06\u5176\u62c6\u5206\u4e3a \u81f3\u5c11 \u4e24\u4e2a\u6b63\u6574\u6570\u7684\u548c\uff0c\u5e76\u4f7f\u8fd9\u4e9b\u6574\u6570\u7684\u4e58\u79ef\u6700\u5927\u5316\u3002 \u8fd4\u56de\u4f60\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u4e58\u79ef\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2 \u8f93\u51fa: 1 \u89e3\u91ca: 2 = 1 + 1, 1 \u00d7 1 = 1\u3002 \u793a\u4f8b 2: \u8f93\u5165: 10 \u8f93\u51fa: 36 \u89e3\u91ca: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36\u3002 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe n \u4e0d\u5c0f\u4e8e 2 \u4e14\u4e0d\u5927\u4e8e 58\u3002 \u5206\u6790\uff1a\u8fd9\u662f\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u95ee\u9898\u3002\u53ef\u4ee5\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5\u3002 \u8d2a\u5fc3\u7b97\u6cd5\uff1a$2(n-2)>n$ \u5f97\u5230 $n > 4$\uff0c$3(n-3)>n$ \uff0c\u5f97\u5230 $n>4.5$\uff0c\u5373 $n$ \u5927\u4e8e\u7b49\u4e8e $5$ \u7684\u65f6\u5019\u3002 \u7ed3\u8bba\uff1a\u4e0d\u80fd\u5305\u542b $1$ \uff0c\u6240\u6709\u7684\u52a0\u6cd5\u56e0\u5b50\u53ea\u80fd\u6709 $2$ \u548c $3$\uff0c\u6700\u591a\u53ea\u6709 $2$ \u4e2a $2$\uff0c\u56e0\u6b64\u52a0\u6cd5\u56e0\u5b50\u91cc\u6ca1\u6709 $4$ \u3002 Java \u4ee3\u7801\uff1a class Solution2 { public int integerBreak(int n) { if (n <= 2) { return 1; } if (n == 3) { return 2; } if (n == 4) { return 4; } // \u63a5\u4e0b\u6765\u5c31\u662f n >= 5 \u7684\u65f6\u5019\u7684\u903b\u8f91\u4e86 int res = 1; while (n > 4) { res *= 3; n -= 3; } res *= n; return res; } public static void main(String[] args) { Solution2 solution2 = new Solution2(); int integerBreak = solution2.integerBreak(8); System.out.println(integerBreak); } } C++ \u4ee3\u7801\uff1a \u7b2c 16 \u9898\uff1a\u6570\u503c\u7684\u6574\u6570\u6b21\u65b9\uff08\u5feb\u901f\u5e42\uff09 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5b9e\u73b0\u51fd\u6570 double Power(double base, int exponent) \uff0c\u6c42 base \u7684 exponent \u6b21\u65b9\u3002 \u4e0d\u5f97\u4f7f\u7528\u5e93\u51fd\u6570\uff0c\u540c\u65f6\u4e0d\u9700\u8981\u8003\u8651\u5927\u6570\u95ee\u9898\u3002 \u6ce8\u610f\uff1a \u4e0d\u4f1a\u51fa\u73b0\u5e95\u6570\u548c\u6307\u6570\u540c\u4e3a 0 \u7684\u60c5\u51b5 \u6837\u4f8b1\uff1a \u8f93\u5165\uff1a10 \uff0c2 \u8f93\u51fa\uff1a100 \u6837\u4f8b2\uff1a \u8f93\u5165\uff1a10 \uff0c-2 \u8f93\u51fa\uff1a0.01 \u5206\u6790\uff1a\u6570\u503c\u7684\u6574\u6570\u6b21\u65b9\uff0c\u8981\u5904\u7406\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\uff0c\u52a0\u6cd5\u53d8\u6210\u4e58\u6cd5\u3002\u8003\u8651\u5e95\u6570\u4e3a $0$ \u7684\u65f6\u5019\uff0c\u6307\u6570\u4e0d\u80fd\u4e3a\u8d1f\u6570\u3002 \u601d\u8def1\uff1a\u4f7f\u7528\u9012\u5f52 Python \u4ee3\u7801\uff1a class Solution(object): def Power(self, base, exponent): \"\"\" :type base: float :type exponent: int :rtype: float \"\"\" if exponent == 0: return 1 if exponent < 0: return 1 / self.Power(base, -exponent) # \u5982\u679c\u662f\u5947\u6570 if exponent & 1: return base * self.Power(base, exponent - 1) return self.Power(base * base, exponent >> 1) \u601d\u8def2\uff1a\u975e\u9012\u5f52\u7684\u5199\u6cd5\uff0c\u628a exponent \u60f3\u8c61\u6210\u4e8c\u8fdb\u5236\u3002 Python \u4ee3\u7801\uff1a\u5728\u7406\u89e3\u7684\u57fa\u7840\u4e0a\u8bb0\u4f4f\u8fd9\u4e2a\u5199\u6cd5 class Solution(object): def Power(self, base, exponent): \"\"\" :type base: float :type exponent: int :rtype: float \"\"\" if exponent < 0: base = 1 / base # \u8d1f\u6570\u53d8\u6210\u6b63\u6570 exponent = -exponent res = 1 while exponent: if exponent & 1: res *= base base *= base exponent >>= 1 return res \u7ed9\u5b9a\u4e00\u4e2a double \u7c7b\u578b\u7684\u6d6e\u70b9\u6570 base \u548c int \u7c7b\u578b\u7684\u6574\u6570 exponent \u3002\u6c42 base \u7684 exponent \u6b21\u65b9\u3002 \u6c42\u89e3\u601d\u8def\u4e0e\u5173\u952e \u6ce8\u610f\u5206\u7c7b\u8ba8\u8bba\u4e0e\u4e0e\u9012\u5f52\u51fd\u6570\u7684\u8bbe\u8ba1\u3002 \u5173\u952e\uff1a\u5c06\u5faa\u73af\u53d8\u6210\u9012\u5f52\u64cd\u4f5c\uff0c\u6bcf\u6b21\u6298\u534a\u6c42\u503c\uff0c\u907f\u514d\u6b7b\u677f\u505a\u5faa\u73af\uff0c\u8fd9\u79cd\u611f\u89c9\u50cf\u52a0\u6cd5\u53d8\u4e58\u6cd5\u3002 \u6ce8\u610f\u7ec6\u8282\uff1a\u5e95\u6570\u4e3a 0 \u7684\u65f6\u5019\uff0c\u6307\u6570\u4e3a\u8d1f\u6570\u662f\u6ca1\u6709\u610f\u4e49\u7684 \u7cbe\u786e\u8ba1\u7b97\uff0c\u8f6c\u6210\u6d6e\u70b9\u6570 0.125\uff1a System.out.println((double) 1 / 8); \u53f3\u79fb 1 \u4f4d\u8fd0\u7b97\u7b49\u4ef7\u4e8e\u201c\u9664\u4ee5 2\u201d\uff1a // exponent \u6307\u6570\uff0cexponent >> 1 \u8868\u793a\u5c06\u6307\u6570\u9664\u4ee5 2 System.out.println(exponent >> 1); \u4f7f\u7528\u4f4d\u8fd0\u7b97\u7684 \u4e0e \u8fd0\u7b97\u7b26\u4ee3\u66ff\u4e86\u6c42\u4f59\u6570\u8fd0\u7b97\uff0c\u6765\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\uff1a if ((exponent & 1) == 0) { Java \u4ee3\u7801\uff1a public class Solution { public double Power(double base, int exponent) { // \u5148\u628a\u6781\u7aef\u60c5\u51b5\u8003\u8651\u5230 // \u4e0d\u80fd\u7528 == \u6bd4\u8f83\u4e24\u4e2a\u6d6e\u70b9\u6570\u662f\u5426\u76f8\u7b49\uff0c\u56e0\u4e3a\u6709\u8bef\u5dee if (equals(base, 0) && exponent < 0) { throw new IllegalArgumentException(\"\u5f53\u5e95\u6570\u4e3a 0 \u7684\u65f6\u5019\uff0c\u6307\u6570\u4e3a\u8d1f\u6570\u6ca1\u6709\u610f\u4e49\"); } if (exponent == 0) { return 1.0; } // \u4e0b\u9762\u5c06\u6307\u6570\u7684\u4e24\u79cd\u60c5\u51b5\u5408\u5e76\u6210\u4e00\u79cd\u60c5\u51b5\u8003\u8651 if (exponent > 0) { return power(base, exponent); } else { return power(1 / base, -exponent); } } public double power(double base, int exponent) { if (exponent == 0) { return 1.0; } if (exponent % 2 == 0) { double square = power(base, exponent / 2); return square * square; } else { double square = power(base, (exponent - 1) / 2); return square * square * base; } } private boolean equals(double num1, double num2) { return num1 - num2 < 0.000001 && num1 - num2 > -0.000001; } } Java \u4ee3\u7801\uff1a public class Solution { public double Power(double base, int exponent) { if (exponent == 0) { return 1; } if (exponent < 0) { return 1 / Power(base, -exponent); } // \u4f7f\u7528\u4f4d\u8fd0\u7b97\u7684 \u4e0e \u8fd0\u7b97\u7b26\u4ee3\u66ff\u4e86\u6c42\u4f59\u6570\u8fd0\u7b97\uff0c\u6765\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570 if ((exponent & 1) == 0) { double square = Power(base, exponent >> 1); return square * square; } else { double square = Power(base, (exponent - 1) >> 1); return square * square * base; } } public static void main(String[] args) { int base = 3; int exponent = -3; Solution solution = new Solution(); double result1 = solution.Power(base, exponent); System.out.println(result1); exponent = 6; double result2 = solution.Power(base, exponent); System.out.println(result2); // exponent \u6307\u6570\uff0cexponent >> 1 \u8868\u793a\u5c06\u6307\u6570\u9664\u4ee5 2 System.out.println(exponent >> 1); } } LeetCode \u7b2c 50 \u9898\uff1a$Pow(x, n)$ \u4f20\u9001\u95e8\uff1a 50. Pow(x, n) \u3002 \u5b9e\u73b0 pow( x , n ) \uff0c\u5373\u8ba1\u7b97 x \u7684 n \u6b21\u5e42\u51fd\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2.00000, 10 \u8f93\u51fa: 1024.00000 \u793a\u4f8b 2: \u8f93\u5165: 2.10000, 3 \u8f93\u51fa: 9.26100 \u793a\u4f8b 3: \u8f93\u5165: 2.00000, -2 \u8f93\u51fa: 0.25000 \u89e3\u91ca: 2-2 = 1/22 = 1/4 = 0.25 \u8bf4\u660e: -100.0 < x < 100.0 n \u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u2212231, 231 \u2212 1] \u3002 \u601d\u8def1\uff1a\u4f7f\u7528\u5faa\u73af\uff0c\u628a\u6307\u6570 $n$ \u60f3\u6210\u4e8c\u8fdb\u5236 Python \u4ee3\u7801\uff1a class Solution: def myPow(self, x, n): \"\"\" :type x: float :type n: int :rtype: float \"\"\" if n < 0: x = 1 / x n = - n res = 1 while n: if n & 1 == 1: res *= x # \u6ce8\u610f\uff1a\u8fd9\u91cc\u4e0d\u8981\u5199\u6210 res *= res x *= x n >>= 1 return res \u601d\u8def2\uff1a\u5c06\u5faa\u73af\u53d8\u6210\u9012\u5f52\u64cd\u4f5c\uff0c\u6bcf\u6b21\u6298\u534a\u6c42\u503c\uff0c\u907f\u514d\u6b7b\u677f\u505a\u5faa\u73af\uff0c\u8fd9\u79cd\u611f\u89c9\u50cf\u52a0\u6cd5\u53d8\u4e58\u6cd5\u3002\uff08\u8111\u5b50\u91cc\u56de\u5fc6\u516c\u5f0f\uff09\u3002\u6ce8\u610f\u7ec6\u8282\uff1a\u5e95\u6570\u4e3a $0$ \u7684\u65f6\u5019\uff0c\u6307\u6570\u4e3a\u8d1f\u6570\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002 Python \u4ee3\u7801\uff1a\u9012\u5f52\u5199\u6cd5\uff1a \u6ce8\u610f\u8fb9\u754c\u6761\u4ef6 class Solution: def myPow(self, x, n): \"\"\" :type x: float :type n: int :rtype: float \"\"\" # \u5bf9 x = 0 \uff0c n < 0 \u8fd8\u8981\u505a\u7279\u5224 if n == 0: return 1 if n < 0: return 1 / self.myPow(x, -n) if n & 1: return x * self.myPow(x, n - 1) return self.myPow(x * x, n // 2) \u57fa\u672c\u7684\u5199\u6cd5\uff1a https://blog.csdn.net/happyaaaaaaaaaaa/article/details/76552127 \u6a21\u677f\u5199\u6cd51\uff1a \u6a21\u677f\u5199\u6cd52\uff1a \u7b2c 17 \u9898\uff1a\u6253\u5370\u4ece 1 \u5230\u6700\u5927\u7684 n \u4f4d\u6570 \u4f20\u9001\u95e8\uff1a \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u57280\u5230n-1\u7684\u8303\u56f4\u5185\u3002 \u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u662f\u91cd\u590d\u7684\u3002\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u957f\u5ea6\u4e3a7\u7684\u6570\u7ec4{2,3,1,0,2,5,3}\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u8f93\u51fa\u662f\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b572\u3002 \u7b2c 18-1 \u9898\uff1a\u5728 $O(1)$ \u65f6\u95f4\u5220\u9664\u94fe\u8868\u7ed3\u70b9 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u5728 O(1) \u65f6\u95f4\u5220\u9664\u94fe\u8868\u7ed3\u70b9 \u3002 \u7ed9\u5b9a\u5355\u5411\u94fe\u8868\u7684\u4e00\u4e2a\u8282\u70b9\u6307\u9488\uff0c\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5728$O(1)$ \u65f6\u95f4\u5220\u9664\u8be5\u7ed3\u70b9\u3002 \u5047\u8bbe\u94fe\u8868\u4e00\u5b9a\u5b58\u5728\uff0c\u5e76\u4e14\u8be5\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u5c3e\u8282\u70b9\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\u94fe\u8868 1->4->6->8 \uff0c\u5220\u6389\u8282\u70b9\uff1a\u7b2c 2 \u4e2a\u8282\u70b9\u5373 6\uff08\u5934\u8282\u70b9\u4e3a\u7b2c 0 \u4e2a\u8282\u70b9\uff09 \u8f93\u51fa\uff1a\u65b0\u94fe\u8868 1->4->8 \u601d\u8def\uff1a\u5f85\u5220\u9664\u7684\u7ed3\u70b9\u662f\u672b\u5c3e\u7ed3\u70b9\u7684\u60c5\u51b5\u6bd4\u8f83\u5bb9\u6613\u5ffd\u7565\uff0c\u521a\u597d\u9898\u76ee\u4e2d\u8bf4\u201c\u8be5\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u5c3e\u8282\u70b9\u201d\u3002 Python \u4ee3\u7801\uff1a # 28. \u5728O(1)\u65f6\u95f4\u5220\u9664\u94fe\u8868\u7ed3\u70b9 # \u7ed9\u5b9a\u5355\u5411\u94fe\u8868\u7684\u4e00\u4e2a\u8282\u70b9\u6307\u9488\uff0c\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5728O(1)\u65f6\u95f4\u5220\u9664\u8be5\u7ed3\u70b9\u3002 # # \u5047\u8bbe\u94fe\u8868\u4e00\u5b9a\u5b58\u5728\uff0c\u5e76\u4e14\u8be5\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u5c3e\u8282\u70b9\u3002 # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution(object): def deleteNode(self, node): \"\"\" :type node: ListNode :rtype: void \"\"\" # \u5148\u4fdd\u5b58\u4e0b\u4e00\u4e2a\u7ed3\u70b9 next_node = node.next # \u628a\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684 val \u8d4b\u503c\u7ed9\u5f53\u524d\u7ed3\u70b9 node.val = next_node.val # \u628a\u5f53\u524d\u7ed3\u70b9\u7684 next \u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684 next \u6307\u9488 node.next = next_node.next # \u5207\u65ad\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u4e0e\u539f\u94fe\u8868\u7684\u8fde\u63a5 next_node.next = None C++ \u4ee3\u7801\uff1a \u7b2c 18-2 \u9898\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9 \u540c LeetCode \u7b2c82 \u9898\u3002 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u8282\u70b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5728\u4e00\u4e2a\u6392\u5e8f\u7684\u94fe\u8868\u4e2d\uff0c\u5b58\u5728\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u8bf7\u5220\u9664\u8be5\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u91cd\u590d\u7684\u7ed3\u70b9\u4e0d\u4fdd\u7559\u3002 \u6837\u4f8b1\uff1a \u8f93\u5165\uff1a 1->2->3->3->4->4->5 \u8f93\u51fa\uff1a 1->2->5 \u6837\u4f8b2\uff1a \u8f93\u5165\uff1a 1->1->1->2->3 \u8f93\u51fa\uff1a 2->3 \u601d\u8def\uff1a\u56e0\u4e3a\u5934\u7ed3\u70b9\u53ef\u80fd\u88ab\u5220\uff0c\u6240\u4ee5\u8981\u8bbe\u7f6e\u4e00\u4e2a\u865a\u62df\u5934\u7ed3\u70b9\u3002 Python \u5199\u6cd5\uff1a class Solution(object): def deleteDuplication(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None: return None dummy = ListNode(-1) dummy.next = head cur = dummy # \u4e00\u4e0b\u5b50\u8981\u770b\u4e24\u4e2a\uff0c\u6240\u4ee5\u662f while cur.next and cur.next.next: if cur.next.val == cur.next.next.val: # \u5220\u9664\u7684\u8d77\u70b9\u81f3\u5c11\u662f cur.next.next del_node = cur.next.next while del_node.next and del_node.val == del_node.next.val: del_node = del_node.next # \u6765\u5230\u4e86\u4e00\u4e2a\u65b0\u7684\u7ed3\u70b9\uff0c\u503c\u4e0d\u540c cur.next = del_node.next del_node.next = None else: cur = cur.next return dummy.next Java \u4ee3\u7801\uff1a class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } public ListNode(int[] arr) { if (arr == null || arr.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = arr[0]; ListNode cur = this; for (int i = 1; i < arr.length; i++) { cur.next = new ListNode(arr[i]); cur = cur.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode deleteDuplication(ListNode pHead) { ListNode dummyNode = new ListNode(-1); dummyNode.next = pHead; ListNode curNode = dummyNode; while (curNode.next != null && curNode.next.next != null) { ListNode next = curNode.next; ListNode nextNext = next.next; if (next.val == nextNext.val) { while (nextNext.next != null && nextNext.val == nextNext.next.val) { nextNext = nextNext.next; } ListNode delNode = nextNext; curNode.next = delNode.next; delNode.next = null; } else { curNode = curNode.next; } } return dummyNode.next; } public static void main(String[] args) { int[] nums = new int[]{1, 2, 3, 3, 4, 4, 5}; ListNode head = new ListNode(nums); System.out.println(head); Solution solution = new Solution(); ListNode deleteDuplication = solution.deleteDuplication(head); System.out.println(deleteDuplication); } } LeetCode \u7b2c 82 \u9898\uff1a \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II \u4f20\u9001\u95e8\uff1a 82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u539f\u59cb\u94fe\u8868\u4e2d \u6ca1\u6709\u91cd\u590d\u51fa\u73b0 \u7684\u6570\u5b57\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->3->4->4->5 \u8f93\u51fa: 1->2->5 \u793a\u4f8b 2: \u8f93\u5165: 1->1->1->2->3 \u8f93\u51fa: 2->3 Java \u4ee3\u7801\uff1a /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode deleteDuplicates(ListNode head) { if (head == null) { return null; } // \u53ea\u8981\u6d89\u53ca\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u90fd\u8bbe\u7acb\u865a\u62df\u5934\u7ed3\u70b9 ListNode dummyNode = new ListNode(-1); dummyNode.next = head; ListNode curNode = dummyNode; while (curNode.next != null && curNode.next.next != null) { // \u5982\u679c\u63a5\u8fde\u4e24\u4e2a\u7ed3\u70b9\u7684 val \u76f8\u7b49\uff0c\u81f3\u5c11\u8981\u628a\u5b83\u4eec\u90fd\u5220\u6389 if (curNode.next.val == curNode.next.next.val) { // \u8981\u5220\u9664\u7684\u8d77\u70b9\u81f3\u5c11\u5e94\u8be5\u662f\u5f53\u524d\u5224\u65ad\u76f8\u540c\u7684\u7ed3\u70b9\u7684\u7b2c 2 \u4e2a ListNode delNode = curNode.next.next; // \u5982\u679c\u540e\u9762\u8fd8\u6709\u76f8\u540c\u7684\u7ed3\u70b9\uff0cdelNode \u540e\u79fb\u4e00\u4f4d\uff0c\u5373 delNode \u5e94\u8be5\u662f\u6307\u5411\u76f8\u540c\u7684\u7ed3\u70b9\u7684\u6700\u540e\u4e00\u4e2a while (delNode.next != null && delNode.next.val == delNode.val) { delNode = delNode.next; } curNode.next = delNode.next; delNode.next = null; } else { curNode = curNode.next; } } return dummyNode.next; } } LeetCode \u7b2c 83 \u9898\uff1a \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 \u4f20\u9001\u95e8\uff1a 83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->1->2 \u8f93\u51fa: 1->2 \u793a\u4f8b 2: \u8f93\u5165: 1->1->2->3->3 \u8f93\u51fa: 1->2->3 Java \u4ee3\u7801\uff1a /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode deleteDuplicates(ListNode head) { if (head == null) { return head; } ListNode curNode = head; while (curNode != null && curNode.next != null) { if (curNode.val == curNode.next.val) { ListNode delNode = curNode.next; // \u7ee7\u7eed\u5411\u524d\u627e\uff0c\u770b\u770b\uff0c\u8fd8\u6709\u6ca1\u6709\u53ef\u4ee5\u5220\u9664\u7684\u7ed3\u70b9 while (delNode.next != null && delNode.next.val == delNode.val) { delNode = delNode.next; } // \u7a7f\u9488\u5f15\u7ebf curNode.next = delNode.next; delNode.next = null; } else { curNode = curNode.next; } } return head; } } \u7b2c 19 \u9898\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \u4f20\u9001\u95e8\uff1a \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5339\u914d\u5305\u62ec '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u6a21\u5f0f\u4e2d\u7684\u5b57\u7b26 '.' \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c '*' \u8868\u793a\u5b83\u524d\u9762\u7684\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff08\u542b0\u6b21\uff09\u3002 \u5728\u672c\u9898\u4e2d\uff0c\u5339\u914d\u662f\u6307\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u5339\u914d\u6574\u4e2a\u6a21\u5f0f\u3002 \u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 \"aaa\" \u4e0e\u6a21\u5f0f \"a.a\" \u548c \"ab*ac*a\" \u5339\u914d\uff0c\u4f46\u662f\u4e0e \"aa.a\" \u548c \"ab*a\" \u5747\u4e0d\u5339\u914d\u3002 \u6837\u4f8b\uff1a ``` \u8f93\u5165\uff1a s=\"aa\" p=\"a*\" \u8f93\u51fa:true ``` \u601d\u8def\uff1a\u8fd9\u9898\u8003\u5bdf\u7684\u662f\u52a8\u6001\u89c4\u5212\u3002\u7b14\u8bb0\u6211\u5199\u5728\u8fd9\u91cc\u4e86\uff1a \u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09\u7b2c 19 \u9898\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \u3002 Python \u4ee3\u7801\uff1a class Solution(object): # \u72b6\u6001\uff1adp[i][j] \u8868\u793a s \u4e2d\u524d i \u4e2a\u5b57\u7b26\u4e0e p \u7684\u524d j \u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u8868\u793a\u5f0f\u662f\u5426\u5339\u914d # i \u548c j \u8868\u793a\u4e2a\u6570 # \u4ee3\u7801\u4e2d\u51fa\u73b0 i \u5747\u8868\u793a s \u4e2d\u7684\u7d22\u5f15\u6216\u8005\u4e2a\u6570 # \u4ee3\u7801\u4e2d\u51fa\u73b0 j \u5747\u8868\u793a p \u4e2d\u7684\u7d22\u5f15\u6216\u8005\u4e2a\u6570 # \u51fa\u73b0 -1 \u90fd\u8868\u793a\u5f53\u524d\u8003\u8651\u7684 # \u51fa\u73b0 -2 \u90fd\u8868\u793a\u5f53\u524d\u518d\u524d\u4e00\u4e2a # \u53c2\u8003\u8d44\u6599\uff1ahttp://www.voidcn.com/article/p-zioiffqq-mm.html def isMatch(self, s, p): \"\"\" :type s: str :type p: str :rtype: bool \"\"\" n = len(s) m = len(p) dp = [[False for _ in range(m + 1)] for _ in range(n + 1)] # \u5f53 s \u548c p \u7684\u957f\u5ea6\u90fd\u4e3a 0 \u7684\u65f6\u5019\uff0c\u5b9a\u4e49\u6210\u5339\u914d dp[0][0] = True # \u7279\u5224 for j in range(2, m + 1): if p[j - 1] == '*' and dp[0][j - 2]: dp[0][j] = True # \u4e0b\u9762\u5206\u522b\u5bf9\u5b57\u7b26\u4e32 s \u548c\u6a21\u5f0f\u4e32 p \u8fdb\u884c\u5339\u914d for i in range(1, n + 1): for j in range(1, m + 1): if s[i - 1] == p[j - 1] or p[j - 1] == '.': dp[i][j] = dp[i - 1][j - 1] elif p[j - 1] == '*': # \u8fd9\u662f\u6700\u9ebb\u70e6\u7684\u60c5\u51b5 if p[j - 2] != s[i - 1] and p[j - 2] != '.': # \u4f8b\u5b50\uff1as a # j-1 # p b * # j-2 j-1 # \u6b64\u65f6\u53ea\u80fd\u628a * \u5f53\u6210 0 \u6b21\uff0c\u5373 * \u548c\u5b83\u4e4b\u524d\u7684\u5b57\u6bcd\u4e0d\u51fa\u73b0\uff0c\u6240\u4ee5\u4e00\u4e0b\u5b50\u8981\u51cf\u53bb 2 # p[j - 2] != '.' \u8fd9\u4e00\u70b9\u522b\u5fd8\u4e86 # \u4e0d\u80fd\u5339\u914d dp[i][j] = dp[i][j - 2] else: # \u63a5\u4e0b\u6765\u662f\u53ef\u4ee5\u5339\u914d # \u4f8b\u5b50\uff1as a # j-1 # p . * # j-2 j-1 # \u6b64\u65f6\u628a * \u5f53\u6210 0 \u6b21\uff0c # \u6b64\u65f6\u628a * \u5f53\u6210 1 \u6b21\uff0c # \u6b64\u65f6\u628a * \u5f53\u6210 \u591a \u6b21\uff0c\u76f4\u63a5\u628a i - 1 \uff0c\u8fd9\u662f\u6700\u96be\u7684\u5730\u65b9 dp[i][j] = dp[i][j - 2] or dp[i][j - 1] or dp[i - 1][j] return dp[n][m] \u65b9\u6cd52\uff1a\u9012\u5f52\u7684\u5199\u6cd5\u3002 \u53c2\u8003\u8d44\u6599\uff1a\u4e00\u4e2a\u7f51\u7ea2\u7684\u89e3\u6cd5\uff1ahttp://www.cnblogs.com/grandyang/p/4461713.html\u3002\u6709\u89e3\u6cd5 1 \u8fd8\u6709\u89e3\u6cd52\u3002 \u7f51\u7ea2\u5199\u6cd5\uff1ahttps://blog.csdn.net/hk2291976/article/details/51165010 \u8bf4\u660e\uff1a\u8fd9\u4e2a\u7f51\u7ea2\u8fd8\u5199\u4e86 leetbook\u3002 \u53c2\u8003\u8d44\u6599\uff1ahttps://zhuanlan.zhihu.com/p/37647267\u3002 \u91c7\u7528\u9012\u5f52\u7684\u89e3\u9898\u65b9\u6cd5\uff0c\u9012\u5f52\u7684\u7ec8\u6b62\u6761\u4ef6\u662f\uff1a 1\u3001\u5982\u679c $s$ \u548c $p$ \u90fd\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\uff0c\u76f8\u7b49\u7684\u5145\u8981\u6761\u4ef6\u662f\uff0c\u5b83\u4eec\u76f8\u7b49\uff0c\u6216\u8005 $p$ \u662f '.' \uff1b \u5176\u4ed6\u9012\u5f52\u60c5\u51b5\uff1a 1\u3001\u5982\u679c $p$ \u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e0d\u662f '*' \uff0c\u90a3\u4e48\u5982\u679c $s$ \u662f\u7a7a\uff0c\u8fd4\u56de false \uff0c\u5982\u679c $s[0]$ \u548c $p[0]$ \u80fd\u5339\u914d\u4e0a\uff0c\u90a3\u4e48\u9012\u5f52 s.substr(1), p.substr(1) \uff1b ==\u574f\u5c31\u574f\u5728\uff0c\u5982\u679c $p$ \u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u662f '*' ==\u3002 2\u3001\u5982\u679c $p$ \u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u662f '*' \uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053 ' ' \u53ef\u4ee5\u4ee3\u8868 ' ' \u4e4b\u524d\u7684\u5143\u7d20\u4e2a\u6570\u662f $0$ \u4e2a\u6216\u8005 $1$ \u4e2a\u6216\u8005\u591a\u4e2a\uff0c\u6240\u4ee5\u5982\u679c $s$ \u7684\u524d $k$ \u4e2a\u5143\u7d20\u4e2a $p[0]$ \u4e00\u6837\uff0c\u90a3\u4e48\u5b83\u4eec\u6709\u53ef\u80fd\u90fd\u88ab\u5339\u914d\u5230\uff0c\u4e5f\u6709\u53ef\u80fd\u4e00\u4e2a\u90fd\u4e0d\u4f1a\u88ab\u5339\u914d\u4e0a\u3002 C++ \u5199\u6cd5\uff1a class Solution { public: bool isMatch(string s, string p) { if(p.empty())return s.empty(); if(p.size() == 1) { return(s.size() == 1 && (s[0] == p[0] || p[0] == '.')); } if(p[1] != '*') { if(s.empty())return false; return (s[0] == p[0] || p[0] == '.')&& isMatch(s.substr(1), p.substr(1)); } // \u8d70\u5230\u8fd9\u91cc p[1] == '*'\uff0c\u4e0b\u9762\u7684 4 \u884c\u4ee3\u8868\u6bd4\u8f83\u96be\u7406\u89e3 while(!s.empty() && (s[0] == p[0] || p[0] == '.')) { if(isMatch(s, p.substr(2))) return true; s = s.substr(1); } return isMatch(s, p.substr(2)); } }; \u8981\u6c42\uff1a\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5339\u914d\u5305\u62ec . \u548c * \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u6a21\u5f0f\u4e2d\u7684\u5b57\u7b26 . \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c * \u8868\u793a\u5b83\u524d\u9762\u7684\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff0c\u5305\u62ec $0$ \u6b21\u3002 LeetCode \u7b2c 10 \u9898\uff0c\u4f20\u9001\u95e8\uff1a 10. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \uff0c\u96be\u5ea6\u662f\uff1a \u56f0\u96be \u3002 \u4f7f\u7528\u52a8\u6001\u89c4\u5212\uff1a dp \u51fd\u6570\u8fd9\u4e48\u5199\u3002 \u601d\u8def\uff1a\u5f53\u5b57\u7b26\u4e32\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\u65f6\uff0c\u76f4\u63a5\u8fdb\u884c\u5224\u65ad\uff0c\u5426\u5219\u8fdb\u5165\u4e0b\u9762\u4e24\u79cd\u9012\u5f52\u3002 \u4e24\u79cd\u9012\u5f52\u60c5\u51b5\uff1a1\u3001\u5f53\u6a21\u5f0f\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e0d\u662f * \u65f6\uff1a \uff081\uff09\u5982\u679c\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548c\u6a21\u5f0f\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u76f8\u5339\u914d\u6216\u662f\u5b57\u7b26 . \u90a3\u4e48\u5b57\u7b26\u4e32\u548c\u6a21\u5f0f\u90fd\u540e\u79fb\u4e00\u4e2a\u5b57\u7b26\uff0c\u7136\u540e\u5339\u914d\u5269\u4f59 \u7684\uff1b \uff082\uff09\u5982\u679c\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548c\u6a21\u5f0f\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u76f8\u4e0d\u5339\u914d\uff0c\u76f4\u63a5\u8fd4\u56de false \u3002 2\u3001\u5f53\u6a21\u5f0f\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u662f * \u65f6\uff1a \u5982\u679c\u201c\u5b57\u7b26\u4e32\u201d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u8ddf\u201c\u6a21\u5f0f\u4e32\u201d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u5339\u914d\uff0c\u5219\u6a21\u5f0f\u540e\u79fb $2$ \u4e2a\u5b57\u7b26\uff0c\u7ee7\u7eed\u5339\u914d\uff1b \u5982\u679c\u201c\u5b57\u7b26\u4e32\u201d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u8ddf\u201c\u6a21\u5f0f\u4e32\u201d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5339\u914d\u6216\u662f\u5b57\u7b26 . \uff0c\u53ef\u4ee5\u6709 $3$ \u79cd\u5339\u914d\u65b9\u5f0f\uff1a \uff081\uff09\u6a21\u5f0f\u540e\u79fb $2$ \u5b57\u7b26\uff0c\u76f8\u5f53\u4e8e x \u88ab\u5ffd\u7565\uff1b \uff082\uff09\u5b57\u7b26\u4e32\u540e\u79fb $1$ \u5b57\u7b26\uff0c\u6a21\u5f0f\u540e\u79fb $2$ \u5b57\u7b26\uff1b \uff083\uff09\u5b57\u7b26\u4e32\u540e\u79fb $1$ \u5b57\u7b26\uff0c\u6a21\u5f0f\u4e0d\u53d8\uff0c\u5373\u7ee7\u7eed\u5339\u914d\u5b57\u7b26\u4e0b\u4e00\u4f4d\uff0c\u56e0\u4e3a\u53ef\u4ee5\u5339\u914d\u591a\u4f4d\u3002 \u7b2c 20 \u9898\uff1a\u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32 \u4f20\u9001\u95e8\uff1a \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u8868\u793a\u6570\u503c\uff08\u5305\u62ec\u6574\u6570\u548c\u5c0f\u6570\uff09\u3002 \u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 \"+100\" , \"5e2\" , \"-123\" , \"3.1416\" \u548c \"-1E-16\" \u90fd\u8868\u793a\u6570\u503c\u3002 \u4f46\u662f \"12e\" , \"1a3.14\" , \"1.2.3\" , \"+-5\" \u548c \"12e+4.3\" \u90fd\u4e0d\u662f\u3002 \u6ce8\u610f : \u5c0f\u6570\u53ef\u4ee5\u6ca1\u6709\u6574\u6570\u90e8\u5206\uff0c\u4f8b\u5982.123\u7b49\u4e8e0.123\uff1b \u5c0f\u6570\u70b9\u540e\u9762\u53ef\u4ee5\u6ca1\u6709\u6570\u5b57\uff0c\u4f8b\u5982233.\u7b49\u4e8e233.0\uff1b \u5c0f\u6570\u70b9\u524d\u9762\u548c\u540e\u9762\u53ef\u4ee5\u6709\u6570\u5b57\uff0c\u4f8b\u5982233.666; \u5f53e\u6216E\u524d\u9762\u6ca1\u6709\u6570\u5b57\u65f6\uff0c\u6574\u4e2a\u5b57\u7b26\u4e32\u4e0d\u80fd\u8868\u793a\u6570\u5b57\uff0c\u4f8b\u5982.e1\u3001e1\uff1b \u5f53e\u6216E\u540e\u9762\u6ca1\u6709\u6574\u6570\u65f6\uff0c\u6574\u4e2a\u5b57\u7b26\u4e32\u4e0d\u80fd\u8868\u793a\u6570\u5b57\uff0c\u4f8b\u598212e\u300112e+5.4; \u6837\u4f8b\uff1a \u8f93\u5165: \"0\" \u8f93\u51fa: true Python \u4ee3\u7801\uff1a class Solution(object): def isNumber(self, s): \"\"\" :type s: str :rtype: bool \"\"\" size = len(s) # 1\u3001\u53bb\u6389\u591a\u4f59\u7684\u7a7a\u683c i = 0 while i < size and s[i] == ' ': i += 1 j = size - 1 while j >= 0 and s[j] == ' ': j -= 1 if i > j: return False s = s[i:j - i + 1] # 2\u3001\u9996\u5b57\u6bcd\u53ef\u4ee5\u662f\u52a0\u53f7\u6216\u8005\u51cf\u53f7 if s[0] == '+' or s[0] == '-': s = s[1:] if len(s) == 0: return False # 3\u3001\u53ea\u6709 1 \u4e2a\u70b9\uff0c\u4e0d\u884c if len(s) == 1 and s[0] == '.': return False # 4\u3001\u4e0b\u9762\u5bf9\u70b9\u7684\u4e2a\u6570\u548c e \u7684\u4e2a\u6570\u5c55\u5f00\u8ba8\u8bba # \u70b9\u7684\u4e2a\u6570 dot_cnt = 0 # e \u7684\u4e2a\u6570 e_cnt = 0 size = len(s) i = -1 while i < size - 1: i += 1 if '0' <= s[i] <= '9': continue elif s[i] == '.': dot_cnt += 1 # \u5982\u679c\u6ca1\u6709 e\uff0c\u5e76\u4e14\u70b9\u7684\u6570\u91cf\u5927\u4e8e 1\uff0c\u4e0d\u7b26\u5408\u8981\u6c42 if e_cnt or dot_cnt > 1: return False elif s[i] == 'e' or s[i] == 'E': e_cnt += 1 if i == 0 or i == size - 1 or e_cnt > 1: return False # '.' \u540e\u9762\u4e0d\u80fd\u52a0\u4e0a if i == 1 and s[0] == '.': return False if s[i + 1] == '+' or s[i + 1] == '-': if i + 2 == size: return False i += 1 else: return False return True if __name__ == '__main__': solution = Solution() s = '123.45e+6' result = solution.isNumber(s) print(result) \u201c\u5927\u96ea\u83dc\u201d\u7684\u89e3\u6cd5\uff1ahttps://www.acwing.com/solution/acwing/content/737/\u3002 C++ \u4ee3\u7801\uff1a C++ \u4ee3\u7801\uff1a class Solution { public: bool isNumber(string s) { int i = 0; while (i < s.size() && s[i] == ' ') i ++ ; int j = s.size() - 1; while (j >= 0 && s[j] == ' ') j -- ; if (i > j) return false; s = s.substr(i, j - i + 1); if (s[0] == '-' || s[0] == '+') s = s.substr(1); if (s.empty() || s[0] == '.' && s.size() == 1) return false; int dot = 0, e = 0; for (int i = 0; i < s.size(); i ++ ) { if (s[i] >= '0' && s[i] <= '9'); else if (s[i] == '.') { dot ++ ; if (e || dot > 1) return false; } else if (s[i] == 'e' || s[i] == 'E') { e ++ ; if (i + 1 == s.size() || !i || e > 1 || i == 1 && s[0] == '.') return false; if (s[i + 1] == '+' || s[i + 1] == '-') { if (i + 2 == s.size()) return false; i ++ ; } } else return false; } return true; } }; \u4f5c\u8005\uff1ayxc \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/acwing/content/737/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \uff08\u672c\u8282\u5b8c\uff09","title":"\u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09 \u9898\u89e3\uff08Python \u8bed\u8a00\u5b9e\u73b0\uff09\u7b2c 11-20 \u9898"},{"location":"11-20/#offer-2-python-11-20","text":"","title":"\u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09 \u9898\u89e3\uff08Python \u8bed\u8a00\u5b9e\u73b0\uff09\u7b2c 11-20 \u9898"},{"location":"11-20/#11","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c\u3002 \u8f93\u5165\u4e00\u4e2a\u5347\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20\u3002 \u4f8b\u5982\u6570\u7ec4 [3,4,5,1,2] \u4e3a [1,2,3,4,5] \u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8be5\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e3a $1$\u3002 \u6570\u7ec4\u53ef\u80fd\u5305\u542b\u91cd\u590d\u9879\u3002 \u6ce8\u610f \uff1a\u6570\u7ec4\u5185\u6240\u542b\u5143\u7d20\u975e\u8d1f\uff0c\u82e5\u6570\u7ec4\u5927\u5c0f\u4e3a0\uff0c\u8bf7\u8fd4\u56de-1\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a nums=[2, 2, 2, 0, 1] \u8f93\u51fa\uff1a0 Java \u4ee3\u7801\uff1a public class Solution { // \u867d\u7136\u53ef\u4ee5\u901a\u8fc7\uff0c\u4f46\u662f O(n) \u7684\u590d\u6742\u5ea6\u5e76\u4e0d\u7406\u60f3 public int minNumberInRotateArray(int[] array) { // {3,4,5,1,2} // 1 2 3 4 5 int len = array.length; for (int i = 1; i < len - 1; i++) { if (array[i] < array[i - 1]) { return array[i]; } } // \u5982\u679c\u8d70\u5230\u8fd9\u91cc\uff0c\u8bf4\u660e\u6570\u7ec4\u662f\u5347\u5e8f\u7684\uff0c\u76f4\u63a5\u8fd4\u56de\u7b2c 0 \u53f7\u7d22\u5f15\u7684\u5143\u7d20\u5c31\u53ef\u4ee5\u4e86 return array[0]; } public static void main(String[] args) { // int[] nums = new int[]{3, 4, 5, 1, 2}; int[] nums = new int[]{1, 2, 3, 4, 5}; Solution solution = new Solution(); int minNumberInRotateArray = solution.minNumberInRotateArray(nums); System.out.println(minNumberInRotateArray); } } \u601d\u8def1 \uff1a\u8fd9\u662f\u5178\u578b\u7684\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u6cd5\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u5e94\u7528\u4e8c\u5206\u6cd5\u7684\u6a21\u677f\u3002\u7279\u522b\u6ce8\u610f\uff0c\u6570\u7ec4\u53ef\u80fd\u5305\u542b\u91cd\u590d\u9879\uff0c\u56e0\u6b64\u4e2d\u95f4\u9879\u5982\u679c\u7b49\u4e8e\u672b\u5c3e\u9879\uff0c\u4f8b\u5982\uff1a [1, 1, 1, 1, 1, 0, 1] \uff0c\u4e0d\u80fd\u780d\u6389\u4e00\u534a\uff0c\u53ea\u80fd\u628a\u672b\u5c3e\u9879\u6392\u9664\u6389\u3002 Python \u4ee3\u7801\uff1a class Solution: def findMin(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" size = len(nums) if size == 0: return -1 l = 0 r = size - 1 while l < r: mid = l + (r - l) // 2 if nums[mid] < nums[r]: # mid \u6709\u53ef\u80fd\u662f\u6700\u5c0f\u503c # [7,8,1,2,3] r = mid elif nums[mid] > nums[r]: # mid \u80af\u5b9a\u4e0d\u662f\u6700\u5c0f\u503c # [7,8,9,10,11,1,2,3] l = mid + 1 else: # \u90fd\u6709\u53ef\u80fd\uff0c\u6240\u4ee5\u5c31\u628a r \u6392\u9664\u4e86 # [1,1,1,1,1,0,1] assert nums[mid] == nums[r] r = r - 1 return nums[l] \u601d\u8def2 \uff1a\u8fd8\u53ef\u4ee5\u4f7f\u7528\u201c\u5206\u6cbb\u6cd5\u201d\uff0c\u201c\u5206\u6cbb\u6cd5\u201d\u5c31\u4e0d\u7528\u5728\u4e4e\u6709\u6ca1\u6709\u91cd\u590d\u9879\u4e86\u3002\u4f46\u662f\u201c\u5206\u6cbb\u6cd5\u201d\u65e0\u5f02\u4e8e\u628a\u6574\u4e2a\u6570\u7ec4\u90fd\u770b\u4e00\u904d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002 Python \u4ee3\u7801\uff1a class Solution: def findMin(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" size = len(nums) if size == 0: return -1 if size == 1: return nums[0] return self.__findMin(nums, 0, size - 1) def __findMin(self, nums, left, right): if left == right: return nums[left] if left + 1 == right: return min(nums[left], nums[right]) mid = left + (right - left) // 2 return min(self.__findMin(nums, left, mid), self.__findMin(nums, mid + 1, right)) \u5206\u6790\uff1a\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7684\u601d\u60f3\uff0c\u56e0\u4e3a\u6700\u5c0f\u7684\u6570\u5b57\u5f88\u53ef\u80fd\u51fa\u73b0\u5728\u9996\u4f4d\uff0c\u4ece\u540e\u5411\u524d\u626b\u63cf\u662f\u6c42\u89e3\u8fd9\u9053\u9898\u7684\u91cd\u8981\u6280\u5de7\uff0c\u5426\u5219\u9700\u8981\u5206\u7c7b\u8ba8\u8bba\uff0c\u5c31\u53d8\u5f97\u9ebb\u70e6\u4e86\uff08\u5373\u8ba9\u540e\u9762\u7684\u6307\u9488\u5411\u524d\u79fb\u52a8\uff09\u3002 Java \u4ee3\u7801\uff1a public class Solution2 { public int minNumberInRotateArray(int[] array) { int len = array.length; if (len == 0) { return 0; } int first = 0; int last = len - 1; while (first < last) { int mid = first + (last - first) / 2; if (array[mid] > array[last]) { first = mid + 1; } else if (array[mid] == array[last]) { last = last - 1; } else { last = mid; } } return array[first]; } public static void main(String[] args) { // int[] nums = new int[]{3}; // int[] nums = new int[]{3, 4, 5, 6, 7, 8, 9, 1, 2}; // int[] nums = new int[]{1, 2, 3, 4, 5}; int[] nums = new int[]{2, 2, 2, 1, 2}; Solution2 solution2 = new Solution2(); int minNumberInRotateArray = solution2.minNumberInRotateArray(nums); System.out.println(minNumberInRotateArray); } }","title":"\u7b2c 11 \u9898\uff1a\u65cb\u8f6c\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u6570\u5b57"},{"location":"11-20/#12","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u77e9\u9635\u4e2d\u7684\u8def\u5f84 \u3002 \u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u5728\u4e00\u4e2a\u77e9\u9635\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u6761\u5305\u542b\u67d0\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u7684\u8def\u5f84\u3002 \u8def\u5f84\u53ef\u4ee5\u4ece\u77e9\u9635\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u683c\u5b50\u5f00\u59cb\uff0c\u6bcf\u4e00\u6b65\u53ef\u4ee5\u5728\u77e9\u9635\u4e2d\u5411\u5de6\uff0c\u5411\u53f3\uff0c\u5411\u4e0a\uff0c\u5411\u4e0b\u79fb\u52a8\u4e00\u4e2a\u683c\u5b50\u3002 \u5982\u679c\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u4e86\u77e9\u9635\u4e2d\u7684\u67d0\u4e00\u4e2a\u683c\u5b50\uff0c\u5219\u4e4b\u540e\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8fd9\u4e2a\u683c\u5b50\u3002 \u6ce8\u610f\uff1a \u8f93\u5165\u7684\u8def\u5f84\u4e0d\u4e3a\u7a7a\uff1b \u6240\u6709\u51fa\u73b0\u7684\u5b57\u7b26\u5747\u4e3a\u5927\u5199\u82f1\u6587\u5b57\u6bcd\uff1b \u6837\u4f8b\uff1a ``` matrix= [ [\"A\",\"B\",\"C\",\"E\"], [\"S\",\"F\",\"C\",\"S\"], [\"A\",\"D\",\"E\",\"E\"] ] str=\"BCCE\" , return \"true\" str=\"ASAE\" , return \"false\" ``` \u601d\u8def\uff1a\u5178\u578b\u7684 floodfill \u89e3\u6cd5\uff0c\u672c\u8d28\u4e0a\u662f\u9012\u5f52\u56de\u6eaf\u7b97\u6cd5\u3002 Python \u4ee3\u7801\uff1a class Solution(object): directions = [(-1, 0), (1, 0), (0, 1), (0, -1)] def hasPath(self, matrix, string): \"\"\" :type matrix: List[List[str]] :type string: str :rtype: bool \"\"\" rows = len(matrix) if rows == 0: return False cols = len(matrix[0]) marked = [[False for _ in range(cols)] for _ in range(rows)] for i in range(rows): for j in range(cols): if self.__has_path(matrix, string, 0, i, j, marked, rows, cols): return True return False def __has_path(self, matrix, word, index, start_x, start_y, marked, m, n): # \u6ce8\u610f\uff1a\u9996\u5148\u5224\u65ad\u6781\u7aef\u60c5\u51b5 if index == len(word) - 1: return matrix[start_x][start_y] == word[-1] if matrix[start_x][start_y] == word[index]: # \u5148\u5360\u4f4f\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u641c\u7d22\u4e0d\u6210\u529f\u7684\u8bdd\uff0c\u8981\u91ca\u653e\u6389 marked[start_x][start_y] = True for direction in self.directions: new_x = start_x + direction[0] new_y = start_y + direction[1] if 0 <= new_x < m and 0 <= new_y < n and not marked[new_x][new_y]: if self.__has_path(matrix, word, index + 1, new_x, new_y, marked, m, n): return True marked[start_x][start_y] = False return False if __name__ == '__main__': matrix = [ [\"A\", \"B\", \"C\", \"E\"], [\"S\", \"F\", \"E\", \"S\"], [\"A\", \"D\", \"E\", \"E\"] ] str = \"ABCEFSADEESE\" solution = Solution() result = solution.hasPath(matrix, str) print(result) \u540c LeetCode \u7b2c 79 \u9898\uff0c\u4f20\u9001\u95e8\uff1a 79. \u5355\u8bcd\u641c\u7d22 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683c\u548c\u4e00\u4e2a\u5355\u8bcd\uff0c\u627e\u51fa\u8be5\u5355\u8bcd\u662f\u5426\u5b58\u5728\u4e8e\u7f51\u683c\u4e2d\u3002 \u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002 \u793a\u4f8b: board = [ ['A','B','C','E'], ['S','F','C','S'], ['A','D','E','E'] ] \u7ed9\u5b9a word = \"ABCCED\", \u8fd4\u56de true. \u7ed9\u5b9a word = \"SEE\", \u8fd4\u56de true. \u7ed9\u5b9a word = \"ABCB\", \u8fd4\u56de false. \u601d\u8def\uff1a\u5176\u5b9e\u5c31\u662f floodfill \u7b97\u6cd5\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u7840\u7684\u7b97\u6cd5\uff0c\u4e00\u5b9a\u8981\u638c\u63e1\u3002\u7279\u522b\u8981\u5f04\u6e05\u695a\uff0c marked \u6570\u7ec4\u7684\u4f5c\u7528\uff0c\u4e00\u5f00\u59cb\u8981\u5360\u4f4f\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u53d1\u73b0\u6b64\u8def\u4e0d\u901a\u7684\u65f6\u5019\uff0c\u8981\u91ca\u653e\u6389\u3002 Python \u4ee3\u7801\uff1a class Solution: # (x-1,y) # (x,y-1) (x,y) (x,y+1) # (x+1,y) directions = [(0, -1), (-1, 0), (0, 1), (1, 0)] def exist(self, board, word): \"\"\" :type board: List[List[str]] :type word: str :rtype: bool \"\"\" m = len(board) n = len(board[0]) marked = [[False for _ in range(n)] for _ in range(m)] for i in range(m): for j in range(n): # \u5bf9\u6bcf\u4e00\u4e2a\u683c\u5b50\u90fd\u4ece\u5934\u5f00\u59cb\u641c\u7d22 if self.__search_word(board, word, 0, i, j, marked, m, n): return True return False def __search_word(self, board, word, index, start_x, start_y, marked, m, n): # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if index == len(word) - 1: return board[start_x][start_y] == word[index] # \u4e2d\u95f4\u5339\u914d\u4e86\uff0c\u518d\u7ee7\u7eed\u641c\u7d22 if board[start_x][start_y] == word[index]: # \u5148\u5360\u4f4f\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u641c\u7d22\u4e0d\u6210\u529f\u7684\u8bdd\uff0c\u8981\u91ca\u653e\u6389 marked[start_x][start_y] = True for direction in self.directions: new_x = start_x + direction[0] new_y = start_y + direction[1] if 0 <= new_x < m and 0 <= new_y < n and \\ not marked[new_x][new_y] and \\ self.__search_word(board, word, index + 1, new_x, new_y, marked, m, n): return True marked[start_x][start_y] = False return False Java \u4ee3\u7801\uff1a public class Solution { /** * x-1,y * x,y-1 x,y x,y+1 * x+1,y */ private int[][] direct = new int[][]{{-1, 0}, {0, 1}, {1, 0}, {0, -1}}; public boolean hasPath(char[] matrix, int rows, int cols, char[] str) { int len = matrix.length; if (len == 0) { return false; } boolean[] marked = new boolean[len]; for (int i = 0; i < rows; i++) { for (int j = 0; j < cols; j++) { if (dfs(matrix, rows, cols, str, str.length, marked, i, j, 0)) { return true; } } } return false; } private boolean dfs(char[] matrix, int rows, int cols, char[] str, int len, boolean[] marked, int i, int j, int start) { // \u5339\u914d\u5230\u6700\u540e\uff0c\u8bf4\u660e\u627e\u5230\u4e00\u6761\u8def\u5f84 int index = getIndex(i, j, cols); if (start == len - 1) { return matrix[index] == str[start]; } // \u8981\u7279\u522b\u5c0f\u5fc3\uff01 marked[index] = true; if (matrix[index] == str[start]) { // \u5f53\u524d\u5339\u914d\u4e86\uff0c\u624d\u5f00\u59cb\u5c1d\u8bd5\u8d70\u540e\u9762\u7684\u8def for (int k = 0; k < 4; k++) { // \u7279\u522b\u5c0f\u5fc3\uff0c\u4e00\u5b9a\u662f\u4e00\u4e2a\u521d\u59cb\u5316\u7684\u65b0\u7684\u53d8\u91cf int newi = i + direct[k][0]; int newj = j + direct[k][1]; int nextIndex = getIndex(newi, newj, cols); if (inArea(newi, newj, rows, cols) && !marked[nextIndex]) { // marked[nextIndex] = true; \u4e0d\u5728\u8fd9\u91cc\u8bbe\u7f6e if (dfs(matrix, rows, cols, str, len, marked, newi, newj, start + 1)) { return true; } // marked[nextIndex] = false; \u4e0d\u5728\u8fd9\u91cc\u8bbe\u7f6e } } } // \u8981\u7279\u522b\u5c0f\u5fc3\uff01 marked[index] = false; return false; } private int getIndex(int x, int y, int cols) { return x * cols + y; } private boolean inArea(int x, int y, int rows, int cols) { return x >= 0 && x < rows && y >= 0 && y < cols; } public static void main(String[] args) { char[] matrix = new char[]{'a', 'b', 't', 'g', 'c', 'f', 'c', 's', 'j', 'd', 'e', 'h'}; int rows = 3; int cols = 4; Solution solution = new Solution(); char[] str = \"hscfdeh\".toCharArray(); boolean hasPath = solution.hasPath(matrix, rows, cols, str); System.out.println(hasPath); } } Java \u4ee3\u7801\uff1a public class Solution { /** * x-1,y * x,y-1 x,y x,y+1 * x+1,y */ private int[][] direct = new int[][]{{-1, 0}, {0, 1}, {1, 0}, {0, -1}}; public boolean hasPath(char[] matrix, int rows, int cols, char[] str) { int len = matrix.length; if (len == 0) { return false; } boolean[] marked = new boolean[len]; for (int i = 0; i < rows; i++) { for (int j = 0; j < cols; j++) { if (dfs(matrix, rows, cols, str, str.length, marked, i, j, 0)) { return true; } } } return false; } private boolean dfs(char[] matrix, int rows, int cols, char[] str, int len, boolean[] marked, int i, int j, int start) { // \u5339\u914d\u5230\u6700\u540e\uff0c\u8bf4\u660e\u627e\u5230\u4e00\u6761\u8def\u5f84 int index = getIndex(i, j, cols); if (start == len - 1) { return matrix[index] == str[start]; } // \u8981\u7279\u522b\u5c0f\u5fc3\uff01 marked[index] = true; if (matrix[index] == str[start]) { // \u5f53\u524d\u5339\u914d\u4e86\uff0c\u624d\u5f00\u59cb\u5c1d\u8bd5\u8d70\u540e\u9762\u7684\u8def for (int k = 0; k < 4; k++) { // \u7279\u522b\u5c0f\u5fc3\uff0c\u4e00\u5b9a\u662f\u4e00\u4e2a\u521d\u59cb\u5316\u7684\u65b0\u7684\u53d8\u91cf int newi = i + direct[k][0]; int newj = j + direct[k][1]; int nextIndex = getIndex(newi, newj, cols); if (inArea(newi, newj, rows, cols) && !marked[nextIndex]) { // marked[nextIndex] = true; \u4e0d\u5728\u8fd9\u91cc\u8bbe\u7f6e if (dfs(matrix, rows, cols, str, len, marked, newi, newj, start + 1)) { return true; } // marked[nextIndex] = false; \u4e0d\u5728\u8fd9\u91cc\u8bbe\u7f6e } } } // \u8981\u7279\u522b\u5c0f\u5fc3\uff01 marked[index] = false; return false; } private int getIndex(int x, int y, int cols) { return x * cols + y; } private boolean inArea(int x, int y, int rows, int cols) { return x >= 0 && x < rows && y >= 0 && y < cols; } public static void main(String[] args) { char[] matrix = new char[]{'a', 'b', 't', 'g', 'c', 'f', 'c', 's', 'j', 'd', 'e', 'h'}; int rows = 3; int cols = 4; Solution solution = new Solution(); char[] str = \"hscfdeh\".toCharArray(); boolean hasPath = solution.hasPath(matrix, rows, cols, str); System.out.println(hasPath); } }","title":"\u7b2c 12 \u9898\uff1a\u77e9\u9635\u4e2d\u7684\u8def\u5f84"},{"location":"11-20/#13","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5730\u4e0a\u6709\u4e00\u4e2a $m$ \u884c\u548c $n$ \u5217\u7684\u65b9\u683c\uff0c\u6a2a\u7eb5\u5750\u6807\u8303\u56f4\u5206\u522b\u662f $0\u223cm\u22121$ \u548c $0\u223cn\u22121$\u3002 \u4e00\u4e2a\u673a\u5668\u4eba\u4ece\u5750\u6807 $(0,0)$ \u7684\u683c\u5b50\u5f00\u59cb\u79fb\u52a8\uff0c\u6bcf\u4e00\u6b21\u53ea\u80fd\u5411\u5de6\uff0c\u53f3\uff0c\u4e0a\uff0c\u4e0b\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\u4e00\u683c\u3002 \u4f46\u662f\u4e0d\u80fd\u8fdb\u5165\u884c\u5750\u6807\u548c\u5217\u5750\u6807\u7684\u6570\u4f4d\u4e4b\u548c\u5927\u4e8e $k$ \u7684\u683c\u5b50\u3002 \u8bf7\u95ee\u8be5\u673a\u5668\u4eba\u80fd\u591f\u8fbe\u5230\u591a\u5c11\u4e2a\u683c\u5b50\uff1f \u6837\u4f8b1\uff1a \u8f93\u5165\uff1a$k=7$\uff0c$m=4$\uff0c$n=5$ \u8f93\u51fa\uff1a20 \u6837\u4f8b2\uff1a \u8f93\u5165\uff1a$k=18$\uff0c$m=40$\uff0c$n=40$ \u8f93\u51fa\uff1a1484 \u89e3\u91ca\uff1a\u5f53 k \u4e3a 18 \u65f6\uff0c\u673a\u5668\u4eba\u80fd\u591f\u8fdb\u5165\u65b9\u683c\uff0835,37\uff09\uff0c\u56e0\u4e3a 3+5+3+7 = 18\u3002 \u4f46\u662f\uff0c\u5b83\u4e0d\u80fd\u8fdb\u5165\u65b9\u683c\uff0835,38\uff09\uff0c\u56e0\u4e3a 3+5+3+8 = 19\u3002 \u6ce8\u610f : 0<=m<=50 0<=n<=50 0<=k<=100 \u601d\u8def\uff1a\u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff08BFS\uff09\uff0c\u6ce8\u610f\u4e0d\u662f\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08DFS\uff09\u3002 Python \u4ee3\u7801\uff1a \u7279\u522b\u6ce8\u610f\uff0cmark \u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u662f\u653e\u5165\u961f\u5217\u7684\u65f6\u5019\u5c31 mark\uff0c\u4e0d\u662f\u7b49\u5230\u51fa\u961f\u7684\u65f6\u5019 mark\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u5f88\u591a\u91cd\u590d class Solution(object): def __count_bit_sum(self, num): res = 0 while num: res += num % 10 num //= 10 return res def __in_area(self, x, y, rows, cols): return 0 <= x < rows and 0 <= y < cols def movingCount(self, threshold, rows, cols): \"\"\" :type threshold: int :type rows: int :type cols: int :rtype: int \"\"\" if threshold < 0 or rows == 0 or cols == 0: return 0 if threshold == 0: return 1 directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] marked = [[False for _ in range(cols)] for _ in range(rows)] queue = [(0, 0)] res = 0 while queue: top_x, top_y = queue.pop(0) for direction in directions: new_x = top_x + direction[0] new_y = top_y + direction[1] if self.__in_area(new_x, new_y, rows, cols) \\ and not marked[new_x][new_y] \\ and self.__count_bit_sum(new_x) + self.__count_bit_sum(new_y) <= threshold: queue.append((new_x, new_y)) # \u6ce8\u610f\uff1a\u5e94\u8be5\u5199\u5728\u8fd9\u91cc\uff0c\u800c\u4e0d\u662f pop \u51fa\u961f\u5217\u7684\u65f6\u5019 marked[new_x][new_y] = True res += 1 return res if __name__ == '__main__': k = 18 m = 40 n = 40 solution = Solution() result = solution.movingCount(k, m, n) print(result)","title":"\u7b2c 13 \u9898\uff1a\u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4"},{"location":"11-20/#14","text":"\u8bf4\u660e\uff1a\u540c LeetCode 343 \u9898\u3002 \u4f20\u9001\u95e8\uff1a AcWing 25. \u526a\u7ef3\u5b50 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u4f60\u4e00\u6839\u957f\u5ea6\u4e3a $n$ \u7684\u7ef3\u5b50\uff0c\u8bf7\u628a\u7ef3\u5b50\u526a\u6210 $m$ \u6bb5\uff08$m$\u3001$n$ \u90fd\u662f\u6574\u6570\uff0c$2 \\le n \\le 58^2$ \u5e76\u4e14 $m \\ge2$\uff09\u3002 \u6bcf\u6bb5\u7684\u7ef3\u5b50\u7684\u957f\u5ea6\u8bb0\u4e3a k[0]\u3001k[1]\u3001\u2026\u2026\u3001k[m] \u3002 k[0]k[1] \u2026 k[m] \u53ef\u80fd\u7684\u6700\u5927\u4e58\u79ef\u662f\u591a\u5c11\uff1f \u4f8b\u5982\u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u662f8\u65f6\uff0c\u6211\u4eec\u628a\u5b83\u526a\u6210\u957f\u5ea6\u5206\u522b\u4e3a2\u30013\u30013\u7684\u4e09\u6bb5\uff0c\u6b64\u65f6\u5f97\u5230\u6700\u5927\u7684\u4e58\u79ef18\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a8 \u8f93\u51fa\uff1a18 \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u57280\u5230n-1\u7684\u8303\u56f4\u5185\u3002 \u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u662f\u91cd\u590d\u7684\u3002\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u957f\u5ea6\u4e3a7\u7684\u6570\u7ec4{2,3,1,0,2,5,3}\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u8f93\u51fa\u662f\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b572\u3002 \u5206\u6790\uff1a\u8fd9\u9053\u9898\u5728\u725b\u5ba2\u7f51\u4e0a\u6ca1\u6709 online judge \uff0c\u6211\u4eec\u53ef\u4ee5\u53bb\u5b8c\u6210 LeetCode \u4e0a\u7b2c 343 \u9898\u68c0\u9a8c\u81ea\u5df1\u7684\u4ee3\u7801\u662f\u5426\u7f16\u5199\u6b63\u786e\u3002 \u52a8\u6001\u89c4\u5212\u3002\u5173\u952e\u5728\u4e8e\u753b\u51fa\u6811\u5f62\u7ed3\u6784\u56fe\u3002 \u72b6\u6001\uff1a\u8fd9\u4e2a\u72b6\u6001\u5c31\u662f\u9898\u76ee\u4e2d\u8981\u6211\u4eec\u6c42\u7684\u3002\u628a\u6574\u6570 i \u81f3\u5c11\u5206\u5272\u6210 $2$ \u4e2a\u90e8\u5206\uff0c\u5404\u4e2a\u90e8\u5206\u90fd\u5927\u4e8e $0$\uff0c\u5b83\u4eec\u7684\u4e58\u79ef\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u7528 j \u904d\u5386 1, 2, ..., i - 1 \uff0c\u8981\u4e48\u5206\u5272\u6210 i - j \u548c j \uff0c\u8981\u4e48\u5206\u9694\u6210 j \u548c dp[i - j] \uff0c\u53d6\u6700\u5927\u8005\u3002 Python \u4ee3\u7801\uff1a dp[0] \u8fd9\u4e2a\u4f4d\u7f6e\u6ca1\u6709\u4f7f\u7528 class Solution(object): def maxProductAfterCutting(self, length): \"\"\" :type length: int :rtype: int \"\"\" assert length > 1 dp = [0 for _ in range(length + 1)] dp[1] = 1 for i in range(2, length + 1): for j in range(1, i): dp[i] = max(dp[i], j * (i - j), j * dp[i - j]) return dp[length] Java \u4ee3\u7801\uff1a\u4f7f\u7528\u52a8\u6001\u89c4\u5212 class Solution { public int integerBreak(int n) { if (n <= 1) { return 1; } int[] dp = new int[n + 1]; dp[0] = 1; dp[1] = 1; for (int i = 2; i <= n; i++) { int max = 0; for (int j = 1; j < i; j++) { max = max3(max, j * (i - j), j * dp[i - j]); } dp[i] = max; } return dp[n]; } private int max3(int num1, int num2, int num3) { return Integer.max(Integer.max(num1, num2), num3); } public static void main(String[] args) { Solution solution = new Solution(); int integerBreak = solution.integerBreak(8); System.out.println(integerBreak); } } Java \u4ee3\u7801\uff1a\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5 class Solution2 { public int integerBreak(int n) { if (n <= 2) { return 1; } if (n == 3) { return 2; } if (n == 4) { return 4; } // \u63a5\u4e0b\u6765\u5c31\u662f n >= 5 \u7684\u65f6\u5019\u7684\u903b\u8f91\u4e86 int res = 1; while (n > 4) { res *= 3; n -= 3; } res *= n; return res; } public static void main(String[] args) { Solution2 solution2 = new Solution2(); int integerBreak = solution2.integerBreak(8); System.out.println(integerBreak); } }","title":"\u7b2c 14 \u9898\uff1a\u526a\u7ef3\u5b50"},{"location":"11-20/#leetcode-343","text":"\u4f20\u9001\u95e8\uff1a 343. \u6574\u6570\u62c6\u5206 \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u5c06\u5176\u62c6\u5206\u4e3a \u81f3\u5c11 \u4e24\u4e2a\u6b63\u6574\u6570\u7684\u548c\uff0c\u5e76\u4f7f\u8fd9\u4e9b\u6574\u6570\u7684\u4e58\u79ef\u6700\u5927\u5316\u3002 \u8fd4\u56de\u4f60\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u4e58\u79ef\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2 \u8f93\u51fa: 1 \u89e3\u91ca: 2 = 1 + 1, 1 \u00d7 1 = 1\u3002 \u793a\u4f8b 2: \u8f93\u5165: 10 \u8f93\u51fa: 36 \u89e3\u91ca: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36\u3002 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe n \u4e0d\u5c0f\u4e8e 2 \u4e14\u4e0d\u5927\u4e8e 58\u3002 \u5206\u6790\uff1a\u8fd9\u662f\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u95ee\u9898\u3002\u53ef\u4ee5\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5\u3002 \u8d2a\u5fc3\u7b97\u6cd5\uff1a$2(n-2)>n$ \u5f97\u5230 $n > 4$\uff0c$3(n-3)>n$ \uff0c\u5f97\u5230 $n>4.5$\uff0c\u5373 $n$ \u5927\u4e8e\u7b49\u4e8e $5$ \u7684\u65f6\u5019\u3002 \u7ed3\u8bba\uff1a\u4e0d\u80fd\u5305\u542b $1$ \uff0c\u6240\u6709\u7684\u52a0\u6cd5\u56e0\u5b50\u53ea\u80fd\u6709 $2$ \u548c $3$\uff0c\u6700\u591a\u53ea\u6709 $2$ \u4e2a $2$\uff0c\u56e0\u6b64\u52a0\u6cd5\u56e0\u5b50\u91cc\u6ca1\u6709 $4$ \u3002 Java \u4ee3\u7801\uff1a class Solution2 { public int integerBreak(int n) { if (n <= 2) { return 1; } if (n == 3) { return 2; } if (n == 4) { return 4; } // \u63a5\u4e0b\u6765\u5c31\u662f n >= 5 \u7684\u65f6\u5019\u7684\u903b\u8f91\u4e86 int res = 1; while (n > 4) { res *= 3; n -= 3; } res *= n; return res; } public static void main(String[] args) { Solution2 solution2 = new Solution2(); int integerBreak = solution2.integerBreak(8); System.out.println(integerBreak); } } C++ \u4ee3\u7801\uff1a","title":"LeetCode 343 \u9898\uff1a\u6574\u6570\u62c6\u5206"},{"location":"11-20/#16","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5b9e\u73b0\u51fd\u6570 double Power(double base, int exponent) \uff0c\u6c42 base \u7684 exponent \u6b21\u65b9\u3002 \u4e0d\u5f97\u4f7f\u7528\u5e93\u51fd\u6570\uff0c\u540c\u65f6\u4e0d\u9700\u8981\u8003\u8651\u5927\u6570\u95ee\u9898\u3002 \u6ce8\u610f\uff1a \u4e0d\u4f1a\u51fa\u73b0\u5e95\u6570\u548c\u6307\u6570\u540c\u4e3a 0 \u7684\u60c5\u51b5 \u6837\u4f8b1\uff1a \u8f93\u5165\uff1a10 \uff0c2 \u8f93\u51fa\uff1a100 \u6837\u4f8b2\uff1a \u8f93\u5165\uff1a10 \uff0c-2 \u8f93\u51fa\uff1a0.01 \u5206\u6790\uff1a\u6570\u503c\u7684\u6574\u6570\u6b21\u65b9\uff0c\u8981\u5904\u7406\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\uff0c\u52a0\u6cd5\u53d8\u6210\u4e58\u6cd5\u3002\u8003\u8651\u5e95\u6570\u4e3a $0$ \u7684\u65f6\u5019\uff0c\u6307\u6570\u4e0d\u80fd\u4e3a\u8d1f\u6570\u3002 \u601d\u8def1\uff1a\u4f7f\u7528\u9012\u5f52 Python \u4ee3\u7801\uff1a class Solution(object): def Power(self, base, exponent): \"\"\" :type base: float :type exponent: int :rtype: float \"\"\" if exponent == 0: return 1 if exponent < 0: return 1 / self.Power(base, -exponent) # \u5982\u679c\u662f\u5947\u6570 if exponent & 1: return base * self.Power(base, exponent - 1) return self.Power(base * base, exponent >> 1) \u601d\u8def2\uff1a\u975e\u9012\u5f52\u7684\u5199\u6cd5\uff0c\u628a exponent \u60f3\u8c61\u6210\u4e8c\u8fdb\u5236\u3002 Python \u4ee3\u7801\uff1a\u5728\u7406\u89e3\u7684\u57fa\u7840\u4e0a\u8bb0\u4f4f\u8fd9\u4e2a\u5199\u6cd5 class Solution(object): def Power(self, base, exponent): \"\"\" :type base: float :type exponent: int :rtype: float \"\"\" if exponent < 0: base = 1 / base # \u8d1f\u6570\u53d8\u6210\u6b63\u6570 exponent = -exponent res = 1 while exponent: if exponent & 1: res *= base base *= base exponent >>= 1 return res \u7ed9\u5b9a\u4e00\u4e2a double \u7c7b\u578b\u7684\u6d6e\u70b9\u6570 base \u548c int \u7c7b\u578b\u7684\u6574\u6570 exponent \u3002\u6c42 base \u7684 exponent \u6b21\u65b9\u3002 \u6c42\u89e3\u601d\u8def\u4e0e\u5173\u952e \u6ce8\u610f\u5206\u7c7b\u8ba8\u8bba\u4e0e\u4e0e\u9012\u5f52\u51fd\u6570\u7684\u8bbe\u8ba1\u3002 \u5173\u952e\uff1a\u5c06\u5faa\u73af\u53d8\u6210\u9012\u5f52\u64cd\u4f5c\uff0c\u6bcf\u6b21\u6298\u534a\u6c42\u503c\uff0c\u907f\u514d\u6b7b\u677f\u505a\u5faa\u73af\uff0c\u8fd9\u79cd\u611f\u89c9\u50cf\u52a0\u6cd5\u53d8\u4e58\u6cd5\u3002 \u6ce8\u610f\u7ec6\u8282\uff1a\u5e95\u6570\u4e3a 0 \u7684\u65f6\u5019\uff0c\u6307\u6570\u4e3a\u8d1f\u6570\u662f\u6ca1\u6709\u610f\u4e49\u7684 \u7cbe\u786e\u8ba1\u7b97\uff0c\u8f6c\u6210\u6d6e\u70b9\u6570 0.125\uff1a System.out.println((double) 1 / 8); \u53f3\u79fb 1 \u4f4d\u8fd0\u7b97\u7b49\u4ef7\u4e8e\u201c\u9664\u4ee5 2\u201d\uff1a // exponent \u6307\u6570\uff0cexponent >> 1 \u8868\u793a\u5c06\u6307\u6570\u9664\u4ee5 2 System.out.println(exponent >> 1); \u4f7f\u7528\u4f4d\u8fd0\u7b97\u7684 \u4e0e \u8fd0\u7b97\u7b26\u4ee3\u66ff\u4e86\u6c42\u4f59\u6570\u8fd0\u7b97\uff0c\u6765\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\uff1a if ((exponent & 1) == 0) { Java \u4ee3\u7801\uff1a public class Solution { public double Power(double base, int exponent) { // \u5148\u628a\u6781\u7aef\u60c5\u51b5\u8003\u8651\u5230 // \u4e0d\u80fd\u7528 == \u6bd4\u8f83\u4e24\u4e2a\u6d6e\u70b9\u6570\u662f\u5426\u76f8\u7b49\uff0c\u56e0\u4e3a\u6709\u8bef\u5dee if (equals(base, 0) && exponent < 0) { throw new IllegalArgumentException(\"\u5f53\u5e95\u6570\u4e3a 0 \u7684\u65f6\u5019\uff0c\u6307\u6570\u4e3a\u8d1f\u6570\u6ca1\u6709\u610f\u4e49\"); } if (exponent == 0) { return 1.0; } // \u4e0b\u9762\u5c06\u6307\u6570\u7684\u4e24\u79cd\u60c5\u51b5\u5408\u5e76\u6210\u4e00\u79cd\u60c5\u51b5\u8003\u8651 if (exponent > 0) { return power(base, exponent); } else { return power(1 / base, -exponent); } } public double power(double base, int exponent) { if (exponent == 0) { return 1.0; } if (exponent % 2 == 0) { double square = power(base, exponent / 2); return square * square; } else { double square = power(base, (exponent - 1) / 2); return square * square * base; } } private boolean equals(double num1, double num2) { return num1 - num2 < 0.000001 && num1 - num2 > -0.000001; } } Java \u4ee3\u7801\uff1a public class Solution { public double Power(double base, int exponent) { if (exponent == 0) { return 1; } if (exponent < 0) { return 1 / Power(base, -exponent); } // \u4f7f\u7528\u4f4d\u8fd0\u7b97\u7684 \u4e0e \u8fd0\u7b97\u7b26\u4ee3\u66ff\u4e86\u6c42\u4f59\u6570\u8fd0\u7b97\uff0c\u6765\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570 if ((exponent & 1) == 0) { double square = Power(base, exponent >> 1); return square * square; } else { double square = Power(base, (exponent - 1) >> 1); return square * square * base; } } public static void main(String[] args) { int base = 3; int exponent = -3; Solution solution = new Solution(); double result1 = solution.Power(base, exponent); System.out.println(result1); exponent = 6; double result2 = solution.Power(base, exponent); System.out.println(result2); // exponent \u6307\u6570\uff0cexponent >> 1 \u8868\u793a\u5c06\u6307\u6570\u9664\u4ee5 2 System.out.println(exponent >> 1); } }","title":"\u7b2c 16 \u9898\uff1a\u6570\u503c\u7684\u6574\u6570\u6b21\u65b9\uff08\u5feb\u901f\u5e42\uff09"},{"location":"11-20/#leetcode-50-powx-n","text":"\u4f20\u9001\u95e8\uff1a 50. Pow(x, n) \u3002 \u5b9e\u73b0 pow( x , n ) \uff0c\u5373\u8ba1\u7b97 x \u7684 n \u6b21\u5e42\u51fd\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2.00000, 10 \u8f93\u51fa: 1024.00000 \u793a\u4f8b 2: \u8f93\u5165: 2.10000, 3 \u8f93\u51fa: 9.26100 \u793a\u4f8b 3: \u8f93\u5165: 2.00000, -2 \u8f93\u51fa: 0.25000 \u89e3\u91ca: 2-2 = 1/22 = 1/4 = 0.25 \u8bf4\u660e: -100.0 < x < 100.0 n \u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u2212231, 231 \u2212 1] \u3002 \u601d\u8def1\uff1a\u4f7f\u7528\u5faa\u73af\uff0c\u628a\u6307\u6570 $n$ \u60f3\u6210\u4e8c\u8fdb\u5236 Python \u4ee3\u7801\uff1a class Solution: def myPow(self, x, n): \"\"\" :type x: float :type n: int :rtype: float \"\"\" if n < 0: x = 1 / x n = - n res = 1 while n: if n & 1 == 1: res *= x # \u6ce8\u610f\uff1a\u8fd9\u91cc\u4e0d\u8981\u5199\u6210 res *= res x *= x n >>= 1 return res \u601d\u8def2\uff1a\u5c06\u5faa\u73af\u53d8\u6210\u9012\u5f52\u64cd\u4f5c\uff0c\u6bcf\u6b21\u6298\u534a\u6c42\u503c\uff0c\u907f\u514d\u6b7b\u677f\u505a\u5faa\u73af\uff0c\u8fd9\u79cd\u611f\u89c9\u50cf\u52a0\u6cd5\u53d8\u4e58\u6cd5\u3002\uff08\u8111\u5b50\u91cc\u56de\u5fc6\u516c\u5f0f\uff09\u3002\u6ce8\u610f\u7ec6\u8282\uff1a\u5e95\u6570\u4e3a $0$ \u7684\u65f6\u5019\uff0c\u6307\u6570\u4e3a\u8d1f\u6570\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002 Python \u4ee3\u7801\uff1a\u9012\u5f52\u5199\u6cd5\uff1a \u6ce8\u610f\u8fb9\u754c\u6761\u4ef6 class Solution: def myPow(self, x, n): \"\"\" :type x: float :type n: int :rtype: float \"\"\" # \u5bf9 x = 0 \uff0c n < 0 \u8fd8\u8981\u505a\u7279\u5224 if n == 0: return 1 if n < 0: return 1 / self.myPow(x, -n) if n & 1: return x * self.myPow(x, n - 1) return self.myPow(x * x, n // 2) \u57fa\u672c\u7684\u5199\u6cd5\uff1a https://blog.csdn.net/happyaaaaaaaaaaa/article/details/76552127 \u6a21\u677f\u5199\u6cd51\uff1a \u6a21\u677f\u5199\u6cd52\uff1a","title":"LeetCode \u7b2c 50 \u9898\uff1a$Pow(x, n)$"},{"location":"11-20/#17-1-n","text":"\u4f20\u9001\u95e8\uff1a \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u57280\u5230n-1\u7684\u8303\u56f4\u5185\u3002 \u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u662f\u91cd\u590d\u7684\u3002\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u957f\u5ea6\u4e3a7\u7684\u6570\u7ec4{2,3,1,0,2,5,3}\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u8f93\u51fa\u662f\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b572\u3002","title":"\u7b2c 17 \u9898\uff1a\u6253\u5370\u4ece 1 \u5230\u6700\u5927\u7684 n \u4f4d\u6570"},{"location":"11-20/#18-1-o1","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u5728 O(1) \u65f6\u95f4\u5220\u9664\u94fe\u8868\u7ed3\u70b9 \u3002 \u7ed9\u5b9a\u5355\u5411\u94fe\u8868\u7684\u4e00\u4e2a\u8282\u70b9\u6307\u9488\uff0c\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5728$O(1)$ \u65f6\u95f4\u5220\u9664\u8be5\u7ed3\u70b9\u3002 \u5047\u8bbe\u94fe\u8868\u4e00\u5b9a\u5b58\u5728\uff0c\u5e76\u4e14\u8be5\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u5c3e\u8282\u70b9\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\u94fe\u8868 1->4->6->8 \uff0c\u5220\u6389\u8282\u70b9\uff1a\u7b2c 2 \u4e2a\u8282\u70b9\u5373 6\uff08\u5934\u8282\u70b9\u4e3a\u7b2c 0 \u4e2a\u8282\u70b9\uff09 \u8f93\u51fa\uff1a\u65b0\u94fe\u8868 1->4->8 \u601d\u8def\uff1a\u5f85\u5220\u9664\u7684\u7ed3\u70b9\u662f\u672b\u5c3e\u7ed3\u70b9\u7684\u60c5\u51b5\u6bd4\u8f83\u5bb9\u6613\u5ffd\u7565\uff0c\u521a\u597d\u9898\u76ee\u4e2d\u8bf4\u201c\u8be5\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u5c3e\u8282\u70b9\u201d\u3002 Python \u4ee3\u7801\uff1a # 28. \u5728O(1)\u65f6\u95f4\u5220\u9664\u94fe\u8868\u7ed3\u70b9 # \u7ed9\u5b9a\u5355\u5411\u94fe\u8868\u7684\u4e00\u4e2a\u8282\u70b9\u6307\u9488\uff0c\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5728O(1)\u65f6\u95f4\u5220\u9664\u8be5\u7ed3\u70b9\u3002 # # \u5047\u8bbe\u94fe\u8868\u4e00\u5b9a\u5b58\u5728\uff0c\u5e76\u4e14\u8be5\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u5c3e\u8282\u70b9\u3002 # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution(object): def deleteNode(self, node): \"\"\" :type node: ListNode :rtype: void \"\"\" # \u5148\u4fdd\u5b58\u4e0b\u4e00\u4e2a\u7ed3\u70b9 next_node = node.next # \u628a\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684 val \u8d4b\u503c\u7ed9\u5f53\u524d\u7ed3\u70b9 node.val = next_node.val # \u628a\u5f53\u524d\u7ed3\u70b9\u7684 next \u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684 next \u6307\u9488 node.next = next_node.next # \u5207\u65ad\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u4e0e\u539f\u94fe\u8868\u7684\u8fde\u63a5 next_node.next = None C++ \u4ee3\u7801\uff1a","title":"\u7b2c 18-1 \u9898\uff1a\u5728 $O(1)$ \u65f6\u95f4\u5220\u9664\u94fe\u8868\u7ed3\u70b9"},{"location":"11-20/#18-2","text":"\u540c LeetCode \u7b2c82 \u9898\u3002 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u8282\u70b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5728\u4e00\u4e2a\u6392\u5e8f\u7684\u94fe\u8868\u4e2d\uff0c\u5b58\u5728\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u8bf7\u5220\u9664\u8be5\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u91cd\u590d\u7684\u7ed3\u70b9\u4e0d\u4fdd\u7559\u3002 \u6837\u4f8b1\uff1a \u8f93\u5165\uff1a 1->2->3->3->4->4->5 \u8f93\u51fa\uff1a 1->2->5 \u6837\u4f8b2\uff1a \u8f93\u5165\uff1a 1->1->1->2->3 \u8f93\u51fa\uff1a 2->3 \u601d\u8def\uff1a\u56e0\u4e3a\u5934\u7ed3\u70b9\u53ef\u80fd\u88ab\u5220\uff0c\u6240\u4ee5\u8981\u8bbe\u7f6e\u4e00\u4e2a\u865a\u62df\u5934\u7ed3\u70b9\u3002 Python \u5199\u6cd5\uff1a class Solution(object): def deleteDuplication(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None: return None dummy = ListNode(-1) dummy.next = head cur = dummy # \u4e00\u4e0b\u5b50\u8981\u770b\u4e24\u4e2a\uff0c\u6240\u4ee5\u662f while cur.next and cur.next.next: if cur.next.val == cur.next.next.val: # \u5220\u9664\u7684\u8d77\u70b9\u81f3\u5c11\u662f cur.next.next del_node = cur.next.next while del_node.next and del_node.val == del_node.next.val: del_node = del_node.next # \u6765\u5230\u4e86\u4e00\u4e2a\u65b0\u7684\u7ed3\u70b9\uff0c\u503c\u4e0d\u540c cur.next = del_node.next del_node.next = None else: cur = cur.next return dummy.next Java \u4ee3\u7801\uff1a class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } public ListNode(int[] arr) { if (arr == null || arr.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = arr[0]; ListNode cur = this; for (int i = 1; i < arr.length; i++) { cur.next = new ListNode(arr[i]); cur = cur.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode deleteDuplication(ListNode pHead) { ListNode dummyNode = new ListNode(-1); dummyNode.next = pHead; ListNode curNode = dummyNode; while (curNode.next != null && curNode.next.next != null) { ListNode next = curNode.next; ListNode nextNext = next.next; if (next.val == nextNext.val) { while (nextNext.next != null && nextNext.val == nextNext.next.val) { nextNext = nextNext.next; } ListNode delNode = nextNext; curNode.next = delNode.next; delNode.next = null; } else { curNode = curNode.next; } } return dummyNode.next; } public static void main(String[] args) { int[] nums = new int[]{1, 2, 3, 3, 4, 4, 5}; ListNode head = new ListNode(nums); System.out.println(head); Solution solution = new Solution(); ListNode deleteDuplication = solution.deleteDuplication(head); System.out.println(deleteDuplication); } }","title":"\u7b2c 18-2 \u9898\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9"},{"location":"11-20/#leetcode-82-ii","text":"\u4f20\u9001\u95e8\uff1a 82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u539f\u59cb\u94fe\u8868\u4e2d \u6ca1\u6709\u91cd\u590d\u51fa\u73b0 \u7684\u6570\u5b57\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->3->4->4->5 \u8f93\u51fa: 1->2->5 \u793a\u4f8b 2: \u8f93\u5165: 1->1->1->2->3 \u8f93\u51fa: 2->3 Java \u4ee3\u7801\uff1a /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode deleteDuplicates(ListNode head) { if (head == null) { return null; } // \u53ea\u8981\u6d89\u53ca\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u90fd\u8bbe\u7acb\u865a\u62df\u5934\u7ed3\u70b9 ListNode dummyNode = new ListNode(-1); dummyNode.next = head; ListNode curNode = dummyNode; while (curNode.next != null && curNode.next.next != null) { // \u5982\u679c\u63a5\u8fde\u4e24\u4e2a\u7ed3\u70b9\u7684 val \u76f8\u7b49\uff0c\u81f3\u5c11\u8981\u628a\u5b83\u4eec\u90fd\u5220\u6389 if (curNode.next.val == curNode.next.next.val) { // \u8981\u5220\u9664\u7684\u8d77\u70b9\u81f3\u5c11\u5e94\u8be5\u662f\u5f53\u524d\u5224\u65ad\u76f8\u540c\u7684\u7ed3\u70b9\u7684\u7b2c 2 \u4e2a ListNode delNode = curNode.next.next; // \u5982\u679c\u540e\u9762\u8fd8\u6709\u76f8\u540c\u7684\u7ed3\u70b9\uff0cdelNode \u540e\u79fb\u4e00\u4f4d\uff0c\u5373 delNode \u5e94\u8be5\u662f\u6307\u5411\u76f8\u540c\u7684\u7ed3\u70b9\u7684\u6700\u540e\u4e00\u4e2a while (delNode.next != null && delNode.next.val == delNode.val) { delNode = delNode.next; } curNode.next = delNode.next; delNode.next = null; } else { curNode = curNode.next; } } return dummyNode.next; } }","title":"LeetCode \u7b2c 82 \u9898\uff1a \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II"},{"location":"11-20/#leetcode-83","text":"\u4f20\u9001\u95e8\uff1a 83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->1->2 \u8f93\u51fa: 1->2 \u793a\u4f8b 2: \u8f93\u5165: 1->1->2->3->3 \u8f93\u51fa: 1->2->3 Java \u4ee3\u7801\uff1a /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode deleteDuplicates(ListNode head) { if (head == null) { return head; } ListNode curNode = head; while (curNode != null && curNode.next != null) { if (curNode.val == curNode.next.val) { ListNode delNode = curNode.next; // \u7ee7\u7eed\u5411\u524d\u627e\uff0c\u770b\u770b\uff0c\u8fd8\u6709\u6ca1\u6709\u53ef\u4ee5\u5220\u9664\u7684\u7ed3\u70b9 while (delNode.next != null && delNode.next.val == delNode.val) { delNode = delNode.next; } // \u7a7f\u9488\u5f15\u7ebf curNode.next = delNode.next; delNode.next = null; } else { curNode = curNode.next; } } return head; } }","title":"LeetCode \u7b2c 83 \u9898\uff1a \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20"},{"location":"11-20/#19","text":"\u4f20\u9001\u95e8\uff1a \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5339\u914d\u5305\u62ec '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u6a21\u5f0f\u4e2d\u7684\u5b57\u7b26 '.' \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c '*' \u8868\u793a\u5b83\u524d\u9762\u7684\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff08\u542b0\u6b21\uff09\u3002 \u5728\u672c\u9898\u4e2d\uff0c\u5339\u914d\u662f\u6307\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u5339\u914d\u6574\u4e2a\u6a21\u5f0f\u3002 \u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 \"aaa\" \u4e0e\u6a21\u5f0f \"a.a\" \u548c \"ab*ac*a\" \u5339\u914d\uff0c\u4f46\u662f\u4e0e \"aa.a\" \u548c \"ab*a\" \u5747\u4e0d\u5339\u914d\u3002 \u6837\u4f8b\uff1a ``` \u8f93\u5165\uff1a s=\"aa\" p=\"a*\" \u8f93\u51fa:true ``` \u601d\u8def\uff1a\u8fd9\u9898\u8003\u5bdf\u7684\u662f\u52a8\u6001\u89c4\u5212\u3002\u7b14\u8bb0\u6211\u5199\u5728\u8fd9\u91cc\u4e86\uff1a \u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09\u7b2c 19 \u9898\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \u3002 Python \u4ee3\u7801\uff1a class Solution(object): # \u72b6\u6001\uff1adp[i][j] \u8868\u793a s \u4e2d\u524d i \u4e2a\u5b57\u7b26\u4e0e p \u7684\u524d j \u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u8868\u793a\u5f0f\u662f\u5426\u5339\u914d # i \u548c j \u8868\u793a\u4e2a\u6570 # \u4ee3\u7801\u4e2d\u51fa\u73b0 i \u5747\u8868\u793a s \u4e2d\u7684\u7d22\u5f15\u6216\u8005\u4e2a\u6570 # \u4ee3\u7801\u4e2d\u51fa\u73b0 j \u5747\u8868\u793a p \u4e2d\u7684\u7d22\u5f15\u6216\u8005\u4e2a\u6570 # \u51fa\u73b0 -1 \u90fd\u8868\u793a\u5f53\u524d\u8003\u8651\u7684 # \u51fa\u73b0 -2 \u90fd\u8868\u793a\u5f53\u524d\u518d\u524d\u4e00\u4e2a # \u53c2\u8003\u8d44\u6599\uff1ahttp://www.voidcn.com/article/p-zioiffqq-mm.html def isMatch(self, s, p): \"\"\" :type s: str :type p: str :rtype: bool \"\"\" n = len(s) m = len(p) dp = [[False for _ in range(m + 1)] for _ in range(n + 1)] # \u5f53 s \u548c p \u7684\u957f\u5ea6\u90fd\u4e3a 0 \u7684\u65f6\u5019\uff0c\u5b9a\u4e49\u6210\u5339\u914d dp[0][0] = True # \u7279\u5224 for j in range(2, m + 1): if p[j - 1] == '*' and dp[0][j - 2]: dp[0][j] = True # \u4e0b\u9762\u5206\u522b\u5bf9\u5b57\u7b26\u4e32 s \u548c\u6a21\u5f0f\u4e32 p \u8fdb\u884c\u5339\u914d for i in range(1, n + 1): for j in range(1, m + 1): if s[i - 1] == p[j - 1] or p[j - 1] == '.': dp[i][j] = dp[i - 1][j - 1] elif p[j - 1] == '*': # \u8fd9\u662f\u6700\u9ebb\u70e6\u7684\u60c5\u51b5 if p[j - 2] != s[i - 1] and p[j - 2] != '.': # \u4f8b\u5b50\uff1as a # j-1 # p b * # j-2 j-1 # \u6b64\u65f6\u53ea\u80fd\u628a * \u5f53\u6210 0 \u6b21\uff0c\u5373 * \u548c\u5b83\u4e4b\u524d\u7684\u5b57\u6bcd\u4e0d\u51fa\u73b0\uff0c\u6240\u4ee5\u4e00\u4e0b\u5b50\u8981\u51cf\u53bb 2 # p[j - 2] != '.' \u8fd9\u4e00\u70b9\u522b\u5fd8\u4e86 # \u4e0d\u80fd\u5339\u914d dp[i][j] = dp[i][j - 2] else: # \u63a5\u4e0b\u6765\u662f\u53ef\u4ee5\u5339\u914d # \u4f8b\u5b50\uff1as a # j-1 # p . * # j-2 j-1 # \u6b64\u65f6\u628a * \u5f53\u6210 0 \u6b21\uff0c # \u6b64\u65f6\u628a * \u5f53\u6210 1 \u6b21\uff0c # \u6b64\u65f6\u628a * \u5f53\u6210 \u591a \u6b21\uff0c\u76f4\u63a5\u628a i - 1 \uff0c\u8fd9\u662f\u6700\u96be\u7684\u5730\u65b9 dp[i][j] = dp[i][j - 2] or dp[i][j - 1] or dp[i - 1][j] return dp[n][m] \u65b9\u6cd52\uff1a\u9012\u5f52\u7684\u5199\u6cd5\u3002 \u53c2\u8003\u8d44\u6599\uff1a\u4e00\u4e2a\u7f51\u7ea2\u7684\u89e3\u6cd5\uff1ahttp://www.cnblogs.com/grandyang/p/4461713.html\u3002\u6709\u89e3\u6cd5 1 \u8fd8\u6709\u89e3\u6cd52\u3002 \u7f51\u7ea2\u5199\u6cd5\uff1ahttps://blog.csdn.net/hk2291976/article/details/51165010 \u8bf4\u660e\uff1a\u8fd9\u4e2a\u7f51\u7ea2\u8fd8\u5199\u4e86 leetbook\u3002 \u53c2\u8003\u8d44\u6599\uff1ahttps://zhuanlan.zhihu.com/p/37647267\u3002 \u91c7\u7528\u9012\u5f52\u7684\u89e3\u9898\u65b9\u6cd5\uff0c\u9012\u5f52\u7684\u7ec8\u6b62\u6761\u4ef6\u662f\uff1a 1\u3001\u5982\u679c $s$ \u548c $p$ \u90fd\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\uff0c\u76f8\u7b49\u7684\u5145\u8981\u6761\u4ef6\u662f\uff0c\u5b83\u4eec\u76f8\u7b49\uff0c\u6216\u8005 $p$ \u662f '.' \uff1b \u5176\u4ed6\u9012\u5f52\u60c5\u51b5\uff1a 1\u3001\u5982\u679c $p$ \u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e0d\u662f '*' \uff0c\u90a3\u4e48\u5982\u679c $s$ \u662f\u7a7a\uff0c\u8fd4\u56de false \uff0c\u5982\u679c $s[0]$ \u548c $p[0]$ \u80fd\u5339\u914d\u4e0a\uff0c\u90a3\u4e48\u9012\u5f52 s.substr(1), p.substr(1) \uff1b ==\u574f\u5c31\u574f\u5728\uff0c\u5982\u679c $p$ \u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u662f '*' ==\u3002 2\u3001\u5982\u679c $p$ \u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u662f '*' \uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053 ' ' \u53ef\u4ee5\u4ee3\u8868 ' ' \u4e4b\u524d\u7684\u5143\u7d20\u4e2a\u6570\u662f $0$ \u4e2a\u6216\u8005 $1$ \u4e2a\u6216\u8005\u591a\u4e2a\uff0c\u6240\u4ee5\u5982\u679c $s$ \u7684\u524d $k$ \u4e2a\u5143\u7d20\u4e2a $p[0]$ \u4e00\u6837\uff0c\u90a3\u4e48\u5b83\u4eec\u6709\u53ef\u80fd\u90fd\u88ab\u5339\u914d\u5230\uff0c\u4e5f\u6709\u53ef\u80fd\u4e00\u4e2a\u90fd\u4e0d\u4f1a\u88ab\u5339\u914d\u4e0a\u3002 C++ \u5199\u6cd5\uff1a class Solution { public: bool isMatch(string s, string p) { if(p.empty())return s.empty(); if(p.size() == 1) { return(s.size() == 1 && (s[0] == p[0] || p[0] == '.')); } if(p[1] != '*') { if(s.empty())return false; return (s[0] == p[0] || p[0] == '.')&& isMatch(s.substr(1), p.substr(1)); } // \u8d70\u5230\u8fd9\u91cc p[1] == '*'\uff0c\u4e0b\u9762\u7684 4 \u884c\u4ee3\u8868\u6bd4\u8f83\u96be\u7406\u89e3 while(!s.empty() && (s[0] == p[0] || p[0] == '.')) { if(isMatch(s, p.substr(2))) return true; s = s.substr(1); } return isMatch(s, p.substr(2)); } }; \u8981\u6c42\uff1a\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5339\u914d\u5305\u62ec . \u548c * \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u6a21\u5f0f\u4e2d\u7684\u5b57\u7b26 . \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c * \u8868\u793a\u5b83\u524d\u9762\u7684\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff0c\u5305\u62ec $0$ \u6b21\u3002 LeetCode \u7b2c 10 \u9898\uff0c\u4f20\u9001\u95e8\uff1a 10. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \uff0c\u96be\u5ea6\u662f\uff1a \u56f0\u96be \u3002 \u4f7f\u7528\u52a8\u6001\u89c4\u5212\uff1a dp \u51fd\u6570\u8fd9\u4e48\u5199\u3002 \u601d\u8def\uff1a\u5f53\u5b57\u7b26\u4e32\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\u65f6\uff0c\u76f4\u63a5\u8fdb\u884c\u5224\u65ad\uff0c\u5426\u5219\u8fdb\u5165\u4e0b\u9762\u4e24\u79cd\u9012\u5f52\u3002 \u4e24\u79cd\u9012\u5f52\u60c5\u51b5\uff1a1\u3001\u5f53\u6a21\u5f0f\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e0d\u662f * \u65f6\uff1a \uff081\uff09\u5982\u679c\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548c\u6a21\u5f0f\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u76f8\u5339\u914d\u6216\u662f\u5b57\u7b26 . \u90a3\u4e48\u5b57\u7b26\u4e32\u548c\u6a21\u5f0f\u90fd\u540e\u79fb\u4e00\u4e2a\u5b57\u7b26\uff0c\u7136\u540e\u5339\u914d\u5269\u4f59 \u7684\uff1b \uff082\uff09\u5982\u679c\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548c\u6a21\u5f0f\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u76f8\u4e0d\u5339\u914d\uff0c\u76f4\u63a5\u8fd4\u56de false \u3002 2\u3001\u5f53\u6a21\u5f0f\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u662f * \u65f6\uff1a \u5982\u679c\u201c\u5b57\u7b26\u4e32\u201d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u8ddf\u201c\u6a21\u5f0f\u4e32\u201d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u5339\u914d\uff0c\u5219\u6a21\u5f0f\u540e\u79fb $2$ \u4e2a\u5b57\u7b26\uff0c\u7ee7\u7eed\u5339\u914d\uff1b \u5982\u679c\u201c\u5b57\u7b26\u4e32\u201d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u8ddf\u201c\u6a21\u5f0f\u4e32\u201d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5339\u914d\u6216\u662f\u5b57\u7b26 . \uff0c\u53ef\u4ee5\u6709 $3$ \u79cd\u5339\u914d\u65b9\u5f0f\uff1a \uff081\uff09\u6a21\u5f0f\u540e\u79fb $2$ \u5b57\u7b26\uff0c\u76f8\u5f53\u4e8e x \u88ab\u5ffd\u7565\uff1b \uff082\uff09\u5b57\u7b26\u4e32\u540e\u79fb $1$ \u5b57\u7b26\uff0c\u6a21\u5f0f\u540e\u79fb $2$ \u5b57\u7b26\uff1b \uff083\uff09\u5b57\u7b26\u4e32\u540e\u79fb $1$ \u5b57\u7b26\uff0c\u6a21\u5f0f\u4e0d\u53d8\uff0c\u5373\u7ee7\u7eed\u5339\u914d\u5b57\u7b26\u4e0b\u4e00\u4f4d\uff0c\u56e0\u4e3a\u53ef\u4ee5\u5339\u914d\u591a\u4f4d\u3002","title":"\u7b2c 19 \u9898\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d"},{"location":"11-20/#20","text":"\u4f20\u9001\u95e8\uff1a \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u8868\u793a\u6570\u503c\uff08\u5305\u62ec\u6574\u6570\u548c\u5c0f\u6570\uff09\u3002 \u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 \"+100\" , \"5e2\" , \"-123\" , \"3.1416\" \u548c \"-1E-16\" \u90fd\u8868\u793a\u6570\u503c\u3002 \u4f46\u662f \"12e\" , \"1a3.14\" , \"1.2.3\" , \"+-5\" \u548c \"12e+4.3\" \u90fd\u4e0d\u662f\u3002 \u6ce8\u610f : \u5c0f\u6570\u53ef\u4ee5\u6ca1\u6709\u6574\u6570\u90e8\u5206\uff0c\u4f8b\u5982.123\u7b49\u4e8e0.123\uff1b \u5c0f\u6570\u70b9\u540e\u9762\u53ef\u4ee5\u6ca1\u6709\u6570\u5b57\uff0c\u4f8b\u5982233.\u7b49\u4e8e233.0\uff1b \u5c0f\u6570\u70b9\u524d\u9762\u548c\u540e\u9762\u53ef\u4ee5\u6709\u6570\u5b57\uff0c\u4f8b\u5982233.666; \u5f53e\u6216E\u524d\u9762\u6ca1\u6709\u6570\u5b57\u65f6\uff0c\u6574\u4e2a\u5b57\u7b26\u4e32\u4e0d\u80fd\u8868\u793a\u6570\u5b57\uff0c\u4f8b\u5982.e1\u3001e1\uff1b \u5f53e\u6216E\u540e\u9762\u6ca1\u6709\u6574\u6570\u65f6\uff0c\u6574\u4e2a\u5b57\u7b26\u4e32\u4e0d\u80fd\u8868\u793a\u6570\u5b57\uff0c\u4f8b\u598212e\u300112e+5.4; \u6837\u4f8b\uff1a \u8f93\u5165: \"0\" \u8f93\u51fa: true Python \u4ee3\u7801\uff1a class Solution(object): def isNumber(self, s): \"\"\" :type s: str :rtype: bool \"\"\" size = len(s) # 1\u3001\u53bb\u6389\u591a\u4f59\u7684\u7a7a\u683c i = 0 while i < size and s[i] == ' ': i += 1 j = size - 1 while j >= 0 and s[j] == ' ': j -= 1 if i > j: return False s = s[i:j - i + 1] # 2\u3001\u9996\u5b57\u6bcd\u53ef\u4ee5\u662f\u52a0\u53f7\u6216\u8005\u51cf\u53f7 if s[0] == '+' or s[0] == '-': s = s[1:] if len(s) == 0: return False # 3\u3001\u53ea\u6709 1 \u4e2a\u70b9\uff0c\u4e0d\u884c if len(s) == 1 and s[0] == '.': return False # 4\u3001\u4e0b\u9762\u5bf9\u70b9\u7684\u4e2a\u6570\u548c e \u7684\u4e2a\u6570\u5c55\u5f00\u8ba8\u8bba # \u70b9\u7684\u4e2a\u6570 dot_cnt = 0 # e \u7684\u4e2a\u6570 e_cnt = 0 size = len(s) i = -1 while i < size - 1: i += 1 if '0' <= s[i] <= '9': continue elif s[i] == '.': dot_cnt += 1 # \u5982\u679c\u6ca1\u6709 e\uff0c\u5e76\u4e14\u70b9\u7684\u6570\u91cf\u5927\u4e8e 1\uff0c\u4e0d\u7b26\u5408\u8981\u6c42 if e_cnt or dot_cnt > 1: return False elif s[i] == 'e' or s[i] == 'E': e_cnt += 1 if i == 0 or i == size - 1 or e_cnt > 1: return False # '.' \u540e\u9762\u4e0d\u80fd\u52a0\u4e0a if i == 1 and s[0] == '.': return False if s[i + 1] == '+' or s[i + 1] == '-': if i + 2 == size: return False i += 1 else: return False return True if __name__ == '__main__': solution = Solution() s = '123.45e+6' result = solution.isNumber(s) print(result) \u201c\u5927\u96ea\u83dc\u201d\u7684\u89e3\u6cd5\uff1ahttps://www.acwing.com/solution/acwing/content/737/\u3002 C++ \u4ee3\u7801\uff1a C++ \u4ee3\u7801\uff1a class Solution { public: bool isNumber(string s) { int i = 0; while (i < s.size() && s[i] == ' ') i ++ ; int j = s.size() - 1; while (j >= 0 && s[j] == ' ') j -- ; if (i > j) return false; s = s.substr(i, j - i + 1); if (s[0] == '-' || s[0] == '+') s = s.substr(1); if (s.empty() || s[0] == '.' && s.size() == 1) return false; int dot = 0, e = 0; for (int i = 0; i < s.size(); i ++ ) { if (s[i] >= '0' && s[i] <= '9'); else if (s[i] == '.') { dot ++ ; if (e || dot > 1) return false; } else if (s[i] == 'e' || s[i] == 'E') { e ++ ; if (i + 1 == s.size() || !i || e > 1 || i == 1 && s[0] == '.') return false; if (s[i + 1] == '+' || s[i + 1] == '-') { if (i + 2 == s.size()) return false; i ++ ; } } else return false; } return true; } }; \u4f5c\u8005\uff1ayxc \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/acwing/content/737/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \uff08\u672c\u8282\u5b8c\uff09","title":"\u7b2c 20 \u9898\uff1a\u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32"},{"location":"11/","text":"\u5251\u6307 Offer 11. \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57 \u7b2c 11 \u9898\uff1a\u65cb\u8f6c\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u6570\u5b57 \u529b\u6263\uff1a \u5251\u6307 Offer 11. \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57 \uff1b AcWing\uff1a\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c\u3002 \u8f93\u5165\u4e00\u4e2a\u5347\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20\u3002 \u4f8b\u5982\u6570\u7ec4 [3,4,5,1,2] \u4e3a [1,2,3,4,5] \u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8be5\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e3a $1$\u3002 \u6570\u7ec4\u53ef\u80fd\u5305\u542b\u91cd\u590d\u9879\u3002 \u6ce8\u610f \uff1a\u6570\u7ec4\u5185\u6240\u542b\u5143\u7d20\u975e\u8d1f\uff0c\u82e5\u6570\u7ec4\u5927\u5c0f\u4e3a0\uff0c\u8bf7\u8fd4\u56de-1\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a nums=[2, 2, 2, 0, 1] \u8f93\u51fa\uff1a0 \u601d\u8def1 \uff1a\u8fd9\u662f\u5178\u578b\u7684\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u6cd5\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u5e94\u7528\u4e8c\u5206\u6cd5\u7684\u6a21\u677f\u3002\u7279\u522b\u6ce8\u610f\uff0c\u6570\u7ec4\u53ef\u80fd\u5305\u542b\u91cd\u590d\u9879\uff0c\u56e0\u6b64\u4e2d\u95f4\u9879\u5982\u679c\u7b49\u4e8e\u672b\u5c3e\u9879\uff0c\u4f8b\u5982\uff1a [1, 1, 1, 1, 1, 0, 1] \uff0c\u4e0d\u80fd\u780d\u6389\u4e00\u534a\uff0c\u53ea\u80fd\u628a\u672b\u5c3e\u9879\u6392\u9664\u6389\u3002 Python \u4ee3\u7801\uff1a class Solution: def findMin(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" size = len(nums) if size == 0: return -1 l = 0 r = size - 1 while l < r: mid = l + (r - l) // 2 if nums[mid] < nums[r]: # mid \u6709\u53ef\u80fd\u662f\u6700\u5c0f\u503c # [7,8,1,2,3] r = mid elif nums[mid] > nums[r]: # mid \u80af\u5b9a\u4e0d\u662f\u6700\u5c0f\u503c # [7,8,9,10,11,1,2,3] l = mid + 1 else: # \u90fd\u6709\u53ef\u80fd\uff0c\u6240\u4ee5\u5c31\u628a r \u6392\u9664\u4e86 # [1,1,1,1,1,0,1] assert nums[mid] == nums[r] r = r - 1 return nums[l] \u601d\u8def2 \uff1a\u8fd8\u53ef\u4ee5\u4f7f\u7528\u201c\u5206\u6cbb\u6cd5\u201d\uff0c\u201c\u5206\u6cbb\u6cd5\u201d\u5c31\u4e0d\u7528\u5728\u4e4e\u6709\u6ca1\u6709\u91cd\u590d\u9879\u4e86\u3002\u4f46\u662f\u201c\u5206\u6cbb\u6cd5\u201d\u65e0\u5f02\u4e8e\u628a\u6574\u4e2a\u6570\u7ec4\u90fd\u770b\u4e00\u904d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002 Python \u4ee3\u7801\uff1a class Solution: def findMin(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" size = len(nums) if size == 0: return -1 if size == 1: return nums[0] return self.__findMin(nums, 0, size - 1) def __findMin(self, nums, left, right): if left == right: return nums[left] if left + 1 == right: return min(nums[left], nums[right]) mid = left + (right - left) // 2 return min(self.__findMin(nums, left, mid), self.__findMin(nums, mid + 1, right)) \u5206\u6790\uff1a\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7684\u601d\u60f3\uff0c\u56e0\u4e3a\u6700\u5c0f\u7684\u6570\u5b57\u5f88\u53ef\u80fd\u51fa\u73b0\u5728\u9996\u4f4d\uff0c\u4ece\u540e\u5411\u524d\u626b\u63cf\u662f\u6c42\u89e3\u8fd9\u9053\u9898\u7684\u91cd\u8981\u6280\u5de7\uff0c\u5426\u5219\u9700\u8981\u5206\u7c7b\u8ba8\u8bba\uff0c\u5c31\u53d8\u5f97\u9ebb\u70e6\u4e86\uff08\u5373\u8ba9\u540e\u9762\u7684\u6307\u9488\u5411\u524d\u79fb\u52a8\uff09\u3002 Java \u4ee3\u7801\uff1a public class Solution { // \u867d\u7136\u53ef\u4ee5\u901a\u8fc7\uff0c\u4f46\u662f O(n) \u7684\u590d\u6742\u5ea6\u5e76\u4e0d\u7406\u60f3 public int minNumberInRotateArray(int[] array) { // {3,4,5,1,2} // 1 2 3 4 5 int len = array.length; for (int i = 1; i < len - 1; i++) { if (array[i] < array[i - 1]) { return array[i]; } } // \u5982\u679c\u8d70\u5230\u8fd9\u91cc\uff0c\u8bf4\u660e\u6570\u7ec4\u662f\u5347\u5e8f\u7684\uff0c\u76f4\u63a5\u8fd4\u56de\u7b2c 0 \u53f7\u7d22\u5f15\u7684\u5143\u7d20\u5c31\u53ef\u4ee5\u4e86 return array[0]; } public static void main(String[] args) { // int[] nums = new int[]{3, 4, 5, 1, 2}; int[] nums = new int[]{1, 2, 3, 4, 5}; Solution solution = new Solution(); int minNumberInRotateArray = solution.minNumberInRotateArray(nums); System.out.println(minNumberInRotateArray); } } Java \u4ee3\u7801\uff1a public class Solution2 { public int minNumberInRotateArray(int[] array) { int len = array.length; if (len == 0) { return 0; } int first = 0; int last = len - 1; while (first < last) { int mid = first + (last - first) / 2; if (array[mid] > array[last]) { first = mid + 1; } else if (array[mid] == array[last]) { last = last - 1; } else { last = mid; } } return array[first]; } public static void main(String[] args) { // int[] nums = new int[]{3}; // int[] nums = new int[]{3, 4, 5, 6, 7, 8, 9, 1, 2}; // int[] nums = new int[]{1, 2, 3, 4, 5}; int[] nums = new int[]{2, 2, 2, 1, 2}; Solution2 solution2 = new Solution2(); int minNumberInRotateArray = solution2.minNumberInRotateArray(nums); System.out.println(minNumberInRotateArray); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 11. \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57"},{"location":"11/#offer-11","text":"","title":"\u5251\u6307 Offer 11. \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57"},{"location":"11/#11","text":"\u529b\u6263\uff1a \u5251\u6307 Offer 11. \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57 \uff1b AcWing\uff1a\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c\u3002 \u8f93\u5165\u4e00\u4e2a\u5347\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20\u3002 \u4f8b\u5982\u6570\u7ec4 [3,4,5,1,2] \u4e3a [1,2,3,4,5] \u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8be5\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e3a $1$\u3002 \u6570\u7ec4\u53ef\u80fd\u5305\u542b\u91cd\u590d\u9879\u3002 \u6ce8\u610f \uff1a\u6570\u7ec4\u5185\u6240\u542b\u5143\u7d20\u975e\u8d1f\uff0c\u82e5\u6570\u7ec4\u5927\u5c0f\u4e3a0\uff0c\u8bf7\u8fd4\u56de-1\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a nums=[2, 2, 2, 0, 1] \u8f93\u51fa\uff1a0 \u601d\u8def1 \uff1a\u8fd9\u662f\u5178\u578b\u7684\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u6cd5\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u5e94\u7528\u4e8c\u5206\u6cd5\u7684\u6a21\u677f\u3002\u7279\u522b\u6ce8\u610f\uff0c\u6570\u7ec4\u53ef\u80fd\u5305\u542b\u91cd\u590d\u9879\uff0c\u56e0\u6b64\u4e2d\u95f4\u9879\u5982\u679c\u7b49\u4e8e\u672b\u5c3e\u9879\uff0c\u4f8b\u5982\uff1a [1, 1, 1, 1, 1, 0, 1] \uff0c\u4e0d\u80fd\u780d\u6389\u4e00\u534a\uff0c\u53ea\u80fd\u628a\u672b\u5c3e\u9879\u6392\u9664\u6389\u3002 Python \u4ee3\u7801\uff1a class Solution: def findMin(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" size = len(nums) if size == 0: return -1 l = 0 r = size - 1 while l < r: mid = l + (r - l) // 2 if nums[mid] < nums[r]: # mid \u6709\u53ef\u80fd\u662f\u6700\u5c0f\u503c # [7,8,1,2,3] r = mid elif nums[mid] > nums[r]: # mid \u80af\u5b9a\u4e0d\u662f\u6700\u5c0f\u503c # [7,8,9,10,11,1,2,3] l = mid + 1 else: # \u90fd\u6709\u53ef\u80fd\uff0c\u6240\u4ee5\u5c31\u628a r \u6392\u9664\u4e86 # [1,1,1,1,1,0,1] assert nums[mid] == nums[r] r = r - 1 return nums[l] \u601d\u8def2 \uff1a\u8fd8\u53ef\u4ee5\u4f7f\u7528\u201c\u5206\u6cbb\u6cd5\u201d\uff0c\u201c\u5206\u6cbb\u6cd5\u201d\u5c31\u4e0d\u7528\u5728\u4e4e\u6709\u6ca1\u6709\u91cd\u590d\u9879\u4e86\u3002\u4f46\u662f\u201c\u5206\u6cbb\u6cd5\u201d\u65e0\u5f02\u4e8e\u628a\u6574\u4e2a\u6570\u7ec4\u90fd\u770b\u4e00\u904d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002 Python \u4ee3\u7801\uff1a class Solution: def findMin(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" size = len(nums) if size == 0: return -1 if size == 1: return nums[0] return self.__findMin(nums, 0, size - 1) def __findMin(self, nums, left, right): if left == right: return nums[left] if left + 1 == right: return min(nums[left], nums[right]) mid = left + (right - left) // 2 return min(self.__findMin(nums, left, mid), self.__findMin(nums, mid + 1, right)) \u5206\u6790\uff1a\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7684\u601d\u60f3\uff0c\u56e0\u4e3a\u6700\u5c0f\u7684\u6570\u5b57\u5f88\u53ef\u80fd\u51fa\u73b0\u5728\u9996\u4f4d\uff0c\u4ece\u540e\u5411\u524d\u626b\u63cf\u662f\u6c42\u89e3\u8fd9\u9053\u9898\u7684\u91cd\u8981\u6280\u5de7\uff0c\u5426\u5219\u9700\u8981\u5206\u7c7b\u8ba8\u8bba\uff0c\u5c31\u53d8\u5f97\u9ebb\u70e6\u4e86\uff08\u5373\u8ba9\u540e\u9762\u7684\u6307\u9488\u5411\u524d\u79fb\u52a8\uff09\u3002 Java \u4ee3\u7801\uff1a public class Solution { // \u867d\u7136\u53ef\u4ee5\u901a\u8fc7\uff0c\u4f46\u662f O(n) \u7684\u590d\u6742\u5ea6\u5e76\u4e0d\u7406\u60f3 public int minNumberInRotateArray(int[] array) { // {3,4,5,1,2} // 1 2 3 4 5 int len = array.length; for (int i = 1; i < len - 1; i++) { if (array[i] < array[i - 1]) { return array[i]; } } // \u5982\u679c\u8d70\u5230\u8fd9\u91cc\uff0c\u8bf4\u660e\u6570\u7ec4\u662f\u5347\u5e8f\u7684\uff0c\u76f4\u63a5\u8fd4\u56de\u7b2c 0 \u53f7\u7d22\u5f15\u7684\u5143\u7d20\u5c31\u53ef\u4ee5\u4e86 return array[0]; } public static void main(String[] args) { // int[] nums = new int[]{3, 4, 5, 1, 2}; int[] nums = new int[]{1, 2, 3, 4, 5}; Solution solution = new Solution(); int minNumberInRotateArray = solution.minNumberInRotateArray(nums); System.out.println(minNumberInRotateArray); } } Java \u4ee3\u7801\uff1a public class Solution2 { public int minNumberInRotateArray(int[] array) { int len = array.length; if (len == 0) { return 0; } int first = 0; int last = len - 1; while (first < last) { int mid = first + (last - first) / 2; if (array[mid] > array[last]) { first = mid + 1; } else if (array[mid] == array[last]) { last = last - 1; } else { last = mid; } } return array[first]; } public static void main(String[] args) { // int[] nums = new int[]{3}; // int[] nums = new int[]{3, 4, 5, 6, 7, 8, 9, 1, 2}; // int[] nums = new int[]{1, 2, 3, 4, 5}; int[] nums = new int[]{2, 2, 2, 1, 2}; Solution2 solution2 = new Solution2(); int minNumberInRotateArray = solution2.minNumberInRotateArray(nums); System.out.println(minNumberInRotateArray); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 11 \u9898\uff1a\u65cb\u8f6c\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u6570\u5b57"},{"location":"12/","text":"\u5251\u6307 Offer 12. \u77e9\u9635\u4e2d\u7684\u8def\u5f84 \u529b\u6263\uff1a \u5251\u6307 Offer 12. \u77e9\u9635\u4e2d\u7684\u8def\u5f84 \uff1b AcWing\uff1a\u77e9\u9635\u4e2d\u7684\u8def\u5f84 \u3002 \u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u5728\u4e00\u4e2a\u77e9\u9635\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u6761\u5305\u542b\u67d0\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u7684\u8def\u5f84\u3002 \u8def\u5f84\u53ef\u4ee5\u4ece\u77e9\u9635\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u683c\u5b50\u5f00\u59cb\uff0c\u6bcf\u4e00\u6b65\u53ef\u4ee5\u5728\u77e9\u9635\u4e2d\u5411\u5de6\uff0c\u5411\u53f3\uff0c\u5411\u4e0a\uff0c\u5411\u4e0b\u79fb\u52a8\u4e00\u4e2a\u683c\u5b50\u3002 \u5982\u679c\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u4e86\u77e9\u9635\u4e2d\u7684\u67d0\u4e00\u4e2a\u683c\u5b50\uff0c\u5219\u4e4b\u540e\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8fd9\u4e2a\u683c\u5b50\u3002 \u6ce8\u610f\uff1a \u8f93\u5165\u7684\u8def\u5f84\u4e0d\u4e3a\u7a7a\uff1b \u6240\u6709\u51fa\u73b0\u7684\u5b57\u7b26\u5747\u4e3a\u5927\u5199\u82f1\u6587\u5b57\u6bcd\uff1b \u6837\u4f8b\uff1a ``` matrix= [ [\"A\",\"B\",\"C\",\"E\"], [\"S\",\"F\",\"C\",\"S\"], [\"A\",\"D\",\"E\",\"E\"] ] str=\"BCCE\" , return \"true\" str=\"ASAE\" , return \"false\" ``` \u601d\u8def\uff1a\u5178\u578b\u7684 floodfill \u89e3\u6cd5\uff0c\u672c\u8d28\u4e0a\u662f\u9012\u5f52\u56de\u6eaf\u7b97\u6cd5\u3002 Python \u4ee3\u7801\uff1a class Solution(object): directions = [(-1, 0), (1, 0), (0, 1), (0, -1)] def hasPath(self, matrix, string): \"\"\" :type matrix: List[List[str]] :type string: str :rtype: bool \"\"\" rows = len(matrix) if rows == 0: return False cols = len(matrix[0]) marked = [[False for _ in range(cols)] for _ in range(rows)] for i in range(rows): for j in range(cols): if self.__has_path(matrix, string, 0, i, j, marked, rows, cols): return True return False def __has_path(self, matrix, word, index, start_x, start_y, marked, m, n): # \u6ce8\u610f\uff1a\u9996\u5148\u5224\u65ad\u6781\u7aef\u60c5\u51b5 if index == len(word) - 1: return matrix[start_x][start_y] == word[-1] if matrix[start_x][start_y] == word[index]: # \u5148\u5360\u4f4f\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u641c\u7d22\u4e0d\u6210\u529f\u7684\u8bdd\uff0c\u8981\u91ca\u653e\u6389 marked[start_x][start_y] = True for direction in self.directions: new_x = start_x + direction[0] new_y = start_y + direction[1] if 0 <= new_x < m and 0 <= new_y < n and not marked[new_x][new_y]: if self.__has_path(matrix, word, index + 1, new_x, new_y, marked, m, n): return True marked[start_x][start_y] = False return False if __name__ == '__main__': matrix = [ [\"A\", \"B\", \"C\", \"E\"], [\"S\", \"F\", \"E\", \"S\"], [\"A\", \"D\", \"E\", \"E\"] ] str = \"ABCEFSADEESE\" solution = Solution() result = solution.hasPath(matrix, str) print(result) \u540c LeetCode \u7b2c 79 \u9898\uff0c\u4f20\u9001\u95e8\uff1a 79. \u5355\u8bcd\u641c\u7d22 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683c\u548c\u4e00\u4e2a\u5355\u8bcd\uff0c\u627e\u51fa\u8be5\u5355\u8bcd\u662f\u5426\u5b58\u5728\u4e8e\u7f51\u683c\u4e2d\u3002 \u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002 \u793a\u4f8b: board = [ ['A','B','C','E'], ['S','F','C','S'], ['A','D','E','E'] ] \u7ed9\u5b9a word = \"ABCCED\", \u8fd4\u56de true. \u7ed9\u5b9a word = \"SEE\", \u8fd4\u56de true. \u7ed9\u5b9a word = \"ABCB\", \u8fd4\u56de false. \u601d\u8def\uff1a\u5176\u5b9e\u5c31\u662f floodfill \u7b97\u6cd5\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u7840\u7684\u7b97\u6cd5\uff0c\u4e00\u5b9a\u8981\u638c\u63e1\u3002\u7279\u522b\u8981\u5f04\u6e05\u695a\uff0c marked \u6570\u7ec4\u7684\u4f5c\u7528\uff0c\u4e00\u5f00\u59cb\u8981\u5360\u4f4f\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u53d1\u73b0\u6b64\u8def\u4e0d\u901a\u7684\u65f6\u5019\uff0c\u8981\u91ca\u653e\u6389\u3002 Python \u4ee3\u7801\uff1a class Solution: # (x-1,y) # (x,y-1) (x,y) (x,y+1) # (x+1,y) directions = [(0, -1), (-1, 0), (0, 1), (1, 0)] def exist(self, board, word): \"\"\" :type board: List[List[str]] :type word: str :rtype: bool \"\"\" m = len(board) n = len(board[0]) marked = [[False for _ in range(n)] for _ in range(m)] for i in range(m): for j in range(n): # \u5bf9\u6bcf\u4e00\u4e2a\u683c\u5b50\u90fd\u4ece\u5934\u5f00\u59cb\u641c\u7d22 if self.__search_word(board, word, 0, i, j, marked, m, n): return True return False def __search_word(self, board, word, index, start_x, start_y, marked, m, n): # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if index == len(word) - 1: return board[start_x][start_y] == word[index] # \u4e2d\u95f4\u5339\u914d\u4e86\uff0c\u518d\u7ee7\u7eed\u641c\u7d22 if board[start_x][start_y] == word[index]: # \u5148\u5360\u4f4f\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u641c\u7d22\u4e0d\u6210\u529f\u7684\u8bdd\uff0c\u8981\u91ca\u653e\u6389 marked[start_x][start_y] = True for direction in self.directions: new_x = start_x + direction[0] new_y = start_y + direction[1] if 0 <= new_x < m and 0 <= new_y < n and \\ not marked[new_x][new_y] and \\ self.__search_word(board, word, index + 1, new_x, new_y, marked, m, n): return True marked[start_x][start_y] = False return False Java \u4ee3\u7801\uff1a public class Solution { /** * x-1,y * x,y-1 x,y x,y+1 * x+1,y */ private int[][] direct = new int[][]{{-1, 0}, {0, 1}, {1, 0}, {0, -1}}; public boolean hasPath(char[] matrix, int rows, int cols, char[] str) { int len = matrix.length; if (len == 0) { return false; } boolean[] marked = new boolean[len]; for (int i = 0; i < rows; i++) { for (int j = 0; j < cols; j++) { if (dfs(matrix, rows, cols, str, str.length, marked, i, j, 0)) { return true; } } } return false; } private boolean dfs(char[] matrix, int rows, int cols, char[] str, int len, boolean[] marked, int i, int j, int start) { // \u5339\u914d\u5230\u6700\u540e\uff0c\u8bf4\u660e\u627e\u5230\u4e00\u6761\u8def\u5f84 int index = getIndex(i, j, cols); if (start == len - 1) { return matrix[index] == str[start]; } // \u8981\u7279\u522b\u5c0f\u5fc3\uff01 marked[index] = true; if (matrix[index] == str[start]) { // \u5f53\u524d\u5339\u914d\u4e86\uff0c\u624d\u5f00\u59cb\u5c1d\u8bd5\u8d70\u540e\u9762\u7684\u8def for (int k = 0; k < 4; k++) { // \u7279\u522b\u5c0f\u5fc3\uff0c\u4e00\u5b9a\u662f\u4e00\u4e2a\u521d\u59cb\u5316\u7684\u65b0\u7684\u53d8\u91cf int newi = i + direct[k][0]; int newj = j + direct[k][1]; int nextIndex = getIndex(newi, newj, cols); if (inArea(newi, newj, rows, cols) && !marked[nextIndex]) { // marked[nextIndex] = true; \u4e0d\u5728\u8fd9\u91cc\u8bbe\u7f6e if (dfs(matrix, rows, cols, str, len, marked, newi, newj, start + 1)) { return true; } // marked[nextIndex] = false; \u4e0d\u5728\u8fd9\u91cc\u8bbe\u7f6e } } } // \u8981\u7279\u522b\u5c0f\u5fc3\uff01 marked[index] = false; return false; } private int getIndex(int x, int y, int cols) { return x * cols + y; } private boolean inArea(int x, int y, int rows, int cols) { return x >= 0 && x < rows && y >= 0 && y < cols; } public static void main(String[] args) { char[] matrix = new char[]{'a', 'b', 't', 'g', 'c', 'f', 'c', 's', 'j', 'd', 'e', 'h'}; int rows = 3; int cols = 4; Solution solution = new Solution(); char[] str = \"hscfdeh\".toCharArray(); boolean hasPath = solution.hasPath(matrix, rows, cols, str); System.out.println(hasPath); } } Java \u4ee3\u7801\uff1a public class Solution { /** * x-1,y * x,y-1 x,y x,y+1 * x+1,y */ private int[][] direct = new int[][]{{-1, 0}, {0, 1}, {1, 0}, {0, -1}}; public boolean hasPath(char[] matrix, int rows, int cols, char[] str) { int len = matrix.length; if (len == 0) { return false; } boolean[] marked = new boolean[len]; for (int i = 0; i < rows; i++) { for (int j = 0; j < cols; j++) { if (dfs(matrix, rows, cols, str, str.length, marked, i, j, 0)) { return true; } } } return false; } private boolean dfs(char[] matrix, int rows, int cols, char[] str, int len, boolean[] marked, int i, int j, int start) { // \u5339\u914d\u5230\u6700\u540e\uff0c\u8bf4\u660e\u627e\u5230\u4e00\u6761\u8def\u5f84 int index = getIndex(i, j, cols); if (start == len - 1) { return matrix[index] == str[start]; } // \u8981\u7279\u522b\u5c0f\u5fc3\uff01 marked[index] = true; if (matrix[index] == str[start]) { // \u5f53\u524d\u5339\u914d\u4e86\uff0c\u624d\u5f00\u59cb\u5c1d\u8bd5\u8d70\u540e\u9762\u7684\u8def for (int k = 0; k < 4; k++) { // \u7279\u522b\u5c0f\u5fc3\uff0c\u4e00\u5b9a\u662f\u4e00\u4e2a\u521d\u59cb\u5316\u7684\u65b0\u7684\u53d8\u91cf int newi = i + direct[k][0]; int newj = j + direct[k][1]; int nextIndex = getIndex(newi, newj, cols); if (inArea(newi, newj, rows, cols) && !marked[nextIndex]) { // marked[nextIndex] = true; \u4e0d\u5728\u8fd9\u91cc\u8bbe\u7f6e if (dfs(matrix, rows, cols, str, len, marked, newi, newj, start + 1)) { return true; } // marked[nextIndex] = false; \u4e0d\u5728\u8fd9\u91cc\u8bbe\u7f6e } } } // \u8981\u7279\u522b\u5c0f\u5fc3\uff01 marked[index] = false; return false; } private int getIndex(int x, int y, int cols) { return x * cols + y; } private boolean inArea(int x, int y, int rows, int cols) { return x >= 0 && x < rows && y >= 0 && y < cols; } public static void main(String[] args) { char[] matrix = new char[]{'a', 'b', 't', 'g', 'c', 'f', 'c', 's', 'j', 'd', 'e', 'h'}; int rows = 3; int cols = 4; Solution solution = new Solution(); char[] str = \"hscfdeh\".toCharArray(); boolean hasPath = solution.hasPath(matrix, rows, cols, str); System.out.println(hasPath); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 12. \u77e9\u9635\u4e2d\u7684\u8def\u5f84"},{"location":"12/#offer-12","text":"\u529b\u6263\uff1a \u5251\u6307 Offer 12. \u77e9\u9635\u4e2d\u7684\u8def\u5f84 \uff1b AcWing\uff1a\u77e9\u9635\u4e2d\u7684\u8def\u5f84 \u3002 \u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u5728\u4e00\u4e2a\u77e9\u9635\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u6761\u5305\u542b\u67d0\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u7684\u8def\u5f84\u3002 \u8def\u5f84\u53ef\u4ee5\u4ece\u77e9\u9635\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u683c\u5b50\u5f00\u59cb\uff0c\u6bcf\u4e00\u6b65\u53ef\u4ee5\u5728\u77e9\u9635\u4e2d\u5411\u5de6\uff0c\u5411\u53f3\uff0c\u5411\u4e0a\uff0c\u5411\u4e0b\u79fb\u52a8\u4e00\u4e2a\u683c\u5b50\u3002 \u5982\u679c\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u4e86\u77e9\u9635\u4e2d\u7684\u67d0\u4e00\u4e2a\u683c\u5b50\uff0c\u5219\u4e4b\u540e\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8fd9\u4e2a\u683c\u5b50\u3002 \u6ce8\u610f\uff1a \u8f93\u5165\u7684\u8def\u5f84\u4e0d\u4e3a\u7a7a\uff1b \u6240\u6709\u51fa\u73b0\u7684\u5b57\u7b26\u5747\u4e3a\u5927\u5199\u82f1\u6587\u5b57\u6bcd\uff1b \u6837\u4f8b\uff1a ``` matrix= [ [\"A\",\"B\",\"C\",\"E\"], [\"S\",\"F\",\"C\",\"S\"], [\"A\",\"D\",\"E\",\"E\"] ] str=\"BCCE\" , return \"true\" str=\"ASAE\" , return \"false\" ``` \u601d\u8def\uff1a\u5178\u578b\u7684 floodfill \u89e3\u6cd5\uff0c\u672c\u8d28\u4e0a\u662f\u9012\u5f52\u56de\u6eaf\u7b97\u6cd5\u3002 Python \u4ee3\u7801\uff1a class Solution(object): directions = [(-1, 0), (1, 0), (0, 1), (0, -1)] def hasPath(self, matrix, string): \"\"\" :type matrix: List[List[str]] :type string: str :rtype: bool \"\"\" rows = len(matrix) if rows == 0: return False cols = len(matrix[0]) marked = [[False for _ in range(cols)] for _ in range(rows)] for i in range(rows): for j in range(cols): if self.__has_path(matrix, string, 0, i, j, marked, rows, cols): return True return False def __has_path(self, matrix, word, index, start_x, start_y, marked, m, n): # \u6ce8\u610f\uff1a\u9996\u5148\u5224\u65ad\u6781\u7aef\u60c5\u51b5 if index == len(word) - 1: return matrix[start_x][start_y] == word[-1] if matrix[start_x][start_y] == word[index]: # \u5148\u5360\u4f4f\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u641c\u7d22\u4e0d\u6210\u529f\u7684\u8bdd\uff0c\u8981\u91ca\u653e\u6389 marked[start_x][start_y] = True for direction in self.directions: new_x = start_x + direction[0] new_y = start_y + direction[1] if 0 <= new_x < m and 0 <= new_y < n and not marked[new_x][new_y]: if self.__has_path(matrix, word, index + 1, new_x, new_y, marked, m, n): return True marked[start_x][start_y] = False return False if __name__ == '__main__': matrix = [ [\"A\", \"B\", \"C\", \"E\"], [\"S\", \"F\", \"E\", \"S\"], [\"A\", \"D\", \"E\", \"E\"] ] str = \"ABCEFSADEESE\" solution = Solution() result = solution.hasPath(matrix, str) print(result) \u540c LeetCode \u7b2c 79 \u9898\uff0c\u4f20\u9001\u95e8\uff1a 79. \u5355\u8bcd\u641c\u7d22 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683c\u548c\u4e00\u4e2a\u5355\u8bcd\uff0c\u627e\u51fa\u8be5\u5355\u8bcd\u662f\u5426\u5b58\u5728\u4e8e\u7f51\u683c\u4e2d\u3002 \u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002 \u793a\u4f8b: board = [ ['A','B','C','E'], ['S','F','C','S'], ['A','D','E','E'] ] \u7ed9\u5b9a word = \"ABCCED\", \u8fd4\u56de true. \u7ed9\u5b9a word = \"SEE\", \u8fd4\u56de true. \u7ed9\u5b9a word = \"ABCB\", \u8fd4\u56de false. \u601d\u8def\uff1a\u5176\u5b9e\u5c31\u662f floodfill \u7b97\u6cd5\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u7840\u7684\u7b97\u6cd5\uff0c\u4e00\u5b9a\u8981\u638c\u63e1\u3002\u7279\u522b\u8981\u5f04\u6e05\u695a\uff0c marked \u6570\u7ec4\u7684\u4f5c\u7528\uff0c\u4e00\u5f00\u59cb\u8981\u5360\u4f4f\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u53d1\u73b0\u6b64\u8def\u4e0d\u901a\u7684\u65f6\u5019\uff0c\u8981\u91ca\u653e\u6389\u3002 Python \u4ee3\u7801\uff1a class Solution: # (x-1,y) # (x,y-1) (x,y) (x,y+1) # (x+1,y) directions = [(0, -1), (-1, 0), (0, 1), (1, 0)] def exist(self, board, word): \"\"\" :type board: List[List[str]] :type word: str :rtype: bool \"\"\" m = len(board) n = len(board[0]) marked = [[False for _ in range(n)] for _ in range(m)] for i in range(m): for j in range(n): # \u5bf9\u6bcf\u4e00\u4e2a\u683c\u5b50\u90fd\u4ece\u5934\u5f00\u59cb\u641c\u7d22 if self.__search_word(board, word, 0, i, j, marked, m, n): return True return False def __search_word(self, board, word, index, start_x, start_y, marked, m, n): # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if index == len(word) - 1: return board[start_x][start_y] == word[index] # \u4e2d\u95f4\u5339\u914d\u4e86\uff0c\u518d\u7ee7\u7eed\u641c\u7d22 if board[start_x][start_y] == word[index]: # \u5148\u5360\u4f4f\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u641c\u7d22\u4e0d\u6210\u529f\u7684\u8bdd\uff0c\u8981\u91ca\u653e\u6389 marked[start_x][start_y] = True for direction in self.directions: new_x = start_x + direction[0] new_y = start_y + direction[1] if 0 <= new_x < m and 0 <= new_y < n and \\ not marked[new_x][new_y] and \\ self.__search_word(board, word, index + 1, new_x, new_y, marked, m, n): return True marked[start_x][start_y] = False return False Java \u4ee3\u7801\uff1a public class Solution { /** * x-1,y * x,y-1 x,y x,y+1 * x+1,y */ private int[][] direct = new int[][]{{-1, 0}, {0, 1}, {1, 0}, {0, -1}}; public boolean hasPath(char[] matrix, int rows, int cols, char[] str) { int len = matrix.length; if (len == 0) { return false; } boolean[] marked = new boolean[len]; for (int i = 0; i < rows; i++) { for (int j = 0; j < cols; j++) { if (dfs(matrix, rows, cols, str, str.length, marked, i, j, 0)) { return true; } } } return false; } private boolean dfs(char[] matrix, int rows, int cols, char[] str, int len, boolean[] marked, int i, int j, int start) { // \u5339\u914d\u5230\u6700\u540e\uff0c\u8bf4\u660e\u627e\u5230\u4e00\u6761\u8def\u5f84 int index = getIndex(i, j, cols); if (start == len - 1) { return matrix[index] == str[start]; } // \u8981\u7279\u522b\u5c0f\u5fc3\uff01 marked[index] = true; if (matrix[index] == str[start]) { // \u5f53\u524d\u5339\u914d\u4e86\uff0c\u624d\u5f00\u59cb\u5c1d\u8bd5\u8d70\u540e\u9762\u7684\u8def for (int k = 0; k < 4; k++) { // \u7279\u522b\u5c0f\u5fc3\uff0c\u4e00\u5b9a\u662f\u4e00\u4e2a\u521d\u59cb\u5316\u7684\u65b0\u7684\u53d8\u91cf int newi = i + direct[k][0]; int newj = j + direct[k][1]; int nextIndex = getIndex(newi, newj, cols); if (inArea(newi, newj, rows, cols) && !marked[nextIndex]) { // marked[nextIndex] = true; \u4e0d\u5728\u8fd9\u91cc\u8bbe\u7f6e if (dfs(matrix, rows, cols, str, len, marked, newi, newj, start + 1)) { return true; } // marked[nextIndex] = false; \u4e0d\u5728\u8fd9\u91cc\u8bbe\u7f6e } } } // \u8981\u7279\u522b\u5c0f\u5fc3\uff01 marked[index] = false; return false; } private int getIndex(int x, int y, int cols) { return x * cols + y; } private boolean inArea(int x, int y, int rows, int cols) { return x >= 0 && x < rows && y >= 0 && y < cols; } public static void main(String[] args) { char[] matrix = new char[]{'a', 'b', 't', 'g', 'c', 'f', 'c', 's', 'j', 'd', 'e', 'h'}; int rows = 3; int cols = 4; Solution solution = new Solution(); char[] str = \"hscfdeh\".toCharArray(); boolean hasPath = solution.hasPath(matrix, rows, cols, str); System.out.println(hasPath); } } Java \u4ee3\u7801\uff1a public class Solution { /** * x-1,y * x,y-1 x,y x,y+1 * x+1,y */ private int[][] direct = new int[][]{{-1, 0}, {0, 1}, {1, 0}, {0, -1}}; public boolean hasPath(char[] matrix, int rows, int cols, char[] str) { int len = matrix.length; if (len == 0) { return false; } boolean[] marked = new boolean[len]; for (int i = 0; i < rows; i++) { for (int j = 0; j < cols; j++) { if (dfs(matrix, rows, cols, str, str.length, marked, i, j, 0)) { return true; } } } return false; } private boolean dfs(char[] matrix, int rows, int cols, char[] str, int len, boolean[] marked, int i, int j, int start) { // \u5339\u914d\u5230\u6700\u540e\uff0c\u8bf4\u660e\u627e\u5230\u4e00\u6761\u8def\u5f84 int index = getIndex(i, j, cols); if (start == len - 1) { return matrix[index] == str[start]; } // \u8981\u7279\u522b\u5c0f\u5fc3\uff01 marked[index] = true; if (matrix[index] == str[start]) { // \u5f53\u524d\u5339\u914d\u4e86\uff0c\u624d\u5f00\u59cb\u5c1d\u8bd5\u8d70\u540e\u9762\u7684\u8def for (int k = 0; k < 4; k++) { // \u7279\u522b\u5c0f\u5fc3\uff0c\u4e00\u5b9a\u662f\u4e00\u4e2a\u521d\u59cb\u5316\u7684\u65b0\u7684\u53d8\u91cf int newi = i + direct[k][0]; int newj = j + direct[k][1]; int nextIndex = getIndex(newi, newj, cols); if (inArea(newi, newj, rows, cols) && !marked[nextIndex]) { // marked[nextIndex] = true; \u4e0d\u5728\u8fd9\u91cc\u8bbe\u7f6e if (dfs(matrix, rows, cols, str, len, marked, newi, newj, start + 1)) { return true; } // marked[nextIndex] = false; \u4e0d\u5728\u8fd9\u91cc\u8bbe\u7f6e } } } // \u8981\u7279\u522b\u5c0f\u5fc3\uff01 marked[index] = false; return false; } private int getIndex(int x, int y, int cols) { return x * cols + y; } private boolean inArea(int x, int y, int rows, int cols) { return x >= 0 && x < rows && y >= 0 && y < cols; } public static void main(String[] args) { char[] matrix = new char[]{'a', 'b', 't', 'g', 'c', 'f', 'c', 's', 'j', 'd', 'e', 'h'}; int rows = 3; int cols = 4; Solution solution = new Solution(); char[] str = \"hscfdeh\".toCharArray(); boolean hasPath = solution.hasPath(matrix, rows, cols, str); System.out.println(hasPath); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 12. \u77e9\u9635\u4e2d\u7684\u8def\u5f84"},{"location":"13/","text":"\u5251\u6307 Offer 13. \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4 \u7b2c 13 \u9898\uff1a\u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4 \u529b\u6263\uff1a \u5251\u6307 Offer 13. \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4 \uff1b AcWing\uff1a\u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5730\u4e0a\u6709\u4e00\u4e2a $m$ \u884c\u548c $n$ \u5217\u7684\u65b9\u683c\uff0c\u6a2a\u7eb5\u5750\u6807\u8303\u56f4\u5206\u522b\u662f $0\u223cm\u22121$ \u548c $0\u223cn\u22121$\u3002 \u4e00\u4e2a\u673a\u5668\u4eba\u4ece\u5750\u6807 $(0,0)$\u7684\u683c\u5b50\u5f00\u59cb\u79fb\u52a8\uff0c\u6bcf\u4e00\u6b21\u53ea\u80fd\u5411\u5de6\uff0c\u53f3\uff0c\u4e0a\uff0c\u4e0b\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\u4e00\u683c\u3002 \u4f46\u662f\u4e0d\u80fd\u8fdb\u5165\u884c\u5750\u6807\u548c\u5217\u5750\u6807\u7684\u6570\u4f4d\u4e4b\u548c\u5927\u4e8e $k$ \u7684\u683c\u5b50\u3002 \u8bf7\u95ee\u8be5\u673a\u5668\u4eba\u80fd\u591f\u8fbe\u5230\u591a\u5c11\u4e2a\u683c\u5b50\uff1f \u6837\u4f8b1\uff1a \u8f93\u5165\uff1ak=7, m=4, n=5 \u8f93\u51fa\uff1a20 \u6837\u4f8b2\uff1a \u8f93\u5165\uff1ak=18, m=40, n=40 \u8f93\u51fa\uff1a1484 \u89e3\u91ca\uff1a\u5f53 k \u4e3a 18 \u65f6\uff0c\u673a\u5668\u4eba\u80fd\u591f\u8fdb\u5165\u65b9\u683c\uff0835,37\uff09\uff0c\u56e0\u4e3a 3+5+3+7 = 18\u3002 \u4f46\u662f\uff0c\u5b83\u4e0d\u80fd\u8fdb\u5165\u65b9\u683c\uff0835,38\uff09\uff0c\u56e0\u4e3a 3+5+3+8 = 19\u3002 \u6ce8\u610f : 0<=m<=50 0<=n<=50 0<=k<=100 \u601d\u8def\uff1a\u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u6ce8\u610f\u4e0d\u662f\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3002 Python \u4ee3\u7801\uff1a \u7279\u522b\u6ce8\u610f\uff0cmark \u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u662f\u653e\u5165\u961f\u5217\u7684\u65f6\u5019\u5c31 mark\uff0c\u4e0d\u662f\u7b49\u5230\u51fa\u961f\u7684\u65f6\u5019 mark\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u5f88\u591a\u91cd\u590d class Solution(object): def __count_bit_sum(self, num): res = 0 while num: res += num % 10 num //= 10 return res def __in_area(self, x, y, rows, cols): return 0 <= x < rows and 0 <= y < cols def movingCount(self, threshold, rows, cols): \"\"\" :type threshold: int :type rows: int :type cols: int :rtype: int \"\"\" if threshold < 0 or rows == 0 or cols == 0: return 0 if threshold == 0: return 1 directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] marked = [[False for _ in range(cols)] for _ in range(rows)] queue = [(0, 0)] res = 0 while queue: top_x, top_y = queue.pop(0) for direction in directions: new_x = top_x + direction[0] new_y = top_y + direction[1] if self.__in_area(new_x, new_y, rows, cols) \\ and not marked[new_x][new_y] \\ and self.__count_bit_sum(new_x) + self.__count_bit_sum(new_y) <= threshold: queue.append((new_x, new_y)) # \u6ce8\u610f\uff1a\u5e94\u8be5\u5199\u5728\u8fd9\u91cc\uff0c\u800c\u4e0d\u662f pop \u51fa\u961f\u5217\u7684\u65f6\u5019 marked[new_x][new_y] = True res += 1 return res if __name__ == '__main__': k = 18 m = 40 n = 40 solution = Solution() result = solution.movingCount(k, m, n) print(result) MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 13. \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4"},{"location":"13/#offer-13","text":"","title":"\u5251\u6307 Offer 13. \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4"},{"location":"13/#13","text":"\u529b\u6263\uff1a \u5251\u6307 Offer 13. \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4 \uff1b AcWing\uff1a\u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5730\u4e0a\u6709\u4e00\u4e2a $m$ \u884c\u548c $n$ \u5217\u7684\u65b9\u683c\uff0c\u6a2a\u7eb5\u5750\u6807\u8303\u56f4\u5206\u522b\u662f $0\u223cm\u22121$ \u548c $0\u223cn\u22121$\u3002 \u4e00\u4e2a\u673a\u5668\u4eba\u4ece\u5750\u6807 $(0,0)$\u7684\u683c\u5b50\u5f00\u59cb\u79fb\u52a8\uff0c\u6bcf\u4e00\u6b21\u53ea\u80fd\u5411\u5de6\uff0c\u53f3\uff0c\u4e0a\uff0c\u4e0b\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\u4e00\u683c\u3002 \u4f46\u662f\u4e0d\u80fd\u8fdb\u5165\u884c\u5750\u6807\u548c\u5217\u5750\u6807\u7684\u6570\u4f4d\u4e4b\u548c\u5927\u4e8e $k$ \u7684\u683c\u5b50\u3002 \u8bf7\u95ee\u8be5\u673a\u5668\u4eba\u80fd\u591f\u8fbe\u5230\u591a\u5c11\u4e2a\u683c\u5b50\uff1f \u6837\u4f8b1\uff1a \u8f93\u5165\uff1ak=7, m=4, n=5 \u8f93\u51fa\uff1a20 \u6837\u4f8b2\uff1a \u8f93\u5165\uff1ak=18, m=40, n=40 \u8f93\u51fa\uff1a1484 \u89e3\u91ca\uff1a\u5f53 k \u4e3a 18 \u65f6\uff0c\u673a\u5668\u4eba\u80fd\u591f\u8fdb\u5165\u65b9\u683c\uff0835,37\uff09\uff0c\u56e0\u4e3a 3+5+3+7 = 18\u3002 \u4f46\u662f\uff0c\u5b83\u4e0d\u80fd\u8fdb\u5165\u65b9\u683c\uff0835,38\uff09\uff0c\u56e0\u4e3a 3+5+3+8 = 19\u3002 \u6ce8\u610f : 0<=m<=50 0<=n<=50 0<=k<=100 \u601d\u8def\uff1a\u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u6ce8\u610f\u4e0d\u662f\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3002 Python \u4ee3\u7801\uff1a \u7279\u522b\u6ce8\u610f\uff0cmark \u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u662f\u653e\u5165\u961f\u5217\u7684\u65f6\u5019\u5c31 mark\uff0c\u4e0d\u662f\u7b49\u5230\u51fa\u961f\u7684\u65f6\u5019 mark\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u5f88\u591a\u91cd\u590d class Solution(object): def __count_bit_sum(self, num): res = 0 while num: res += num % 10 num //= 10 return res def __in_area(self, x, y, rows, cols): return 0 <= x < rows and 0 <= y < cols def movingCount(self, threshold, rows, cols): \"\"\" :type threshold: int :type rows: int :type cols: int :rtype: int \"\"\" if threshold < 0 or rows == 0 or cols == 0: return 0 if threshold == 0: return 1 directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] marked = [[False for _ in range(cols)] for _ in range(rows)] queue = [(0, 0)] res = 0 while queue: top_x, top_y = queue.pop(0) for direction in directions: new_x = top_x + direction[0] new_y = top_y + direction[1] if self.__in_area(new_x, new_y, rows, cols) \\ and not marked[new_x][new_y] \\ and self.__count_bit_sum(new_x) + self.__count_bit_sum(new_y) <= threshold: queue.append((new_x, new_y)) # \u6ce8\u610f\uff1a\u5e94\u8be5\u5199\u5728\u8fd9\u91cc\uff0c\u800c\u4e0d\u662f pop \u51fa\u961f\u5217\u7684\u65f6\u5019 marked[new_x][new_y] = True res += 1 return res if __name__ == '__main__': k = 18 m = 40 n = 40 solution = Solution() result = solution.movingCount(k, m, n) print(result) MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 13 \u9898\uff1a\u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4"},{"location":"14-1/","text":"\u5251\u6307 Offer 14- I. \u526a\u7ef3\u5b50 \u7b2c 14 \u9898\uff1a\u526a\u7ef3\u5b50 \u529b\u6263\uff1a \u5251\u6307 Offer 14- I. \u526a\u7ef3\u5b50 \uff1b AcWing 25. \u526a\u7ef3\u5b50 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u4f60\u4e00\u6839\u957f\u5ea6\u4e3a $n$ \u7684\u7ef3\u5b50\uff0c\u8bf7\u628a\u7ef3\u5b50\u526a\u6210 $m$ \u6bb5\uff08$m$\u3001$n$ \u90fd\u662f\u6574\u6570\uff0c$2 \\le n \\le 58^2$ \u5e76\u4e14 $m \\ge2$\uff09\u3002 \u6bcf\u6bb5\u7684\u7ef3\u5b50\u7684\u957f\u5ea6\u8bb0\u4e3a k[0]\u3001k[1]\u3001\u2026\u2026\u3001k[m] \u3002 k[0]k[1] \u2026 k[m] \u53ef\u80fd\u7684\u6700\u5927\u4e58\u79ef\u662f\u591a\u5c11\uff1f \u4f8b\u5982\u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u662f8\u65f6\uff0c\u6211\u4eec\u628a\u5b83\u526a\u6210\u957f\u5ea6\u5206\u522b\u4e3a2\u30013\u30013\u7684\u4e09\u6bb5\uff0c\u6b64\u65f6\u5f97\u5230\u6700\u5927\u7684\u4e58\u79ef18\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a8 \u8f93\u51fa\uff1a18 \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u57280\u5230n-1\u7684\u8303\u56f4\u5185\u3002 \u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u662f\u91cd\u590d\u7684\u3002\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u957f\u5ea6\u4e3a7\u7684\u6570\u7ec4{2,3,1,0,2,5,3}\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u8f93\u51fa\u662f\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b572\u3002 \u5206\u6790\uff1a\u8fd9\u9053\u9898\u5728\u725b\u5ba2\u7f51\u4e0a\u6ca1\u6709 online judge \uff0c\u6211\u4eec\u53ef\u4ee5\u53bb\u5b8c\u6210 LeetCode \u4e0a\u7b2c 343 \u9898\u68c0\u9a8c\u81ea\u5df1\u7684\u4ee3\u7801\u662f\u5426\u7f16\u5199\u6b63\u786e\u3002 \u52a8\u6001\u89c4\u5212\u3002\u5173\u952e\u5728\u4e8e\u753b\u51fa\u6811\u5f62\u7ed3\u6784\u56fe\u3002 \u72b6\u6001\uff1a dp[i] \uff0c\u8fd9\u4e2a\u72b6\u6001\u5c31\u662f\u9898\u76ee\u4e2d\u8981\u6211\u4eec\u6c42\u7684\u3002\u628a\u6574\u6570 i \u81f3\u5c11\u5206\u5272\u6210 $2$ \u4e2a\u90e8\u5206\uff0c\u5404\u4e2a\u90e8\u5206\u90fd\u5927\u4e8e $0$\uff0c\u5b83\u4eec\u7684\u4e58\u79ef\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u7528 j \u904d\u5386 1\uff0c2\uff0c\u2026, i -1 \uff0c\u8981\u4e48\u5206\u5272\u6210\u4e24\u90e8\u5206\uff1a i - j \u548c j \uff0c\u8981\u4e48\u662f j \u548c dp[i-j] \uff0c\u53d6\u6700\u5927\u8005\u3002 Python \u4ee3\u7801\uff1a dp[0] \u8fd9\u4e2a\u4f4d\u7f6e\u6ca1\u6709\u4f7f\u7528 class Solution(object): def maxProductAfterCutting(self, length): \"\"\" :type length: int :rtype: int \"\"\" assert length > 1 dp = [0 for _ in range(length + 1)] dp[1] = 1 for i in range(2, length + 1): for j in range(1, i): dp[i] = max(dp[i], j * (i - j), j * dp[i - j]) return dp[length] Java \u4ee3\u7801\uff1a\u4f7f\u7528\u52a8\u6001\u89c4\u5212 class Solution { public int integerBreak(int n) { if (n <= 1) { return 1; } int[] dp = new int[n + 1]; dp[0] = 1; dp[1] = 1; for (int i = 2; i <= n; i++) { int max = 0; for (int j = 1; j < i; j++) { max = max3(max, j * (i - j), j * dp[i - j]); } dp[i] = max; } return dp[n]; } private int max3(int num1, int num2, int num3) { return Integer.max(Integer.max(num1, num2), num3); } public static void main(String[] args) { Solution solution = new Solution(); int integerBreak = solution.integerBreak(8); System.out.println(integerBreak); } } Java \u4ee3\u7801\uff1a\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5 class Solution2 { public int integerBreak(int n) { if (n <= 2) { return 1; } if (n == 3) { return 2; } if (n == 4) { return 4; } // \u63a5\u4e0b\u6765\u5c31\u662f n >= 5 \u7684\u65f6\u5019\u7684\u903b\u8f91\u4e86 int res = 1; while (n > 4) { res *= 3; n -= 3; } res *= n; return res; } public static void main(String[] args) { Solution2 solution2 = new Solution2(); int integerBreak = solution2.integerBreak(8); System.out.println(integerBreak); } } LeetCode 343 \u9898\uff1a\u6574\u6570\u62c6\u5206 \u4f20\u9001\u95e8\uff1a 343. \u6574\u6570\u62c6\u5206 \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u5c06\u5176\u62c6\u5206\u4e3a \u81f3\u5c11 \u4e24\u4e2a\u6b63\u6574\u6570\u7684\u548c\uff0c\u5e76\u4f7f\u8fd9\u4e9b\u6574\u6570\u7684\u4e58\u79ef\u6700\u5927\u5316\u3002 \u8fd4\u56de\u4f60\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u4e58\u79ef\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2 \u8f93\u51fa: 1 \u89e3\u91ca: 2 = 1 + 1, 1 \u00d7 1 = 1\u3002 \u793a\u4f8b 2: \u8f93\u5165: 10 \u8f93\u51fa: 36 \u89e3\u91ca: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36\u3002 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe n \u4e0d\u5c0f\u4e8e 2 \u4e14\u4e0d\u5927\u4e8e 58\u3002 \u5206\u6790\uff1a\u8fd9\u662f\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u95ee\u9898\u3002\u53ef\u4ee5\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5\u3002 \u8d2a\u5fc3\u7b97\u6cd5\uff1a$2(n-2)>n$ \u5f97\u5230 $n > 4$\uff0c$3(n-3)>n$ \uff0c\u5f97\u5230 $n>4.5$\uff0c\u5373 $n$ \u5927\u4e8e\u7b49\u4e8e $5$ \u7684\u65f6\u5019\u3002 \u7ed3\u8bba\uff1a\u4e0d\u80fd\u5305\u542b $1$ \uff0c\u6240\u6709\u7684\u52a0\u6cd5\u56e0\u5b50\u53ea\u80fd\u6709 $2$ \u548c $3$\uff0c\u6700\u591a\u53ea\u6709 $2$ \u4e2a $2$\uff0c\u56e0\u6b64\u52a0\u6cd5\u56e0\u5b50\u91cc\u6ca1\u6709 $4$ \u3002 \u8d2a\u5fc3\u9009\u62e9\u7684\u8bc1\u660e\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u91cc\uff1ahttps://leetcode-cn.com/problems/integer-break/solution/tan-xin-xuan-ze-xing-zhi-de-jian-dan-zheng-ming-py/\u3002 Java \u4ee3\u7801\uff1a class Solution2 { public int integerBreak(int n) { if (n <= 2) { return 1; } if (n == 3) { return 2; } if (n == 4) { return 4; } // \u63a5\u4e0b\u6765\u5c31\u662f n >= 5 \u7684\u65f6\u5019\u7684\u903b\u8f91\u4e86 int res = 1; while (n > 4) { res *= 3; n -= 3; } res *= n; return res; } public static void main(String[] args) { Solution2 solution2 = new Solution2(); int integerBreak = solution2.integerBreak(8); System.out.println(integerBreak); } } C++ \u4ee3\u7801\uff1a MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 14- I. \u526a\u7ef3\u5b50"},{"location":"14-1/#offer-14-i","text":"","title":"\u5251\u6307 Offer 14- I. \u526a\u7ef3\u5b50"},{"location":"14-1/#14","text":"\u529b\u6263\uff1a \u5251\u6307 Offer 14- I. \u526a\u7ef3\u5b50 \uff1b AcWing 25. \u526a\u7ef3\u5b50 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u4f60\u4e00\u6839\u957f\u5ea6\u4e3a $n$ \u7684\u7ef3\u5b50\uff0c\u8bf7\u628a\u7ef3\u5b50\u526a\u6210 $m$ \u6bb5\uff08$m$\u3001$n$ \u90fd\u662f\u6574\u6570\uff0c$2 \\le n \\le 58^2$ \u5e76\u4e14 $m \\ge2$\uff09\u3002 \u6bcf\u6bb5\u7684\u7ef3\u5b50\u7684\u957f\u5ea6\u8bb0\u4e3a k[0]\u3001k[1]\u3001\u2026\u2026\u3001k[m] \u3002 k[0]k[1] \u2026 k[m] \u53ef\u80fd\u7684\u6700\u5927\u4e58\u79ef\u662f\u591a\u5c11\uff1f \u4f8b\u5982\u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u662f8\u65f6\uff0c\u6211\u4eec\u628a\u5b83\u526a\u6210\u957f\u5ea6\u5206\u522b\u4e3a2\u30013\u30013\u7684\u4e09\u6bb5\uff0c\u6b64\u65f6\u5f97\u5230\u6700\u5927\u7684\u4e58\u79ef18\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a8 \u8f93\u51fa\uff1a18 \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u57280\u5230n-1\u7684\u8303\u56f4\u5185\u3002 \u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u662f\u91cd\u590d\u7684\u3002\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u957f\u5ea6\u4e3a7\u7684\u6570\u7ec4{2,3,1,0,2,5,3}\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u8f93\u51fa\u662f\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b572\u3002 \u5206\u6790\uff1a\u8fd9\u9053\u9898\u5728\u725b\u5ba2\u7f51\u4e0a\u6ca1\u6709 online judge \uff0c\u6211\u4eec\u53ef\u4ee5\u53bb\u5b8c\u6210 LeetCode \u4e0a\u7b2c 343 \u9898\u68c0\u9a8c\u81ea\u5df1\u7684\u4ee3\u7801\u662f\u5426\u7f16\u5199\u6b63\u786e\u3002 \u52a8\u6001\u89c4\u5212\u3002\u5173\u952e\u5728\u4e8e\u753b\u51fa\u6811\u5f62\u7ed3\u6784\u56fe\u3002 \u72b6\u6001\uff1a dp[i] \uff0c\u8fd9\u4e2a\u72b6\u6001\u5c31\u662f\u9898\u76ee\u4e2d\u8981\u6211\u4eec\u6c42\u7684\u3002\u628a\u6574\u6570 i \u81f3\u5c11\u5206\u5272\u6210 $2$ \u4e2a\u90e8\u5206\uff0c\u5404\u4e2a\u90e8\u5206\u90fd\u5927\u4e8e $0$\uff0c\u5b83\u4eec\u7684\u4e58\u79ef\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u7528 j \u904d\u5386 1\uff0c2\uff0c\u2026, i -1 \uff0c\u8981\u4e48\u5206\u5272\u6210\u4e24\u90e8\u5206\uff1a i - j \u548c j \uff0c\u8981\u4e48\u662f j \u548c dp[i-j] \uff0c\u53d6\u6700\u5927\u8005\u3002 Python \u4ee3\u7801\uff1a dp[0] \u8fd9\u4e2a\u4f4d\u7f6e\u6ca1\u6709\u4f7f\u7528 class Solution(object): def maxProductAfterCutting(self, length): \"\"\" :type length: int :rtype: int \"\"\" assert length > 1 dp = [0 for _ in range(length + 1)] dp[1] = 1 for i in range(2, length + 1): for j in range(1, i): dp[i] = max(dp[i], j * (i - j), j * dp[i - j]) return dp[length] Java \u4ee3\u7801\uff1a\u4f7f\u7528\u52a8\u6001\u89c4\u5212 class Solution { public int integerBreak(int n) { if (n <= 1) { return 1; } int[] dp = new int[n + 1]; dp[0] = 1; dp[1] = 1; for (int i = 2; i <= n; i++) { int max = 0; for (int j = 1; j < i; j++) { max = max3(max, j * (i - j), j * dp[i - j]); } dp[i] = max; } return dp[n]; } private int max3(int num1, int num2, int num3) { return Integer.max(Integer.max(num1, num2), num3); } public static void main(String[] args) { Solution solution = new Solution(); int integerBreak = solution.integerBreak(8); System.out.println(integerBreak); } } Java \u4ee3\u7801\uff1a\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5 class Solution2 { public int integerBreak(int n) { if (n <= 2) { return 1; } if (n == 3) { return 2; } if (n == 4) { return 4; } // \u63a5\u4e0b\u6765\u5c31\u662f n >= 5 \u7684\u65f6\u5019\u7684\u903b\u8f91\u4e86 int res = 1; while (n > 4) { res *= 3; n -= 3; } res *= n; return res; } public static void main(String[] args) { Solution2 solution2 = new Solution2(); int integerBreak = solution2.integerBreak(8); System.out.println(integerBreak); } }","title":"\u7b2c 14 \u9898\uff1a\u526a\u7ef3\u5b50"},{"location":"14-1/#leetcode-343","text":"\u4f20\u9001\u95e8\uff1a 343. \u6574\u6570\u62c6\u5206 \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u5c06\u5176\u62c6\u5206\u4e3a \u81f3\u5c11 \u4e24\u4e2a\u6b63\u6574\u6570\u7684\u548c\uff0c\u5e76\u4f7f\u8fd9\u4e9b\u6574\u6570\u7684\u4e58\u79ef\u6700\u5927\u5316\u3002 \u8fd4\u56de\u4f60\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u4e58\u79ef\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2 \u8f93\u51fa: 1 \u89e3\u91ca: 2 = 1 + 1, 1 \u00d7 1 = 1\u3002 \u793a\u4f8b 2: \u8f93\u5165: 10 \u8f93\u51fa: 36 \u89e3\u91ca: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36\u3002 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe n \u4e0d\u5c0f\u4e8e 2 \u4e14\u4e0d\u5927\u4e8e 58\u3002 \u5206\u6790\uff1a\u8fd9\u662f\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u95ee\u9898\u3002\u53ef\u4ee5\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5\u3002 \u8d2a\u5fc3\u7b97\u6cd5\uff1a$2(n-2)>n$ \u5f97\u5230 $n > 4$\uff0c$3(n-3)>n$ \uff0c\u5f97\u5230 $n>4.5$\uff0c\u5373 $n$ \u5927\u4e8e\u7b49\u4e8e $5$ \u7684\u65f6\u5019\u3002 \u7ed3\u8bba\uff1a\u4e0d\u80fd\u5305\u542b $1$ \uff0c\u6240\u6709\u7684\u52a0\u6cd5\u56e0\u5b50\u53ea\u80fd\u6709 $2$ \u548c $3$\uff0c\u6700\u591a\u53ea\u6709 $2$ \u4e2a $2$\uff0c\u56e0\u6b64\u52a0\u6cd5\u56e0\u5b50\u91cc\u6ca1\u6709 $4$ \u3002 \u8d2a\u5fc3\u9009\u62e9\u7684\u8bc1\u660e\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u91cc\uff1ahttps://leetcode-cn.com/problems/integer-break/solution/tan-xin-xuan-ze-xing-zhi-de-jian-dan-zheng-ming-py/\u3002 Java \u4ee3\u7801\uff1a class Solution2 { public int integerBreak(int n) { if (n <= 2) { return 1; } if (n == 3) { return 2; } if (n == 4) { return 4; } // \u63a5\u4e0b\u6765\u5c31\u662f n >= 5 \u7684\u65f6\u5019\u7684\u903b\u8f91\u4e86 int res = 1; while (n > 4) { res *= 3; n -= 3; } res *= n; return res; } public static void main(String[] args) { Solution2 solution2 = new Solution2(); int integerBreak = solution2.integerBreak(8); System.out.println(integerBreak); } } C++ \u4ee3\u7801\uff1a MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"LeetCode 343 \u9898\uff1a\u6574\u6570\u62c6\u5206"},{"location":"14-2/","text":"\u5251\u6307 Offer 14- II. \u526a\u7ef3\u5b50 II \u529b\u6263\uff1a \u5251\u6307 Offer 14- II. \u526a\u7ef3\u5b50 II \u3002","title":"\u5251\u6307 Offer 14- II. \u526a\u7ef3\u5b50 II"},{"location":"14-2/#offer-14-ii-ii","text":"\u529b\u6263\uff1a \u5251\u6307 Offer 14- II. \u526a\u7ef3\u5b50 II \u3002","title":"\u5251\u6307 Offer 14- II. \u526a\u7ef3\u5b50 II"},{"location":"15/","text":"\u5251\u6307 Offer 15. \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 \u529b\u6263\uff1a \u5251\u6307 Offer 15. \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 \uff1b \u4e8c\u8fdb\u5236\u4e2d $1$ \u7684\u4e2a\u6570 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a 32 \u4f4d\u6574\u6570\uff0c\u8f93\u51fa\u8be5\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u3002 \u6ce8\u610f \uff1a \u8d1f\u6570\u5728\u8ba1\u7b97\u673a\u4e2d\u7528\u5176\u7edd\u5bf9\u503c\u7684\u8865\u7801\u6765\u8868\u793a\u3002 \u6837\u4f8b1\uff1a \u8f93\u5165\uff1a9 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a9 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u662f 1001\uff0c\u4e00\u5171\u6709 2 \u4e2a 1 \u3002 \u6837\u4f8b2\uff1a \u8f93\u5165\uff1a-2 \u8f93\u51fa\uff1a31 \u89e3\u91ca\uff1a-2 \u5728\u8ba1\u7b97\u673a\u91cc\u4f1a\u88ab\u8868\u793a\u6210 11111111111111111111111111111110\uff0c\u4e00\u5171\u6709 31 \u4e2a 1 \u3002 \u77e5\u8bc6\u70b9\uff1a1\u3001\u4ec0\u4e48\u662f \u8865\u7801 \uff1f \u8865\u7801 \u5c31\u662f\u4e00\u4e2a\u6570\u4e0e\u53e6\u4e00\u4e2a\u6570\u76f8\u52a0\uff0c\u662f\u4e00\u4e2a\u8fdb\u5236\u8868\u793a\u4e0b\u5f88\u6574\u7684\u6570\uff1b 2\u3001 \u6b63\u6570\u7684\u8865\u7801\u5c31\u662f\u5b83\u81ea\u5df1\uff0c\u8d1f\u6570\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u8868\u793a\u662f\u5b83\u7684\u8865\u7801 \uff1b 3\u3001\u6570\u5206\u4e3a\uff1a\u201c\u6709\u7b26\u53f7\u6574\u6570\u201d\u4e0e\u201c\u65e0\u7b26\u53f7\u6574\u6570\u201d\u3002 \u8bb0\u4f4f\uff1a1\u3001 n & (n - 1) \u628a\u6700\u4f4e\u4f4d\u7684 $1$ \u53d8\u6210 $0$\u3002 2\u3001Python \u4e2d\u7684\u4e8c\u8fdb\u5236\u6709\u9677\u9631\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://www.cnblogs.com/klchang/p/8017627.html\u3002 \u7b14\u8bb0\uff1a \u5206\u6790\uff1a\u4f4d\u8fd0\u7b97\u7684\u95ee\u9898\uff0c\u770b\u7b54\u6848\u505a\u51fa\u6765\u7684\uff0c\u8bb0\u4f4f n & (n-1) \u80fd\u591f\u6d88\u6389\u6700\u4f4e\u4f4d\u7684 $1$ \u5373\u53ef\u3002 Python \u4ee3\u78011\uff1a\u4e00\u4f4d\u4e00\u4f4d\u7b97\u5c31\u53ef\u4ee5\u4e86\uff0c\u6ce8\u610f\uff0c\u505a $32$ \u6b21\u5c31\u53ef\u4ee5\u4e86\u3002 class Solution(object): def NumberOf1(self, n): \"\"\" :type n: int :rtype: int \"\"\" ans = 0 for i in range(32): if n & 1: ans += 1 n = n >> 1 return ans Python \u4ee3\u78012\uff1aPython \u4e2d\u7684\u6570\u662f\u957f\u6574\u578b\uff0c\u56e0\u6b64\u4e00\u5f00\u59cb\u505a\u7684\u65f6\u5019\uff0c\u8981\u628a\u9ad8\u4e8e $32$ \u4f4d\u7684\u5168\u90e8\u780d\u6389 class Solution(object): def NumberOf1(self, n): \"\"\" :type n: int :rtype: int \"\"\" # print((-1 & (2**31-1)) >> 1) # print((-3) >> 1) n = n & (2 ** 32 - 1) # print(n) count = 0 while n != 0: if n & 1 == 1: count += 1 n = n >> 1 # print(n) return count Python \u4ee3\u7801\uff1a\u4ee5\u4e0b\u5199\u6cd5\u7b49\u4ef7 class Solution(object): def NumberOf1(self,n): \"\"\" :type n: int :rtype: int \"\"\" counter = 0 # Python \u4e2d\u7684 32 \u4f4d\u6574\u6570\u6ca1\u6709\u6ea2\u51fa\u8fd9\u56de\u4e8b\uff0c\u6240\u4ee5\u8981\u5f3a\u884c\u53d8\u6210 32 \u4f4d # \u8fd9\u4e00\u6b65\u76f8\u5f53\u4e8e\u628a\u8fd9\u4e2a\u6570\u53d8\u6210\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u4e3a\u4e86\u901a\u8fc7 judge \u624d\u8fd9\u4e48\u505a\u7684 n = n & 0xFFFFFFFF while n: n = n &(n-1) counter +=1 return counter C++ \u5199\u6cd5\uff1a\u8f6c\u6210\u65e0\u7b26\u53f7\u6570\u3002 Java \u5199\u6cd5 \u601d\u8def1\uff1a \u719f\u6089\u4f4d\u8fd0\u7b97\u662f\u5173\u952e\u3002 \u8d1f\u6570\u5de6\u79fb\u7684\u65f6\u5019\uff0c\u6700\u9ad8\u4f4d\u8865 1\uff0c\u56e0\u6b64\uff0c\u4e3a\u4e86\u907f\u514d\u6b7b\u5faa\u73af\uff0c\u5148\u8981\u628a\u6700\u9ad8\u4f4d\u53d8\u6210 0\u3002 Java \u4ee3\u7801\uff1a public class Solution { public int NumberOf1(int n) { int count = 0; // \u8d1f\u6570\u53f3\u79fb\u7684\u65f6\u5019\uff0c\u6700\u9ad8\u4f4d\u8865 1\uff0c\u56e0\u6b64\uff0c\u4e3a\u4e86\u907f\u514d\u6b7b\u5faa\u73af\uff0c\u5148\u8981\u628a\u6700\u9ad8\u4f4d\u53d8\u6210 0 // \u8d1f\u6570\u53f3\u79fb\u7684\u65f6\u5019\uff0c\u6700\u9ad8\u4f4d\u8865 1\uff0c\u56e0\u6b64\uff0c\u4e3a\u4e86\u907f\u514d\u6b7b\u5faa\u73af\uff0c\u5148\u8981\u628a\u6700\u9ad8\u4f4d\u53d8\u6210 0 // \u8d1f\u6570\u53f3\u79fb\u7684\u65f6\u5019\uff0c\u6700\u9ad8\u4f4d\u8865 1\uff0c\u56e0\u6b64\uff0c\u4e3a\u4e86\u907f\u514d\u6b7b\u5faa\u73af\uff0c\u5148\u8981\u628a\u6700\u9ad8\u4f4d\u53d8\u6210 0 // \u4e3a\u8d1f\u6570\u7684\u65f6\u5019\uff0c\u5c06\u6700\u9ad8\u4f4d\u7684 1 \u53d8\u6210 0 // \u5373\u7531\u8d1f\u6570\u53d8\u6210\u6b63\u6570\uff0c\u7136\u540e\u518d\u8ba1\u7b97 1 \u7684\u4e2a\u6570 if (n < 0) { n = n & Integer.MAX_VALUE; count++; } // \u5f53 n \u662f\u6b63\u6570\u7684\u65f6\u5019\uff0c\u8ba1\u7b97 1 \u7684\u4e2a\u6570 while (n != 0) { count += n & 1; n = n >> 1; } return count; } } \u601d\u8def2\uff1a \u53ef\u4ee5\u4f7f\u7528 1001 \u4f5c\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u6765\u7406\u89e3\uff0ca&(a-1) \u7684\u7ed3\u679c\u4f1a\u5c06 a \u6700\u53f3\u8fb9\u7684 1 \u53d8\u4e3a 0 \uff0c\u76f4\u5230 a = 0\uff0c\u8fd8\u53ef\u4ee5\u5148\u5c06 a&1 != 0,\u7136\u540e\u53f3\u79fb 1 \u4f4d\uff0c\u4f46\u4e0d\u80fd\u8ba1\u7b97\u8d1f\u6570\u7684\u503c\u3002 Java \u4ee3\u7801\uff1a public class Solution2 { public int NumberOf1(int n) { int count = 0; while (n != 0) { count++; n = (n - 1) & n; } return count; } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 15. \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570"},{"location":"15/#offer-15-1","text":"\u529b\u6263\uff1a \u5251\u6307 Offer 15. \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 \uff1b \u4e8c\u8fdb\u5236\u4e2d $1$ \u7684\u4e2a\u6570 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a 32 \u4f4d\u6574\u6570\uff0c\u8f93\u51fa\u8be5\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u3002 \u6ce8\u610f \uff1a \u8d1f\u6570\u5728\u8ba1\u7b97\u673a\u4e2d\u7528\u5176\u7edd\u5bf9\u503c\u7684\u8865\u7801\u6765\u8868\u793a\u3002 \u6837\u4f8b1\uff1a \u8f93\u5165\uff1a9 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a9 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u662f 1001\uff0c\u4e00\u5171\u6709 2 \u4e2a 1 \u3002 \u6837\u4f8b2\uff1a \u8f93\u5165\uff1a-2 \u8f93\u51fa\uff1a31 \u89e3\u91ca\uff1a-2 \u5728\u8ba1\u7b97\u673a\u91cc\u4f1a\u88ab\u8868\u793a\u6210 11111111111111111111111111111110\uff0c\u4e00\u5171\u6709 31 \u4e2a 1 \u3002 \u77e5\u8bc6\u70b9\uff1a1\u3001\u4ec0\u4e48\u662f \u8865\u7801 \uff1f \u8865\u7801 \u5c31\u662f\u4e00\u4e2a\u6570\u4e0e\u53e6\u4e00\u4e2a\u6570\u76f8\u52a0\uff0c\u662f\u4e00\u4e2a\u8fdb\u5236\u8868\u793a\u4e0b\u5f88\u6574\u7684\u6570\uff1b 2\u3001 \u6b63\u6570\u7684\u8865\u7801\u5c31\u662f\u5b83\u81ea\u5df1\uff0c\u8d1f\u6570\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u8868\u793a\u662f\u5b83\u7684\u8865\u7801 \uff1b 3\u3001\u6570\u5206\u4e3a\uff1a\u201c\u6709\u7b26\u53f7\u6574\u6570\u201d\u4e0e\u201c\u65e0\u7b26\u53f7\u6574\u6570\u201d\u3002 \u8bb0\u4f4f\uff1a1\u3001 n & (n - 1) \u628a\u6700\u4f4e\u4f4d\u7684 $1$ \u53d8\u6210 $0$\u3002 2\u3001Python \u4e2d\u7684\u4e8c\u8fdb\u5236\u6709\u9677\u9631\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://www.cnblogs.com/klchang/p/8017627.html\u3002 \u7b14\u8bb0\uff1a \u5206\u6790\uff1a\u4f4d\u8fd0\u7b97\u7684\u95ee\u9898\uff0c\u770b\u7b54\u6848\u505a\u51fa\u6765\u7684\uff0c\u8bb0\u4f4f n & (n-1) \u80fd\u591f\u6d88\u6389\u6700\u4f4e\u4f4d\u7684 $1$ \u5373\u53ef\u3002 Python \u4ee3\u78011\uff1a\u4e00\u4f4d\u4e00\u4f4d\u7b97\u5c31\u53ef\u4ee5\u4e86\uff0c\u6ce8\u610f\uff0c\u505a $32$ \u6b21\u5c31\u53ef\u4ee5\u4e86\u3002 class Solution(object): def NumberOf1(self, n): \"\"\" :type n: int :rtype: int \"\"\" ans = 0 for i in range(32): if n & 1: ans += 1 n = n >> 1 return ans Python \u4ee3\u78012\uff1aPython \u4e2d\u7684\u6570\u662f\u957f\u6574\u578b\uff0c\u56e0\u6b64\u4e00\u5f00\u59cb\u505a\u7684\u65f6\u5019\uff0c\u8981\u628a\u9ad8\u4e8e $32$ \u4f4d\u7684\u5168\u90e8\u780d\u6389 class Solution(object): def NumberOf1(self, n): \"\"\" :type n: int :rtype: int \"\"\" # print((-1 & (2**31-1)) >> 1) # print((-3) >> 1) n = n & (2 ** 32 - 1) # print(n) count = 0 while n != 0: if n & 1 == 1: count += 1 n = n >> 1 # print(n) return count Python \u4ee3\u7801\uff1a\u4ee5\u4e0b\u5199\u6cd5\u7b49\u4ef7 class Solution(object): def NumberOf1(self,n): \"\"\" :type n: int :rtype: int \"\"\" counter = 0 # Python \u4e2d\u7684 32 \u4f4d\u6574\u6570\u6ca1\u6709\u6ea2\u51fa\u8fd9\u56de\u4e8b\uff0c\u6240\u4ee5\u8981\u5f3a\u884c\u53d8\u6210 32 \u4f4d # \u8fd9\u4e00\u6b65\u76f8\u5f53\u4e8e\u628a\u8fd9\u4e2a\u6570\u53d8\u6210\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u4e3a\u4e86\u901a\u8fc7 judge \u624d\u8fd9\u4e48\u505a\u7684 n = n & 0xFFFFFFFF while n: n = n &(n-1) counter +=1 return counter C++ \u5199\u6cd5\uff1a\u8f6c\u6210\u65e0\u7b26\u53f7\u6570\u3002 Java \u5199\u6cd5 \u601d\u8def1\uff1a \u719f\u6089\u4f4d\u8fd0\u7b97\u662f\u5173\u952e\u3002 \u8d1f\u6570\u5de6\u79fb\u7684\u65f6\u5019\uff0c\u6700\u9ad8\u4f4d\u8865 1\uff0c\u56e0\u6b64\uff0c\u4e3a\u4e86\u907f\u514d\u6b7b\u5faa\u73af\uff0c\u5148\u8981\u628a\u6700\u9ad8\u4f4d\u53d8\u6210 0\u3002 Java \u4ee3\u7801\uff1a public class Solution { public int NumberOf1(int n) { int count = 0; // \u8d1f\u6570\u53f3\u79fb\u7684\u65f6\u5019\uff0c\u6700\u9ad8\u4f4d\u8865 1\uff0c\u56e0\u6b64\uff0c\u4e3a\u4e86\u907f\u514d\u6b7b\u5faa\u73af\uff0c\u5148\u8981\u628a\u6700\u9ad8\u4f4d\u53d8\u6210 0 // \u8d1f\u6570\u53f3\u79fb\u7684\u65f6\u5019\uff0c\u6700\u9ad8\u4f4d\u8865 1\uff0c\u56e0\u6b64\uff0c\u4e3a\u4e86\u907f\u514d\u6b7b\u5faa\u73af\uff0c\u5148\u8981\u628a\u6700\u9ad8\u4f4d\u53d8\u6210 0 // \u8d1f\u6570\u53f3\u79fb\u7684\u65f6\u5019\uff0c\u6700\u9ad8\u4f4d\u8865 1\uff0c\u56e0\u6b64\uff0c\u4e3a\u4e86\u907f\u514d\u6b7b\u5faa\u73af\uff0c\u5148\u8981\u628a\u6700\u9ad8\u4f4d\u53d8\u6210 0 // \u4e3a\u8d1f\u6570\u7684\u65f6\u5019\uff0c\u5c06\u6700\u9ad8\u4f4d\u7684 1 \u53d8\u6210 0 // \u5373\u7531\u8d1f\u6570\u53d8\u6210\u6b63\u6570\uff0c\u7136\u540e\u518d\u8ba1\u7b97 1 \u7684\u4e2a\u6570 if (n < 0) { n = n & Integer.MAX_VALUE; count++; } // \u5f53 n \u662f\u6b63\u6570\u7684\u65f6\u5019\uff0c\u8ba1\u7b97 1 \u7684\u4e2a\u6570 while (n != 0) { count += n & 1; n = n >> 1; } return count; } } \u601d\u8def2\uff1a \u53ef\u4ee5\u4f7f\u7528 1001 \u4f5c\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u6765\u7406\u89e3\uff0ca&(a-1) \u7684\u7ed3\u679c\u4f1a\u5c06 a \u6700\u53f3\u8fb9\u7684 1 \u53d8\u4e3a 0 \uff0c\u76f4\u5230 a = 0\uff0c\u8fd8\u53ef\u4ee5\u5148\u5c06 a&1 != 0,\u7136\u540e\u53f3\u79fb 1 \u4f4d\uff0c\u4f46\u4e0d\u80fd\u8ba1\u7b97\u8d1f\u6570\u7684\u503c\u3002 Java \u4ee3\u7801\uff1a public class Solution2 { public int NumberOf1(int n) { int count = 0; while (n != 0) { count++; n = (n - 1) & n; } return count; } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 15. \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570"},{"location":"16/","text":"\u5251\u6307 Offer 16. \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 \u529b\u6263\uff1a \u5251\u6307 Offer 16. \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 \uff1b AcWing\uff1a\u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5b9e\u73b0\u51fd\u6570 double Power(double base, int exponent) \uff0c\u6c42 base \u7684 exponent \u6b21\u65b9\u3002 \u4e0d\u5f97\u4f7f\u7528\u5e93\u51fd\u6570\uff0c\u540c\u65f6\u4e0d\u9700\u8981\u8003\u8651\u5927\u6570\u95ee\u9898\u3002 \u6ce8\u610f\uff1a \u4e0d\u4f1a\u51fa\u73b0\u5e95\u6570\u548c\u6307\u6570\u540c\u4e3a 0 \u7684\u60c5\u51b5 \u6837\u4f8b1\uff1a \u8f93\u5165\uff1a10 \uff0c2 \u8f93\u51fa\uff1a100 \u6837\u4f8b2\uff1a \u8f93\u5165\uff1a10 \uff0c-2 \u8f93\u51fa\uff1a0.01 \u5206\u6790\uff1a\u6570\u503c\u7684\u6574\u6570\u6b21\u65b9\uff0c\u8981\u5904\u7406\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\uff0c\u52a0\u6cd5\u53d8\u6210\u4e58\u6cd5\u3002\u8003\u8651\u5e95\u6570\u4e3a $0$ \u7684\u65f6\u5019\uff0c\u6307\u6570\u4e0d\u80fd\u4e3a\u8d1f\u6570\u3002 \u601d\u8def1\uff1a\u4f7f\u7528\u9012\u5f52 Python \u4ee3\u7801\uff1a class Solution(object): def Power(self, base, exponent): \"\"\" :type base: float :type exponent: int :rtype: float \"\"\" if exponent == 0: return 1 if exponent < 0: return 1 / self.Power(base, -exponent) # \u5982\u679c\u662f\u5947\u6570 if exponent & 1: return base * self.Power(base, exponent - 1) return self.Power(base * base, exponent >> 1) \u601d\u8def2\uff1a\u975e\u9012\u5f52\u7684\u5199\u6cd5\uff0c\u628a exponent \u60f3\u8c61\u6210\u4e8c\u8fdb\u5236\u3002 Python \u4ee3\u7801\uff1a\u5728\u7406\u89e3\u7684\u57fa\u7840\u4e0a\u8bb0\u4f4f\u8fd9\u4e2a\u5199\u6cd5 class Solution(object): def Power(self, base, exponent): \"\"\" :type base: float :type exponent: int :rtype: float \"\"\" if exponent < 0: base = 1 / base # \u8d1f\u6570\u53d8\u6210\u6b63\u6570 exponent = -exponent res = 1 while exponent: if exponent & 1: res *= base base *= base exponent >>= 1 return res \u7ed9\u5b9a\u4e00\u4e2a double \u7c7b\u578b\u7684\u6d6e\u70b9\u6570 base \u548c int \u7c7b\u578b\u7684\u6574\u6570 exponent \u3002\u6c42 base \u7684 exponent \u6b21\u65b9\u3002 \u6c42\u89e3\u601d\u8def\u4e0e\u5173\u952e \u6ce8\u610f\u5206\u7c7b\u8ba8\u8bba\u4e0e\u4e0e\u9012\u5f52\u51fd\u6570\u7684\u8bbe\u8ba1\u3002 \u5173\u952e\uff1a\u5c06\u5faa\u73af\u53d8\u6210\u9012\u5f52\u64cd\u4f5c\uff0c\u6bcf\u6b21\u6298\u534a\u6c42\u503c\uff0c\u907f\u514d\u6b7b\u677f\u505a\u5faa\u73af\uff0c\u8fd9\u79cd\u611f\u89c9\u50cf\u52a0\u6cd5\u53d8\u4e58\u6cd5\u3002 \u6ce8\u610f\u7ec6\u8282\uff1a\u5e95\u6570\u4e3a 0 \u7684\u65f6\u5019\uff0c\u6307\u6570\u4e3a\u8d1f\u6570\u662f\u6ca1\u6709\u610f\u4e49\u7684 \u7cbe\u786e\u8ba1\u7b97\uff0c\u8f6c\u6210\u6d6e\u70b9\u6570 0.125\uff1a System.out.println((double) 1 / 8); \u53f3\u79fb 1 \u4f4d\u8fd0\u7b97\u7b49\u4ef7\u4e8e\u201c\u9664\u4ee5 2\u201d\uff1a // exponent \u6307\u6570\uff0cexponent >> 1 \u8868\u793a\u5c06\u6307\u6570\u9664\u4ee5 2 System.out.println(exponent >> 1); \u4f7f\u7528\u4f4d\u8fd0\u7b97\u7684 \u4e0e \u8fd0\u7b97\u7b26\u4ee3\u66ff\u4e86\u6c42\u4f59\u6570\u8fd0\u7b97\uff0c\u6765\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\uff1a if ((exponent & 1) == 0) { Java \u4ee3\u7801\uff1a public class Solution { public double Power(double base, int exponent) { // \u5148\u628a\u6781\u7aef\u60c5\u51b5\u8003\u8651\u5230 // \u4e0d\u80fd\u7528 == \u6bd4\u8f83\u4e24\u4e2a\u6d6e\u70b9\u6570\u662f\u5426\u76f8\u7b49\uff0c\u56e0\u4e3a\u6709\u8bef\u5dee if (equals(base, 0) && exponent < 0) { throw new IllegalArgumentException(\"\u5f53\u5e95\u6570\u4e3a 0 \u7684\u65f6\u5019\uff0c\u6307\u6570\u4e3a\u8d1f\u6570\u6ca1\u6709\u610f\u4e49\"); } if (exponent == 0) { return 1.0; } // \u4e0b\u9762\u5c06\u6307\u6570\u7684\u4e24\u79cd\u60c5\u51b5\u5408\u5e76\u6210\u4e00\u79cd\u60c5\u51b5\u8003\u8651 if (exponent > 0) { return power(base, exponent); } else { return power(1 / base, -exponent); } } public double power(double base, int exponent) { if (exponent == 0) { return 1.0; } if (exponent % 2 == 0) { double square = power(base, exponent / 2); return square * square; } else { double square = power(base, (exponent - 1) / 2); return square * square * base; } } private boolean equals(double num1, double num2) { return num1 - num2 < 0.000001 && num1 - num2 > -0.000001; } } Java \u4ee3\u7801\uff1a public class Solution { public double Power(double base, int exponent) { if (exponent == 0) { return 1; } if (exponent < 0) { return 1 / Power(base, -exponent); } // \u4f7f\u7528\u4f4d\u8fd0\u7b97\u7684 \u4e0e \u8fd0\u7b97\u7b26\u4ee3\u66ff\u4e86\u6c42\u4f59\u6570\u8fd0\u7b97\uff0c\u6765\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570 if ((exponent & 1) == 0) { double square = Power(base, exponent >> 1); return square * square; } else { double square = Power(base, (exponent - 1) >> 1); return square * square * base; } } public static void main(String[] args) { int base = 3; int exponent = -3; Solution solution = new Solution(); double result1 = solution.Power(base, exponent); System.out.println(result1); exponent = 6; double result2 = solution.Power(base, exponent); System.out.println(result2); // exponent \u6307\u6570\uff0cexponent >> 1 \u8868\u793a\u5c06\u6307\u6570\u9664\u4ee5 2 System.out.println(exponent >> 1); } } LeetCode \u7b2c 50 \u9898\uff1a$Pow(x, n)$ \u4f20\u9001\u95e8\uff1a 50. Pow(x, n) \u3002 \u5b9e\u73b0 pow( x , n ) \uff0c\u5373\u8ba1\u7b97 x \u7684 n \u6b21\u5e42\u51fd\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2.00000, 10 \u8f93\u51fa: 1024.00000 \u793a\u4f8b 2: \u8f93\u5165: 2.10000, 3 \u8f93\u51fa: 9.26100 \u793a\u4f8b 3: \u8f93\u5165: 2.00000, -2 \u8f93\u51fa: 0.25000 \u89e3\u91ca: 2-2 = 1/22 = 1/4 = 0.25 \u8bf4\u660e: -100.0 < x < 100.0 n \u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u2212231, 231 \u2212 1] \u3002 \u601d\u8def1\uff1a\u4f7f\u7528\u5faa\u73af\uff0c\u628a\u6307\u6570 $n$ \u60f3\u6210\u4e8c\u8fdb\u5236 Python \u4ee3\u7801\uff1a class Solution: def myPow(self, x, n): \"\"\" :type x: float :type n: int :rtype: float \"\"\" if n < 0: x = 1 / x n = - n res = 1 while n: if n & 1 == 1: res *= x # \u6ce8\u610f\uff1a\u8fd9\u91cc\u4e0d\u8981\u5199\u6210 res *= res x *= x n >>= 1 return res \u601d\u8def2\uff1a\u5c06\u5faa\u73af\u53d8\u6210\u9012\u5f52\u64cd\u4f5c\uff0c\u6bcf\u6b21\u6298\u534a\u6c42\u503c\uff0c\u907f\u514d\u6b7b\u677f\u505a\u5faa\u73af\uff0c\u8fd9\u79cd\u611f\u89c9\u50cf\u52a0\u6cd5\u53d8\u4e58\u6cd5\u3002\uff08\u8111\u5b50\u91cc\u56de\u5fc6\u516c\u5f0f\uff09\u3002\u6ce8\u610f\u7ec6\u8282\uff1a\u5e95\u6570\u4e3a $0$ \u7684\u65f6\u5019\uff0c\u6307\u6570\u4e3a\u8d1f\u6570\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002 Python \u4ee3\u7801\uff1a\u9012\u5f52\u5199\u6cd5\uff1a \u6ce8\u610f\u8fb9\u754c\u6761\u4ef6 class Solution: def myPow(self, x, n): \"\"\" :type x: float :type n: int :rtype: float \"\"\" # \u5bf9 x = 0 \uff0c n < 0 \u8fd8\u8981\u505a\u7279\u5224 if n == 0: return 1 if n < 0: return 1 / self.myPow(x, -n) if n & 1: return x * self.myPow(x, n - 1) return self.myPow(x * x, n // 2) \u57fa\u672c\u7684\u5199\u6cd5\uff1a https://blog.csdn.net/happyaaaaaaaaaaa/article/details/76552127 \u6a21\u677f\u5199\u6cd51\uff1a \u6a21\u677f\u5199\u6cd52\uff1a MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 16. \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9"},{"location":"16/#offer-16","text":"\u529b\u6263\uff1a \u5251\u6307 Offer 16. \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 \uff1b AcWing\uff1a\u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5b9e\u73b0\u51fd\u6570 double Power(double base, int exponent) \uff0c\u6c42 base \u7684 exponent \u6b21\u65b9\u3002 \u4e0d\u5f97\u4f7f\u7528\u5e93\u51fd\u6570\uff0c\u540c\u65f6\u4e0d\u9700\u8981\u8003\u8651\u5927\u6570\u95ee\u9898\u3002 \u6ce8\u610f\uff1a \u4e0d\u4f1a\u51fa\u73b0\u5e95\u6570\u548c\u6307\u6570\u540c\u4e3a 0 \u7684\u60c5\u51b5 \u6837\u4f8b1\uff1a \u8f93\u5165\uff1a10 \uff0c2 \u8f93\u51fa\uff1a100 \u6837\u4f8b2\uff1a \u8f93\u5165\uff1a10 \uff0c-2 \u8f93\u51fa\uff1a0.01 \u5206\u6790\uff1a\u6570\u503c\u7684\u6574\u6570\u6b21\u65b9\uff0c\u8981\u5904\u7406\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\uff0c\u52a0\u6cd5\u53d8\u6210\u4e58\u6cd5\u3002\u8003\u8651\u5e95\u6570\u4e3a $0$ \u7684\u65f6\u5019\uff0c\u6307\u6570\u4e0d\u80fd\u4e3a\u8d1f\u6570\u3002 \u601d\u8def1\uff1a\u4f7f\u7528\u9012\u5f52 Python \u4ee3\u7801\uff1a class Solution(object): def Power(self, base, exponent): \"\"\" :type base: float :type exponent: int :rtype: float \"\"\" if exponent == 0: return 1 if exponent < 0: return 1 / self.Power(base, -exponent) # \u5982\u679c\u662f\u5947\u6570 if exponent & 1: return base * self.Power(base, exponent - 1) return self.Power(base * base, exponent >> 1) \u601d\u8def2\uff1a\u975e\u9012\u5f52\u7684\u5199\u6cd5\uff0c\u628a exponent \u60f3\u8c61\u6210\u4e8c\u8fdb\u5236\u3002 Python \u4ee3\u7801\uff1a\u5728\u7406\u89e3\u7684\u57fa\u7840\u4e0a\u8bb0\u4f4f\u8fd9\u4e2a\u5199\u6cd5 class Solution(object): def Power(self, base, exponent): \"\"\" :type base: float :type exponent: int :rtype: float \"\"\" if exponent < 0: base = 1 / base # \u8d1f\u6570\u53d8\u6210\u6b63\u6570 exponent = -exponent res = 1 while exponent: if exponent & 1: res *= base base *= base exponent >>= 1 return res \u7ed9\u5b9a\u4e00\u4e2a double \u7c7b\u578b\u7684\u6d6e\u70b9\u6570 base \u548c int \u7c7b\u578b\u7684\u6574\u6570 exponent \u3002\u6c42 base \u7684 exponent \u6b21\u65b9\u3002 \u6c42\u89e3\u601d\u8def\u4e0e\u5173\u952e \u6ce8\u610f\u5206\u7c7b\u8ba8\u8bba\u4e0e\u4e0e\u9012\u5f52\u51fd\u6570\u7684\u8bbe\u8ba1\u3002 \u5173\u952e\uff1a\u5c06\u5faa\u73af\u53d8\u6210\u9012\u5f52\u64cd\u4f5c\uff0c\u6bcf\u6b21\u6298\u534a\u6c42\u503c\uff0c\u907f\u514d\u6b7b\u677f\u505a\u5faa\u73af\uff0c\u8fd9\u79cd\u611f\u89c9\u50cf\u52a0\u6cd5\u53d8\u4e58\u6cd5\u3002 \u6ce8\u610f\u7ec6\u8282\uff1a\u5e95\u6570\u4e3a 0 \u7684\u65f6\u5019\uff0c\u6307\u6570\u4e3a\u8d1f\u6570\u662f\u6ca1\u6709\u610f\u4e49\u7684 \u7cbe\u786e\u8ba1\u7b97\uff0c\u8f6c\u6210\u6d6e\u70b9\u6570 0.125\uff1a System.out.println((double) 1 / 8); \u53f3\u79fb 1 \u4f4d\u8fd0\u7b97\u7b49\u4ef7\u4e8e\u201c\u9664\u4ee5 2\u201d\uff1a // exponent \u6307\u6570\uff0cexponent >> 1 \u8868\u793a\u5c06\u6307\u6570\u9664\u4ee5 2 System.out.println(exponent >> 1); \u4f7f\u7528\u4f4d\u8fd0\u7b97\u7684 \u4e0e \u8fd0\u7b97\u7b26\u4ee3\u66ff\u4e86\u6c42\u4f59\u6570\u8fd0\u7b97\uff0c\u6765\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\uff1a if ((exponent & 1) == 0) { Java \u4ee3\u7801\uff1a public class Solution { public double Power(double base, int exponent) { // \u5148\u628a\u6781\u7aef\u60c5\u51b5\u8003\u8651\u5230 // \u4e0d\u80fd\u7528 == \u6bd4\u8f83\u4e24\u4e2a\u6d6e\u70b9\u6570\u662f\u5426\u76f8\u7b49\uff0c\u56e0\u4e3a\u6709\u8bef\u5dee if (equals(base, 0) && exponent < 0) { throw new IllegalArgumentException(\"\u5f53\u5e95\u6570\u4e3a 0 \u7684\u65f6\u5019\uff0c\u6307\u6570\u4e3a\u8d1f\u6570\u6ca1\u6709\u610f\u4e49\"); } if (exponent == 0) { return 1.0; } // \u4e0b\u9762\u5c06\u6307\u6570\u7684\u4e24\u79cd\u60c5\u51b5\u5408\u5e76\u6210\u4e00\u79cd\u60c5\u51b5\u8003\u8651 if (exponent > 0) { return power(base, exponent); } else { return power(1 / base, -exponent); } } public double power(double base, int exponent) { if (exponent == 0) { return 1.0; } if (exponent % 2 == 0) { double square = power(base, exponent / 2); return square * square; } else { double square = power(base, (exponent - 1) / 2); return square * square * base; } } private boolean equals(double num1, double num2) { return num1 - num2 < 0.000001 && num1 - num2 > -0.000001; } } Java \u4ee3\u7801\uff1a public class Solution { public double Power(double base, int exponent) { if (exponent == 0) { return 1; } if (exponent < 0) { return 1 / Power(base, -exponent); } // \u4f7f\u7528\u4f4d\u8fd0\u7b97\u7684 \u4e0e \u8fd0\u7b97\u7b26\u4ee3\u66ff\u4e86\u6c42\u4f59\u6570\u8fd0\u7b97\uff0c\u6765\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570 if ((exponent & 1) == 0) { double square = Power(base, exponent >> 1); return square * square; } else { double square = Power(base, (exponent - 1) >> 1); return square * square * base; } } public static void main(String[] args) { int base = 3; int exponent = -3; Solution solution = new Solution(); double result1 = solution.Power(base, exponent); System.out.println(result1); exponent = 6; double result2 = solution.Power(base, exponent); System.out.println(result2); // exponent \u6307\u6570\uff0cexponent >> 1 \u8868\u793a\u5c06\u6307\u6570\u9664\u4ee5 2 System.out.println(exponent >> 1); } }","title":"\u5251\u6307 Offer 16. \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9"},{"location":"16/#leetcode-50-powx-n","text":"\u4f20\u9001\u95e8\uff1a 50. Pow(x, n) \u3002 \u5b9e\u73b0 pow( x , n ) \uff0c\u5373\u8ba1\u7b97 x \u7684 n \u6b21\u5e42\u51fd\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2.00000, 10 \u8f93\u51fa: 1024.00000 \u793a\u4f8b 2: \u8f93\u5165: 2.10000, 3 \u8f93\u51fa: 9.26100 \u793a\u4f8b 3: \u8f93\u5165: 2.00000, -2 \u8f93\u51fa: 0.25000 \u89e3\u91ca: 2-2 = 1/22 = 1/4 = 0.25 \u8bf4\u660e: -100.0 < x < 100.0 n \u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u2212231, 231 \u2212 1] \u3002 \u601d\u8def1\uff1a\u4f7f\u7528\u5faa\u73af\uff0c\u628a\u6307\u6570 $n$ \u60f3\u6210\u4e8c\u8fdb\u5236 Python \u4ee3\u7801\uff1a class Solution: def myPow(self, x, n): \"\"\" :type x: float :type n: int :rtype: float \"\"\" if n < 0: x = 1 / x n = - n res = 1 while n: if n & 1 == 1: res *= x # \u6ce8\u610f\uff1a\u8fd9\u91cc\u4e0d\u8981\u5199\u6210 res *= res x *= x n >>= 1 return res \u601d\u8def2\uff1a\u5c06\u5faa\u73af\u53d8\u6210\u9012\u5f52\u64cd\u4f5c\uff0c\u6bcf\u6b21\u6298\u534a\u6c42\u503c\uff0c\u907f\u514d\u6b7b\u677f\u505a\u5faa\u73af\uff0c\u8fd9\u79cd\u611f\u89c9\u50cf\u52a0\u6cd5\u53d8\u4e58\u6cd5\u3002\uff08\u8111\u5b50\u91cc\u56de\u5fc6\u516c\u5f0f\uff09\u3002\u6ce8\u610f\u7ec6\u8282\uff1a\u5e95\u6570\u4e3a $0$ \u7684\u65f6\u5019\uff0c\u6307\u6570\u4e3a\u8d1f\u6570\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002 Python \u4ee3\u7801\uff1a\u9012\u5f52\u5199\u6cd5\uff1a \u6ce8\u610f\u8fb9\u754c\u6761\u4ef6 class Solution: def myPow(self, x, n): \"\"\" :type x: float :type n: int :rtype: float \"\"\" # \u5bf9 x = 0 \uff0c n < 0 \u8fd8\u8981\u505a\u7279\u5224 if n == 0: return 1 if n < 0: return 1 / self.myPow(x, -n) if n & 1: return x * self.myPow(x, n - 1) return self.myPow(x * x, n // 2) \u57fa\u672c\u7684\u5199\u6cd5\uff1a https://blog.csdn.net/happyaaaaaaaaaaa/article/details/76552127 \u6a21\u677f\u5199\u6cd51\uff1a \u6a21\u677f\u5199\u6cd52\uff1a MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"LeetCode \u7b2c 50 \u9898\uff1a$Pow(x, n)$"},{"location":"17/","text":"\u5251\u6307 Offer 17. \u6253\u5370\u4ece1\u5230\u6700\u5927\u7684n\u4f4d\u6570 \u529b\u6263\uff1a \u5251\u6307 Offer 17. \u6253\u5370\u4ece1\u5230\u6700\u5927\u7684n\u4f4d\u6570 \u3002","title":"\u5251\u6307 Offer 17. \u6253\u5370\u4ece1\u5230\u6700\u5927\u7684n\u4f4d\u6570"},{"location":"17/#offer-17-1n","text":"\u529b\u6263\uff1a \u5251\u6307 Offer 17. \u6253\u5370\u4ece1\u5230\u6700\u5927\u7684n\u4f4d\u6570 \u3002","title":"\u5251\u6307 Offer 17. \u6253\u5370\u4ece1\u5230\u6700\u5927\u7684n\u4f4d\u6570"},{"location":"18-/","text":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 18 \u9898] \u201c\u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9\u201d\u505a\u9898\u8bb0\u5f55","title":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 18 \u9898] \u201c\u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9\u201d\u505a\u9898\u8bb0\u5f55"},{"location":"18-/#offer-2-18","text":"","title":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 18 \u9898] \u201c\u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9\u201d\u505a\u9898\u8bb0\u5f55"},{"location":"18/","text":"\u5251\u6307 Offer 18. \u5220\u9664\u94fe\u8868\u7684\u8282\u70b9 \u529b\u6263\uff1a \u5251\u6307 Offer 18. \u5220\u9664\u94fe\u8868\u7684\u8282\u70b9 \u3002 \u7b2c 18-1 \u9898\uff1a\u5728 $O(1)$ \u65f6\u95f4\u5220\u9664\u94fe\u8868\u7ed3\u70b9\uff08\u591a\u5199\u51e0\u904d\uff09 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u5728 O(1) \u65f6\u95f4\u5220\u9664\u94fe\u8868\u7ed3\u70b9 \u3002 \u7ed9\u5b9a\u5355\u5411\u94fe\u8868\u7684\u4e00\u4e2a\u8282\u70b9\u6307\u9488\uff0c\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5728$O(1)$ \u65f6\u95f4\u5220\u9664\u8be5\u7ed3\u70b9\u3002 \u5047\u8bbe\u94fe\u8868\u4e00\u5b9a\u5b58\u5728\uff0c\u5e76\u4e14\u8be5\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u5c3e\u8282\u70b9\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\u94fe\u8868 1->4->6->8 \uff0c\u5220\u6389\u8282\u70b9\uff1a\u7b2c 2 \u4e2a\u8282\u70b9\u5373 6\uff08\u5934\u8282\u70b9\u4e3a\u7b2c 0 \u4e2a\u8282\u70b9\uff09 \u8f93\u51fa\uff1a\u65b0\u94fe\u8868 1->4->8 \u601d\u8def\uff1a\u5f85\u5220\u9664\u7684\u7ed3\u70b9\u662f\u672b\u5c3e\u7ed3\u70b9\u7684\u60c5\u51b5\u6bd4\u8f83\u5bb9\u6613\u5ffd\u7565\uff0c\u521a\u597d\u9898\u76ee\u4e2d\u8bf4\u201c\u8be5\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u5c3e\u8282\u70b9\u201d\u3002 Python \u4ee3\u7801\uff1a # 28. \u5728O(1)\u65f6\u95f4\u5220\u9664\u94fe\u8868\u7ed3\u70b9 # \u7ed9\u5b9a\u5355\u5411\u94fe\u8868\u7684\u4e00\u4e2a\u8282\u70b9\u6307\u9488\uff0c\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5728O(1)\u65f6\u95f4\u5220\u9664\u8be5\u7ed3\u70b9\u3002 # # \u5047\u8bbe\u94fe\u8868\u4e00\u5b9a\u5b58\u5728\uff0c\u5e76\u4e14\u8be5\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u5c3e\u8282\u70b9\u3002 # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution(object): def deleteNode(self, node): \"\"\" :type node: ListNode :rtype: void \"\"\" next = node.next node.val = next.val node.next = next.next next.next = None C++ \u4ee3\u7801\uff1a \u7b2c 18-2 \u9898\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9 \u540c LeetCode \u7b2c82 \u9898\u3002 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u8282\u70b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5728\u4e00\u4e2a\u6392\u5e8f\u7684\u94fe\u8868\u4e2d\uff0c\u5b58\u5728\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u8bf7\u5220\u9664\u8be5\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u91cd\u590d\u7684\u7ed3\u70b9\u4e0d\u4fdd\u7559\u3002 \u6837\u4f8b1\uff1a \u8f93\u5165\uff1a 1->2->3->3->4->4->5 \u8f93\u51fa\uff1a 1->2->5 \u6837\u4f8b2\uff1a \u8f93\u5165\uff1a 1->1->1->2->3 \u8f93\u51fa\uff1a 2->3 \u601d\u8def\uff1a\u56e0\u4e3a\u5934\u7ed3\u70b9\u53ef\u80fd\u88ab\u5220\uff0c\u6240\u4ee5\u8981\u8bbe\u7f6e\u4e00\u4e2a\u865a\u62df\u5934\u7ed3\u70b9\u3002 Python \u5199\u6cd5\uff1a class Solution(object): def deleteDuplication(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None: return None dummy = ListNode(-1) dummy.next = head cur = dummy # \u4e00\u4e0b\u5b50\u8981\u770b\u4e24\u4e2a\uff0c\u6240\u4ee5\u662f while cur.next and cur.next.next: if cur.next.val == cur.next.next.val: # \u5220\u9664\u7684\u8d77\u70b9\u81f3\u5c11\u662f cur.next.next del_node = cur.next.next while del_node.next and del_node.val == del_node.next.val: del_node = del_node.next # \u6765\u5230\u4e86\u4e00\u4e2a\u65b0\u7684\u7ed3\u70b9\uff0c\u503c\u4e0d\u540c cur.next = del_node.next del_node.next = None else: cur = cur.next return dummy.next Java \u4ee3\u7801\uff1a class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } public ListNode(int[] arr) { if (arr == null || arr.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = arr[0]; ListNode cur = this; for (int i = 1; i < arr.length; i++) { cur.next = new ListNode(arr[i]); cur = cur.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode deleteDuplication(ListNode pHead) { ListNode dummyNode = new ListNode(-1); dummyNode.next = pHead; ListNode curNode = dummyNode; while (curNode.next != null && curNode.next.next != null) { ListNode next = curNode.next; ListNode nextNext = next.next; if (next.val == nextNext.val) { while (nextNext.next != null && nextNext.val == nextNext.next.val) { nextNext = nextNext.next; } ListNode delNode = nextNext; curNode.next = delNode.next; delNode.next = null; } else { curNode = curNode.next; } } return dummyNode.next; } public static void main(String[] args) { int[] nums = new int[]{1, 2, 3, 3, 4, 4, 5}; ListNode head = new ListNode(nums); System.out.println(head); Solution solution = new Solution(); ListNode deleteDuplication = solution.deleteDuplication(head); System.out.println(deleteDuplication); } } LeetCode \u7b2c 82 \u9898\uff1a \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II \u4f20\u9001\u95e8\uff1a 82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u539f\u59cb\u94fe\u8868\u4e2d \u6ca1\u6709\u91cd\u590d\u51fa\u73b0 \u7684\u6570\u5b57\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->3->4->4->5 \u8f93\u51fa: 1->2->5 \u793a\u4f8b 2: \u8f93\u5165: 1->1->1->2->3 \u8f93\u51fa: 2->3 Java \u4ee3\u7801\uff1a /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode deleteDuplicates(ListNode head) { if (head == null) { return null; } // \u53ea\u8981\u6d89\u53ca\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u90fd\u8bbe\u7acb\u865a\u62df\u5934\u7ed3\u70b9 ListNode dummyNode = new ListNode(-1); dummyNode.next = head; ListNode curNode = dummyNode; while (curNode.next != null && curNode.next.next != null) { // \u5982\u679c\u63a5\u8fde\u4e24\u4e2a\u7ed3\u70b9\u7684 val \u76f8\u7b49\uff0c\u81f3\u5c11\u8981\u628a\u5b83\u4eec\u90fd\u5220\u6389 if (curNode.next.val == curNode.next.next.val) { // \u8981\u5220\u9664\u7684\u8d77\u70b9\u81f3\u5c11\u5e94\u8be5\u662f\u5f53\u524d\u5224\u65ad\u76f8\u540c\u7684\u7ed3\u70b9\u7684\u7b2c 2 \u4e2a ListNode delNode = curNode.next.next; // \u5982\u679c\u540e\u9762\u8fd8\u6709\u76f8\u540c\u7684\u7ed3\u70b9\uff0cdelNode \u540e\u79fb\u4e00\u4f4d\uff0c\u5373 delNode \u5e94\u8be5\u662f\u6307\u5411\u76f8\u540c\u7684\u7ed3\u70b9\u7684\u6700\u540e\u4e00\u4e2a while (delNode.next != null && delNode.next.val == delNode.val) { delNode = delNode.next; } curNode.next = delNode.next; delNode.next = null; } else { curNode = curNode.next; } } return dummyNode.next; } } LeetCode \u7b2c 83 \u9898\uff1a \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 \u4f20\u9001\u95e8\uff1a 83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->1->2 \u8f93\u51fa: 1->2 \u793a\u4f8b 2: \u8f93\u5165: 1->1->2->3->3 \u8f93\u51fa: 1->2->3 Java \u4ee3\u7801\uff1a /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode deleteDuplicates(ListNode head) { if (head == null) { return head; } ListNode curNode = head; while (curNode != null && curNode.next != null) { if (curNode.val == curNode.next.val) { ListNode delNode = curNode.next; // \u7ee7\u7eed\u5411\u524d\u627e\uff0c\u770b\u770b\uff0c\u8fd8\u6709\u6ca1\u6709\u53ef\u4ee5\u5220\u9664\u7684\u7ed3\u70b9 while (delNode.next != null && delNode.next.val == delNode.val) { delNode = delNode.next; } // \u7a7f\u9488\u5f15\u7ebf curNode.next = delNode.next; delNode.next = null; } else { curNode = curNode.next; } } return head; } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 18. \u5220\u9664\u94fe\u8868\u7684\u8282\u70b9"},{"location":"18/#offer-18","text":"\u529b\u6263\uff1a \u5251\u6307 Offer 18. \u5220\u9664\u94fe\u8868\u7684\u8282\u70b9 \u3002","title":"\u5251\u6307 Offer 18. \u5220\u9664\u94fe\u8868\u7684\u8282\u70b9"},{"location":"18/#18-1-o1","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u5728 O(1) \u65f6\u95f4\u5220\u9664\u94fe\u8868\u7ed3\u70b9 \u3002 \u7ed9\u5b9a\u5355\u5411\u94fe\u8868\u7684\u4e00\u4e2a\u8282\u70b9\u6307\u9488\uff0c\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5728$O(1)$ \u65f6\u95f4\u5220\u9664\u8be5\u7ed3\u70b9\u3002 \u5047\u8bbe\u94fe\u8868\u4e00\u5b9a\u5b58\u5728\uff0c\u5e76\u4e14\u8be5\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u5c3e\u8282\u70b9\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\u94fe\u8868 1->4->6->8 \uff0c\u5220\u6389\u8282\u70b9\uff1a\u7b2c 2 \u4e2a\u8282\u70b9\u5373 6\uff08\u5934\u8282\u70b9\u4e3a\u7b2c 0 \u4e2a\u8282\u70b9\uff09 \u8f93\u51fa\uff1a\u65b0\u94fe\u8868 1->4->8 \u601d\u8def\uff1a\u5f85\u5220\u9664\u7684\u7ed3\u70b9\u662f\u672b\u5c3e\u7ed3\u70b9\u7684\u60c5\u51b5\u6bd4\u8f83\u5bb9\u6613\u5ffd\u7565\uff0c\u521a\u597d\u9898\u76ee\u4e2d\u8bf4\u201c\u8be5\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u5c3e\u8282\u70b9\u201d\u3002 Python \u4ee3\u7801\uff1a # 28. \u5728O(1)\u65f6\u95f4\u5220\u9664\u94fe\u8868\u7ed3\u70b9 # \u7ed9\u5b9a\u5355\u5411\u94fe\u8868\u7684\u4e00\u4e2a\u8282\u70b9\u6307\u9488\uff0c\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5728O(1)\u65f6\u95f4\u5220\u9664\u8be5\u7ed3\u70b9\u3002 # # \u5047\u8bbe\u94fe\u8868\u4e00\u5b9a\u5b58\u5728\uff0c\u5e76\u4e14\u8be5\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u5c3e\u8282\u70b9\u3002 # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution(object): def deleteNode(self, node): \"\"\" :type node: ListNode :rtype: void \"\"\" next = node.next node.val = next.val node.next = next.next next.next = None C++ \u4ee3\u7801\uff1a","title":"\u7b2c 18-1 \u9898\uff1a\u5728 $O(1)$ \u65f6\u95f4\u5220\u9664\u94fe\u8868\u7ed3\u70b9\uff08\u591a\u5199\u51e0\u904d\uff09"},{"location":"18/#18-2","text":"\u540c LeetCode \u7b2c82 \u9898\u3002 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u8282\u70b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5728\u4e00\u4e2a\u6392\u5e8f\u7684\u94fe\u8868\u4e2d\uff0c\u5b58\u5728\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u8bf7\u5220\u9664\u8be5\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u91cd\u590d\u7684\u7ed3\u70b9\u4e0d\u4fdd\u7559\u3002 \u6837\u4f8b1\uff1a \u8f93\u5165\uff1a 1->2->3->3->4->4->5 \u8f93\u51fa\uff1a 1->2->5 \u6837\u4f8b2\uff1a \u8f93\u5165\uff1a 1->1->1->2->3 \u8f93\u51fa\uff1a 2->3 \u601d\u8def\uff1a\u56e0\u4e3a\u5934\u7ed3\u70b9\u53ef\u80fd\u88ab\u5220\uff0c\u6240\u4ee5\u8981\u8bbe\u7f6e\u4e00\u4e2a\u865a\u62df\u5934\u7ed3\u70b9\u3002 Python \u5199\u6cd5\uff1a class Solution(object): def deleteDuplication(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None: return None dummy = ListNode(-1) dummy.next = head cur = dummy # \u4e00\u4e0b\u5b50\u8981\u770b\u4e24\u4e2a\uff0c\u6240\u4ee5\u662f while cur.next and cur.next.next: if cur.next.val == cur.next.next.val: # \u5220\u9664\u7684\u8d77\u70b9\u81f3\u5c11\u662f cur.next.next del_node = cur.next.next while del_node.next and del_node.val == del_node.next.val: del_node = del_node.next # \u6765\u5230\u4e86\u4e00\u4e2a\u65b0\u7684\u7ed3\u70b9\uff0c\u503c\u4e0d\u540c cur.next = del_node.next del_node.next = None else: cur = cur.next return dummy.next Java \u4ee3\u7801\uff1a class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } public ListNode(int[] arr) { if (arr == null || arr.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = arr[0]; ListNode cur = this; for (int i = 1; i < arr.length; i++) { cur.next = new ListNode(arr[i]); cur = cur.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode deleteDuplication(ListNode pHead) { ListNode dummyNode = new ListNode(-1); dummyNode.next = pHead; ListNode curNode = dummyNode; while (curNode.next != null && curNode.next.next != null) { ListNode next = curNode.next; ListNode nextNext = next.next; if (next.val == nextNext.val) { while (nextNext.next != null && nextNext.val == nextNext.next.val) { nextNext = nextNext.next; } ListNode delNode = nextNext; curNode.next = delNode.next; delNode.next = null; } else { curNode = curNode.next; } } return dummyNode.next; } public static void main(String[] args) { int[] nums = new int[]{1, 2, 3, 3, 4, 4, 5}; ListNode head = new ListNode(nums); System.out.println(head); Solution solution = new Solution(); ListNode deleteDuplication = solution.deleteDuplication(head); System.out.println(deleteDuplication); } }","title":"\u7b2c 18-2 \u9898\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9"},{"location":"18/#leetcode-82-ii","text":"\u4f20\u9001\u95e8\uff1a 82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u539f\u59cb\u94fe\u8868\u4e2d \u6ca1\u6709\u91cd\u590d\u51fa\u73b0 \u7684\u6570\u5b57\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->3->4->4->5 \u8f93\u51fa: 1->2->5 \u793a\u4f8b 2: \u8f93\u5165: 1->1->1->2->3 \u8f93\u51fa: 2->3 Java \u4ee3\u7801\uff1a /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode deleteDuplicates(ListNode head) { if (head == null) { return null; } // \u53ea\u8981\u6d89\u53ca\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u90fd\u8bbe\u7acb\u865a\u62df\u5934\u7ed3\u70b9 ListNode dummyNode = new ListNode(-1); dummyNode.next = head; ListNode curNode = dummyNode; while (curNode.next != null && curNode.next.next != null) { // \u5982\u679c\u63a5\u8fde\u4e24\u4e2a\u7ed3\u70b9\u7684 val \u76f8\u7b49\uff0c\u81f3\u5c11\u8981\u628a\u5b83\u4eec\u90fd\u5220\u6389 if (curNode.next.val == curNode.next.next.val) { // \u8981\u5220\u9664\u7684\u8d77\u70b9\u81f3\u5c11\u5e94\u8be5\u662f\u5f53\u524d\u5224\u65ad\u76f8\u540c\u7684\u7ed3\u70b9\u7684\u7b2c 2 \u4e2a ListNode delNode = curNode.next.next; // \u5982\u679c\u540e\u9762\u8fd8\u6709\u76f8\u540c\u7684\u7ed3\u70b9\uff0cdelNode \u540e\u79fb\u4e00\u4f4d\uff0c\u5373 delNode \u5e94\u8be5\u662f\u6307\u5411\u76f8\u540c\u7684\u7ed3\u70b9\u7684\u6700\u540e\u4e00\u4e2a while (delNode.next != null && delNode.next.val == delNode.val) { delNode = delNode.next; } curNode.next = delNode.next; delNode.next = null; } else { curNode = curNode.next; } } return dummyNode.next; } }","title":"LeetCode \u7b2c 82 \u9898\uff1a \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II"},{"location":"18/#leetcode-83","text":"\u4f20\u9001\u95e8\uff1a 83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->1->2 \u8f93\u51fa: 1->2 \u793a\u4f8b 2: \u8f93\u5165: 1->1->2->3->3 \u8f93\u51fa: 1->2->3 Java \u4ee3\u7801\uff1a /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode deleteDuplicates(ListNode head) { if (head == null) { return head; } ListNode curNode = head; while (curNode != null && curNode.next != null) { if (curNode.val == curNode.next.val) { ListNode delNode = curNode.next; // \u7ee7\u7eed\u5411\u524d\u627e\uff0c\u770b\u770b\uff0c\u8fd8\u6709\u6ca1\u6709\u53ef\u4ee5\u5220\u9664\u7684\u7ed3\u70b9 while (delNode.next != null && delNode.next.val == delNode.val) { delNode = delNode.next; } // \u7a7f\u9488\u5f15\u7ebf curNode.next = delNode.next; delNode.next = null; } else { curNode = curNode.next; } } return head; } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"LeetCode \u7b2c 83 \u9898\uff1a \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20"},{"location":"19/","text":"\u5251\u6307 Offer 19. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \u529b\u6263\uff1a \u5251\u6307 Offer 19. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \uff1b \u7b2c 19 \u9898\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \u4f20\u9001\u95e8\uff1a \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5339\u914d\u5305\u62ec '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u6a21\u5f0f\u4e2d\u7684\u5b57\u7b26 '.' \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c '*' \u8868\u793a\u5b83\u524d\u9762\u7684\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff08\u542b0\u6b21\uff09\u3002 \u5728\u672c\u9898\u4e2d\uff0c\u5339\u914d\u662f\u6307\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u5339\u914d\u6574\u4e2a\u6a21\u5f0f\u3002 \u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 \"aaa\" \u4e0e\u6a21\u5f0f \"a.a\" \u548c \"ab*ac*a\" \u5339\u914d\uff0c\u4f46\u662f\u4e0e \"aa.a\" \u548c \"ab*a\" \u5747\u4e0d\u5339\u914d\u3002 \u6837\u4f8b\uff1a ``` \u8f93\u5165\uff1a s=\"aa\" p=\"a*\" \u8f93\u51fa:true ``` \u601d\u8def\uff1a\u8fd9\u9898\u8003\u5bdf\u7684\u662f\u52a8\u6001\u89c4\u5212\u3002\u7b14\u8bb0\u6211\u5199\u5728\u8fd9\u91cc\u4e86\uff1a \u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09\u7b2c 19 \u9898\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \u3002 Python \u4ee3\u7801\uff1a class Solution(object): # \u72b6\u6001\uff1adp[i][j] \u8868\u793a s \u4e2d\u524d i \u4e2a\u5b57\u7b26\u4e0e p \u7684\u524d j \u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u8868\u793a\u5f0f\u662f\u5426\u5339\u914d # i \u548c j \u8868\u793a\u4e2a\u6570 # \u4ee3\u7801\u4e2d\u51fa\u73b0 i \u5747\u8868\u793a s \u4e2d\u7684\u7d22\u5f15\u6216\u8005\u4e2a\u6570 # \u4ee3\u7801\u4e2d\u51fa\u73b0 j \u5747\u8868\u793a p \u4e2d\u7684\u7d22\u5f15\u6216\u8005\u4e2a\u6570 # \u51fa\u73b0 -1 \u90fd\u8868\u793a\u5f53\u524d\u8003\u8651\u7684 # \u51fa\u73b0 -2 \u90fd\u8868\u793a\u5f53\u524d\u518d\u524d\u4e00\u4e2a # \u53c2\u8003\u8d44\u6599\uff1ahttp://www.voidcn.com/article/p-zioiffqq-mm.html def isMatch(self, s, p): \"\"\" :type s: str :type p: str :rtype: bool \"\"\" n = len(s) m = len(p) dp = [[False for _ in range(m + 1)] for _ in range(n + 1)] # \u5f53 s \u548c p \u7684\u957f\u5ea6\u90fd\u4e3a 0 \u7684\u65f6\u5019\uff0c\u5b9a\u4e49\u6210\u5339\u914d dp[0][0] = True # \u7279\u5224 for j in range(2, m + 1): if p[j - 1] == '*' and dp[0][j - 2]: dp[0][j] = True # \u4e0b\u9762\u5206\u522b\u5bf9\u5b57\u7b26\u4e32 s \u548c\u6a21\u5f0f\u4e32 p \u8fdb\u884c\u5339\u914d for i in range(1, n + 1): for j in range(1, m + 1): if s[i - 1] == p[j - 1] or p[j - 1] == '.': dp[i][j] = dp[i - 1][j - 1] elif p[j - 1] == '*': # \u8fd9\u662f\u6700\u9ebb\u70e6\u7684\u60c5\u51b5 if p[j - 2] != s[i - 1] and p[j - 2] != '.': # \u4f8b\u5b50\uff1as a # j-1 # p b * # j-2 j-1 # \u6b64\u65f6\u53ea\u80fd\u628a * \u5f53\u6210 0 \u6b21\uff0c\u5373 * \u548c\u5b83\u4e4b\u524d\u7684\u5b57\u6bcd\u4e0d\u51fa\u73b0\uff0c\u6240\u4ee5\u4e00\u4e0b\u5b50\u8981\u51cf\u53bb 2 # p[j - 2] != '.' \u8fd9\u4e00\u70b9\u522b\u5fd8\u4e86 # \u4e0d\u80fd\u5339\u914d dp[i][j] = dp[i][j - 2] else: # \u63a5\u4e0b\u6765\u662f\u53ef\u4ee5\u5339\u914d # \u4f8b\u5b50\uff1as a # j-1 # p . * # j-2 j-1 # \u6b64\u65f6\u628a * \u5f53\u6210 0 \u6b21\uff0c # \u6b64\u65f6\u628a * \u5f53\u6210 1 \u6b21\uff0c # \u6b64\u65f6\u628a * \u5f53\u6210 \u591a \u6b21\uff0c\u76f4\u63a5\u628a i - 1 \uff0c\u8fd9\u662f\u6700\u96be\u7684\u5730\u65b9 dp[i][j] = dp[i][j - 2] or dp[i][j - 1] or dp[i - 1][j] return dp[n][m] \u65b9\u6cd52\uff1a\u9012\u5f52\u7684\u5199\u6cd5\u3002 \u53c2\u8003\u8d44\u6599\uff1a\u4e00\u4e2a\u7f51\u7ea2\u7684\u89e3\u6cd5\uff1ahttp://www.cnblogs.com/grandyang/p/4461713.html\u3002\u6709\u89e3\u6cd5 1 \u8fd8\u6709\u89e3\u6cd52\u3002 \u7f51\u7ea2\u5199\u6cd5\uff1ahttps://blog.csdn.net/hk2291976/article/details/51165010 \u8bf4\u660e\uff1a\u8fd9\u4e2a\u7f51\u7ea2\u8fd8\u5199\u4e86 leetbook\u3002 \u53c2\u8003\u8d44\u6599\uff1ahttps://zhuanlan.zhihu.com/p/37647267\u3002 \u91c7\u7528\u9012\u5f52\u7684\u89e3\u9898\u65b9\u6cd5\uff0c\u9012\u5f52\u7684\u7ec8\u6b62\u6761\u4ef6\u662f\uff1a 1\u3001\u5982\u679c $s$ \u548c $p$ \u90fd\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\uff0c\u76f8\u7b49\u7684\u5145\u8981\u6761\u4ef6\u662f\uff0c\u5b83\u4eec\u76f8\u7b49\uff0c\u6216\u8005 $p$ \u662f '.' \uff1b \u5176\u4ed6\u9012\u5f52\u60c5\u51b5\uff1a 1\u3001\u5982\u679c $p$ \u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e0d\u662f '*' \uff0c\u90a3\u4e48\u5982\u679c $s$ \u662f\u7a7a\uff0c\u8fd4\u56de false \uff0c\u5982\u679c $s[0]$ \u548c $p[0]$ \u80fd\u5339\u914d\u4e0a\uff0c\u90a3\u4e48\u9012\u5f52 s.substr(1), p.substr(1) \uff1b ==\u574f\u5c31\u574f\u5728\uff0c\u5982\u679c $p$ \u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u662f '*' ==\u3002 2\u3001\u5982\u679c $p$ \u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u662f '*' \uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053 ' ' \u53ef\u4ee5\u4ee3\u8868 ' ' \u4e4b\u524d\u7684\u5143\u7d20\u4e2a\u6570\u662f $0$ \u4e2a\u6216\u8005 $1$ \u4e2a\u6216\u8005\u591a\u4e2a\uff0c\u6240\u4ee5\u5982\u679c $s$ \u7684\u524d $k$ \u4e2a\u5143\u7d20\u4e2a $p[0]$ \u4e00\u6837\uff0c\u90a3\u4e48\u5b83\u4eec\u6709\u53ef\u80fd\u90fd\u88ab\u5339\u914d\u5230\uff0c\u4e5f\u6709\u53ef\u80fd\u4e00\u4e2a\u90fd\u4e0d\u4f1a\u88ab\u5339\u914d\u4e0a\u3002 C++ \u5199\u6cd5\uff1a class Solution { public: bool isMatch(string s, string p) { if(p.empty())return s.empty(); if(p.size() == 1) { return(s.size() == 1 && (s[0] == p[0] || p[0] == '.')); } if(p[1] != '*') { if(s.empty())return false; return (s[0] == p[0] || p[0] == '.')&& isMatch(s.substr(1), p.substr(1)); } // \u8d70\u5230\u8fd9\u91cc p[1] == '*'\uff0c\u4e0b\u9762\u7684 4 \u884c\u4ee3\u8868\u6bd4\u8f83\u96be\u7406\u89e3 while(!s.empty() && (s[0] == p[0] || p[0] == '.')) { if(isMatch(s, p.substr(2))) return true; s = s.substr(1); } return isMatch(s, p.substr(2)); } }; \u8981\u6c42\uff1a\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5339\u914d\u5305\u62ec . \u548c * \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u6a21\u5f0f\u4e2d\u7684\u5b57\u7b26 . \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c * \u8868\u793a\u5b83\u524d\u9762\u7684\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff0c\u5305\u62ec $0$ \u6b21\u3002 LeetCode \u7b2c 10 \u9898\uff0c\u4f20\u9001\u95e8\uff1a 10. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \uff0c\u96be\u5ea6\u662f\uff1a \u56f0\u96be \u3002 \u4f7f\u7528\u52a8\u6001\u89c4\u5212\uff1a dp \u51fd\u6570\u8fd9\u4e48\u5199\u3002 \u601d\u8def\uff1a\u5f53\u5b57\u7b26\u4e32\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\u65f6\uff0c\u76f4\u63a5\u8fdb\u884c\u5224\u65ad\uff0c\u5426\u5219\u8fdb\u5165\u4e0b\u9762\u4e24\u79cd\u9012\u5f52\u3002 \u4e24\u79cd\u9012\u5f52\u60c5\u51b5\uff1a1\u3001\u5f53\u6a21\u5f0f\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e0d\u662f * \u65f6\uff1a \uff081\uff09\u5982\u679c\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548c\u6a21\u5f0f\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u76f8\u5339\u914d\u6216\u662f\u5b57\u7b26 . \u90a3\u4e48\u5b57\u7b26\u4e32\u548c\u6a21\u5f0f\u90fd\u540e\u79fb\u4e00\u4e2a\u5b57\u7b26\uff0c\u7136\u540e\u5339\u914d\u5269\u4f59 \u7684\uff1b \uff082\uff09\u5982\u679c\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548c\u6a21\u5f0f\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u76f8\u4e0d\u5339\u914d\uff0c\u76f4\u63a5\u8fd4\u56de false \u3002 2\u3001\u5f53\u6a21\u5f0f\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u662f * \u65f6\uff1a \u5982\u679c\u201c\u5b57\u7b26\u4e32\u201d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u8ddf\u201c\u6a21\u5f0f\u4e32\u201d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u5339\u914d\uff0c\u5219\u6a21\u5f0f\u540e\u79fb $2$ \u4e2a\u5b57\u7b26\uff0c\u7ee7\u7eed\u5339\u914d\uff1b \u5982\u679c\u201c\u5b57\u7b26\u4e32\u201d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u8ddf\u201c\u6a21\u5f0f\u4e32\u201d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5339\u914d\u6216\u662f\u5b57\u7b26 . \uff0c\u53ef\u4ee5\u6709 $3$ \u79cd\u5339\u914d\u65b9\u5f0f\uff1a \uff081\uff09\u6a21\u5f0f\u540e\u79fb $2$ \u5b57\u7b26\uff0c\u76f8\u5f53\u4e8e x \u88ab\u5ffd\u7565\uff1b \uff082\uff09\u5b57\u7b26\u4e32\u540e\u79fb $1$ \u5b57\u7b26\uff0c\u6a21\u5f0f\u540e\u79fb $2$ \u5b57\u7b26\uff1b \uff083\uff09\u5b57\u7b26\u4e32\u540e\u79fb $1$ \u5b57\u7b26\uff0c\u6a21\u5f0f\u4e0d\u53d8\uff0c\u5373\u7ee7\u7eed\u5339\u914d\u5b57\u7b26\u4e0b\u4e00\u4f4d\uff0c\u56e0\u4e3a\u53ef\u4ee5\u5339\u914d\u591a\u4f4d\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 19. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d"},{"location":"19/#offer-19","text":"\u529b\u6263\uff1a \u5251\u6307 Offer 19. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \uff1b","title":"\u5251\u6307 Offer 19. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d"},{"location":"19/#19","text":"\u4f20\u9001\u95e8\uff1a \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5339\u914d\u5305\u62ec '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u6a21\u5f0f\u4e2d\u7684\u5b57\u7b26 '.' \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c '*' \u8868\u793a\u5b83\u524d\u9762\u7684\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff08\u542b0\u6b21\uff09\u3002 \u5728\u672c\u9898\u4e2d\uff0c\u5339\u914d\u662f\u6307\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u5339\u914d\u6574\u4e2a\u6a21\u5f0f\u3002 \u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 \"aaa\" \u4e0e\u6a21\u5f0f \"a.a\" \u548c \"ab*ac*a\" \u5339\u914d\uff0c\u4f46\u662f\u4e0e \"aa.a\" \u548c \"ab*a\" \u5747\u4e0d\u5339\u914d\u3002 \u6837\u4f8b\uff1a ``` \u8f93\u5165\uff1a s=\"aa\" p=\"a*\" \u8f93\u51fa:true ``` \u601d\u8def\uff1a\u8fd9\u9898\u8003\u5bdf\u7684\u662f\u52a8\u6001\u89c4\u5212\u3002\u7b14\u8bb0\u6211\u5199\u5728\u8fd9\u91cc\u4e86\uff1a \u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09\u7b2c 19 \u9898\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \u3002 Python \u4ee3\u7801\uff1a class Solution(object): # \u72b6\u6001\uff1adp[i][j] \u8868\u793a s \u4e2d\u524d i \u4e2a\u5b57\u7b26\u4e0e p \u7684\u524d j \u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u8868\u793a\u5f0f\u662f\u5426\u5339\u914d # i \u548c j \u8868\u793a\u4e2a\u6570 # \u4ee3\u7801\u4e2d\u51fa\u73b0 i \u5747\u8868\u793a s \u4e2d\u7684\u7d22\u5f15\u6216\u8005\u4e2a\u6570 # \u4ee3\u7801\u4e2d\u51fa\u73b0 j \u5747\u8868\u793a p \u4e2d\u7684\u7d22\u5f15\u6216\u8005\u4e2a\u6570 # \u51fa\u73b0 -1 \u90fd\u8868\u793a\u5f53\u524d\u8003\u8651\u7684 # \u51fa\u73b0 -2 \u90fd\u8868\u793a\u5f53\u524d\u518d\u524d\u4e00\u4e2a # \u53c2\u8003\u8d44\u6599\uff1ahttp://www.voidcn.com/article/p-zioiffqq-mm.html def isMatch(self, s, p): \"\"\" :type s: str :type p: str :rtype: bool \"\"\" n = len(s) m = len(p) dp = [[False for _ in range(m + 1)] for _ in range(n + 1)] # \u5f53 s \u548c p \u7684\u957f\u5ea6\u90fd\u4e3a 0 \u7684\u65f6\u5019\uff0c\u5b9a\u4e49\u6210\u5339\u914d dp[0][0] = True # \u7279\u5224 for j in range(2, m + 1): if p[j - 1] == '*' and dp[0][j - 2]: dp[0][j] = True # \u4e0b\u9762\u5206\u522b\u5bf9\u5b57\u7b26\u4e32 s \u548c\u6a21\u5f0f\u4e32 p \u8fdb\u884c\u5339\u914d for i in range(1, n + 1): for j in range(1, m + 1): if s[i - 1] == p[j - 1] or p[j - 1] == '.': dp[i][j] = dp[i - 1][j - 1] elif p[j - 1] == '*': # \u8fd9\u662f\u6700\u9ebb\u70e6\u7684\u60c5\u51b5 if p[j - 2] != s[i - 1] and p[j - 2] != '.': # \u4f8b\u5b50\uff1as a # j-1 # p b * # j-2 j-1 # \u6b64\u65f6\u53ea\u80fd\u628a * \u5f53\u6210 0 \u6b21\uff0c\u5373 * \u548c\u5b83\u4e4b\u524d\u7684\u5b57\u6bcd\u4e0d\u51fa\u73b0\uff0c\u6240\u4ee5\u4e00\u4e0b\u5b50\u8981\u51cf\u53bb 2 # p[j - 2] != '.' \u8fd9\u4e00\u70b9\u522b\u5fd8\u4e86 # \u4e0d\u80fd\u5339\u914d dp[i][j] = dp[i][j - 2] else: # \u63a5\u4e0b\u6765\u662f\u53ef\u4ee5\u5339\u914d # \u4f8b\u5b50\uff1as a # j-1 # p . * # j-2 j-1 # \u6b64\u65f6\u628a * \u5f53\u6210 0 \u6b21\uff0c # \u6b64\u65f6\u628a * \u5f53\u6210 1 \u6b21\uff0c # \u6b64\u65f6\u628a * \u5f53\u6210 \u591a \u6b21\uff0c\u76f4\u63a5\u628a i - 1 \uff0c\u8fd9\u662f\u6700\u96be\u7684\u5730\u65b9 dp[i][j] = dp[i][j - 2] or dp[i][j - 1] or dp[i - 1][j] return dp[n][m] \u65b9\u6cd52\uff1a\u9012\u5f52\u7684\u5199\u6cd5\u3002 \u53c2\u8003\u8d44\u6599\uff1a\u4e00\u4e2a\u7f51\u7ea2\u7684\u89e3\u6cd5\uff1ahttp://www.cnblogs.com/grandyang/p/4461713.html\u3002\u6709\u89e3\u6cd5 1 \u8fd8\u6709\u89e3\u6cd52\u3002 \u7f51\u7ea2\u5199\u6cd5\uff1ahttps://blog.csdn.net/hk2291976/article/details/51165010 \u8bf4\u660e\uff1a\u8fd9\u4e2a\u7f51\u7ea2\u8fd8\u5199\u4e86 leetbook\u3002 \u53c2\u8003\u8d44\u6599\uff1ahttps://zhuanlan.zhihu.com/p/37647267\u3002 \u91c7\u7528\u9012\u5f52\u7684\u89e3\u9898\u65b9\u6cd5\uff0c\u9012\u5f52\u7684\u7ec8\u6b62\u6761\u4ef6\u662f\uff1a 1\u3001\u5982\u679c $s$ \u548c $p$ \u90fd\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\uff0c\u76f8\u7b49\u7684\u5145\u8981\u6761\u4ef6\u662f\uff0c\u5b83\u4eec\u76f8\u7b49\uff0c\u6216\u8005 $p$ \u662f '.' \uff1b \u5176\u4ed6\u9012\u5f52\u60c5\u51b5\uff1a 1\u3001\u5982\u679c $p$ \u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e0d\u662f '*' \uff0c\u90a3\u4e48\u5982\u679c $s$ \u662f\u7a7a\uff0c\u8fd4\u56de false \uff0c\u5982\u679c $s[0]$ \u548c $p[0]$ \u80fd\u5339\u914d\u4e0a\uff0c\u90a3\u4e48\u9012\u5f52 s.substr(1), p.substr(1) \uff1b ==\u574f\u5c31\u574f\u5728\uff0c\u5982\u679c $p$ \u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u662f '*' ==\u3002 2\u3001\u5982\u679c $p$ \u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u662f '*' \uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053 ' ' \u53ef\u4ee5\u4ee3\u8868 ' ' \u4e4b\u524d\u7684\u5143\u7d20\u4e2a\u6570\u662f $0$ \u4e2a\u6216\u8005 $1$ \u4e2a\u6216\u8005\u591a\u4e2a\uff0c\u6240\u4ee5\u5982\u679c $s$ \u7684\u524d $k$ \u4e2a\u5143\u7d20\u4e2a $p[0]$ \u4e00\u6837\uff0c\u90a3\u4e48\u5b83\u4eec\u6709\u53ef\u80fd\u90fd\u88ab\u5339\u914d\u5230\uff0c\u4e5f\u6709\u53ef\u80fd\u4e00\u4e2a\u90fd\u4e0d\u4f1a\u88ab\u5339\u914d\u4e0a\u3002 C++ \u5199\u6cd5\uff1a class Solution { public: bool isMatch(string s, string p) { if(p.empty())return s.empty(); if(p.size() == 1) { return(s.size() == 1 && (s[0] == p[0] || p[0] == '.')); } if(p[1] != '*') { if(s.empty())return false; return (s[0] == p[0] || p[0] == '.')&& isMatch(s.substr(1), p.substr(1)); } // \u8d70\u5230\u8fd9\u91cc p[1] == '*'\uff0c\u4e0b\u9762\u7684 4 \u884c\u4ee3\u8868\u6bd4\u8f83\u96be\u7406\u89e3 while(!s.empty() && (s[0] == p[0] || p[0] == '.')) { if(isMatch(s, p.substr(2))) return true; s = s.substr(1); } return isMatch(s, p.substr(2)); } }; \u8981\u6c42\uff1a\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5339\u914d\u5305\u62ec . \u548c * \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u6a21\u5f0f\u4e2d\u7684\u5b57\u7b26 . \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c * \u8868\u793a\u5b83\u524d\u9762\u7684\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff0c\u5305\u62ec $0$ \u6b21\u3002 LeetCode \u7b2c 10 \u9898\uff0c\u4f20\u9001\u95e8\uff1a 10. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \uff0c\u96be\u5ea6\u662f\uff1a \u56f0\u96be \u3002 \u4f7f\u7528\u52a8\u6001\u89c4\u5212\uff1a dp \u51fd\u6570\u8fd9\u4e48\u5199\u3002 \u601d\u8def\uff1a\u5f53\u5b57\u7b26\u4e32\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\u65f6\uff0c\u76f4\u63a5\u8fdb\u884c\u5224\u65ad\uff0c\u5426\u5219\u8fdb\u5165\u4e0b\u9762\u4e24\u79cd\u9012\u5f52\u3002 \u4e24\u79cd\u9012\u5f52\u60c5\u51b5\uff1a1\u3001\u5f53\u6a21\u5f0f\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e0d\u662f * \u65f6\uff1a \uff081\uff09\u5982\u679c\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548c\u6a21\u5f0f\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u76f8\u5339\u914d\u6216\u662f\u5b57\u7b26 . \u90a3\u4e48\u5b57\u7b26\u4e32\u548c\u6a21\u5f0f\u90fd\u540e\u79fb\u4e00\u4e2a\u5b57\u7b26\uff0c\u7136\u540e\u5339\u914d\u5269\u4f59 \u7684\uff1b \uff082\uff09\u5982\u679c\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548c\u6a21\u5f0f\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u76f8\u4e0d\u5339\u914d\uff0c\u76f4\u63a5\u8fd4\u56de false \u3002 2\u3001\u5f53\u6a21\u5f0f\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u662f * \u65f6\uff1a \u5982\u679c\u201c\u5b57\u7b26\u4e32\u201d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u8ddf\u201c\u6a21\u5f0f\u4e32\u201d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u5339\u914d\uff0c\u5219\u6a21\u5f0f\u540e\u79fb $2$ \u4e2a\u5b57\u7b26\uff0c\u7ee7\u7eed\u5339\u914d\uff1b \u5982\u679c\u201c\u5b57\u7b26\u4e32\u201d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u8ddf\u201c\u6a21\u5f0f\u4e32\u201d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5339\u914d\u6216\u662f\u5b57\u7b26 . \uff0c\u53ef\u4ee5\u6709 $3$ \u79cd\u5339\u914d\u65b9\u5f0f\uff1a \uff081\uff09\u6a21\u5f0f\u540e\u79fb $2$ \u5b57\u7b26\uff0c\u76f8\u5f53\u4e8e x \u88ab\u5ffd\u7565\uff1b \uff082\uff09\u5b57\u7b26\u4e32\u540e\u79fb $1$ \u5b57\u7b26\uff0c\u6a21\u5f0f\u540e\u79fb $2$ \u5b57\u7b26\uff1b \uff083\uff09\u5b57\u7b26\u4e32\u540e\u79fb $1$ \u5b57\u7b26\uff0c\u6a21\u5f0f\u4e0d\u53d8\uff0c\u5373\u7ee7\u7eed\u5339\u914d\u5b57\u7b26\u4e0b\u4e00\u4f4d\uff0c\u56e0\u4e3a\u53ef\u4ee5\u5339\u914d\u591a\u4f4d\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 19 \u9898\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d"},{"location":"20/","text":"\u5251\u6307 Offer 20. \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32 \u529b\u6263\uff1a \u5251\u6307 Offer 20. \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32 \uff1b \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u8868\u793a\u6570\u503c\uff08\u5305\u62ec\u6574\u6570\u548c\u5c0f\u6570\uff09\u3002 \u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 \"+100\" , \"5e2\" , \"-123\" , \"3.1416\" \u548c \"-1E-16\" \u90fd\u8868\u793a\u6570\u503c\u3002 \u4f46\u662f \"12e\" , \"1a3.14\" , \"1.2.3\" , \"+-5\" \u548c \"12e+4.3\" \u90fd\u4e0d\u662f\u3002 \u6ce8\u610f : \u5c0f\u6570\u53ef\u4ee5\u6ca1\u6709\u6574\u6570\u90e8\u5206\uff0c\u4f8b\u5982.123\u7b49\u4e8e0.123\uff1b \u5c0f\u6570\u70b9\u540e\u9762\u53ef\u4ee5\u6ca1\u6709\u6570\u5b57\uff0c\u4f8b\u5982233.\u7b49\u4e8e233.0\uff1b \u5c0f\u6570\u70b9\u524d\u9762\u548c\u540e\u9762\u53ef\u4ee5\u6709\u6570\u5b57\uff0c\u4f8b\u5982233.666; \u5f53e\u6216E\u524d\u9762\u6ca1\u6709\u6570\u5b57\u65f6\uff0c\u6574\u4e2a\u5b57\u7b26\u4e32\u4e0d\u80fd\u8868\u793a\u6570\u5b57\uff0c\u4f8b\u5982.e1\u3001e1\uff1b \u5f53e\u6216E\u540e\u9762\u6ca1\u6709\u6574\u6570\u65f6\uff0c\u6574\u4e2a\u5b57\u7b26\u4e32\u4e0d\u80fd\u8868\u793a\u6570\u5b57\uff0c\u4f8b\u598212e\u300112e+5.4; \u6837\u4f8b\uff1a \u8f93\u5165: \"0\" \u8f93\u51fa: true Python \u4ee3\u7801\uff1a class Solution(object): def isNumber(self, s): \"\"\" :type s: str :rtype: bool \"\"\" size = len(s) # 1\u3001\u53bb\u6389\u591a\u4f59\u7684\u7a7a\u683c i = 0 while i < size and s[i] == ' ': i += 1 j = size - 1 while j >= 0 and s[j] == ' ': j -= 1 if i > j: return False s = s[i:j - i + 1] # 2\u3001\u9996\u5b57\u6bcd\u53ef\u4ee5\u662f\u52a0\u53f7\u6216\u8005\u51cf\u53f7 if s[0] == '+' or s[0] == '-': s = s[1:] if len(s) == 0: return False # 3\u3001\u53ea\u6709 1 \u4e2a\u70b9\uff0c\u4e0d\u884c if len(s) == 1 and s[0] == '.': return False # 4\u3001\u4e0b\u9762\u5bf9\u70b9\u7684\u4e2a\u6570\u548c e \u7684\u4e2a\u6570\u5c55\u5f00\u8ba8\u8bba # \u70b9\u7684\u4e2a\u6570 dot_cnt = 0 # e \u7684\u4e2a\u6570 e_cnt = 0 size = len(s) i = -1 while i < size - 1: i += 1 if '0' <= s[i] <= '9': continue elif s[i] == '.': dot_cnt += 1 # \u5982\u679c\u6ca1\u6709 e\uff0c\u5e76\u4e14\u70b9\u7684\u6570\u91cf\u5927\u4e8e 1\uff0c\u4e0d\u7b26\u5408\u8981\u6c42 if e_cnt or dot_cnt > 1: return False elif s[i] == 'e' or s[i] == 'E': e_cnt += 1 if i == 0 or i == size - 1 or e_cnt > 1: return False # '.' \u540e\u9762\u4e0d\u80fd\u52a0\u4e0a if i == 1 and s[0] == '.': return False if s[i + 1] == '+' or s[i + 1] == '-': if i + 2 == size: return False i += 1 else: return False return True if __name__ == '__main__': solution = Solution() s = '123.45e+6' result = solution.isNumber(s) print(result) \u201c\u5927\u96ea\u83dc\u201d\u7684\u89e3\u6cd5\uff1ahttps://www.acwing.com/solution/acwing/content/737/\u3002 C++ \u4ee3\u7801\uff1a C++ \u4ee3\u7801\uff1a class Solution { public: bool isNumber(string s) { int i = 0; while (i < s.size() && s[i] == ' ') i ++ ; int j = s.size() - 1; while (j >= 0 && s[j] == ' ') j -- ; if (i > j) return false; s = s.substr(i, j - i + 1); if (s[0] == '-' || s[0] == '+') s = s.substr(1); if (s.empty() || s[0] == '.' && s.size() == 1) return false; int dot = 0, e = 0; for (int i = 0; i < s.size(); i ++ ) { if (s[i] >= '0' && s[i] <= '9'); else if (s[i] == '.') { dot ++ ; if (e || dot > 1) return false; } else if (s[i] == 'e' || s[i] == 'E') { e ++ ; if (i + 1 == s.size() || !i || e > 1 || i == 1 && s[0] == '.') return false; if (s[i + 1] == '+' || s[i + 1] == '-') { if (i + 2 == s.size()) return false; i ++ ; } } else return false; } return true; } }; \u4f5c\u8005\uff1ayxc \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/acwing/content/737/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 20. \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32"},{"location":"20/#offer-20","text":"\u529b\u6263\uff1a \u5251\u6307 Offer 20. \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32 \uff1b \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u8868\u793a\u6570\u503c\uff08\u5305\u62ec\u6574\u6570\u548c\u5c0f\u6570\uff09\u3002 \u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 \"+100\" , \"5e2\" , \"-123\" , \"3.1416\" \u548c \"-1E-16\" \u90fd\u8868\u793a\u6570\u503c\u3002 \u4f46\u662f \"12e\" , \"1a3.14\" , \"1.2.3\" , \"+-5\" \u548c \"12e+4.3\" \u90fd\u4e0d\u662f\u3002 \u6ce8\u610f : \u5c0f\u6570\u53ef\u4ee5\u6ca1\u6709\u6574\u6570\u90e8\u5206\uff0c\u4f8b\u5982.123\u7b49\u4e8e0.123\uff1b \u5c0f\u6570\u70b9\u540e\u9762\u53ef\u4ee5\u6ca1\u6709\u6570\u5b57\uff0c\u4f8b\u5982233.\u7b49\u4e8e233.0\uff1b \u5c0f\u6570\u70b9\u524d\u9762\u548c\u540e\u9762\u53ef\u4ee5\u6709\u6570\u5b57\uff0c\u4f8b\u5982233.666; \u5f53e\u6216E\u524d\u9762\u6ca1\u6709\u6570\u5b57\u65f6\uff0c\u6574\u4e2a\u5b57\u7b26\u4e32\u4e0d\u80fd\u8868\u793a\u6570\u5b57\uff0c\u4f8b\u5982.e1\u3001e1\uff1b \u5f53e\u6216E\u540e\u9762\u6ca1\u6709\u6574\u6570\u65f6\uff0c\u6574\u4e2a\u5b57\u7b26\u4e32\u4e0d\u80fd\u8868\u793a\u6570\u5b57\uff0c\u4f8b\u598212e\u300112e+5.4; \u6837\u4f8b\uff1a \u8f93\u5165: \"0\" \u8f93\u51fa: true Python \u4ee3\u7801\uff1a class Solution(object): def isNumber(self, s): \"\"\" :type s: str :rtype: bool \"\"\" size = len(s) # 1\u3001\u53bb\u6389\u591a\u4f59\u7684\u7a7a\u683c i = 0 while i < size and s[i] == ' ': i += 1 j = size - 1 while j >= 0 and s[j] == ' ': j -= 1 if i > j: return False s = s[i:j - i + 1] # 2\u3001\u9996\u5b57\u6bcd\u53ef\u4ee5\u662f\u52a0\u53f7\u6216\u8005\u51cf\u53f7 if s[0] == '+' or s[0] == '-': s = s[1:] if len(s) == 0: return False # 3\u3001\u53ea\u6709 1 \u4e2a\u70b9\uff0c\u4e0d\u884c if len(s) == 1 and s[0] == '.': return False # 4\u3001\u4e0b\u9762\u5bf9\u70b9\u7684\u4e2a\u6570\u548c e \u7684\u4e2a\u6570\u5c55\u5f00\u8ba8\u8bba # \u70b9\u7684\u4e2a\u6570 dot_cnt = 0 # e \u7684\u4e2a\u6570 e_cnt = 0 size = len(s) i = -1 while i < size - 1: i += 1 if '0' <= s[i] <= '9': continue elif s[i] == '.': dot_cnt += 1 # \u5982\u679c\u6ca1\u6709 e\uff0c\u5e76\u4e14\u70b9\u7684\u6570\u91cf\u5927\u4e8e 1\uff0c\u4e0d\u7b26\u5408\u8981\u6c42 if e_cnt or dot_cnt > 1: return False elif s[i] == 'e' or s[i] == 'E': e_cnt += 1 if i == 0 or i == size - 1 or e_cnt > 1: return False # '.' \u540e\u9762\u4e0d\u80fd\u52a0\u4e0a if i == 1 and s[0] == '.': return False if s[i + 1] == '+' or s[i + 1] == '-': if i + 2 == size: return False i += 1 else: return False return True if __name__ == '__main__': solution = Solution() s = '123.45e+6' result = solution.isNumber(s) print(result) \u201c\u5927\u96ea\u83dc\u201d\u7684\u89e3\u6cd5\uff1ahttps://www.acwing.com/solution/acwing/content/737/\u3002 C++ \u4ee3\u7801\uff1a C++ \u4ee3\u7801\uff1a class Solution { public: bool isNumber(string s) { int i = 0; while (i < s.size() && s[i] == ' ') i ++ ; int j = s.size() - 1; while (j >= 0 && s[j] == ' ') j -- ; if (i > j) return false; s = s.substr(i, j - i + 1); if (s[0] == '-' || s[0] == '+') s = s.substr(1); if (s.empty() || s[0] == '.' && s.size() == 1) return false; int dot = 0, e = 0; for (int i = 0; i < s.size(); i ++ ) { if (s[i] >= '0' && s[i] <= '9'); else if (s[i] == '.') { dot ++ ; if (e || dot > 1) return false; } else if (s[i] == 'e' || s[i] == 'E') { e ++ ; if (i + 1 == s.size() || !i || e > 1 || i == 1 && s[0] == '.') return false; if (s[i + 1] == '+' || s[i + 1] == '-') { if (i + 2 == s.size()) return false; i ++ ; } } else return false; } return true; } }; \u4f5c\u8005\uff1ayxc \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/acwing/content/737/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 20. \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32"},{"location":"21-30/","text":"\u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09 \u9898\u89e3\uff08Python \u8bed\u8a00\u5b9e\u73b0\uff09\u7b2c 21-30 \u9898 \u7b2c 21 \u9898\uff1a\u8c03\u6574\u6570\u7ec4\u4f7f\u5f97\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u4e4b\u524d \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u6574\u8be5\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\u3002 \u4f7f\u5f97\u6240\u6709\u7684\u5947\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u7684\u5076\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u540e\u534a\u90e8\u5206\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,3,4,5] \u8f93\u51fa\uff1a [1,3,5,2,4] \u5206\u6790\uff1a\u8fd9\u9053\u9898\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u5c31\u662f\uff1a\u4fdd\u6301\u539f\u6765\u7684\u987a\u5e8f\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 LeetCode \u7b2c 88 \u9898\u7684\u7b56\u7565\uff0c\u4ece\u540e\u5411\u524d\u91cd\u65b0\u4e3a\u6570\u7ec4\u8d4b\u503c\u3002 \u601d\u8def1\uff1a\u6709\u70b9\u7c7b\u4f3c\u201c\u4e24\u8def\u5feb\u6392\u201d\u7684\u601d\u8def\u3002\u201c\u4e24\u8def\u5feb\u6392\u201d\u4e2d\u6709\u4e00\u4e9b\u7ec6\u8282\u9700\u8981\u590d\u4e60\u4e00\u4e0b\u3002\u53cc\u6307\u9488\u626b\u63cf\uff1a\u7528\u4e24\u4e2a\u6307\u9488\u5206\u522b\u4ece\u9996\u5c3e\u5f00\u59cb\uff0c\u5f80\u4e2d\u95f4\u626b\u63cf\u3002\u626b\u63cf\u65f6\u4fdd\u8bc1 \u7b2c\u4e00\u4e2a\u6307\u9488\u524d\u9762\u7684\u6570\u90fd\u662f\u5947\u6570\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u540e\u9762\u7684\u6570\u90fd\u662f\u5076\u6570 \u3002\u6bcf\u6b21\u8fed\u4ee3\u65f6\u9700\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\uff1a 1\u3001\u7b2c\u4e00\u4e2a\u6307\u9488\u4e00\u76f4\u5f80\u540e\u8d70\uff0c\u76f4\u5230\u9047\u5230\u7b2c\u4e00\u4e2a\u5076\u6570\u4e3a\u6b62\uff1b 2\u3001\u7b2c\u4e8c\u4e2a\u6307\u9488\u4e00\u76f4\u5f80\u524d\u8d70\uff0c\u76f4\u5230\u9047\u5230\u7b2c\u4e00\u4e2a\u5947\u6570\u4e3a\u6b62\u3002 \u4ea4\u6362\u4e24\u4e2a\u6307\u9488\u6307\u5411\u7684\u4f4d\u7f6e\u4e0a\u7684\u6570\uff0c\u518d\u8fdb\u5165\u4e0b\u4e00\u5c42\u8fed\u4ee3\uff0c\u76f4\u5230\u4e24\u4e2a\u6307\u9488\u76f8\u9047\u4e3a\u6b62\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5f53\u4e24\u4e2a\u6307\u9488\u76f8\u9047\u65f6\uff0c\u8d70\u8fc7\u7684\u603b\u8def\u7a0b\u957f\u5ea6\u662f $n$\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n)$\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def reOrderArray(self, array): \"\"\" :type array: List[int] :rtype: void \"\"\" # \u7279\u5224 size = len(array) if size < 2: return l = 0 r = size - 1 # \u59cb\u7ec8\u4fdd\u6301 [0,l) \u662f\u5947\u6570 # (r,size-1] \u662f\u5076\u6570 while True: while l <= r and array[l] & 1 == 1: l += 1 # \u6b64\u65f6 l \u6765\u5230\u4e86\u7b2c\u4e00\u4e2a\u5076\u6570\u4f4d\u7f6e while r >= l and array[r] & 1 == 0: r -= 1 # \u6b64\u65f6 r \u6765\u5230\u4e86\u7b2c\u4e00\u4e2a\u5947\u6570\u7684\u4f4d\u7f6e # \u8fd9\u91cc\u4e00\u5b9a\u662f\u5927\u4e8e\u53f7\uff0c\u5426\u5219\u6570\u7ec4\u4e0b\u6807\u4f1a\u8d8a\u754c # \u4e00\u5b9a\u8981\u7279\u522b\u6ce8\u610f\uff0c\u5199 == \u53f7\u4f1a\u51fa\u9519\uff0c\u5199 >= \u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a == \u6210\u7acb\u7684\u65f6\u5019\uff0c\u4e0d\u7528\u4ea4\u6362 if l > r: break array[l], array[r] = array[r], array[l] l += 1 r -= 1 return array C++ \u4ee3\u7801\uff1a C++ \u4ee3\u7801\uff1a class Solution { public: void reOrderArray(vector<int> &array) { int l = 0, r = array.size() - 1; while (l <= r) { while (array[l] % 2 == 1) l ++ ; while (array[r] % 2 == 0) r -- ; if (l < r) swap(array[l], array[r]); } } }; \u601d\u8def2\uff1a\u628a\u5947\u6570\u6570\u7ec4\u590d\u5236\u51fa\u6765\uff0c\u6309\u7167\u4ece\u540e\u5411\u524d\u5f52\u5e76\u6392\u5e8f\u7684\u505a\u6cd5\u5b8c\u6210\u3002 Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { // \u4fdd\u8bc1\u5947\u6570\u548c\u5947\u6570\uff0c\u5076\u6570\u548c\u5076\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002 public void reOrderArray(int[] array) { int len = array.length; if (len == 0) { return; } // \u5947\u6570\u5168\u90e8\u632a\u5230\u7f13\u5b58\u6570\u7ec4\u4e2d int[] buff = new int[len]; int j = -1; for (int i = 0; i < len; i++) { if (array[i] % 2 == 1) { j++; buff[j] = array[i]; } } // \u5982\u679c\u90fd\u6ca1\u6709\u5947\u6570\u7684\u8bdd\uff0c\u7a0b\u5e8f\u7ec8\u6b62 if (j == -1) { return; } // \u628a\u5076\u6570\u96c6\u4e2d\u201c\u6324\u201d\u5230\u6570\u7ec4\u7684\u672b\u5c3e // \u7136\u540e\u518d\u628a\u7f13\u5b58\u6570\u7ec4\u4e2d\u7684\u5947\u6570\u5012\u5e8f\u653e\u5165 int k = len - 1; for (int i = len - 1; i >= 0; i--) { if (array[i] % 2 == 0) { array[k] = array[i]; k--; } } while (j >= 0) { array[j] = buff[j]; j--; } } public static void main(String[] args) { int[] arr = {1, 2, 3, 4, 5}; Solution solution = new Solution(); solution.reOrderArray(arr); System.out.println(Arrays.toString(arr)); } } Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { // \u4fdd\u8bc1\u5947\u6570\u548c\u5947\u6570\uff0c\u5076\u6570\u548c\u5076\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002 public void reOrderArray(int[] array) { int len = array.length; if (len == 0) { return; } // \u5947\u6570\u5168\u90e8\u632a\u5230\u7f13\u5b58\u6570\u7ec4\u4e2d int[] buff = new int[len]; int j = -1; for (int i = 0; i < len; i++) { if (array[i] % 2 == 1) { j++; buff[j] = array[i]; } } // \u5982\u679c\u6ca1\u6709\u5947\u6570\uff0c\u76f4\u63a5\u8fd4\u56de\u5c31\u53ef\u4ee5\u4e86 if (j == -1) { return; } // \u4ece\u540e\u5411\u524d\u8d4b\u503c int k = len - 1; for (int i = len - 1; i >= 0; i--) { if (array[i] % 2 == 0) { array[k] = array[i]; k--; } } while (j >= 0) { array[j] = buff[j]; j--; } } } \u6269\u5c55\uff1a\u4e66\u672c\u4e0a\u6709\u8fd9\u4e2a\u95ee\u9898\u66f4\u4e00\u822c\u7684\u505a\u6cd5\u3002 \u7b2c 22 \u9898\uff1a\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u7ed3\u70b9 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u8282\u70b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u7ed3\u70b9\u3002 \u6ce8\u610f\uff1a k >= 0 ; \u5982\u679c k \u5927\u4e8e\u94fe\u8868\u957f\u5ea6\uff0c\u5219\u8fd4\u56de NULL; \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\u94fe\u8868\uff1a 1->2->3->4->5 \uff0c k=2 \u8f93\u51fa\uff1a4 \u5206\u6790\uff1a\u8bbe\u7f6e\u5feb\u6162\u6307\u9488\uff0c\u601d\u8def\u5f88\u7b80\u5355\uff0c\u4e0d\u8fc7\u5728\u5177\u4f53\u7f16\u7801\u7684\u65f6\u5019\uff0c\u8fd8\u662f\u6709\u4e00\u4e9b\u7ec6\u8282\u8981\u6ce8\u610f\u7684\uff0c\u7279\u522b\u662f\u7a7a\u6307\u9488\u7684\u5224\u65ad\u4e0a\u3002 \u56e0\u4e3a\u7b2c k \u4e2a\u7ed3\u70b9\u5f88\u53ef\u80fd\u662f\u94fe\u8868\u7684\u7b2c 1 \u4e2a\u7ed3\u70b9\uff0c\u56e0\u6b64\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\uff0c\u662f\u8fd9\u4e00\u5217\u95ee\u9898\u7684\u57fa\u672c\u505a\u6cd5\uff0c\u53ef\u4ee5\u51cf\u5c11\u5206\u7c7b\u8ba8\u8bba\u7684\u60c5\u51b5\u3002 \u5bf9\u4e00\u4e9b\u6781\u7aef\u60c5\u51b5\u7684\u8ba8\u8bba\uff08\u4e0b\u9762\u4ee3\u7801\u4e2d\u7684\u6ce8\u610f\u70b9 2 \uff09\u3002 \u601d\u8def1\uff1a\u5148\u904d\u5386\u5b8c\uff0c\u6570\u51fa\u94fe\u8868\u6709\u591a\u5c11\u4e2a\u7ed3\u70b9\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def findKthToTail(self, pListHead, k): \"\"\" :type pListHead: ListNode :type k: int :rtype: ListNode \"\"\" if pListHead is None: return None counter = 0 p = pListHead while p: counter += 1 p = p.next if k > counter: return None p = pListHead for _ in range(counter - k): p = p.next return p \u601d\u8def2\uff1a\u63a8\u8350\uff0c\u8bbe\u7f6e\u5feb\u6162\u6307\u9488\uff0c\u5feb\u6307\u9488\u5148\u8d70 $k-1$ \u6b65\uff0c\u7136\u540e\u5feb\u6162\u6307\u9488\u4e00\u8d77\u8d70\u3002 C++ \u4ee3\u7801\uff1a Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def findKthToTail(self, pListHead, k): \"\"\" :type pListHead: ListNode :type k: int :rtype: ListNode \"\"\" if pListHead is None: return None fast = pListHead # \u8981\u6ce8\u610f\u7684\u4e34\u754c\u70b91\uff1a for _ in range(k - 1): fast = fast.next # \u6ce8\u610f\u5224\u65ad if fast is None: return None slow = pListHead # \u8981\u6ce8\u610f\u7684\u4e34\u754c\u70b92\uff1a while fast.next: slow = slow.next fast = fast.next return slow Java \u4ee3\u7801\uff1a class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } } public class Solution { public ListNode FindKthToTail(ListNode head, int k) { // \u6ce8\u610f\u70b91\uff1a\u6781\u7aef\u8f93\u5165\uff0c\u76f4\u63a5\u8f93\u51fa\u7ed3\u679c if (head == null) { return null; } ListNode dummyNode = new ListNode(-1); dummyNode.next = head; ListNode fast = dummyNode; for (int i = 0; i < k; i++) { fast = fast.next; // \u6ce8\u610f\u70b92\uff1a\u5bf9\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u8f93\u5165\u7684\u5224\u65ad if (fast == null) { return null; } } ListNode slow = dummyNode; while (fast != null) { fast = fast.next; slow = slow.next; } return slow; } } \u7b2c 23 \u9898\uff1a\u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u82e5\u5176\u4e2d\u5305\u542b\u73af\uff0c\u5219\u8f93\u51fa\u73af\u7684\u5165\u53e3\u8282\u70b9\u3002 \u82e5\u5176\u4e2d\u4e0d\u5305\u542b\u73af\uff0c\u5219\u8f93\u51fa null \u3002 \u6837\u4f8b\uff1a \u7ed9\u5b9a\u5982\u4e0a\u6240\u793a\u7684\u94fe\u8868\uff1a [1, 2, 3, 4, 5, 6] \uff0c\u7f16\u53f7\uff1a2\u3002 \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684 2 \u8868\u793a\u7f16\u53f7\u662f 2 \u7684\u8282\u70b9\uff0c\u8282\u70b9\u7f16\u53f7\u4ece 0 \u5f00\u59cb\u3002\u6240\u4ee5\u7f16\u53f7\u662f 2 \u7684\u8282\u70b9\u5c31\u662f val \u7b49\u4e8e 3 \u7684\u8282\u70b9\u3002 \u5219\u8f93\u51fa\u73af\u7684\u5165\u53e3\u8282\u70b9 3 \u3002 \u5206\u6790\uff1a\u770b\u7684\u7b54\u6848\uff0c\u8bb0\u4f4f\u7ed3\u8bba\u5c31\u597d\uff0c\u7f16\u7801\u4e0a\u8fd8\u662f\u8981\u6ce8\u610f\u7279\u5224\u7684\u60c5\u51b5\uff0c\u8fd8\u6709\u7a7a\u6307\u9488\u7684\u60c5\u51b5\u3002\u201c\u6162\u201d\u6307\u9488\u8fdb\u5165\u73af\u7684\u65f6\u5019\uff0c\u201c\u5feb\u6307\u9488\u201d\u8981\u6765\u8ffd\u5b83\uff0c\u56e0\u4e3a\u5feb\u6162\u6307\u9488\u8d70\u7684\u6b65\u6570\u5dee\u662f\u56fa\u5b9a\u7684\u3002\u4f8b\u5982\uff1a A \u624b\u4e0a\u6709 100 \u5757\u94b1\uff0cA \u6bcf\u5929\u8d5a 10 \u5757\u94b1\uff0cB \u624b\u4e0a\u6709 50 \u5757\u94b1\uff0cB \u6bcf\u5929\u8d5a 20\uff0c\u4e00\u5b9a\u6709\u4e00\u5929\uff0c\u4f60\u4eec\u7684\u94b1\u76f8\u7b49\uff0c\u800c\u4e14\u53ea\u8981\u73af\u5185\u7ed3\u70b9\u4e2a\u6570\u8fd9\u4e48\u591a\u5c31\u53ef\u4ee5\u4e86\u3002 \u6211\u5199\u7684\u9519\u8bef\u89e3\uff1a Python \u4ee3\u7801\uff1a # 34. \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9 # \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u82e5\u5176\u4e2d\u5305\u542b\u73af\uff0c\u5219\u8f93\u51fa\u73af\u7684\u5165\u53e3\u8282\u70b9\u3002 # # \u82e5\u5176\u4e2d\u4e0d\u5305\u542b\u73af\uff0c\u5219\u8f93\u51fanull\u3002 # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution(object): def entryNodeOfLoop(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" # \u5148\u8003\u8651\u8fb9\u754c\u60c5\u51b5 if head is None or head.next is None: return None slow = head fast = head while fast and fast.next: # \u6162\u6307\u9488\u8d70\u4e00\u6b65\uff0c\u5feb\u6307\u9488\u8d70\u4e24\u6b65 slow = slow.next fast = fast.next.next if slow == fast: # \u8bf4\u660e\u94fe\u8868\u4e2d\u5b58\u5728\u73af break # \u6ce8\u610f\uff1a\u8df3\u51fa\u5faa\u73af\u7684\u539f\u56e0\u6709\u4e24\u4e2a\uff0c\u6709\u53ef\u80fd\u662f\u6839\u672c\u6ca1\u6709\u73af\uff0c\u5373\u4e0a\u9762 while fast and fast.next \u4e0d\u6210\u7acb # \u4e5f\u6709\u53ef\u80fd\u662f slow == fast \u91cc break \u7684\uff0c\u5206\u522b\u8ba8\u8bba\u5c31\u53ef\u4ee5\u4e86 if fast is None or fast.next is None: return None slow = head while slow != fast: slow = slow.next fast = fast.next # \u8d70\u5230\u8fd9\u91cc\uff0c\u8bf4\u660e slow == fast return slow \u7b2c 24 \u9898\uff1a\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u53cd\u8f6c\u94fe\u8868\u540e\uff0c\u8f93\u51fa\u94fe\u8868\u7684\u6240\u6709\u5143\u7d20 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u53cd\u8f6c\u94fe\u8868 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u53cd\u8f6c\u8be5\u94fe\u8868\u5e76\u8f93\u51fa\u53cd\u8f6c\u540e\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a 1->2->3->4->5->NULL \u8f93\u51fa\uff1a 5->4->3->2->1->NULL \u5206\u6790\uff1a\u8fd9\u9053\u9898\u540c LeetCode \u4e0a\u4e00\u9053\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u6c42\u89e3\u3002\u4e2a\u4eba\u89c9\u5f97\u9012\u5f52\u7684\u65b9\u5f0f\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u662f\u5728\u94fe\u8868\u8f83\u957f\u7684\u65f6\u5019\uff0c\u9012\u5f52\u6548\u7387\u504f\u4f4e\uff0c\u56e0\u4e3a\u8981\u4f7f\u7528\u7cfb\u7edf\u6808\u3002 \u601d\u8def1\uff1a\u9012\u5f52\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None # \u9012\u5f52\u5199\u6cd5\uff1a\u7528\u9012\u5f52\u5c31\u4e0d\u7528\u601d\u8003\u7a7f\u9488\u5f15\u7ebf\u8fd9\u79cd\u4e8b\u60c5\u4e86\u3002 class Solution: def reverseList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" # \u9012\u5f52\u7684\u7ec8\u6b62\u6761\u4ef6\u4e00\u5b9a\u8981\u5199\u5bf9\uff1a\u8003\u8651\u7ed3\u70b9\u4e3a\u7a7a\u548c\u5355\u7ed3\u70b9\u7684\u60c5\u51b5 if head is None or head.next is None: return head next = head.next new_head = self.reverseList(next) next.next = head head.next = None return new_head Java \u4ee3\u7801\uff1a class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } } public class Solution { // \u9012\u5f52\u5199\u6cd5\u8981\u753b\u4e2a\u56fe\u5c31\u6e05\u695a\u4e86 public ListNode ReverseList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode next = head.next; ListNode newHead = ReverseList(next); next.next = head; head.next = null; return newHead; } } \u601d\u8def2\uff1a\u975e\u9012\u5f52\u5199\u6cd5\uff0c\u7a7f\u9488\u5f15\u7ebf\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None # \u7a7f\u9488\u5f15\u7ebf\uff0c\u53ef\u4ee5\u770b\u5230 while \u5faa\u73af\u4f53\u90e8\u5206\u7684\u4ee3\u7801\u662f\u9996\u5c3e\u76f8\u8fde\u7684\uff0c\u6709\u4e9b\u5355\u94fe\u8868\u7684\u9898\u76ee\u4e5f\u6709\u8fd9\u79cd\u89c4\u5f8b\uff0c\u611f\u89c9\u5f88\u795e\u5947 # \u5728 Python \u4e2d\uff0c\u5176\u5b9e\u8fd8\u6709\u66f4\u7b80\u4fbf\u7684\u5199\u6cd5\uff0c\u5c31\u8ddf\u6590\u6ce2\u62c9\u5951\u6570\u5217\u4e00\u6837 class Solution: def reverseList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" pre = None cur = head while cur: next = cur.next cur.next = pre pre = cur cur = next return pre \u7b2c 25 \u9898\uff1a\u5408\u5e76\u6392\u5e8f\u7684\u94fe\u8868 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e24\u4e2a\u5355\u8c03\u9012\u589e\u7684\u94fe\u8868\uff0c\u8f93\u51fa\u4e24\u4e2a\u94fe\u8868\u5408\u6210\u540e\u7684\u94fe\u8868\uff0c\u5f53\u7136\u6211\u4eec\u9700\u8981\u5408\u6210\u540e\u7684\u94fe\u8868\u6ee1\u8db3\u5355\u8c03\u4e0d\u51cf\u89c4\u5219\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a 1->3->5 , 2->4->5 \u8f93\u51fa\uff1a 1->2->3->4->5->5 \u5206\u6790\uff1a\u540c LeetCode \u7b2c 21 \u9898\uff0c\u4f20\u9001\u95e8\uff1a 21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 \u3002\u8fd9\u662f\u4e00\u9053\u7ecf\u5178\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u6c42\u89e3\uff0c\u4e2a\u4eba\u89c9\u5f97\u9012\u5f52\u7684\u4ee3\u7801\u6bd4\u8f83\u7b80\u6d01\u6613\u61c2\u3002\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u5219\u8981\u753b\u56fe\u3002 \u601d\u8def1\uff1a \u4f7f\u7528\u9012\u5f52\uff0c\u7f16\u7801\u7b80\u5355\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def merge(self, l1, l2): \"\"\" :type l1: ListNode :type l2: ListNode :rtype: ListNode \"\"\" if l1 is None: return l2 if l2 is None: return l1 # \u4ee3\u7801\u80fd\u8d70\u5230\u8fd9\u91cc\u8bf4\u660e l1 \u548c l2 \u5747\u975e\u7a7a # \u6bd4\u8f83\u54ea\u4e2a\u5c0f\u5c31\u884c\u4e86 if l1.val < l2.val: l1.next = self.merge(l1.next, l2) return l1 # \u8d70\u5230\u8fd9\u91cc l1.val >= l2.val l2.next = self.merge(l1, l2.next) return l2 Java \u4ee3\u7801\uff1a class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } } public class Solution { public ListNode Merge(ListNode list1, ListNode list2) { if (list1 == null) { return list2; } if (list2 == null) { return list1; } if (list1.val < list2.val) { list1.next = Merge(list1.next, list2); return list1; } else { list2.next = Merge(list1, list2.next); return list2; } } } \u601d\u8def2\uff1a\u7a7f\u9488\u5f15\u7ebf\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None # \u7a7f\u9488\u5f15\u7ebf\u7684\u5199\u6cd5\uff0c\u4e00\u5b9a\u8981\u753b\u56fe\u624d\u80fd\u5199\u51fa\u6765 # \u6bd4\u8f83\u9ebb\u70e6\uff0c\u8fd8\u662f\u9012\u5f52\u5904\u7406\u7b80\u5355 class Solution(object): def merge(self, l1, l2): \"\"\" :type l1: ListNode :type l2: ListNode :rtype: ListNode \"\"\" # \u5f15\u5165\u5934\u7ed3\u70b9\u53ef\u4ee5\u7b80\u5316\u5bf9\u95ee\u9898\u7684\u8ba8\u8bba dummy_node = ListNode(-1) cur_node = dummy_node p1 = l1 p2 = l2 while p1 and p2: # \u4e24\u8005\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u624d\u987b\u8981\u6bd4\u8f83 # \u5176\u4e2d\u6709\u4e00\u4e2a\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u628a\u5176\u4e2d\u4e00\u4e2a\u63a5\u5230\u53e6\u4e00\u4e2a\u5c3e\u5df4\u5c31\u597d\u4e86 if p1.val < p2.val: # next \u6307\u9488\u4fee\u6539 cur_node.next = p1 # p1 \u540e\u79fb p1 = p1.next else: cur_node.next = p2 p2 = p2.next cur_node = cur_node.next # \u8df3\u51fa\u5faa\u73af\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u6709\uff1ap1 \u4e3a\u7a7a\u6216\u8005 p2 \u4e3a\u7a7a # \u5176\u4e2d\u6709\u4e00\u4e2a\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u628a\u5176\u4e2d\u4e00\u4e2a\u63a5\u5230\u53e6\u4e00\u4e2a\u5c3e\u5df4\u5c31\u597d\u4e86 if p1 is None: # \u8fd9\u4e00\u53e5\u5199\u6210 if not p1 \u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4e0d\u8fc7\u4e0d\u597d\u7406\u89e3 cur_node.next = p2 if not p2: cur_node.next = p1 return dummy_node.next \u7b2c 26 \u9898\uff1a\u8f93\u5165\u4e24\u68f5\u4e8c\u53c9\u6811 A \u548c B\uff0c\u5224\u65ad B \u662f\u4e0d\u662f A \u7684\u5b50\u7ed3\u6784 \u4f20\u9001\u95e8\uff1a \u6811\u7684\u5b50\u7ed3\u6784 \u3002 \u8f93\u5165\u4e24\u68f5\u4e8c\u53c9\u6811A\uff0cB\uff0c\u5224\u65adB\u662f\u4e0d\u662fA\u7684\u5b50\u7ed3\u6784\u3002 \u6211\u4eec\u89c4\u5b9a\u7a7a\u6811\u4e0d\u662f\u4efb\u4f55\u6811\u7684\u5b50\u7ed3\u6784\u3002 \u6837\u4f8b\uff1a \u6811 A \uff1a 8 / \\ 8 7 / \\ 9 2 / \\ 4 7 \u6811 B \uff1a 8 / \\ 9 2 \u8fd4\u56de true \uff0c\u56e0\u4e3a B \u662f A \u7684\u5b50\u7ed3\u6784\u3002 \u601d\u8def\uff1a\u5178\u578b\u4f7f\u7528\u9012\u5f52\u89e3\u51b3\u7684\u95ee\u9898\u3002 Python \u4ee3\u7801\uff1a\u5728\u7406\u89e3\u7684\u57fa\u7840\u4e0a\uff0c\u8bb0\u4f4f\u8fd9\u4e2a\u9898\u7684\u89e3\u6cd5 class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None class Solution: def HasSubtree(self, pRoot1, pRoot2): # pRoot1 \u662f\u5927\u6811 # pRoot2 \u662f\u5c0f\u6811 result = False if pRoot1 and pRoot2: # \u7b2c 1 \u6b65\uff1a\u5728\u6811 A \u4e2d\u67e5\u627e\u4e0e\u6839\u7ed3\u70b9\u7684\u503c\u4e00\u6837\u7684\u7ed3\u70b9 # \u8fd9\u91cc\u6392\u9664\u4e86 pRoot2 \u662f\u7a7a\u6811\u7684\u60c5\u51b5 if pRoot1.val == pRoot2.val: # \u5224\u65ad\u6811 1 \u662f\u4e0d\u662f\u5305\u542b\u6811 2 result = self.__doesTree1HaveTree2(pRoot1, pRoot2) if not result: # \u5982\u679c\u6811 1 \u4e0d\u5305\u542b\u6811 2 return self.HasSubtree(pRoot1.left, pRoot2) or self.HasSubtree(pRoot1.right, pRoot2) return result def __doesTree1HaveTree2(self, pRoot1, pRoot2): if pRoot2 is None: return True if pRoot1 is None: return False if pRoot1.val != pRoot2.val: return False # \u8d70\u5230\u8fd9\u91cc\u8bf4\u660e assert pRoot1.val == pRoot2.val \u4e3a True return self.__doesTree1HaveTree2(pRoot1.left, pRoot2.left) and self.__doesTree1HaveTree2(pRoot1.right, pRoot2.right) \u7b2c 27 \u9898\uff1a\u64cd\u4f5c\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\uff0c\u5c06\u5176\u53d8\u6362\u4e3a\u6e90\u4e8c\u53c9\u6811\u7684\u955c\u50cf \u4f20\u9001\u95e8\uff1a \u4e8c\u53c9\u6811\u7684\u955c\u50cf \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5c06\u5b83\u53d8\u6362\u4e3a\u5b83\u7684\u955c\u50cf\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\u6811\uff1a 8 / \\ 6 10 / \\ / \\ 5 7 9 11 [8,6,10,5,7,9,11,null,null,null,null,null,null,null,null] \u8f93\u51fa\u6811\uff1a 8 / \\ 10 6 / \\ / \\ 11 9 7 5 [8,10,6,11,9,7,5,null,null,null,null,null,null,null,null] \u5206\u6790\uff1a\u8fd9\u9053\u9898\u7684\u89e3\u51b3\u5b9e\u9645\u4e0a\u8003\u5bdf\u4e86\u4e8c\u53c9\u6811\u7684\u904d\u5386\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u524d\u5e8f\u904d\u5386\u3001\u540e\u5e8f\u904d\u5386\u3001\u5c42\u5e8f\u904d\u5386\u90fd\u662f\u53ef\u4ee5\u5b8c\u6210\u9898\u76ee\u8981\u6c42\u7684\u3002 \u601d\u8def1\uff1a\u9012\u5f52\u65b9\u5f0f\uff1a\u524d\u5e8f\u904d\u5386\u6216\u8005\u540e\u5e8f\u904d\u5386\u90fd\u884c\u3002 Python \u4ee3\u7801\uff1a\u524d\u5e8f\u904d\u5386 # Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution(object): def mirror(self, root): \"\"\" :type root: TreeNode :rtype: void \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if root is None: return root # \u6309\u7167\u524d\u5e8f\u904d\u5386\u7684\u65b9\u5f0f root.left, root.right = root.right, root.left self.mirror(root.left) self.mirror(root.right) Java \u4ee3\u7801\uff1a class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { // \u524d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u90fd\u662f\u53ef\u4ee5\u7684 public void Mirror(TreeNode root) { if (root == null) { return; } TreeNode temp = root.left; root.left = root.right; root.right = temp; Mirror(root.left); Mirror(root.right); } public void Mirror1(TreeNode root) { if (root == null) { return; } Mirror(root.left); Mirror(root.right); TreeNode temp = root.left; root.left = root.right; root.right = temp; } } Python \u4ee3\u7801\uff1a\u540e\u5e8f\u904d\u5386 # Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution(object): def mirror(self, root): \"\"\" :type root: TreeNode :rtype: void \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if root is None: return root # \u6309\u7167\u540e\u5e8f\u904d\u5386\u7684\u65b9\u5f0f self.mirror(root.left) self.mirror(root.right) root.left, root.right = root.right, root.left Python \u4ee3\u7801\uff1a\u5c42\u5e8f\u904d\u5386 class Solution(object): def mirror(self, root): \"\"\" :type root: TreeNode :rtype: void \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if root is None: return root queue = [root] while queue: top = queue.pop(0) top.left, top.right = top.right, top.left if top.left: queue.append(top.left) if top.right: queue.append(top.right) return root \u601d\u8def2\uff1a\u975e\u9012\u5f52\u65b9\u5f0f\uff08\u6ca1\u6709\u770b\u51fa\u6765\u662f\u90a3\u79cd\u9012\u5f52\u65b9\u5f0f\uff09\u3002 Java \u4ee3\u7801\uff1a class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { // \u524d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u90fd\u662f\u53ef\u4ee5\u7684 public void Mirror(TreeNode root) { if (root == null) { return; } TreeNode temp = root.left; root.left = root.right; root.right = temp; Mirror(root.left); Mirror(root.right); } public void Mirror1(TreeNode root) { if (root == null) { return; } Mirror(root.left); Mirror(root.right); TreeNode temp = root.left; root.left = root.right; root.right = temp; } } \u975e\u9012\u5f52\u65b9\u5f0f\uff1a\u4e0b\u9762\u8fd9\u4e2a\u4ee3\u7801\u6709\u70b9\u610f\u601d\u3002 Python \u4ee3\u7801\uff1a class Solution: def Mirror(self, root): if root is None: return stack = [] while root or stack: while root: root.left, root.right = root.right, root.left stack.append(root) root = root.left if stack: root = stack.pop() root = root.right \u7b2c 28 \u9898\uff1a\u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 \u4f20\u9001\u95e8\uff1a \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u4e00\u68f5\u4e8c\u53c9\u6811\u662f\u4e0d\u662f\u5bf9\u79f0\u7684\u3002 \u5982\u679c\u4e00\u68f5\u4e8c\u53c9\u6811\u548c\u5b83\u7684\u955c\u50cf\u4e00\u6837\uff0c\u90a3\u4e48\u5b83\u662f\u5bf9\u79f0\u7684\u3002 \u6837\u4f8b\uff1a \u5982\u4e0b\u56fe\u6240\u793a\u4e8c\u53c9\u6811 [1,2,2,3,4,4,3,null,null,null,null,null,null,null,null] \u4e3a\u5bf9\u79f0\u4e8c\u53c9\u6811\uff1a 1 / \\ 2 2 / \\ / \\ 3 4 4 3 \u5982\u4e0b\u56fe\u6240\u793a\u4e8c\u53c9\u6811 [1,2,2,null,4,4,3,null,null,null,null,null,null] \u4e0d\u662f\u5bf9\u79f0\u4e8c\u53c9\u6811\uff1a 1 / \\ 2 2 \\ / \\ 4 4 3 \u5206\u6790\uff1aLeetCode \u4e0a\u6709\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u4f7f\u7528\u53cc\u7aef\u961f\u5217\u53ef\u4ee5\u5b8c\u6210\uff0c\u753b\u56fe\u753b\u5230\u7b2c 4 \u5c42\u5c31\u975e\u5e38\u6e05\u6670\u4e86\u3002 \u540c LeetCode \u7b2c 101 \u9898\u3002 \u89e3\u6cd51\uff1a\u9012\u5f52\u5199\u6cd5\u3002 Java \u4ee3\u7801\uff1a class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { boolean isSymmetrical(TreeNode pRoot) { if (pRoot == null) { return true; } return helper(pRoot.left, pRoot.right); } private boolean helper(TreeNode pRoot1, TreeNode pRoot2) { if (pRoot1 == null && pRoot2 == null) { return true; } if (pRoot1 == null || pRoot2 == null || pRoot1.val != pRoot2.val) { return false; } return helper(pRoot1.left, pRoot2.right) && helper(pRoot1.right, pRoot2.left); } } Python \u4ee3\u7801\uff1a # Definition for a binary tree node. class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None # \u9012\u5f52\u5199\u6cd5\uff1a\u5f97\u5f15\u5165\u8f85\u52a9\u51fd\u6570 class Solution(object): def isSymmetric(self, root): \"\"\" :type root: TreeNode :rtype: bool \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if root is None: return True return self.__helper(root.left, root.right) def __helper(self, p1, p2): if p1 is None and p2 is None: return True if p1 is None or p2 is None: return False return p1.val == p2.val and self.__helper(p1.left, p2.right) and self.__helper(p1.right, p2.left) \u89e3\u6cd52\uff1a\u975e\u9012\u5f52\u5199\u6cd5\uff0c\u501f\u52a9\u53cc\u7aef\u961f\u5217\u8f85\u52a9\u5224\u65ad\u3002\u81ea\u5df1\u753b\u4e00\u4e2a\u56fe\uff0c\u5c31\u597d\u7406\u89e3\u4e86\u3002 Python \u4ee3\u7801\uff1a # Definition for a binary tree node. class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None # \u975e\u9012\u5f52\u5199\u6cd5\uff1a\u501f\u52a9\u53cc\u7aef\u961f\u5217\u8f85\u52a9\u5224\u65ad class Solution(object): def isSymmetric(self, root): \"\"\" :type root: TreeNode :rtype: bool \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if root is None: return True # \u5176\u5b9e\u5e94\u8be5\u7528 from collections import deque deque = [] deque.insert(0, root.left) deque.append(root.right) while deque: l_node = deque.pop(0) r_node = deque.pop() # \u8fd9\u4e00\u6b65\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u4e86 if l_node is None and r_node is None: continue if l_node is None or r_node is None: return False # \u4ee3\u7801\u8d70\u5230\u8fd9\u91cc\u4e00\u5b9a\u6709 l_node \u548c r_node \u975e\u7a7a # \u56e0\u6b64\u53ef\u4ee5\u53d6\u51fa val \u8fdb\u884c\u5224\u65ad\u4e86 if l_node.val != r_node.val: return False deque.insert(0, l_node.right) deque.insert(0, l_node.left) deque.append(r_node.left) deque.append(r_node.right) return True \u201c\u5927\u96ea\u83dc\u201d\u7684\u5199\u6cd5\uff1a\u7528\u6808\u6a21\u62df\u9012\u5f52\uff0c\u5bf9\u6839\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\uff0c\u6211\u4eec\u7528\u4e2d\u5e8f\u904d\u5386\uff1b\u5bf9\u6839\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\uff0c\u6211\u4eec\u7528\u53cd\u4e2d\u5e8f\u904d\u5386\u3002 \u5219\u4e24\u4e2a\u5b50\u6811\u4e92\u4e3a\u955c\u50cf\uff0c\u5f53\u4e14\u4ec5\u5f53\u540c\u65f6\u904d\u5386\u4e24\u68f5\u5b50\u6811\u65f6\uff0c\u5bf9\u5e94\u7ed3\u70b9\u7684\u503c\u76f8\u7b49\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6811\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u4ec5\u88ab\u904d\u5386\u4e00\u904d\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n)$\u3002 C++ \u4ee3\u7801\uff1a /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public: bool isSymmetric(TreeNode* root) { if (!root) return true; stack<TreeNode*> left, right; TreeNode *lc = root->left; TreeNode *rc = root->right; while(lc || rc || left.size()) { while (lc && rc) { left.push(lc), right.push(rc); lc = lc->left, rc = rc->right; } if (lc || rc) return false; lc = left.top(), rc = right.top(); left.pop(), right.pop(); if (lc->val != rc->val) return false; // \u8fd9\u91cc\u53cd\u8fc7\u6765\u64cd\u4f5c lc = lc->right, rc = rc->left; } return true; } }; \u4f5c\u8005\uff1ayxc \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/AcWing/content/747/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u7b2c 29 \u9898\uff1a\u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 \u4f20\u9001\u95e8\uff1a \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u77e9\u9635\uff0c\u6309\u7167\u4ece\u5916\u5411\u91cc\u4ee5\u987a\u65f6\u9488\u7684\u987a\u5e8f\u4f9d\u6b21\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u6570\u5b57\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [ [1, 2, 3, 4], [5, 6, 7, 8], [9,10,11,12] ] \u8f93\u51fa\uff1a [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7] \u5206\u6790\uff1a + \u8fd9\u9053\u9898\uff0c\u4e66\u672c\u4e0a\u7684\u89e3\u6cd5\u6211\u4e2a\u4eba\u89c9\u5f97\u8fd8\u4e0d\u591f\u76f4\u89c2\u3001\u7b80\u6d01\uff0c\u8981\u8003\u8651\u5230\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u3002 + \u501f\u7528\u4e4b\u524d\u505a\u9898\u4e2d\uff0c\u4f7f\u7528\u72b6\u6001\u4ee5\u53ca\u72b6\u6001\u8f6c\u79fb\u7684\u7b56\u7565\uff0c\u4e0d\u96be\u753b\u51fa\u56fe\u5f62\u5982\u4e0b\u3002 \u4e0b\u9762\u662f\u5bf9\u8fd9\u5f20\u56fe\u7684\u89e3\u91ca\uff0c\u6211\u4eec\u53ea\u89e3\u91ca\u4e86\u4e00\u4e2a\u72b6\u6001\u6267\u884c\u7684\u4ee3\u7801\uff0c\u5176\u5b83\u72b6\u6001\u53ef\u4ee5\u540c\u6837\u5206\u6790\u5f97\u51fa\u3002 \u5728\u521d\u59cb\u72b6\u6001\u4e0b\uff0c\u5e94\u8be5\u5411\u53f3\u8fb9\u8d70\uff0c\u56e0\u6b64\u72b6\u6001\u4e3a\u201cRIGHT\u201d\uff08\u6216\u8bb8\uff0c\u8fd9\u91cc\u5b9a\u4e49\u6210\u201c\u65b9\u5411\u201d\u4f1a\u66f4\u8d34\u5207\u4e00\u4e9b\uff09\u3002 \u904d\u5386\u5b8c\u7b2c 1 \u884c\uff0c\u5176\u5b9e\u4ee5\u540e\uff0c\u6211\u4eec\u90fd\u4e0d\u4f1a\u518d\u904d\u5386\u5230\u6a2a\u5750\u6807\u4e3a 0 \u7684\u70b9\uff0c\u56e0\u6b64 row_min \u52a0 1\u3002 \u904d\u5386\u5b8c\u6210\u4ee5\u540e\uff0c\u5176\u5b9e\u70b9\u7684\u5750\u6807\u8d8a\u754c\u4e86\uff0c\u6211\u4eec\u8981\u628a\u5b83\u632a\u5230\u4e0b\u4e00\u6b21\u72b6\u6001\u7684\u8d77\u70b9\u3002 \u5982\u679c\u904d\u5386\u5230\u4e2d\u5fc3\u7684\u65f6\u5019\uff0c\u5f88\u53ef\u80fd\u9047\u5230\u53ea\u66f4\u6539\u4e86\u72b6\u6001\uff0c\u4e0d\u6267\u884c\u5faa\u73af\u4f53\u7684\u60c5\u51b5\uff0c\u8fd9\u5c31\u907f\u514d\u4e86\u5bf9\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u8003\u8651\u3002 Java \u4ee3\u7801\uff1a import java.util.ArrayList; // 29 \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 // \u53c2\u8003\u8d44\u6599\uff1ahttps://www.nowcoder.com/questionTerminal/9b4c81a02cd34f76be2659fa0d54342a public class Solution { private enum State { RIGHT, DOWN, LEFT, UP } public ArrayList<Integer> printMatrix(int[][] matrix) { ArrayList<Integer> res = new ArrayList<>(); int row_max = matrix.length; if (row_max == 0) { return res; } int col_max = matrix[0].length; row_max--; col_max--; int row_min = 0; int col_min = 0; // \u4e0a\u9762\u7684\u4ee3\u7801\u867d\u7136\u770b\u8d77\u6765\u884c\u6570\u6bd4\u8f83\u591a\uff0c\u4f46\u662f\u5176\u5b9e\u53ea\u662f\u505a\u4e86\u6781\u7aef\u60c5\u51b5\u7684\u8003\u8651\u548c\u4e00\u4e9b\u53d8\u91cf\u7684\u521d\u59cb\u5316\u5de5\u4f5c // \u4e0b\u9762\u7684\u4ee3\u7801\u867d\u7136\u770b\u8d77\u6765\u6bd4\u8f83\u957f\uff0c\u4f46\u662f\u4e5f\u53ea\u662f\u505a\u4e86\u5f53\u524d\u72b6\u6001\u7684\u5224\u65ad\u4ee5\u53ca\u72b6\u6001\u8f6c\u79fb\uff0c\u4ee3\u7801\u6846\u67b6\u662f\u4e00\u6a21\u4e00\u6837\u7684 // \u4ed4\u7ec6\u4f53\u4f1a\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5176\u5b9e\u5c31\u662f\uff1a\u6bcf\u6b21\u63a5\u6536\u4e00\u4e2a\u72b6\u6001\uff0c\u6839\u636e\u8fd9\u4e2a\u72b6\u6001\u505a\u51fa\u76f8\u5e94\u7684\u64cd\u4f5c\uff0c\u7136\u540e\u53d8\u66f4\u72b6\u6001 State state = State.RIGHT; int i = 0; int j = 0; while (row_min <= row_max && col_min <= col_max) { if (state == State.RIGHT) { while (j <= col_max) { res.add(matrix[i][j]); j++; } j--; i++; state = State.DOWN; row_min++; } else if (state == State.DOWN) { while (i <= row_max) { res.add(matrix[i][j]); i++; } i--; j--; state = State.LEFT; col_max--; } else if (state == State.LEFT) { while (j >= col_min) { res.add(matrix[i][j]); j--; } j++; i--; state = State.UP; row_max--; } else { assert state == State.UP; while (i >= row_min) { res.add(matrix[i][j]); i--; } i++; j++; state = State.RIGHT; col_min++; } } return res; } public static void main(String[] args) { int[][] matrix1 = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}; int[][] matrix = new int[5][6]; int count = 1; for (int i = 0; i < matrix.length; i++) { for (int j = 0; j < matrix[0].length; j++) { System.out.print(count + \"\\t\"); matrix[i][j] = count; count++; } System.out.println(); } Solution solution = new Solution(); ArrayList<Integer> printMatrix = solution.printMatrix(matrix); System.out.println(printMatrix); } } Python \u4ee3\u7801\uff1a class Solution: # matrix\u7c7b\u578b\u4e3a\u4e8c\u7ef4\u5217\u8868\uff0c\u9700\u8981\u8fd4\u56de\u5217\u8868 def printMatrix(self, matrix): rows = len(matrix) cols = len(matrix[0]) result = [] if rows == 0 and cols == 0: return result left, right, top, buttom = 0, cols - 1, 0, rows - 1 while left <= right and top <= buttom: for i in range(left, right + 1): result.append(matrix[top][i]) for i in range(top + 1, buttom + 1): result.append(matrix[i][right]) if top != buttom: for i in range(left, right)[::-1]: result.append(matrix[buttom][i]) if left != right: for i in range(top + 1, buttom)[::-1]: result.append(matrix[i][left]) left += 1 top += 1 right -= 1 buttom -= 1 return result \u201c\u5927\u96ea\u83dc\u201d\u7684\u5199\u6cd5\uff1a\u6211\u4eec\u987a\u65f6\u9488\u5b9a\u4e49\u56db\u4e2a\u65b9\u5411\uff1a\u4e0a\u53f3\u4e0b\u5de6\u3002\u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\u904d\u5386\uff0c\u5148\u5f80\u53f3\u8d70\uff0c\u8d70\u5230\u4e0d\u80fd\u8d70\u4e3a\u6b62\uff0c\u7136\u540e\u66f4\u6539\u5230\u4e0b\u4e2a\u65b9\u5411\uff0c\u518d\u8d70\u5230\u4e0d\u80fd\u8d70\u4e3a\u6b62\uff0c\u4f9d\u6b21\u7c7b\u63a8\uff0c\u904d\u5386 $n^2$ \u4e2a\u683c\u5b50\u540e\u505c\u6b62\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u77e9\u9635\u4e2d\u6bcf\u4e2a\u683c\u5b50\u904d\u5386\u4e00\u6b21\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^2)$\u3002 C++ \u4ee3\u7801\uff1a class Solution { public: vector<int> printMatrix(vector<vector<int>>& matrix) { vector<int> res; if (matrix.empty()) return res; int n = matrix.size(), m = matrix[0].size(); vector<vector<bool>> st(n, vector<bool>(m, false)); int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1}; int x = 0, y = 0, d = 1; for (int k = 0; k < n * m; k ++ ) { res.push_back(matrix[x][y]); st[x][y] = true; int a = x + dx[d], b = y + dy[d]; if (a < 0 || a >= n || b < 0 || b >= m || st[a][b]) { d = (d + 1) % 4; a = x + dx[d], b = y + dy[d]; } x = a, y = b; } return res; } }; \u4f5c\u8005\uff1ayxc \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/AcWing/content/748/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u7b2c 30 \u9898\uff1a\u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u6700\u5c0f\u5143\u7d20\u7684 min \u51fd\u6570 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u5305\u542bmin\u51fd\u6570\u7684\u6808 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301 push\uff0cpop\uff0ctop \u7b49\u64cd\u4f5c\u5e76\u4e14\u53ef\u4ee5\u5728 O(1) \u65f6\u95f4\u5185\u68c0\u7d22\u51fa\u6700\u5c0f\u5143\u7d20\u7684\u5806\u6808\u3002 push(x)\u2013\u5c06\u5143\u7d20x\u63d2\u5165\u6808\u4e2d pop()\u2013\u79fb\u9664\u6808\u9876\u5143\u7d20 top()\u2013\u5f97\u5230\u6808\u9876\u5143\u7d20 getMin()\u2013\u5f97\u5230\u6808\u4e2d\u6700\u5c0f\u5143\u7d20 \u6837\u4f8b\uff1a MinStack minStack = new MinStack(); minStack.push(-1); minStack.push(3); minStack.push(-4); minStack.getMin(); --> Returns -4. minStack.pop(); minStack.top(); --> Returns 3. minStack.getMin(); --> Returns -1. \u601d\u8def\uff1a \u5b9a\u4e49\u4e24\u4e2a\u6808\uff0c\u4e00\u4e2a\u5b58\u653e\u5165\u7684\u503c\uff0c\u53e6\u4e00\u4e2a\u5b58\u6700\u5c0f\u503c\uff0c\u4e24\u4e2a\u6808\u5e94\u8be5\u662f\u540c\u6b65 push \u548c pop\uff0c\u5426\u5219\u8fd8\u8981\u5206\u7c7b\u8ba8\u8bba\uff0c\u4ee3\u7801\u7f16\u5199\u5bb9\u6613\u51fa\u9519\u3002 \u56e0\u4e3a\u8981\u7528 $O(1)$ \u5b9e\u73b0\u5f53\u524d\u6808\u4e2d\u6700\u5c0f\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\uff0c\u56e0\u6b64\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u548c\u5e95\u5c42 Stack \u540c\u6b65\u7684\u3001\u79f0\u4e4b\u4e3a\u201c\u6700\u5c0f\u6808\u201d\u7684\u6808\u6210\u5458\u3002\u5177\u4f53\u64cd\u4f5c\u5982\u4e0b\u4ee3\u7801\u6240\u793a\u3002 Python \u4ee3\u7801\uff1a class MinStack(object): def __init__(self): \"\"\" initialize your data structure here. \"\"\" self.stack = [] self.helper = [] def push(self, x): \"\"\" :type x: int :rtype: void \"\"\" if len(self.stack) == 0: self.helper.append(x) self.stack.append(x) else: # \u5982\u679c\u5c06\u8981 push \u7684\u5143\u7d20\u6bd4\u8f85\u52a9\u6808\u7684\u6808\u9876\u5143\u7d20\u8fd8\u5927\uff0c\u4e0d\u80fd\u653e\u8fd9\u4e2a\u5143\u7d20\uff0c # \u6b64\u65f6\u5e94\u8be5\u628a\u8f85\u52a9\u6808\u7684\u6808\u9876\u5143\u7d20\u518d\u590d\u5236\u4e00\u4efd peek = self.helper[-1] if x > peek: self.stack.append(x) self.helper.append(peek) else: self.stack.append(x) self.helper.append(x) def pop(self): \"\"\" :rtype: void \"\"\" if len(self.stack) == 0: return # \u540c\u6b65 pop \u5143\u7d20 self.helper.pop() return self.stack.pop() def top(self): \"\"\" :rtype: int \"\"\" return self.stack[-1] def getMin(self): \"\"\" :rtype: int \"\"\" return self.helper[-1] Java \u4ee3\u7801\uff1a import java.util.Stack; public class Solution { private Stack<Integer> minStack = new Stack<>(); private Stack<Integer> dataStack = new Stack<>(); public void push(int node) { if (minStack.isEmpty()) { minStack.push(node); dataStack.push(node); return; } int curMin = minStack.peek(); if (node < curMin) { minStack.push(node); } else { minStack.push(curMin); } dataStack.push(node); } public void pop() { minStack.pop(); dataStack.pop(); } public int top() { return dataStack.pop(); } public int min() { return minStack.peek(); } } \u601d\u8def2\uff1a\u6211\u4eec\u9664\u4e86\u7ef4\u62a4\u57fa\u672c\u7684\u6808\u7ed3\u6784\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u201c\u8f85\u52a9\u6808\u201d\u3002\u4e0b\u9762\u4ecb\u7ecd\u5982\u4f55\u7ef4\u62a4\u5355\u8c03\u6808\uff1a\u505a\u5230\u4ee5\u4e0b\u4e24\u70b9\uff0c\u8f85\u52a9\u6808\u7684\u6808\u9876\u5143\u7d20\uff0c\u5c31\u662f\u5f53\u524d\u6808\u4e2d\u7684\u6700\u5c0f\u6570\u3002 1\u3001\u5f53\u6211\u4eec\u5411\u6808\u4e2d\u538b\u5165\u4e00\u4e2a\u6570\u65f6\uff0c\u5982\u679c\u8be5\u6570\u5c0f\u4e8e\uff08\u53ea\u8981\u5c0f\u4e8e\uff09\u201c\u8f85\u52a9\u6808\u201d\u7684\u6808\u9876\u5143\u7d20\uff0c\u5219\u5c06\u8be5\u6570\u540c\u65f6\u538b\u5165\u201c\u8f85\u52a9\u6808\u201d\u4e2d\uff1b\u5426\u5219\uff0c\u4e0d\u538b\u5165\u3002\u7531\u4e8e\u6808\u5177\u6709\u5148\u8fdb\u540e\u51fa\u6027\u8d28\uff0c\u6240\u4ee5\u5728\u8be5\u6570\u88ab\u5f39\u51fa\u4e4b\u524d\uff0c\u201c\u8f85\u52a9\u6808\u201d\u4e2d\u4e00\u76f4\u5b58\u5728\u4e00\u4e2a\u6570\u6bd4\u8be5\u6570\u5c0f\uff0c\u6240\u4ee5\u8be5\u6570\u4e00\u5b9a\u4e0d\u4f1a\u88ab\u5f53\u505a\u6700\u5c0f\u6570\u8f93\u51fa\u3002 2\u3001\u5f53\u6211\u4eec\u4ece\u6808\u4e2d\u5f39\u51fa\u4e00\u4e2a\u6570\u65f6\uff0c\u5982\u679c\u8be5\u6570\u7b49\u4e8e\u5355\u8c03\u6808\u7684\u6808\u9876\u5143\u7d20\uff0c\u540c\u65f6\u5c06\u5355\u8c03\u6808\u7684\u6808\u9876\u5143\u7d20\u5f39\u51fa\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u56db\u79cd\u64cd\u4f5c\u90fd\u53ea\u6709\u5e38\u6570\u6b21\u5165\u6808\u51fa\u6808\u64cd\u4f5c\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f $O(1)$\u3002 Python \u4ee3\u7801\uff1a # \u5b9a\u4e49\u4e24\u4e2a\u6808\uff0c\u4e00\u4e2a\u5b58\u653e\u5165\u7684\u503c\uff0c\u53e6\u4e00\u4e2a\u5b58\u6700\u5c0f\u503c\uff0c\u4e24\u4e2a\u6808\u5e94\u8be5\u662f\u540c\u6b65 push \u548c pop\uff0c\u5426\u5219\u8fd8\u8981\u5206\u7c7b\u8ba8\u8bba\uff0c\u4ee3\u7801\u7f16\u5199\u5bb9\u6613\u51fa\u9519\u3002 class MinStack(object): def __init__(self): \"\"\" initialize your data structure here. \"\"\" self.stack = [] self.helper = [] def push(self, x): \"\"\" :type x: int :rtype: void \"\"\" # \u65e0\u8bba\u5982\u4f55\u90fd push self.stack.append(x) # \u5982\u679c\u653e\u5165\u7684\u5143\u7d20\u5c0f\u4e8e\u8f85\u52a9\u6808\u9876\u5143\u7d20\uff0c\u8f85\u52a9\u6808\u9876\u624d push\uff0c\u5426\u5219\u4ec0\u4e48\u90fd\u4e0d\u505a if not self.helper or self.helper[-1] > x: self.helper.append(x) def pop(self): \"\"\" :rtype: void \"\"\" if len(self.stack) == 0: return # \u5982\u679c\u5f39\u51fa\u7684\u5143\u7d20\u7b49\u4e8e\u8f85\u52a9\u6808\u6808\u9876\u5143\u7d20\uff0c\u624d\u5c06\u8f85\u52a9\u6808\u9876\u5143\u7d20\u5f39\u51fa if self.helper[-1] == self.stack[-1]: self.helper.pop() return self.stack.pop() def top(self): \"\"\" :rtype: int \"\"\" return self.stack[-1] def getMin(self): \"\"\" :rtype: int \"\"\" return self.helper[-1] # Your MinStack object will be instantiated and called as such: # obj = MinStack() # obj.push(x) # obj.pop() # param_3 = obj.top() # param_4 = obj.getMin() Java \u4ee3\u7801\uff1a import java.util.Stack; public class Solution { private Stack<Integer> minStack = new Stack<>(); private Stack<Integer> dataStack = new Stack<>(); public void push(int node) { if (minStack.isEmpty()) { minStack.push(node); dataStack.push(node); return; } int curMin = minStack.peek(); if (node < curMin) { minStack.push(node); } else { minStack.push(curMin); } dataStack.push(node); } public void pop() { minStack.pop(); dataStack.pop(); } public int top() { return dataStack.pop(); } public int min() { return minStack.peek(); } } LeetCode \u7b2c 155 \u9898\uff1a\u6700\u5c0f\u6808 \u8bbe\u7f6e\u4e00\u4e2a\u8f85\u52a9\u6808\uff0c\u4fdd\u5b58\u5f53\u524d\u6700\u5c0f\u7684\u5143\u7d20\u3002 Python \u4ee3\u7801\uff1a class MinStack(object): # \u3010\u7279\u522b\u6ce8\u610f\u3011\u6570\u636e\u6808\u548c\u8f85\u52a9\u6808\u8981\u540c\u6b65\uff0c\u7279\u6b8a\u6d4b\u8bd5\u7528\u4f8b\u4e3a\uff1a # \u4f9d\u6b21 push 0 1 0\uff0c\u9a6c\u4e0a\u5f39\u6808\uff0c\u67e5\u8be2\u6700\u5c0f def __init__(self): \"\"\" initialize your data structure here. \"\"\" # \u6570\u636e\u6808 self.data_stack = [] # \u8f85\u52a9\u6808 self.help_stack = [] def push(self, x): \"\"\" :type x: int :rtype: void \"\"\" self.data_stack.append(x) if len(self.help_stack) == 0 or x < self.help_stack[-1]: self.help_stack.append(x) else: self.help_stack.append(self.help_stack[-1]) def pop(self): \"\"\" :rtype: void \"\"\" if len(self.data_stack) > 0: ret = self.data_stack.pop() self.help_stack.pop() return ret def top(self): \"\"\" :rtype: int \"\"\" if len(self.data_stack) > 0: return self.data_stack[-1] def getMin(self): \"\"\" :rtype: int \"\"\" if len(self.data_stack) > 0: return self.help_stack[-1] # Your MinStack object will be instantiated and called as such: # obj = MinStack() # obj.push(x) # obj.pop() # param_3 = obj.top() # param_4 = obj.getMin() if __name__ == '__main__': min_stack = MinStack() min_stack.push(0) min_stack.push(1) min_stack.push(0) print(min_stack.getMin()) min_stack.pop() print(min_stack) print(min_stack.getMin()) \uff08\u672c\u8282\u5b8c\uff09","title":"\u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09 \u9898\u89e3\uff08Python \u8bed\u8a00\u5b9e\u73b0\uff09\u7b2c 21-30 \u9898"},{"location":"21-30/#offer-2-python-21-30","text":"","title":"\u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09 \u9898\u89e3\uff08Python \u8bed\u8a00\u5b9e\u73b0\uff09\u7b2c 21-30 \u9898"},{"location":"21-30/#21","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u6574\u8be5\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\u3002 \u4f7f\u5f97\u6240\u6709\u7684\u5947\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u7684\u5076\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u540e\u534a\u90e8\u5206\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,3,4,5] \u8f93\u51fa\uff1a [1,3,5,2,4] \u5206\u6790\uff1a\u8fd9\u9053\u9898\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u5c31\u662f\uff1a\u4fdd\u6301\u539f\u6765\u7684\u987a\u5e8f\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 LeetCode \u7b2c 88 \u9898\u7684\u7b56\u7565\uff0c\u4ece\u540e\u5411\u524d\u91cd\u65b0\u4e3a\u6570\u7ec4\u8d4b\u503c\u3002 \u601d\u8def1\uff1a\u6709\u70b9\u7c7b\u4f3c\u201c\u4e24\u8def\u5feb\u6392\u201d\u7684\u601d\u8def\u3002\u201c\u4e24\u8def\u5feb\u6392\u201d\u4e2d\u6709\u4e00\u4e9b\u7ec6\u8282\u9700\u8981\u590d\u4e60\u4e00\u4e0b\u3002\u53cc\u6307\u9488\u626b\u63cf\uff1a\u7528\u4e24\u4e2a\u6307\u9488\u5206\u522b\u4ece\u9996\u5c3e\u5f00\u59cb\uff0c\u5f80\u4e2d\u95f4\u626b\u63cf\u3002\u626b\u63cf\u65f6\u4fdd\u8bc1 \u7b2c\u4e00\u4e2a\u6307\u9488\u524d\u9762\u7684\u6570\u90fd\u662f\u5947\u6570\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u540e\u9762\u7684\u6570\u90fd\u662f\u5076\u6570 \u3002\u6bcf\u6b21\u8fed\u4ee3\u65f6\u9700\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\uff1a 1\u3001\u7b2c\u4e00\u4e2a\u6307\u9488\u4e00\u76f4\u5f80\u540e\u8d70\uff0c\u76f4\u5230\u9047\u5230\u7b2c\u4e00\u4e2a\u5076\u6570\u4e3a\u6b62\uff1b 2\u3001\u7b2c\u4e8c\u4e2a\u6307\u9488\u4e00\u76f4\u5f80\u524d\u8d70\uff0c\u76f4\u5230\u9047\u5230\u7b2c\u4e00\u4e2a\u5947\u6570\u4e3a\u6b62\u3002 \u4ea4\u6362\u4e24\u4e2a\u6307\u9488\u6307\u5411\u7684\u4f4d\u7f6e\u4e0a\u7684\u6570\uff0c\u518d\u8fdb\u5165\u4e0b\u4e00\u5c42\u8fed\u4ee3\uff0c\u76f4\u5230\u4e24\u4e2a\u6307\u9488\u76f8\u9047\u4e3a\u6b62\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5f53\u4e24\u4e2a\u6307\u9488\u76f8\u9047\u65f6\uff0c\u8d70\u8fc7\u7684\u603b\u8def\u7a0b\u957f\u5ea6\u662f $n$\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n)$\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def reOrderArray(self, array): \"\"\" :type array: List[int] :rtype: void \"\"\" # \u7279\u5224 size = len(array) if size < 2: return l = 0 r = size - 1 # \u59cb\u7ec8\u4fdd\u6301 [0,l) \u662f\u5947\u6570 # (r,size-1] \u662f\u5076\u6570 while True: while l <= r and array[l] & 1 == 1: l += 1 # \u6b64\u65f6 l \u6765\u5230\u4e86\u7b2c\u4e00\u4e2a\u5076\u6570\u4f4d\u7f6e while r >= l and array[r] & 1 == 0: r -= 1 # \u6b64\u65f6 r \u6765\u5230\u4e86\u7b2c\u4e00\u4e2a\u5947\u6570\u7684\u4f4d\u7f6e # \u8fd9\u91cc\u4e00\u5b9a\u662f\u5927\u4e8e\u53f7\uff0c\u5426\u5219\u6570\u7ec4\u4e0b\u6807\u4f1a\u8d8a\u754c # \u4e00\u5b9a\u8981\u7279\u522b\u6ce8\u610f\uff0c\u5199 == \u53f7\u4f1a\u51fa\u9519\uff0c\u5199 >= \u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a == \u6210\u7acb\u7684\u65f6\u5019\uff0c\u4e0d\u7528\u4ea4\u6362 if l > r: break array[l], array[r] = array[r], array[l] l += 1 r -= 1 return array C++ \u4ee3\u7801\uff1a C++ \u4ee3\u7801\uff1a class Solution { public: void reOrderArray(vector<int> &array) { int l = 0, r = array.size() - 1; while (l <= r) { while (array[l] % 2 == 1) l ++ ; while (array[r] % 2 == 0) r -- ; if (l < r) swap(array[l], array[r]); } } }; \u601d\u8def2\uff1a\u628a\u5947\u6570\u6570\u7ec4\u590d\u5236\u51fa\u6765\uff0c\u6309\u7167\u4ece\u540e\u5411\u524d\u5f52\u5e76\u6392\u5e8f\u7684\u505a\u6cd5\u5b8c\u6210\u3002 Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { // \u4fdd\u8bc1\u5947\u6570\u548c\u5947\u6570\uff0c\u5076\u6570\u548c\u5076\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002 public void reOrderArray(int[] array) { int len = array.length; if (len == 0) { return; } // \u5947\u6570\u5168\u90e8\u632a\u5230\u7f13\u5b58\u6570\u7ec4\u4e2d int[] buff = new int[len]; int j = -1; for (int i = 0; i < len; i++) { if (array[i] % 2 == 1) { j++; buff[j] = array[i]; } } // \u5982\u679c\u90fd\u6ca1\u6709\u5947\u6570\u7684\u8bdd\uff0c\u7a0b\u5e8f\u7ec8\u6b62 if (j == -1) { return; } // \u628a\u5076\u6570\u96c6\u4e2d\u201c\u6324\u201d\u5230\u6570\u7ec4\u7684\u672b\u5c3e // \u7136\u540e\u518d\u628a\u7f13\u5b58\u6570\u7ec4\u4e2d\u7684\u5947\u6570\u5012\u5e8f\u653e\u5165 int k = len - 1; for (int i = len - 1; i >= 0; i--) { if (array[i] % 2 == 0) { array[k] = array[i]; k--; } } while (j >= 0) { array[j] = buff[j]; j--; } } public static void main(String[] args) { int[] arr = {1, 2, 3, 4, 5}; Solution solution = new Solution(); solution.reOrderArray(arr); System.out.println(Arrays.toString(arr)); } } Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { // \u4fdd\u8bc1\u5947\u6570\u548c\u5947\u6570\uff0c\u5076\u6570\u548c\u5076\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002 public void reOrderArray(int[] array) { int len = array.length; if (len == 0) { return; } // \u5947\u6570\u5168\u90e8\u632a\u5230\u7f13\u5b58\u6570\u7ec4\u4e2d int[] buff = new int[len]; int j = -1; for (int i = 0; i < len; i++) { if (array[i] % 2 == 1) { j++; buff[j] = array[i]; } } // \u5982\u679c\u6ca1\u6709\u5947\u6570\uff0c\u76f4\u63a5\u8fd4\u56de\u5c31\u53ef\u4ee5\u4e86 if (j == -1) { return; } // \u4ece\u540e\u5411\u524d\u8d4b\u503c int k = len - 1; for (int i = len - 1; i >= 0; i--) { if (array[i] % 2 == 0) { array[k] = array[i]; k--; } } while (j >= 0) { array[j] = buff[j]; j--; } } } \u6269\u5c55\uff1a\u4e66\u672c\u4e0a\u6709\u8fd9\u4e2a\u95ee\u9898\u66f4\u4e00\u822c\u7684\u505a\u6cd5\u3002","title":"\u7b2c 21 \u9898\uff1a\u8c03\u6574\u6570\u7ec4\u4f7f\u5f97\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u4e4b\u524d"},{"location":"21-30/#22-k","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u8282\u70b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u7ed3\u70b9\u3002 \u6ce8\u610f\uff1a k >= 0 ; \u5982\u679c k \u5927\u4e8e\u94fe\u8868\u957f\u5ea6\uff0c\u5219\u8fd4\u56de NULL; \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\u94fe\u8868\uff1a 1->2->3->4->5 \uff0c k=2 \u8f93\u51fa\uff1a4 \u5206\u6790\uff1a\u8bbe\u7f6e\u5feb\u6162\u6307\u9488\uff0c\u601d\u8def\u5f88\u7b80\u5355\uff0c\u4e0d\u8fc7\u5728\u5177\u4f53\u7f16\u7801\u7684\u65f6\u5019\uff0c\u8fd8\u662f\u6709\u4e00\u4e9b\u7ec6\u8282\u8981\u6ce8\u610f\u7684\uff0c\u7279\u522b\u662f\u7a7a\u6307\u9488\u7684\u5224\u65ad\u4e0a\u3002 \u56e0\u4e3a\u7b2c k \u4e2a\u7ed3\u70b9\u5f88\u53ef\u80fd\u662f\u94fe\u8868\u7684\u7b2c 1 \u4e2a\u7ed3\u70b9\uff0c\u56e0\u6b64\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\uff0c\u662f\u8fd9\u4e00\u5217\u95ee\u9898\u7684\u57fa\u672c\u505a\u6cd5\uff0c\u53ef\u4ee5\u51cf\u5c11\u5206\u7c7b\u8ba8\u8bba\u7684\u60c5\u51b5\u3002 \u5bf9\u4e00\u4e9b\u6781\u7aef\u60c5\u51b5\u7684\u8ba8\u8bba\uff08\u4e0b\u9762\u4ee3\u7801\u4e2d\u7684\u6ce8\u610f\u70b9 2 \uff09\u3002 \u601d\u8def1\uff1a\u5148\u904d\u5386\u5b8c\uff0c\u6570\u51fa\u94fe\u8868\u6709\u591a\u5c11\u4e2a\u7ed3\u70b9\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def findKthToTail(self, pListHead, k): \"\"\" :type pListHead: ListNode :type k: int :rtype: ListNode \"\"\" if pListHead is None: return None counter = 0 p = pListHead while p: counter += 1 p = p.next if k > counter: return None p = pListHead for _ in range(counter - k): p = p.next return p \u601d\u8def2\uff1a\u63a8\u8350\uff0c\u8bbe\u7f6e\u5feb\u6162\u6307\u9488\uff0c\u5feb\u6307\u9488\u5148\u8d70 $k-1$ \u6b65\uff0c\u7136\u540e\u5feb\u6162\u6307\u9488\u4e00\u8d77\u8d70\u3002 C++ \u4ee3\u7801\uff1a Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def findKthToTail(self, pListHead, k): \"\"\" :type pListHead: ListNode :type k: int :rtype: ListNode \"\"\" if pListHead is None: return None fast = pListHead # \u8981\u6ce8\u610f\u7684\u4e34\u754c\u70b91\uff1a for _ in range(k - 1): fast = fast.next # \u6ce8\u610f\u5224\u65ad if fast is None: return None slow = pListHead # \u8981\u6ce8\u610f\u7684\u4e34\u754c\u70b92\uff1a while fast.next: slow = slow.next fast = fast.next return slow Java \u4ee3\u7801\uff1a class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } } public class Solution { public ListNode FindKthToTail(ListNode head, int k) { // \u6ce8\u610f\u70b91\uff1a\u6781\u7aef\u8f93\u5165\uff0c\u76f4\u63a5\u8f93\u51fa\u7ed3\u679c if (head == null) { return null; } ListNode dummyNode = new ListNode(-1); dummyNode.next = head; ListNode fast = dummyNode; for (int i = 0; i < k; i++) { fast = fast.next; // \u6ce8\u610f\u70b92\uff1a\u5bf9\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u8f93\u5165\u7684\u5224\u65ad if (fast == null) { return null; } } ListNode slow = dummyNode; while (fast != null) { fast = fast.next; slow = slow.next; } return slow; } }","title":"\u7b2c 22 \u9898\uff1a\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u7ed3\u70b9"},{"location":"21-30/#23","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u82e5\u5176\u4e2d\u5305\u542b\u73af\uff0c\u5219\u8f93\u51fa\u73af\u7684\u5165\u53e3\u8282\u70b9\u3002 \u82e5\u5176\u4e2d\u4e0d\u5305\u542b\u73af\uff0c\u5219\u8f93\u51fa null \u3002 \u6837\u4f8b\uff1a \u7ed9\u5b9a\u5982\u4e0a\u6240\u793a\u7684\u94fe\u8868\uff1a [1, 2, 3, 4, 5, 6] \uff0c\u7f16\u53f7\uff1a2\u3002 \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684 2 \u8868\u793a\u7f16\u53f7\u662f 2 \u7684\u8282\u70b9\uff0c\u8282\u70b9\u7f16\u53f7\u4ece 0 \u5f00\u59cb\u3002\u6240\u4ee5\u7f16\u53f7\u662f 2 \u7684\u8282\u70b9\u5c31\u662f val \u7b49\u4e8e 3 \u7684\u8282\u70b9\u3002 \u5219\u8f93\u51fa\u73af\u7684\u5165\u53e3\u8282\u70b9 3 \u3002 \u5206\u6790\uff1a\u770b\u7684\u7b54\u6848\uff0c\u8bb0\u4f4f\u7ed3\u8bba\u5c31\u597d\uff0c\u7f16\u7801\u4e0a\u8fd8\u662f\u8981\u6ce8\u610f\u7279\u5224\u7684\u60c5\u51b5\uff0c\u8fd8\u6709\u7a7a\u6307\u9488\u7684\u60c5\u51b5\u3002\u201c\u6162\u201d\u6307\u9488\u8fdb\u5165\u73af\u7684\u65f6\u5019\uff0c\u201c\u5feb\u6307\u9488\u201d\u8981\u6765\u8ffd\u5b83\uff0c\u56e0\u4e3a\u5feb\u6162\u6307\u9488\u8d70\u7684\u6b65\u6570\u5dee\u662f\u56fa\u5b9a\u7684\u3002\u4f8b\u5982\uff1a A \u624b\u4e0a\u6709 100 \u5757\u94b1\uff0cA \u6bcf\u5929\u8d5a 10 \u5757\u94b1\uff0cB \u624b\u4e0a\u6709 50 \u5757\u94b1\uff0cB \u6bcf\u5929\u8d5a 20\uff0c\u4e00\u5b9a\u6709\u4e00\u5929\uff0c\u4f60\u4eec\u7684\u94b1\u76f8\u7b49\uff0c\u800c\u4e14\u53ea\u8981\u73af\u5185\u7ed3\u70b9\u4e2a\u6570\u8fd9\u4e48\u591a\u5c31\u53ef\u4ee5\u4e86\u3002 \u6211\u5199\u7684\u9519\u8bef\u89e3\uff1a Python \u4ee3\u7801\uff1a # 34. \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9 # \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u82e5\u5176\u4e2d\u5305\u542b\u73af\uff0c\u5219\u8f93\u51fa\u73af\u7684\u5165\u53e3\u8282\u70b9\u3002 # # \u82e5\u5176\u4e2d\u4e0d\u5305\u542b\u73af\uff0c\u5219\u8f93\u51fanull\u3002 # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution(object): def entryNodeOfLoop(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" # \u5148\u8003\u8651\u8fb9\u754c\u60c5\u51b5 if head is None or head.next is None: return None slow = head fast = head while fast and fast.next: # \u6162\u6307\u9488\u8d70\u4e00\u6b65\uff0c\u5feb\u6307\u9488\u8d70\u4e24\u6b65 slow = slow.next fast = fast.next.next if slow == fast: # \u8bf4\u660e\u94fe\u8868\u4e2d\u5b58\u5728\u73af break # \u6ce8\u610f\uff1a\u8df3\u51fa\u5faa\u73af\u7684\u539f\u56e0\u6709\u4e24\u4e2a\uff0c\u6709\u53ef\u80fd\u662f\u6839\u672c\u6ca1\u6709\u73af\uff0c\u5373\u4e0a\u9762 while fast and fast.next \u4e0d\u6210\u7acb # \u4e5f\u6709\u53ef\u80fd\u662f slow == fast \u91cc break \u7684\uff0c\u5206\u522b\u8ba8\u8bba\u5c31\u53ef\u4ee5\u4e86 if fast is None or fast.next is None: return None slow = head while slow != fast: slow = slow.next fast = fast.next # \u8d70\u5230\u8fd9\u91cc\uff0c\u8bf4\u660e slow == fast return slow","title":"\u7b2c 23 \u9898\uff1a\u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9"},{"location":"21-30/#24","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u53cd\u8f6c\u94fe\u8868 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u53cd\u8f6c\u8be5\u94fe\u8868\u5e76\u8f93\u51fa\u53cd\u8f6c\u540e\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a 1->2->3->4->5->NULL \u8f93\u51fa\uff1a 5->4->3->2->1->NULL \u5206\u6790\uff1a\u8fd9\u9053\u9898\u540c LeetCode \u4e0a\u4e00\u9053\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u6c42\u89e3\u3002\u4e2a\u4eba\u89c9\u5f97\u9012\u5f52\u7684\u65b9\u5f0f\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u662f\u5728\u94fe\u8868\u8f83\u957f\u7684\u65f6\u5019\uff0c\u9012\u5f52\u6548\u7387\u504f\u4f4e\uff0c\u56e0\u4e3a\u8981\u4f7f\u7528\u7cfb\u7edf\u6808\u3002 \u601d\u8def1\uff1a\u9012\u5f52\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None # \u9012\u5f52\u5199\u6cd5\uff1a\u7528\u9012\u5f52\u5c31\u4e0d\u7528\u601d\u8003\u7a7f\u9488\u5f15\u7ebf\u8fd9\u79cd\u4e8b\u60c5\u4e86\u3002 class Solution: def reverseList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" # \u9012\u5f52\u7684\u7ec8\u6b62\u6761\u4ef6\u4e00\u5b9a\u8981\u5199\u5bf9\uff1a\u8003\u8651\u7ed3\u70b9\u4e3a\u7a7a\u548c\u5355\u7ed3\u70b9\u7684\u60c5\u51b5 if head is None or head.next is None: return head next = head.next new_head = self.reverseList(next) next.next = head head.next = None return new_head Java \u4ee3\u7801\uff1a class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } } public class Solution { // \u9012\u5f52\u5199\u6cd5\u8981\u753b\u4e2a\u56fe\u5c31\u6e05\u695a\u4e86 public ListNode ReverseList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode next = head.next; ListNode newHead = ReverseList(next); next.next = head; head.next = null; return newHead; } } \u601d\u8def2\uff1a\u975e\u9012\u5f52\u5199\u6cd5\uff0c\u7a7f\u9488\u5f15\u7ebf\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None # \u7a7f\u9488\u5f15\u7ebf\uff0c\u53ef\u4ee5\u770b\u5230 while \u5faa\u73af\u4f53\u90e8\u5206\u7684\u4ee3\u7801\u662f\u9996\u5c3e\u76f8\u8fde\u7684\uff0c\u6709\u4e9b\u5355\u94fe\u8868\u7684\u9898\u76ee\u4e5f\u6709\u8fd9\u79cd\u89c4\u5f8b\uff0c\u611f\u89c9\u5f88\u795e\u5947 # \u5728 Python \u4e2d\uff0c\u5176\u5b9e\u8fd8\u6709\u66f4\u7b80\u4fbf\u7684\u5199\u6cd5\uff0c\u5c31\u8ddf\u6590\u6ce2\u62c9\u5951\u6570\u5217\u4e00\u6837 class Solution: def reverseList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" pre = None cur = head while cur: next = cur.next cur.next = pre pre = cur cur = next return pre","title":"\u7b2c 24 \u9898\uff1a\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u53cd\u8f6c\u94fe\u8868\u540e\uff0c\u8f93\u51fa\u94fe\u8868\u7684\u6240\u6709\u5143\u7d20"},{"location":"21-30/#25","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e24\u4e2a\u5355\u8c03\u9012\u589e\u7684\u94fe\u8868\uff0c\u8f93\u51fa\u4e24\u4e2a\u94fe\u8868\u5408\u6210\u540e\u7684\u94fe\u8868\uff0c\u5f53\u7136\u6211\u4eec\u9700\u8981\u5408\u6210\u540e\u7684\u94fe\u8868\u6ee1\u8db3\u5355\u8c03\u4e0d\u51cf\u89c4\u5219\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a 1->3->5 , 2->4->5 \u8f93\u51fa\uff1a 1->2->3->4->5->5 \u5206\u6790\uff1a\u540c LeetCode \u7b2c 21 \u9898\uff0c\u4f20\u9001\u95e8\uff1a 21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 \u3002\u8fd9\u662f\u4e00\u9053\u7ecf\u5178\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u6c42\u89e3\uff0c\u4e2a\u4eba\u89c9\u5f97\u9012\u5f52\u7684\u4ee3\u7801\u6bd4\u8f83\u7b80\u6d01\u6613\u61c2\u3002\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u5219\u8981\u753b\u56fe\u3002 \u601d\u8def1\uff1a \u4f7f\u7528\u9012\u5f52\uff0c\u7f16\u7801\u7b80\u5355\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def merge(self, l1, l2): \"\"\" :type l1: ListNode :type l2: ListNode :rtype: ListNode \"\"\" if l1 is None: return l2 if l2 is None: return l1 # \u4ee3\u7801\u80fd\u8d70\u5230\u8fd9\u91cc\u8bf4\u660e l1 \u548c l2 \u5747\u975e\u7a7a # \u6bd4\u8f83\u54ea\u4e2a\u5c0f\u5c31\u884c\u4e86 if l1.val < l2.val: l1.next = self.merge(l1.next, l2) return l1 # \u8d70\u5230\u8fd9\u91cc l1.val >= l2.val l2.next = self.merge(l1, l2.next) return l2 Java \u4ee3\u7801\uff1a class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } } public class Solution { public ListNode Merge(ListNode list1, ListNode list2) { if (list1 == null) { return list2; } if (list2 == null) { return list1; } if (list1.val < list2.val) { list1.next = Merge(list1.next, list2); return list1; } else { list2.next = Merge(list1, list2.next); return list2; } } } \u601d\u8def2\uff1a\u7a7f\u9488\u5f15\u7ebf\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None # \u7a7f\u9488\u5f15\u7ebf\u7684\u5199\u6cd5\uff0c\u4e00\u5b9a\u8981\u753b\u56fe\u624d\u80fd\u5199\u51fa\u6765 # \u6bd4\u8f83\u9ebb\u70e6\uff0c\u8fd8\u662f\u9012\u5f52\u5904\u7406\u7b80\u5355 class Solution(object): def merge(self, l1, l2): \"\"\" :type l1: ListNode :type l2: ListNode :rtype: ListNode \"\"\" # \u5f15\u5165\u5934\u7ed3\u70b9\u53ef\u4ee5\u7b80\u5316\u5bf9\u95ee\u9898\u7684\u8ba8\u8bba dummy_node = ListNode(-1) cur_node = dummy_node p1 = l1 p2 = l2 while p1 and p2: # \u4e24\u8005\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u624d\u987b\u8981\u6bd4\u8f83 # \u5176\u4e2d\u6709\u4e00\u4e2a\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u628a\u5176\u4e2d\u4e00\u4e2a\u63a5\u5230\u53e6\u4e00\u4e2a\u5c3e\u5df4\u5c31\u597d\u4e86 if p1.val < p2.val: # next \u6307\u9488\u4fee\u6539 cur_node.next = p1 # p1 \u540e\u79fb p1 = p1.next else: cur_node.next = p2 p2 = p2.next cur_node = cur_node.next # \u8df3\u51fa\u5faa\u73af\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u6709\uff1ap1 \u4e3a\u7a7a\u6216\u8005 p2 \u4e3a\u7a7a # \u5176\u4e2d\u6709\u4e00\u4e2a\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u628a\u5176\u4e2d\u4e00\u4e2a\u63a5\u5230\u53e6\u4e00\u4e2a\u5c3e\u5df4\u5c31\u597d\u4e86 if p1 is None: # \u8fd9\u4e00\u53e5\u5199\u6210 if not p1 \u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4e0d\u8fc7\u4e0d\u597d\u7406\u89e3 cur_node.next = p2 if not p2: cur_node.next = p1 return dummy_node.next","title":"\u7b2c 25 \u9898\uff1a\u5408\u5e76\u6392\u5e8f\u7684\u94fe\u8868"},{"location":"21-30/#26-a-b-b-a","text":"\u4f20\u9001\u95e8\uff1a \u6811\u7684\u5b50\u7ed3\u6784 \u3002 \u8f93\u5165\u4e24\u68f5\u4e8c\u53c9\u6811A\uff0cB\uff0c\u5224\u65adB\u662f\u4e0d\u662fA\u7684\u5b50\u7ed3\u6784\u3002 \u6211\u4eec\u89c4\u5b9a\u7a7a\u6811\u4e0d\u662f\u4efb\u4f55\u6811\u7684\u5b50\u7ed3\u6784\u3002 \u6837\u4f8b\uff1a \u6811 A \uff1a 8 / \\ 8 7 / \\ 9 2 / \\ 4 7 \u6811 B \uff1a 8 / \\ 9 2 \u8fd4\u56de true \uff0c\u56e0\u4e3a B \u662f A \u7684\u5b50\u7ed3\u6784\u3002 \u601d\u8def\uff1a\u5178\u578b\u4f7f\u7528\u9012\u5f52\u89e3\u51b3\u7684\u95ee\u9898\u3002 Python \u4ee3\u7801\uff1a\u5728\u7406\u89e3\u7684\u57fa\u7840\u4e0a\uff0c\u8bb0\u4f4f\u8fd9\u4e2a\u9898\u7684\u89e3\u6cd5 class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None class Solution: def HasSubtree(self, pRoot1, pRoot2): # pRoot1 \u662f\u5927\u6811 # pRoot2 \u662f\u5c0f\u6811 result = False if pRoot1 and pRoot2: # \u7b2c 1 \u6b65\uff1a\u5728\u6811 A \u4e2d\u67e5\u627e\u4e0e\u6839\u7ed3\u70b9\u7684\u503c\u4e00\u6837\u7684\u7ed3\u70b9 # \u8fd9\u91cc\u6392\u9664\u4e86 pRoot2 \u662f\u7a7a\u6811\u7684\u60c5\u51b5 if pRoot1.val == pRoot2.val: # \u5224\u65ad\u6811 1 \u662f\u4e0d\u662f\u5305\u542b\u6811 2 result = self.__doesTree1HaveTree2(pRoot1, pRoot2) if not result: # \u5982\u679c\u6811 1 \u4e0d\u5305\u542b\u6811 2 return self.HasSubtree(pRoot1.left, pRoot2) or self.HasSubtree(pRoot1.right, pRoot2) return result def __doesTree1HaveTree2(self, pRoot1, pRoot2): if pRoot2 is None: return True if pRoot1 is None: return False if pRoot1.val != pRoot2.val: return False # \u8d70\u5230\u8fd9\u91cc\u8bf4\u660e assert pRoot1.val == pRoot2.val \u4e3a True return self.__doesTree1HaveTree2(pRoot1.left, pRoot2.left) and self.__doesTree1HaveTree2(pRoot1.right, pRoot2.right)","title":"\u7b2c 26 \u9898\uff1a\u8f93\u5165\u4e24\u68f5\u4e8c\u53c9\u6811 A \u548c B\uff0c\u5224\u65ad B \u662f\u4e0d\u662f A \u7684\u5b50\u7ed3\u6784"},{"location":"21-30/#27","text":"\u4f20\u9001\u95e8\uff1a \u4e8c\u53c9\u6811\u7684\u955c\u50cf \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5c06\u5b83\u53d8\u6362\u4e3a\u5b83\u7684\u955c\u50cf\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\u6811\uff1a 8 / \\ 6 10 / \\ / \\ 5 7 9 11 [8,6,10,5,7,9,11,null,null,null,null,null,null,null,null] \u8f93\u51fa\u6811\uff1a 8 / \\ 10 6 / \\ / \\ 11 9 7 5 [8,10,6,11,9,7,5,null,null,null,null,null,null,null,null] \u5206\u6790\uff1a\u8fd9\u9053\u9898\u7684\u89e3\u51b3\u5b9e\u9645\u4e0a\u8003\u5bdf\u4e86\u4e8c\u53c9\u6811\u7684\u904d\u5386\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u524d\u5e8f\u904d\u5386\u3001\u540e\u5e8f\u904d\u5386\u3001\u5c42\u5e8f\u904d\u5386\u90fd\u662f\u53ef\u4ee5\u5b8c\u6210\u9898\u76ee\u8981\u6c42\u7684\u3002 \u601d\u8def1\uff1a\u9012\u5f52\u65b9\u5f0f\uff1a\u524d\u5e8f\u904d\u5386\u6216\u8005\u540e\u5e8f\u904d\u5386\u90fd\u884c\u3002 Python \u4ee3\u7801\uff1a\u524d\u5e8f\u904d\u5386 # Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution(object): def mirror(self, root): \"\"\" :type root: TreeNode :rtype: void \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if root is None: return root # \u6309\u7167\u524d\u5e8f\u904d\u5386\u7684\u65b9\u5f0f root.left, root.right = root.right, root.left self.mirror(root.left) self.mirror(root.right) Java \u4ee3\u7801\uff1a class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { // \u524d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u90fd\u662f\u53ef\u4ee5\u7684 public void Mirror(TreeNode root) { if (root == null) { return; } TreeNode temp = root.left; root.left = root.right; root.right = temp; Mirror(root.left); Mirror(root.right); } public void Mirror1(TreeNode root) { if (root == null) { return; } Mirror(root.left); Mirror(root.right); TreeNode temp = root.left; root.left = root.right; root.right = temp; } } Python \u4ee3\u7801\uff1a\u540e\u5e8f\u904d\u5386 # Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution(object): def mirror(self, root): \"\"\" :type root: TreeNode :rtype: void \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if root is None: return root # \u6309\u7167\u540e\u5e8f\u904d\u5386\u7684\u65b9\u5f0f self.mirror(root.left) self.mirror(root.right) root.left, root.right = root.right, root.left Python \u4ee3\u7801\uff1a\u5c42\u5e8f\u904d\u5386 class Solution(object): def mirror(self, root): \"\"\" :type root: TreeNode :rtype: void \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if root is None: return root queue = [root] while queue: top = queue.pop(0) top.left, top.right = top.right, top.left if top.left: queue.append(top.left) if top.right: queue.append(top.right) return root \u601d\u8def2\uff1a\u975e\u9012\u5f52\u65b9\u5f0f\uff08\u6ca1\u6709\u770b\u51fa\u6765\u662f\u90a3\u79cd\u9012\u5f52\u65b9\u5f0f\uff09\u3002 Java \u4ee3\u7801\uff1a class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { // \u524d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u90fd\u662f\u53ef\u4ee5\u7684 public void Mirror(TreeNode root) { if (root == null) { return; } TreeNode temp = root.left; root.left = root.right; root.right = temp; Mirror(root.left); Mirror(root.right); } public void Mirror1(TreeNode root) { if (root == null) { return; } Mirror(root.left); Mirror(root.right); TreeNode temp = root.left; root.left = root.right; root.right = temp; } } \u975e\u9012\u5f52\u65b9\u5f0f\uff1a\u4e0b\u9762\u8fd9\u4e2a\u4ee3\u7801\u6709\u70b9\u610f\u601d\u3002 Python \u4ee3\u7801\uff1a class Solution: def Mirror(self, root): if root is None: return stack = [] while root or stack: while root: root.left, root.right = root.right, root.left stack.append(root) root = root.left if stack: root = stack.pop() root = root.right","title":"\u7b2c 27 \u9898\uff1a\u64cd\u4f5c\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\uff0c\u5c06\u5176\u53d8\u6362\u4e3a\u6e90\u4e8c\u53c9\u6811\u7684\u955c\u50cf"},{"location":"21-30/#28","text":"\u4f20\u9001\u95e8\uff1a \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u4e00\u68f5\u4e8c\u53c9\u6811\u662f\u4e0d\u662f\u5bf9\u79f0\u7684\u3002 \u5982\u679c\u4e00\u68f5\u4e8c\u53c9\u6811\u548c\u5b83\u7684\u955c\u50cf\u4e00\u6837\uff0c\u90a3\u4e48\u5b83\u662f\u5bf9\u79f0\u7684\u3002 \u6837\u4f8b\uff1a \u5982\u4e0b\u56fe\u6240\u793a\u4e8c\u53c9\u6811 [1,2,2,3,4,4,3,null,null,null,null,null,null,null,null] \u4e3a\u5bf9\u79f0\u4e8c\u53c9\u6811\uff1a 1 / \\ 2 2 / \\ / \\ 3 4 4 3 \u5982\u4e0b\u56fe\u6240\u793a\u4e8c\u53c9\u6811 [1,2,2,null,4,4,3,null,null,null,null,null,null] \u4e0d\u662f\u5bf9\u79f0\u4e8c\u53c9\u6811\uff1a 1 / \\ 2 2 \\ / \\ 4 4 3 \u5206\u6790\uff1aLeetCode \u4e0a\u6709\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u4f7f\u7528\u53cc\u7aef\u961f\u5217\u53ef\u4ee5\u5b8c\u6210\uff0c\u753b\u56fe\u753b\u5230\u7b2c 4 \u5c42\u5c31\u975e\u5e38\u6e05\u6670\u4e86\u3002 \u540c LeetCode \u7b2c 101 \u9898\u3002 \u89e3\u6cd51\uff1a\u9012\u5f52\u5199\u6cd5\u3002 Java \u4ee3\u7801\uff1a class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { boolean isSymmetrical(TreeNode pRoot) { if (pRoot == null) { return true; } return helper(pRoot.left, pRoot.right); } private boolean helper(TreeNode pRoot1, TreeNode pRoot2) { if (pRoot1 == null && pRoot2 == null) { return true; } if (pRoot1 == null || pRoot2 == null || pRoot1.val != pRoot2.val) { return false; } return helper(pRoot1.left, pRoot2.right) && helper(pRoot1.right, pRoot2.left); } } Python \u4ee3\u7801\uff1a # Definition for a binary tree node. class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None # \u9012\u5f52\u5199\u6cd5\uff1a\u5f97\u5f15\u5165\u8f85\u52a9\u51fd\u6570 class Solution(object): def isSymmetric(self, root): \"\"\" :type root: TreeNode :rtype: bool \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if root is None: return True return self.__helper(root.left, root.right) def __helper(self, p1, p2): if p1 is None and p2 is None: return True if p1 is None or p2 is None: return False return p1.val == p2.val and self.__helper(p1.left, p2.right) and self.__helper(p1.right, p2.left) \u89e3\u6cd52\uff1a\u975e\u9012\u5f52\u5199\u6cd5\uff0c\u501f\u52a9\u53cc\u7aef\u961f\u5217\u8f85\u52a9\u5224\u65ad\u3002\u81ea\u5df1\u753b\u4e00\u4e2a\u56fe\uff0c\u5c31\u597d\u7406\u89e3\u4e86\u3002 Python \u4ee3\u7801\uff1a # Definition for a binary tree node. class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None # \u975e\u9012\u5f52\u5199\u6cd5\uff1a\u501f\u52a9\u53cc\u7aef\u961f\u5217\u8f85\u52a9\u5224\u65ad class Solution(object): def isSymmetric(self, root): \"\"\" :type root: TreeNode :rtype: bool \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if root is None: return True # \u5176\u5b9e\u5e94\u8be5\u7528 from collections import deque deque = [] deque.insert(0, root.left) deque.append(root.right) while deque: l_node = deque.pop(0) r_node = deque.pop() # \u8fd9\u4e00\u6b65\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u4e86 if l_node is None and r_node is None: continue if l_node is None or r_node is None: return False # \u4ee3\u7801\u8d70\u5230\u8fd9\u91cc\u4e00\u5b9a\u6709 l_node \u548c r_node \u975e\u7a7a # \u56e0\u6b64\u53ef\u4ee5\u53d6\u51fa val \u8fdb\u884c\u5224\u65ad\u4e86 if l_node.val != r_node.val: return False deque.insert(0, l_node.right) deque.insert(0, l_node.left) deque.append(r_node.left) deque.append(r_node.right) return True \u201c\u5927\u96ea\u83dc\u201d\u7684\u5199\u6cd5\uff1a\u7528\u6808\u6a21\u62df\u9012\u5f52\uff0c\u5bf9\u6839\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\uff0c\u6211\u4eec\u7528\u4e2d\u5e8f\u904d\u5386\uff1b\u5bf9\u6839\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\uff0c\u6211\u4eec\u7528\u53cd\u4e2d\u5e8f\u904d\u5386\u3002 \u5219\u4e24\u4e2a\u5b50\u6811\u4e92\u4e3a\u955c\u50cf\uff0c\u5f53\u4e14\u4ec5\u5f53\u540c\u65f6\u904d\u5386\u4e24\u68f5\u5b50\u6811\u65f6\uff0c\u5bf9\u5e94\u7ed3\u70b9\u7684\u503c\u76f8\u7b49\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6811\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u4ec5\u88ab\u904d\u5386\u4e00\u904d\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n)$\u3002 C++ \u4ee3\u7801\uff1a /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public: bool isSymmetric(TreeNode* root) { if (!root) return true; stack<TreeNode*> left, right; TreeNode *lc = root->left; TreeNode *rc = root->right; while(lc || rc || left.size()) { while (lc && rc) { left.push(lc), right.push(rc); lc = lc->left, rc = rc->right; } if (lc || rc) return false; lc = left.top(), rc = right.top(); left.pop(), right.pop(); if (lc->val != rc->val) return false; // \u8fd9\u91cc\u53cd\u8fc7\u6765\u64cd\u4f5c lc = lc->right, rc = rc->left; } return true; } }; \u4f5c\u8005\uff1ayxc \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/AcWing/content/747/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u7b2c 28 \u9898\uff1a\u5bf9\u79f0\u7684\u4e8c\u53c9\u6811"},{"location":"21-30/#29","text":"\u4f20\u9001\u95e8\uff1a \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u77e9\u9635\uff0c\u6309\u7167\u4ece\u5916\u5411\u91cc\u4ee5\u987a\u65f6\u9488\u7684\u987a\u5e8f\u4f9d\u6b21\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u6570\u5b57\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [ [1, 2, 3, 4], [5, 6, 7, 8], [9,10,11,12] ] \u8f93\u51fa\uff1a [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7] \u5206\u6790\uff1a + \u8fd9\u9053\u9898\uff0c\u4e66\u672c\u4e0a\u7684\u89e3\u6cd5\u6211\u4e2a\u4eba\u89c9\u5f97\u8fd8\u4e0d\u591f\u76f4\u89c2\u3001\u7b80\u6d01\uff0c\u8981\u8003\u8651\u5230\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u3002 + \u501f\u7528\u4e4b\u524d\u505a\u9898\u4e2d\uff0c\u4f7f\u7528\u72b6\u6001\u4ee5\u53ca\u72b6\u6001\u8f6c\u79fb\u7684\u7b56\u7565\uff0c\u4e0d\u96be\u753b\u51fa\u56fe\u5f62\u5982\u4e0b\u3002 \u4e0b\u9762\u662f\u5bf9\u8fd9\u5f20\u56fe\u7684\u89e3\u91ca\uff0c\u6211\u4eec\u53ea\u89e3\u91ca\u4e86\u4e00\u4e2a\u72b6\u6001\u6267\u884c\u7684\u4ee3\u7801\uff0c\u5176\u5b83\u72b6\u6001\u53ef\u4ee5\u540c\u6837\u5206\u6790\u5f97\u51fa\u3002 \u5728\u521d\u59cb\u72b6\u6001\u4e0b\uff0c\u5e94\u8be5\u5411\u53f3\u8fb9\u8d70\uff0c\u56e0\u6b64\u72b6\u6001\u4e3a\u201cRIGHT\u201d\uff08\u6216\u8bb8\uff0c\u8fd9\u91cc\u5b9a\u4e49\u6210\u201c\u65b9\u5411\u201d\u4f1a\u66f4\u8d34\u5207\u4e00\u4e9b\uff09\u3002 \u904d\u5386\u5b8c\u7b2c 1 \u884c\uff0c\u5176\u5b9e\u4ee5\u540e\uff0c\u6211\u4eec\u90fd\u4e0d\u4f1a\u518d\u904d\u5386\u5230\u6a2a\u5750\u6807\u4e3a 0 \u7684\u70b9\uff0c\u56e0\u6b64 row_min \u52a0 1\u3002 \u904d\u5386\u5b8c\u6210\u4ee5\u540e\uff0c\u5176\u5b9e\u70b9\u7684\u5750\u6807\u8d8a\u754c\u4e86\uff0c\u6211\u4eec\u8981\u628a\u5b83\u632a\u5230\u4e0b\u4e00\u6b21\u72b6\u6001\u7684\u8d77\u70b9\u3002 \u5982\u679c\u904d\u5386\u5230\u4e2d\u5fc3\u7684\u65f6\u5019\uff0c\u5f88\u53ef\u80fd\u9047\u5230\u53ea\u66f4\u6539\u4e86\u72b6\u6001\uff0c\u4e0d\u6267\u884c\u5faa\u73af\u4f53\u7684\u60c5\u51b5\uff0c\u8fd9\u5c31\u907f\u514d\u4e86\u5bf9\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u8003\u8651\u3002 Java \u4ee3\u7801\uff1a import java.util.ArrayList; // 29 \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 // \u53c2\u8003\u8d44\u6599\uff1ahttps://www.nowcoder.com/questionTerminal/9b4c81a02cd34f76be2659fa0d54342a public class Solution { private enum State { RIGHT, DOWN, LEFT, UP } public ArrayList<Integer> printMatrix(int[][] matrix) { ArrayList<Integer> res = new ArrayList<>(); int row_max = matrix.length; if (row_max == 0) { return res; } int col_max = matrix[0].length; row_max--; col_max--; int row_min = 0; int col_min = 0; // \u4e0a\u9762\u7684\u4ee3\u7801\u867d\u7136\u770b\u8d77\u6765\u884c\u6570\u6bd4\u8f83\u591a\uff0c\u4f46\u662f\u5176\u5b9e\u53ea\u662f\u505a\u4e86\u6781\u7aef\u60c5\u51b5\u7684\u8003\u8651\u548c\u4e00\u4e9b\u53d8\u91cf\u7684\u521d\u59cb\u5316\u5de5\u4f5c // \u4e0b\u9762\u7684\u4ee3\u7801\u867d\u7136\u770b\u8d77\u6765\u6bd4\u8f83\u957f\uff0c\u4f46\u662f\u4e5f\u53ea\u662f\u505a\u4e86\u5f53\u524d\u72b6\u6001\u7684\u5224\u65ad\u4ee5\u53ca\u72b6\u6001\u8f6c\u79fb\uff0c\u4ee3\u7801\u6846\u67b6\u662f\u4e00\u6a21\u4e00\u6837\u7684 // \u4ed4\u7ec6\u4f53\u4f1a\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5176\u5b9e\u5c31\u662f\uff1a\u6bcf\u6b21\u63a5\u6536\u4e00\u4e2a\u72b6\u6001\uff0c\u6839\u636e\u8fd9\u4e2a\u72b6\u6001\u505a\u51fa\u76f8\u5e94\u7684\u64cd\u4f5c\uff0c\u7136\u540e\u53d8\u66f4\u72b6\u6001 State state = State.RIGHT; int i = 0; int j = 0; while (row_min <= row_max && col_min <= col_max) { if (state == State.RIGHT) { while (j <= col_max) { res.add(matrix[i][j]); j++; } j--; i++; state = State.DOWN; row_min++; } else if (state == State.DOWN) { while (i <= row_max) { res.add(matrix[i][j]); i++; } i--; j--; state = State.LEFT; col_max--; } else if (state == State.LEFT) { while (j >= col_min) { res.add(matrix[i][j]); j--; } j++; i--; state = State.UP; row_max--; } else { assert state == State.UP; while (i >= row_min) { res.add(matrix[i][j]); i--; } i++; j++; state = State.RIGHT; col_min++; } } return res; } public static void main(String[] args) { int[][] matrix1 = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}; int[][] matrix = new int[5][6]; int count = 1; for (int i = 0; i < matrix.length; i++) { for (int j = 0; j < matrix[0].length; j++) { System.out.print(count + \"\\t\"); matrix[i][j] = count; count++; } System.out.println(); } Solution solution = new Solution(); ArrayList<Integer> printMatrix = solution.printMatrix(matrix); System.out.println(printMatrix); } } Python \u4ee3\u7801\uff1a class Solution: # matrix\u7c7b\u578b\u4e3a\u4e8c\u7ef4\u5217\u8868\uff0c\u9700\u8981\u8fd4\u56de\u5217\u8868 def printMatrix(self, matrix): rows = len(matrix) cols = len(matrix[0]) result = [] if rows == 0 and cols == 0: return result left, right, top, buttom = 0, cols - 1, 0, rows - 1 while left <= right and top <= buttom: for i in range(left, right + 1): result.append(matrix[top][i]) for i in range(top + 1, buttom + 1): result.append(matrix[i][right]) if top != buttom: for i in range(left, right)[::-1]: result.append(matrix[buttom][i]) if left != right: for i in range(top + 1, buttom)[::-1]: result.append(matrix[i][left]) left += 1 top += 1 right -= 1 buttom -= 1 return result \u201c\u5927\u96ea\u83dc\u201d\u7684\u5199\u6cd5\uff1a\u6211\u4eec\u987a\u65f6\u9488\u5b9a\u4e49\u56db\u4e2a\u65b9\u5411\uff1a\u4e0a\u53f3\u4e0b\u5de6\u3002\u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\u904d\u5386\uff0c\u5148\u5f80\u53f3\u8d70\uff0c\u8d70\u5230\u4e0d\u80fd\u8d70\u4e3a\u6b62\uff0c\u7136\u540e\u66f4\u6539\u5230\u4e0b\u4e2a\u65b9\u5411\uff0c\u518d\u8d70\u5230\u4e0d\u80fd\u8d70\u4e3a\u6b62\uff0c\u4f9d\u6b21\u7c7b\u63a8\uff0c\u904d\u5386 $n^2$ \u4e2a\u683c\u5b50\u540e\u505c\u6b62\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u77e9\u9635\u4e2d\u6bcf\u4e2a\u683c\u5b50\u904d\u5386\u4e00\u6b21\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^2)$\u3002 C++ \u4ee3\u7801\uff1a class Solution { public: vector<int> printMatrix(vector<vector<int>>& matrix) { vector<int> res; if (matrix.empty()) return res; int n = matrix.size(), m = matrix[0].size(); vector<vector<bool>> st(n, vector<bool>(m, false)); int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1}; int x = 0, y = 0, d = 1; for (int k = 0; k < n * m; k ++ ) { res.push_back(matrix[x][y]); st[x][y] = true; int a = x + dx[d], b = y + dy[d]; if (a < 0 || a >= n || b < 0 || b >= m || st[a][b]) { d = (d + 1) % 4; a = x + dx[d], b = y + dy[d]; } x = a, y = b; } return res; } }; \u4f5c\u8005\uff1ayxc \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/AcWing/content/748/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u7b2c 29 \u9898\uff1a\u987a\u65f6\u9488\u6253\u5370\u77e9\u9635"},{"location":"21-30/#30-min","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u5305\u542bmin\u51fd\u6570\u7684\u6808 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301 push\uff0cpop\uff0ctop \u7b49\u64cd\u4f5c\u5e76\u4e14\u53ef\u4ee5\u5728 O(1) \u65f6\u95f4\u5185\u68c0\u7d22\u51fa\u6700\u5c0f\u5143\u7d20\u7684\u5806\u6808\u3002 push(x)\u2013\u5c06\u5143\u7d20x\u63d2\u5165\u6808\u4e2d pop()\u2013\u79fb\u9664\u6808\u9876\u5143\u7d20 top()\u2013\u5f97\u5230\u6808\u9876\u5143\u7d20 getMin()\u2013\u5f97\u5230\u6808\u4e2d\u6700\u5c0f\u5143\u7d20 \u6837\u4f8b\uff1a MinStack minStack = new MinStack(); minStack.push(-1); minStack.push(3); minStack.push(-4); minStack.getMin(); --> Returns -4. minStack.pop(); minStack.top(); --> Returns 3. minStack.getMin(); --> Returns -1. \u601d\u8def\uff1a \u5b9a\u4e49\u4e24\u4e2a\u6808\uff0c\u4e00\u4e2a\u5b58\u653e\u5165\u7684\u503c\uff0c\u53e6\u4e00\u4e2a\u5b58\u6700\u5c0f\u503c\uff0c\u4e24\u4e2a\u6808\u5e94\u8be5\u662f\u540c\u6b65 push \u548c pop\uff0c\u5426\u5219\u8fd8\u8981\u5206\u7c7b\u8ba8\u8bba\uff0c\u4ee3\u7801\u7f16\u5199\u5bb9\u6613\u51fa\u9519\u3002 \u56e0\u4e3a\u8981\u7528 $O(1)$ \u5b9e\u73b0\u5f53\u524d\u6808\u4e2d\u6700\u5c0f\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\uff0c\u56e0\u6b64\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u548c\u5e95\u5c42 Stack \u540c\u6b65\u7684\u3001\u79f0\u4e4b\u4e3a\u201c\u6700\u5c0f\u6808\u201d\u7684\u6808\u6210\u5458\u3002\u5177\u4f53\u64cd\u4f5c\u5982\u4e0b\u4ee3\u7801\u6240\u793a\u3002 Python \u4ee3\u7801\uff1a class MinStack(object): def __init__(self): \"\"\" initialize your data structure here. \"\"\" self.stack = [] self.helper = [] def push(self, x): \"\"\" :type x: int :rtype: void \"\"\" if len(self.stack) == 0: self.helper.append(x) self.stack.append(x) else: # \u5982\u679c\u5c06\u8981 push \u7684\u5143\u7d20\u6bd4\u8f85\u52a9\u6808\u7684\u6808\u9876\u5143\u7d20\u8fd8\u5927\uff0c\u4e0d\u80fd\u653e\u8fd9\u4e2a\u5143\u7d20\uff0c # \u6b64\u65f6\u5e94\u8be5\u628a\u8f85\u52a9\u6808\u7684\u6808\u9876\u5143\u7d20\u518d\u590d\u5236\u4e00\u4efd peek = self.helper[-1] if x > peek: self.stack.append(x) self.helper.append(peek) else: self.stack.append(x) self.helper.append(x) def pop(self): \"\"\" :rtype: void \"\"\" if len(self.stack) == 0: return # \u540c\u6b65 pop \u5143\u7d20 self.helper.pop() return self.stack.pop() def top(self): \"\"\" :rtype: int \"\"\" return self.stack[-1] def getMin(self): \"\"\" :rtype: int \"\"\" return self.helper[-1] Java \u4ee3\u7801\uff1a import java.util.Stack; public class Solution { private Stack<Integer> minStack = new Stack<>(); private Stack<Integer> dataStack = new Stack<>(); public void push(int node) { if (minStack.isEmpty()) { minStack.push(node); dataStack.push(node); return; } int curMin = minStack.peek(); if (node < curMin) { minStack.push(node); } else { minStack.push(curMin); } dataStack.push(node); } public void pop() { minStack.pop(); dataStack.pop(); } public int top() { return dataStack.pop(); } public int min() { return minStack.peek(); } } \u601d\u8def2\uff1a\u6211\u4eec\u9664\u4e86\u7ef4\u62a4\u57fa\u672c\u7684\u6808\u7ed3\u6784\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u201c\u8f85\u52a9\u6808\u201d\u3002\u4e0b\u9762\u4ecb\u7ecd\u5982\u4f55\u7ef4\u62a4\u5355\u8c03\u6808\uff1a\u505a\u5230\u4ee5\u4e0b\u4e24\u70b9\uff0c\u8f85\u52a9\u6808\u7684\u6808\u9876\u5143\u7d20\uff0c\u5c31\u662f\u5f53\u524d\u6808\u4e2d\u7684\u6700\u5c0f\u6570\u3002 1\u3001\u5f53\u6211\u4eec\u5411\u6808\u4e2d\u538b\u5165\u4e00\u4e2a\u6570\u65f6\uff0c\u5982\u679c\u8be5\u6570\u5c0f\u4e8e\uff08\u53ea\u8981\u5c0f\u4e8e\uff09\u201c\u8f85\u52a9\u6808\u201d\u7684\u6808\u9876\u5143\u7d20\uff0c\u5219\u5c06\u8be5\u6570\u540c\u65f6\u538b\u5165\u201c\u8f85\u52a9\u6808\u201d\u4e2d\uff1b\u5426\u5219\uff0c\u4e0d\u538b\u5165\u3002\u7531\u4e8e\u6808\u5177\u6709\u5148\u8fdb\u540e\u51fa\u6027\u8d28\uff0c\u6240\u4ee5\u5728\u8be5\u6570\u88ab\u5f39\u51fa\u4e4b\u524d\uff0c\u201c\u8f85\u52a9\u6808\u201d\u4e2d\u4e00\u76f4\u5b58\u5728\u4e00\u4e2a\u6570\u6bd4\u8be5\u6570\u5c0f\uff0c\u6240\u4ee5\u8be5\u6570\u4e00\u5b9a\u4e0d\u4f1a\u88ab\u5f53\u505a\u6700\u5c0f\u6570\u8f93\u51fa\u3002 2\u3001\u5f53\u6211\u4eec\u4ece\u6808\u4e2d\u5f39\u51fa\u4e00\u4e2a\u6570\u65f6\uff0c\u5982\u679c\u8be5\u6570\u7b49\u4e8e\u5355\u8c03\u6808\u7684\u6808\u9876\u5143\u7d20\uff0c\u540c\u65f6\u5c06\u5355\u8c03\u6808\u7684\u6808\u9876\u5143\u7d20\u5f39\u51fa\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u56db\u79cd\u64cd\u4f5c\u90fd\u53ea\u6709\u5e38\u6570\u6b21\u5165\u6808\u51fa\u6808\u64cd\u4f5c\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f $O(1)$\u3002 Python \u4ee3\u7801\uff1a # \u5b9a\u4e49\u4e24\u4e2a\u6808\uff0c\u4e00\u4e2a\u5b58\u653e\u5165\u7684\u503c\uff0c\u53e6\u4e00\u4e2a\u5b58\u6700\u5c0f\u503c\uff0c\u4e24\u4e2a\u6808\u5e94\u8be5\u662f\u540c\u6b65 push \u548c pop\uff0c\u5426\u5219\u8fd8\u8981\u5206\u7c7b\u8ba8\u8bba\uff0c\u4ee3\u7801\u7f16\u5199\u5bb9\u6613\u51fa\u9519\u3002 class MinStack(object): def __init__(self): \"\"\" initialize your data structure here. \"\"\" self.stack = [] self.helper = [] def push(self, x): \"\"\" :type x: int :rtype: void \"\"\" # \u65e0\u8bba\u5982\u4f55\u90fd push self.stack.append(x) # \u5982\u679c\u653e\u5165\u7684\u5143\u7d20\u5c0f\u4e8e\u8f85\u52a9\u6808\u9876\u5143\u7d20\uff0c\u8f85\u52a9\u6808\u9876\u624d push\uff0c\u5426\u5219\u4ec0\u4e48\u90fd\u4e0d\u505a if not self.helper or self.helper[-1] > x: self.helper.append(x) def pop(self): \"\"\" :rtype: void \"\"\" if len(self.stack) == 0: return # \u5982\u679c\u5f39\u51fa\u7684\u5143\u7d20\u7b49\u4e8e\u8f85\u52a9\u6808\u6808\u9876\u5143\u7d20\uff0c\u624d\u5c06\u8f85\u52a9\u6808\u9876\u5143\u7d20\u5f39\u51fa if self.helper[-1] == self.stack[-1]: self.helper.pop() return self.stack.pop() def top(self): \"\"\" :rtype: int \"\"\" return self.stack[-1] def getMin(self): \"\"\" :rtype: int \"\"\" return self.helper[-1] # Your MinStack object will be instantiated and called as such: # obj = MinStack() # obj.push(x) # obj.pop() # param_3 = obj.top() # param_4 = obj.getMin() Java \u4ee3\u7801\uff1a import java.util.Stack; public class Solution { private Stack<Integer> minStack = new Stack<>(); private Stack<Integer> dataStack = new Stack<>(); public void push(int node) { if (minStack.isEmpty()) { minStack.push(node); dataStack.push(node); return; } int curMin = minStack.peek(); if (node < curMin) { minStack.push(node); } else { minStack.push(curMin); } dataStack.push(node); } public void pop() { minStack.pop(); dataStack.pop(); } public int top() { return dataStack.pop(); } public int min() { return minStack.peek(); } } LeetCode \u7b2c 155 \u9898\uff1a\u6700\u5c0f\u6808 \u8bbe\u7f6e\u4e00\u4e2a\u8f85\u52a9\u6808\uff0c\u4fdd\u5b58\u5f53\u524d\u6700\u5c0f\u7684\u5143\u7d20\u3002 Python \u4ee3\u7801\uff1a class MinStack(object): # \u3010\u7279\u522b\u6ce8\u610f\u3011\u6570\u636e\u6808\u548c\u8f85\u52a9\u6808\u8981\u540c\u6b65\uff0c\u7279\u6b8a\u6d4b\u8bd5\u7528\u4f8b\u4e3a\uff1a # \u4f9d\u6b21 push 0 1 0\uff0c\u9a6c\u4e0a\u5f39\u6808\uff0c\u67e5\u8be2\u6700\u5c0f def __init__(self): \"\"\" initialize your data structure here. \"\"\" # \u6570\u636e\u6808 self.data_stack = [] # \u8f85\u52a9\u6808 self.help_stack = [] def push(self, x): \"\"\" :type x: int :rtype: void \"\"\" self.data_stack.append(x) if len(self.help_stack) == 0 or x < self.help_stack[-1]: self.help_stack.append(x) else: self.help_stack.append(self.help_stack[-1]) def pop(self): \"\"\" :rtype: void \"\"\" if len(self.data_stack) > 0: ret = self.data_stack.pop() self.help_stack.pop() return ret def top(self): \"\"\" :rtype: int \"\"\" if len(self.data_stack) > 0: return self.data_stack[-1] def getMin(self): \"\"\" :rtype: int \"\"\" if len(self.data_stack) > 0: return self.help_stack[-1] # Your MinStack object will be instantiated and called as such: # obj = MinStack() # obj.push(x) # obj.pop() # param_3 = obj.top() # param_4 = obj.getMin() if __name__ == '__main__': min_stack = MinStack() min_stack.push(0) min_stack.push(1) min_stack.push(0) print(min_stack.getMin()) min_stack.pop() print(min_stack) print(min_stack.getMin()) \uff08\u672c\u8282\u5b8c\uff09","title":"\u7b2c 30 \u9898\uff1a\u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u6700\u5c0f\u5143\u7d20\u7684 min \u51fd\u6570"},{"location":"21/","text":"\u5251\u6307 Offer 21. \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762 \u529b\u6263\uff1a \u5251\u6307 Offer 21. \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762 \uff1b AcWing\uff1a\u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u6574\u8be5\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\u3002 \u4f7f\u5f97\u6240\u6709\u7684\u5947\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u7684\u5076\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u540e\u534a\u90e8\u5206\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,3,4,5] \u8f93\u51fa\uff1a [1,3,5,2,4] \u5206\u6790\uff1a\u8fd9\u9053\u9898\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u5c31\u662f\uff1a\u4fdd\u6301\u539f\u6765\u7684\u987a\u5e8f\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 LeetCode \u7b2c 88 \u9898\u7684\u7b56\u7565\uff0c\u4ece\u540e\u5411\u524d\u91cd\u65b0\u4e3a\u6570\u7ec4\u8d4b\u503c\u3002 \u601d\u8def1\uff1a\u6709\u70b9\u7c7b\u4f3c\u201c\u4e24\u8def\u5feb\u6392\u201d\u7684\u601d\u8def\u3002\u201c\u4e24\u8def\u5feb\u6392\u201d\u4e2d\u6709\u4e00\u4e9b\u7ec6\u8282\u9700\u8981\u590d\u4e60\u4e00\u4e0b\u3002\u53cc\u6307\u9488\u626b\u63cf\uff1a\u7528\u4e24\u4e2a\u6307\u9488\u5206\u522b\u4ece\u9996\u5c3e\u5f00\u59cb\uff0c\u5f80\u4e2d\u95f4\u626b\u63cf\u3002\u626b\u63cf\u65f6\u4fdd\u8bc1 \u7b2c\u4e00\u4e2a\u6307\u9488\u524d\u9762\u7684\u6570\u90fd\u662f\u5947\u6570\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u540e\u9762\u7684\u6570\u90fd\u662f\u5076\u6570 \u3002\u6bcf\u6b21\u8fed\u4ee3\u65f6\u9700\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\uff1a 1\u3001\u7b2c\u4e00\u4e2a\u6307\u9488\u4e00\u76f4\u5f80\u540e\u8d70\uff0c\u76f4\u5230\u9047\u5230\u7b2c\u4e00\u4e2a\u5076\u6570\u4e3a\u6b62\uff1b 2\u3001\u7b2c\u4e8c\u4e2a\u6307\u9488\u4e00\u76f4\u5f80\u524d\u8d70\uff0c\u76f4\u5230\u9047\u5230\u7b2c\u4e00\u4e2a\u5947\u6570\u4e3a\u6b62\u3002 \u4ea4\u6362\u4e24\u4e2a\u6307\u9488\u6307\u5411\u7684\u4f4d\u7f6e\u4e0a\u7684\u6570\uff0c\u518d\u8fdb\u5165\u4e0b\u4e00\u5c42\u8fed\u4ee3\uff0c\u76f4\u5230\u4e24\u4e2a\u6307\u9488\u76f8\u9047\u4e3a\u6b62\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5f53\u4e24\u4e2a\u6307\u9488\u76f8\u9047\u65f6\uff0c\u8d70\u8fc7\u7684\u603b\u8def\u7a0b\u957f\u5ea6\u662f $n$\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n)$\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def reOrderArray(self, array): \"\"\" :type array: List[int] :rtype: void \"\"\" # \u7279\u5224 size = len(array) if size < 2: return l = 0 r = size - 1 # \u59cb\u7ec8\u4fdd\u6301 [0,l) \u662f\u5947\u6570 # (r,size-1] \u662f\u5076\u6570 while True: while l <= r and array[l] & 1 == 1: l += 1 # \u6b64\u65f6 l \u6765\u5230\u4e86\u7b2c\u4e00\u4e2a\u5076\u6570\u4f4d\u7f6e while r >= l and array[r] & 1 == 0: r -= 1 # \u6b64\u65f6 r \u6765\u5230\u4e86\u7b2c\u4e00\u4e2a\u5947\u6570\u7684\u4f4d\u7f6e # \u8fd9\u91cc\u4e00\u5b9a\u662f\u5927\u4e8e\u53f7\uff0c\u5426\u5219\u6570\u7ec4\u4e0b\u6807\u4f1a\u8d8a\u754c # \u4e00\u5b9a\u8981\u7279\u522b\u6ce8\u610f\uff0c\u5199 == \u53f7\u4f1a\u51fa\u9519\uff0c\u5199 >= \u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a == \u6210\u7acb\u7684\u65f6\u5019\uff0c\u4e0d\u7528\u4ea4\u6362 if l > r: break array[l], array[r] = array[r], array[l] l += 1 r -= 1 return array C++ \u4ee3\u7801\uff1a C++ \u4ee3\u7801\uff1a class Solution { public: void reOrderArray(vector<int> &array) { int l = 0, r = array.size() - 1; while (l <= r) { while (array[l] % 2 == 1) l ++ ; while (array[r] % 2 == 0) r -- ; if (l < r) swap(array[l], array[r]); } } }; \u601d\u8def2\uff1a\u628a\u5947\u6570\u6570\u7ec4\u590d\u5236\u51fa\u6765\uff0c\u6309\u7167\u4ece\u540e\u5411\u524d\u5f52\u5e76\u6392\u5e8f\u7684\u505a\u6cd5\u5b8c\u6210\u3002 Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { // \u4fdd\u8bc1\u5947\u6570\u548c\u5947\u6570\uff0c\u5076\u6570\u548c\u5076\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002 public void reOrderArray(int[] array) { int len = array.length; if (len == 0) { return; } // \u5947\u6570\u5168\u90e8\u632a\u5230\u7f13\u5b58\u6570\u7ec4\u4e2d int[] buff = new int[len]; int j = -1; for (int i = 0; i < len; i++) { if (array[i] % 2 == 1) { j++; buff[j] = array[i]; } } // \u5982\u679c\u90fd\u6ca1\u6709\u5947\u6570\u7684\u8bdd\uff0c\u7a0b\u5e8f\u7ec8\u6b62 if (j == -1) { return; } // \u628a\u5076\u6570\u96c6\u4e2d\u201c\u6324\u201d\u5230\u6570\u7ec4\u7684\u672b\u5c3e // \u7136\u540e\u518d\u628a\u7f13\u5b58\u6570\u7ec4\u4e2d\u7684\u5947\u6570\u5012\u5e8f\u653e\u5165 int k = len - 1; for (int i = len - 1; i >= 0; i--) { if (array[i] % 2 == 0) { array[k] = array[i]; k--; } } while (j >= 0) { array[j] = buff[j]; j--; } } public static void main(String[] args) { int[] arr = {1, 2, 3, 4, 5}; Solution solution = new Solution(); solution.reOrderArray(arr); System.out.println(Arrays.toString(arr)); } } Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { // \u4fdd\u8bc1\u5947\u6570\u548c\u5947\u6570\uff0c\u5076\u6570\u548c\u5076\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002 public void reOrderArray(int[] array) { int len = array.length; if (len == 0) { return; } // \u5947\u6570\u5168\u90e8\u632a\u5230\u7f13\u5b58\u6570\u7ec4\u4e2d int[] buff = new int[len]; int j = -1; for (int i = 0; i < len; i++) { if (array[i] % 2 == 1) { j++; buff[j] = array[i]; } } // \u5982\u679c\u6ca1\u6709\u5947\u6570\uff0c\u76f4\u63a5\u8fd4\u56de\u5c31\u53ef\u4ee5\u4e86 if (j == -1) { return; } // \u4ece\u540e\u5411\u524d\u8d4b\u503c int k = len - 1; for (int i = len - 1; i >= 0; i--) { if (array[i] % 2 == 0) { array[k] = array[i]; k--; } } while (j >= 0) { array[j] = buff[j]; j--; } } } \u6269\u5c55\uff1a\u4e66\u672c\u4e0a\u6709\u8fd9\u4e2a\u95ee\u9898\u66f4\u4e00\u822c\u7684\u505a\u6cd5\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 21. \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762"},{"location":"21/#offer-21","text":"\u529b\u6263\uff1a \u5251\u6307 Offer 21. \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762 \uff1b AcWing\uff1a\u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u6574\u8be5\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\u3002 \u4f7f\u5f97\u6240\u6709\u7684\u5947\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u7684\u5076\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u540e\u534a\u90e8\u5206\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,3,4,5] \u8f93\u51fa\uff1a [1,3,5,2,4] \u5206\u6790\uff1a\u8fd9\u9053\u9898\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u5c31\u662f\uff1a\u4fdd\u6301\u539f\u6765\u7684\u987a\u5e8f\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 LeetCode \u7b2c 88 \u9898\u7684\u7b56\u7565\uff0c\u4ece\u540e\u5411\u524d\u91cd\u65b0\u4e3a\u6570\u7ec4\u8d4b\u503c\u3002 \u601d\u8def1\uff1a\u6709\u70b9\u7c7b\u4f3c\u201c\u4e24\u8def\u5feb\u6392\u201d\u7684\u601d\u8def\u3002\u201c\u4e24\u8def\u5feb\u6392\u201d\u4e2d\u6709\u4e00\u4e9b\u7ec6\u8282\u9700\u8981\u590d\u4e60\u4e00\u4e0b\u3002\u53cc\u6307\u9488\u626b\u63cf\uff1a\u7528\u4e24\u4e2a\u6307\u9488\u5206\u522b\u4ece\u9996\u5c3e\u5f00\u59cb\uff0c\u5f80\u4e2d\u95f4\u626b\u63cf\u3002\u626b\u63cf\u65f6\u4fdd\u8bc1 \u7b2c\u4e00\u4e2a\u6307\u9488\u524d\u9762\u7684\u6570\u90fd\u662f\u5947\u6570\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u540e\u9762\u7684\u6570\u90fd\u662f\u5076\u6570 \u3002\u6bcf\u6b21\u8fed\u4ee3\u65f6\u9700\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\uff1a 1\u3001\u7b2c\u4e00\u4e2a\u6307\u9488\u4e00\u76f4\u5f80\u540e\u8d70\uff0c\u76f4\u5230\u9047\u5230\u7b2c\u4e00\u4e2a\u5076\u6570\u4e3a\u6b62\uff1b 2\u3001\u7b2c\u4e8c\u4e2a\u6307\u9488\u4e00\u76f4\u5f80\u524d\u8d70\uff0c\u76f4\u5230\u9047\u5230\u7b2c\u4e00\u4e2a\u5947\u6570\u4e3a\u6b62\u3002 \u4ea4\u6362\u4e24\u4e2a\u6307\u9488\u6307\u5411\u7684\u4f4d\u7f6e\u4e0a\u7684\u6570\uff0c\u518d\u8fdb\u5165\u4e0b\u4e00\u5c42\u8fed\u4ee3\uff0c\u76f4\u5230\u4e24\u4e2a\u6307\u9488\u76f8\u9047\u4e3a\u6b62\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5f53\u4e24\u4e2a\u6307\u9488\u76f8\u9047\u65f6\uff0c\u8d70\u8fc7\u7684\u603b\u8def\u7a0b\u957f\u5ea6\u662f $n$\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n)$\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def reOrderArray(self, array): \"\"\" :type array: List[int] :rtype: void \"\"\" # \u7279\u5224 size = len(array) if size < 2: return l = 0 r = size - 1 # \u59cb\u7ec8\u4fdd\u6301 [0,l) \u662f\u5947\u6570 # (r,size-1] \u662f\u5076\u6570 while True: while l <= r and array[l] & 1 == 1: l += 1 # \u6b64\u65f6 l \u6765\u5230\u4e86\u7b2c\u4e00\u4e2a\u5076\u6570\u4f4d\u7f6e while r >= l and array[r] & 1 == 0: r -= 1 # \u6b64\u65f6 r \u6765\u5230\u4e86\u7b2c\u4e00\u4e2a\u5947\u6570\u7684\u4f4d\u7f6e # \u8fd9\u91cc\u4e00\u5b9a\u662f\u5927\u4e8e\u53f7\uff0c\u5426\u5219\u6570\u7ec4\u4e0b\u6807\u4f1a\u8d8a\u754c # \u4e00\u5b9a\u8981\u7279\u522b\u6ce8\u610f\uff0c\u5199 == \u53f7\u4f1a\u51fa\u9519\uff0c\u5199 >= \u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a == \u6210\u7acb\u7684\u65f6\u5019\uff0c\u4e0d\u7528\u4ea4\u6362 if l > r: break array[l], array[r] = array[r], array[l] l += 1 r -= 1 return array C++ \u4ee3\u7801\uff1a C++ \u4ee3\u7801\uff1a class Solution { public: void reOrderArray(vector<int> &array) { int l = 0, r = array.size() - 1; while (l <= r) { while (array[l] % 2 == 1) l ++ ; while (array[r] % 2 == 0) r -- ; if (l < r) swap(array[l], array[r]); } } }; \u601d\u8def2\uff1a\u628a\u5947\u6570\u6570\u7ec4\u590d\u5236\u51fa\u6765\uff0c\u6309\u7167\u4ece\u540e\u5411\u524d\u5f52\u5e76\u6392\u5e8f\u7684\u505a\u6cd5\u5b8c\u6210\u3002 Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { // \u4fdd\u8bc1\u5947\u6570\u548c\u5947\u6570\uff0c\u5076\u6570\u548c\u5076\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002 public void reOrderArray(int[] array) { int len = array.length; if (len == 0) { return; } // \u5947\u6570\u5168\u90e8\u632a\u5230\u7f13\u5b58\u6570\u7ec4\u4e2d int[] buff = new int[len]; int j = -1; for (int i = 0; i < len; i++) { if (array[i] % 2 == 1) { j++; buff[j] = array[i]; } } // \u5982\u679c\u90fd\u6ca1\u6709\u5947\u6570\u7684\u8bdd\uff0c\u7a0b\u5e8f\u7ec8\u6b62 if (j == -1) { return; } // \u628a\u5076\u6570\u96c6\u4e2d\u201c\u6324\u201d\u5230\u6570\u7ec4\u7684\u672b\u5c3e // \u7136\u540e\u518d\u628a\u7f13\u5b58\u6570\u7ec4\u4e2d\u7684\u5947\u6570\u5012\u5e8f\u653e\u5165 int k = len - 1; for (int i = len - 1; i >= 0; i--) { if (array[i] % 2 == 0) { array[k] = array[i]; k--; } } while (j >= 0) { array[j] = buff[j]; j--; } } public static void main(String[] args) { int[] arr = {1, 2, 3, 4, 5}; Solution solution = new Solution(); solution.reOrderArray(arr); System.out.println(Arrays.toString(arr)); } } Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { // \u4fdd\u8bc1\u5947\u6570\u548c\u5947\u6570\uff0c\u5076\u6570\u548c\u5076\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002 public void reOrderArray(int[] array) { int len = array.length; if (len == 0) { return; } // \u5947\u6570\u5168\u90e8\u632a\u5230\u7f13\u5b58\u6570\u7ec4\u4e2d int[] buff = new int[len]; int j = -1; for (int i = 0; i < len; i++) { if (array[i] % 2 == 1) { j++; buff[j] = array[i]; } } // \u5982\u679c\u6ca1\u6709\u5947\u6570\uff0c\u76f4\u63a5\u8fd4\u56de\u5c31\u53ef\u4ee5\u4e86 if (j == -1) { return; } // \u4ece\u540e\u5411\u524d\u8d4b\u503c int k = len - 1; for (int i = len - 1; i >= 0; i--) { if (array[i] % 2 == 0) { array[k] = array[i]; k--; } } while (j >= 0) { array[j] = buff[j]; j--; } } } \u6269\u5c55\uff1a\u4e66\u672c\u4e0a\u6709\u8fd9\u4e2a\u95ee\u9898\u66f4\u4e00\u822c\u7684\u505a\u6cd5\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 21. \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762"},{"location":"22/","text":"\u5251\u6307 Offer 22. \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9 \u5251\u6307 Offer 22. \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9 \uff1b AcWing\uff1a\u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u8282\u70b9 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u7ed3\u70b9\u3002 \u6ce8\u610f\uff1a k >= 0 ; \u5982\u679c k \u5927\u4e8e\u94fe\u8868\u957f\u5ea6\uff0c\u5219\u8fd4\u56de NULL; \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\u94fe\u8868\uff1a 1->2->3->4->5 \uff0c k=2 \u8f93\u51fa\uff1a4 \u5206\u6790\uff1a\u8bbe\u7f6e\u5feb\u6162\u6307\u9488\uff0c\u601d\u8def\u5f88\u7b80\u5355\uff0c\u4e0d\u8fc7\u5728\u5177\u4f53\u7f16\u7801\u7684\u65f6\u5019\uff0c\u8fd8\u662f\u6709\u4e00\u4e9b\u7ec6\u8282\u8981\u6ce8\u610f\u7684\uff0c\u7279\u522b\u662f\u7a7a\u6307\u9488\u7684\u5224\u65ad\u4e0a\u3002 \u56e0\u4e3a\u7b2c k \u4e2a\u7ed3\u70b9\u5f88\u53ef\u80fd\u662f\u94fe\u8868\u7684\u7b2c 1 \u4e2a\u7ed3\u70b9\uff0c\u56e0\u6b64\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\uff0c\u662f\u8fd9\u4e00\u5217\u95ee\u9898\u7684\u57fa\u672c\u505a\u6cd5\uff0c\u53ef\u4ee5\u51cf\u5c11\u5206\u7c7b\u8ba8\u8bba\u7684\u60c5\u51b5\u3002 \u5bf9\u4e00\u4e9b\u6781\u7aef\u60c5\u51b5\u7684\u8ba8\u8bba\uff08\u4e0b\u9762\u4ee3\u7801\u4e2d\u7684\u6ce8\u610f\u70b9 2 \uff09\u3002 \u601d\u8def1\uff1a\u5148\u904d\u5386\u5b8c\uff0c\u6570\u51fa\u94fe\u8868\u6709\u591a\u5c11\u4e2a\u7ed3\u70b9\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def findKthToTail(self, pListHead, k): \"\"\" :type pListHead: ListNode :type k: int :rtype: ListNode \"\"\" if pListHead is None: return None counter = 0 p = pListHead while p: counter += 1 p = p.next if k > counter: return None p = pListHead for _ in range(counter - k): p = p.next return p \u601d\u8def2\uff1a\u63a8\u8350\uff0c\u8bbe\u7f6e\u5feb\u6162\u6307\u9488\uff0c\u5feb\u6307\u9488\u5148\u8d70 $k-1$ \u6b65\uff0c\u7136\u540e\u5feb\u6162\u6307\u9488\u4e00\u8d77\u8d70\u3002 C++ \u4ee3\u7801\uff1a Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def findKthToTail(self, pListHead, k): \"\"\" :type pListHead: ListNode :type k: int :rtype: ListNode \"\"\" if pListHead is None: return None fast = pListHead # \u8981\u6ce8\u610f\u7684\u4e34\u754c\u70b91\uff1a for _ in range(k - 1): fast = fast.next # \u6ce8\u610f\u5224\u65ad if fast is None: return None slow = pListHead # \u8981\u6ce8\u610f\u7684\u4e34\u754c\u70b92\uff1a while fast.next: slow = slow.next fast = fast.next return slow Java \u4ee3\u7801\uff1a class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } } public class Solution { public ListNode FindKthToTail(ListNode head, int k) { // \u6ce8\u610f\u70b91\uff1a\u6781\u7aef\u8f93\u5165\uff0c\u76f4\u63a5\u8f93\u51fa\u7ed3\u679c if (head == null) { return null; } ListNode dummyNode = new ListNode(-1); dummyNode.next = head; ListNode fast = dummyNode; for (int i = 0; i < k; i++) { fast = fast.next; // \u6ce8\u610f\u70b92\uff1a\u5bf9\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u8f93\u5165\u7684\u5224\u65ad if (fast == null) { return null; } } ListNode slow = dummyNode; while (fast != null) { fast = fast.next; slow = slow.next; } return slow; } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 22. \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9"},{"location":"22/#offer-22-k","text":"\u5251\u6307 Offer 22. \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9 \uff1b AcWing\uff1a\u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u8282\u70b9 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u7ed3\u70b9\u3002 \u6ce8\u610f\uff1a k >= 0 ; \u5982\u679c k \u5927\u4e8e\u94fe\u8868\u957f\u5ea6\uff0c\u5219\u8fd4\u56de NULL; \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\u94fe\u8868\uff1a 1->2->3->4->5 \uff0c k=2 \u8f93\u51fa\uff1a4 \u5206\u6790\uff1a\u8bbe\u7f6e\u5feb\u6162\u6307\u9488\uff0c\u601d\u8def\u5f88\u7b80\u5355\uff0c\u4e0d\u8fc7\u5728\u5177\u4f53\u7f16\u7801\u7684\u65f6\u5019\uff0c\u8fd8\u662f\u6709\u4e00\u4e9b\u7ec6\u8282\u8981\u6ce8\u610f\u7684\uff0c\u7279\u522b\u662f\u7a7a\u6307\u9488\u7684\u5224\u65ad\u4e0a\u3002 \u56e0\u4e3a\u7b2c k \u4e2a\u7ed3\u70b9\u5f88\u53ef\u80fd\u662f\u94fe\u8868\u7684\u7b2c 1 \u4e2a\u7ed3\u70b9\uff0c\u56e0\u6b64\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\uff0c\u662f\u8fd9\u4e00\u5217\u95ee\u9898\u7684\u57fa\u672c\u505a\u6cd5\uff0c\u53ef\u4ee5\u51cf\u5c11\u5206\u7c7b\u8ba8\u8bba\u7684\u60c5\u51b5\u3002 \u5bf9\u4e00\u4e9b\u6781\u7aef\u60c5\u51b5\u7684\u8ba8\u8bba\uff08\u4e0b\u9762\u4ee3\u7801\u4e2d\u7684\u6ce8\u610f\u70b9 2 \uff09\u3002 \u601d\u8def1\uff1a\u5148\u904d\u5386\u5b8c\uff0c\u6570\u51fa\u94fe\u8868\u6709\u591a\u5c11\u4e2a\u7ed3\u70b9\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def findKthToTail(self, pListHead, k): \"\"\" :type pListHead: ListNode :type k: int :rtype: ListNode \"\"\" if pListHead is None: return None counter = 0 p = pListHead while p: counter += 1 p = p.next if k > counter: return None p = pListHead for _ in range(counter - k): p = p.next return p \u601d\u8def2\uff1a\u63a8\u8350\uff0c\u8bbe\u7f6e\u5feb\u6162\u6307\u9488\uff0c\u5feb\u6307\u9488\u5148\u8d70 $k-1$ \u6b65\uff0c\u7136\u540e\u5feb\u6162\u6307\u9488\u4e00\u8d77\u8d70\u3002 C++ \u4ee3\u7801\uff1a Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def findKthToTail(self, pListHead, k): \"\"\" :type pListHead: ListNode :type k: int :rtype: ListNode \"\"\" if pListHead is None: return None fast = pListHead # \u8981\u6ce8\u610f\u7684\u4e34\u754c\u70b91\uff1a for _ in range(k - 1): fast = fast.next # \u6ce8\u610f\u5224\u65ad if fast is None: return None slow = pListHead # \u8981\u6ce8\u610f\u7684\u4e34\u754c\u70b92\uff1a while fast.next: slow = slow.next fast = fast.next return slow Java \u4ee3\u7801\uff1a class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } } public class Solution { public ListNode FindKthToTail(ListNode head, int k) { // \u6ce8\u610f\u70b91\uff1a\u6781\u7aef\u8f93\u5165\uff0c\u76f4\u63a5\u8f93\u51fa\u7ed3\u679c if (head == null) { return null; } ListNode dummyNode = new ListNode(-1); dummyNode.next = head; ListNode fast = dummyNode; for (int i = 0; i < k; i++) { fast = fast.next; // \u6ce8\u610f\u70b92\uff1a\u5bf9\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u8f93\u5165\u7684\u5224\u65ad if (fast == null) { return null; } } ListNode slow = dummyNode; while (fast != null) { fast = fast.next; slow = slow.next; } return slow; } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 22. \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9"},{"location":"23-%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E7%BB%93%E7%82%B9/","text":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 23 \u9898] \u201c\u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9\u201d\u505a\u9898\u8bb0\u5f55 \u7b2c 23 \u9898\uff1a\u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u82e5\u5176\u4e2d\u5305\u542b\u73af\uff0c\u5219\u8f93\u51fa\u73af\u7684\u5165\u53e3\u8282\u70b9\u3002 \u82e5\u5176\u4e2d\u4e0d\u5305\u542b\u73af\uff0c\u5219\u8f93\u51fa null \u3002 \u6837\u4f8b\uff1a \u7ed9\u5b9a\u5982\u4e0a\u6240\u793a\u7684\u94fe\u8868\uff1a [1, 2, 3, 4, 5, 6] \uff0c\u7f16\u53f7\uff1a2\u3002 \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684 2 \u8868\u793a\u7f16\u53f7\u662f 2 \u7684\u8282\u70b9\uff0c\u8282\u70b9\u7f16\u53f7\u4ece 0 \u5f00\u59cb\u3002\u6240\u4ee5\u7f16\u53f7\u662f 2 \u7684\u8282\u70b9\u5c31\u662f val \u7b49\u4e8e 3 \u7684\u8282\u70b9\u3002 \u5219\u8f93\u51fa\u73af\u7684\u5165\u53e3\u8282\u70b9 3 \u3002 \u5206\u6790\uff1a\u770b\u7684\u7b54\u6848\uff0c\u8bb0\u4f4f\u7ed3\u8bba\u5c31\u597d\uff0c\u7f16\u7801\u4e0a\u8fd8\u662f\u8981\u6ce8\u610f\u7279\u5224\u7684\u60c5\u51b5\uff0c\u8fd8\u6709\u7a7a\u6307\u9488\u7684\u60c5\u51b5\u3002\u201c\u6162\u201d\u6307\u9488\u8fdb\u5165\u73af\u7684\u65f6\u5019\uff0c\u201c\u5feb\u6307\u9488\u201d\u8981\u6765\u8ffd\u5b83\uff0c\u56e0\u4e3a\u5feb\u6162\u6307\u9488\u8d70\u7684\u6b65\u6570\u5dee\u662f\u56fa\u5b9a\u7684\u3002\u4f8b\u5982\uff1a A \u624b\u4e0a\u6709 100 \u5757\u94b1\uff0cA \u6bcf\u5929\u8d5a 10 \u5757\u94b1\uff0cB \u624b\u4e0a\u6709 50 \u5757\u94b1\uff0cB \u6bcf\u5929\u8d5a 20\uff0c\u4e00\u5b9a\u6709\u4e00\u5929\uff0c\u4f60\u4eec\u7684\u94b1\u76f8\u7b49\uff0c\u800c\u4e14\u53ea\u8981\u73af\u5185\u7ed3\u70b9\u4e2a\u6570\u8fd9\u4e48\u591a\u5c31\u53ef\u4ee5\u4e86\u3002 \u6211\u5199\u7684\u9519\u8bef\u89e3\uff1a Python \u4ee3\u7801\uff1a # 34. \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9 # \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u82e5\u5176\u4e2d\u5305\u542b\u73af\uff0c\u5219\u8f93\u51fa\u73af\u7684\u5165\u53e3\u8282\u70b9\u3002 # # \u82e5\u5176\u4e2d\u4e0d\u5305\u542b\u73af\uff0c\u5219\u8f93\u51fanull\u3002 # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution(object): def entryNodeOfLoop(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" # \u5148\u8003\u8651\u8fb9\u754c\u60c5\u51b5 if head is None or head.next is None: return None slow = head fast = head while fast and fast.next: # \u6162\u6307\u9488\u8d70\u4e00\u6b65\uff0c\u5feb\u6307\u9488\u8d70\u4e24\u6b65 slow = slow.next fast = fast.next.next if slow == fast: # \u8bf4\u660e\u94fe\u8868\u4e2d\u5b58\u5728\u73af break # \u6ce8\u610f\uff1a\u8df3\u51fa\u5faa\u73af\u7684\u539f\u56e0\u6709\u4e24\u4e2a\uff0c\u6709\u53ef\u80fd\u662f\u6839\u672c\u6ca1\u6709\u73af\uff0c\u5373\u4e0a\u9762 while fast and fast.next \u4e0d\u6210\u7acb # \u4e5f\u6709\u53ef\u80fd\u662f slow == fast \u91cc break \u7684\uff0c\u5206\u522b\u8ba8\u8bba\u5c31\u53ef\u4ee5\u4e86 if fast is None or fast.next is None: return None slow = head while slow != fast: slow = slow.next fast = fast.next # \u8d70\u5230\u8fd9\u91cc\uff0c\u8bf4\u660e slow == fast return slow MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 23 \u9898] \u201c\u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9\u201d\u505a\u9898\u8bb0\u5f55"},{"location":"23-%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E7%BB%93%E7%82%B9/#offer-2-23","text":"","title":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 23 \u9898] \u201c\u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9\u201d\u505a\u9898\u8bb0\u5f55"},{"location":"23-%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E7%BB%93%E7%82%B9/#23","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u82e5\u5176\u4e2d\u5305\u542b\u73af\uff0c\u5219\u8f93\u51fa\u73af\u7684\u5165\u53e3\u8282\u70b9\u3002 \u82e5\u5176\u4e2d\u4e0d\u5305\u542b\u73af\uff0c\u5219\u8f93\u51fa null \u3002 \u6837\u4f8b\uff1a \u7ed9\u5b9a\u5982\u4e0a\u6240\u793a\u7684\u94fe\u8868\uff1a [1, 2, 3, 4, 5, 6] \uff0c\u7f16\u53f7\uff1a2\u3002 \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684 2 \u8868\u793a\u7f16\u53f7\u662f 2 \u7684\u8282\u70b9\uff0c\u8282\u70b9\u7f16\u53f7\u4ece 0 \u5f00\u59cb\u3002\u6240\u4ee5\u7f16\u53f7\u662f 2 \u7684\u8282\u70b9\u5c31\u662f val \u7b49\u4e8e 3 \u7684\u8282\u70b9\u3002 \u5219\u8f93\u51fa\u73af\u7684\u5165\u53e3\u8282\u70b9 3 \u3002 \u5206\u6790\uff1a\u770b\u7684\u7b54\u6848\uff0c\u8bb0\u4f4f\u7ed3\u8bba\u5c31\u597d\uff0c\u7f16\u7801\u4e0a\u8fd8\u662f\u8981\u6ce8\u610f\u7279\u5224\u7684\u60c5\u51b5\uff0c\u8fd8\u6709\u7a7a\u6307\u9488\u7684\u60c5\u51b5\u3002\u201c\u6162\u201d\u6307\u9488\u8fdb\u5165\u73af\u7684\u65f6\u5019\uff0c\u201c\u5feb\u6307\u9488\u201d\u8981\u6765\u8ffd\u5b83\uff0c\u56e0\u4e3a\u5feb\u6162\u6307\u9488\u8d70\u7684\u6b65\u6570\u5dee\u662f\u56fa\u5b9a\u7684\u3002\u4f8b\u5982\uff1a A \u624b\u4e0a\u6709 100 \u5757\u94b1\uff0cA \u6bcf\u5929\u8d5a 10 \u5757\u94b1\uff0cB \u624b\u4e0a\u6709 50 \u5757\u94b1\uff0cB \u6bcf\u5929\u8d5a 20\uff0c\u4e00\u5b9a\u6709\u4e00\u5929\uff0c\u4f60\u4eec\u7684\u94b1\u76f8\u7b49\uff0c\u800c\u4e14\u53ea\u8981\u73af\u5185\u7ed3\u70b9\u4e2a\u6570\u8fd9\u4e48\u591a\u5c31\u53ef\u4ee5\u4e86\u3002 \u6211\u5199\u7684\u9519\u8bef\u89e3\uff1a Python \u4ee3\u7801\uff1a # 34. \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9 # \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u82e5\u5176\u4e2d\u5305\u542b\u73af\uff0c\u5219\u8f93\u51fa\u73af\u7684\u5165\u53e3\u8282\u70b9\u3002 # # \u82e5\u5176\u4e2d\u4e0d\u5305\u542b\u73af\uff0c\u5219\u8f93\u51fanull\u3002 # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution(object): def entryNodeOfLoop(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" # \u5148\u8003\u8651\u8fb9\u754c\u60c5\u51b5 if head is None or head.next is None: return None slow = head fast = head while fast and fast.next: # \u6162\u6307\u9488\u8d70\u4e00\u6b65\uff0c\u5feb\u6307\u9488\u8d70\u4e24\u6b65 slow = slow.next fast = fast.next.next if slow == fast: # \u8bf4\u660e\u94fe\u8868\u4e2d\u5b58\u5728\u73af break # \u6ce8\u610f\uff1a\u8df3\u51fa\u5faa\u73af\u7684\u539f\u56e0\u6709\u4e24\u4e2a\uff0c\u6709\u53ef\u80fd\u662f\u6839\u672c\u6ca1\u6709\u73af\uff0c\u5373\u4e0a\u9762 while fast and fast.next \u4e0d\u6210\u7acb # \u4e5f\u6709\u53ef\u80fd\u662f slow == fast \u91cc break \u7684\uff0c\u5206\u522b\u8ba8\u8bba\u5c31\u53ef\u4ee5\u4e86 if fast is None or fast.next is None: return None slow = head while slow != fast: slow = slow.next fast = fast.next # \u8d70\u5230\u8fd9\u91cc\uff0c\u8bf4\u660e slow == fast return slow MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 23 \u9898\uff1a\u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9"},{"location":"24/","text":"\u5251\u6307 Offer 24. \u53cd\u8f6c\u94fe\u8868 \u5251\u6307 Offer 24. \u53cd\u8f6c\u94fe\u8868 \uff1b AcWing\uff1a\u53cd\u8f6c\u94fe\u8868 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u53cd\u8f6c\u8be5\u94fe\u8868\u5e76\u8f93\u51fa\u53cd\u8f6c\u540e\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a 1->2->3->4->5->NULL \u8f93\u51fa\uff1a 5->4->3->2->1->NULL \u5206\u6790\uff1a\u8fd9\u9053\u9898\u540c LeetCode \u4e0a\u4e00\u9053\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u6c42\u89e3\u3002\u4e2a\u4eba\u89c9\u5f97\u9012\u5f52\u7684\u65b9\u5f0f\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u662f\u5728\u94fe\u8868\u8f83\u957f\u7684\u65f6\u5019\uff0c\u9012\u5f52\u6548\u7387\u504f\u4f4e\uff0c\u56e0\u4e3a\u8981\u4f7f\u7528\u7cfb\u7edf\u6808\u3002 \u601d\u8def1\uff1a\u9012\u5f52\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None # \u9012\u5f52\u5199\u6cd5\uff1a\u7528\u9012\u5f52\u5c31\u4e0d\u7528\u601d\u8003\u7a7f\u9488\u5f15\u7ebf\u8fd9\u79cd\u4e8b\u60c5\u4e86\u3002 class Solution: def reverseList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" # \u9012\u5f52\u7684\u7ec8\u6b62\u6761\u4ef6\u4e00\u5b9a\u8981\u5199\u5bf9\uff1a\u8003\u8651\u7ed3\u70b9\u4e3a\u7a7a\u548c\u5355\u7ed3\u70b9\u7684\u60c5\u51b5 if head is None or head.next is None: return head next = head.next new_head = self.reverseList(next) next.next = head head.next = None return new_head Java \u4ee3\u7801\uff1a class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } } public class Solution { // \u9012\u5f52\u5199\u6cd5\u8981\u753b\u4e2a\u56fe\u5c31\u6e05\u695a\u4e86 public ListNode ReverseList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode next = head.next; ListNode newHead = ReverseList(next); next.next = head; head.next = null; return newHead; } } \u601d\u8def2\uff1a\u975e\u9012\u5f52\u5199\u6cd5\uff0c\u7a7f\u9488\u5f15\u7ebf\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None # \u7a7f\u9488\u5f15\u7ebf\uff0c\u53ef\u4ee5\u770b\u5230 while \u5faa\u73af\u4f53\u90e8\u5206\u7684\u4ee3\u7801\u662f\u9996\u5c3e\u76f8\u8fde\u7684\uff0c\u6709\u4e9b\u5355\u94fe\u8868\u7684\u9898\u76ee\u4e5f\u6709\u8fd9\u79cd\u89c4\u5f8b\uff0c\u611f\u89c9\u5f88\u795e\u5947 # \u5728 Python \u4e2d\uff0c\u5176\u5b9e\u8fd8\u6709\u66f4\u7b80\u4fbf\u7684\u5199\u6cd5\uff0c\u5c31\u8ddf\u6590\u6ce2\u62c9\u5951\u6570\u5217\u4e00\u6837 class Solution: def reverseList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" pre = None cur = head while cur: next = cur.next cur.next = pre pre = cur cur = next return pre MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 24. \u53cd\u8f6c\u94fe\u8868"},{"location":"24/#offer-24","text":"\u5251\u6307 Offer 24. \u53cd\u8f6c\u94fe\u8868 \uff1b AcWing\uff1a\u53cd\u8f6c\u94fe\u8868 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u53cd\u8f6c\u8be5\u94fe\u8868\u5e76\u8f93\u51fa\u53cd\u8f6c\u540e\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a 1->2->3->4->5->NULL \u8f93\u51fa\uff1a 5->4->3->2->1->NULL \u5206\u6790\uff1a\u8fd9\u9053\u9898\u540c LeetCode \u4e0a\u4e00\u9053\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u6c42\u89e3\u3002\u4e2a\u4eba\u89c9\u5f97\u9012\u5f52\u7684\u65b9\u5f0f\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u662f\u5728\u94fe\u8868\u8f83\u957f\u7684\u65f6\u5019\uff0c\u9012\u5f52\u6548\u7387\u504f\u4f4e\uff0c\u56e0\u4e3a\u8981\u4f7f\u7528\u7cfb\u7edf\u6808\u3002 \u601d\u8def1\uff1a\u9012\u5f52\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None # \u9012\u5f52\u5199\u6cd5\uff1a\u7528\u9012\u5f52\u5c31\u4e0d\u7528\u601d\u8003\u7a7f\u9488\u5f15\u7ebf\u8fd9\u79cd\u4e8b\u60c5\u4e86\u3002 class Solution: def reverseList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" # \u9012\u5f52\u7684\u7ec8\u6b62\u6761\u4ef6\u4e00\u5b9a\u8981\u5199\u5bf9\uff1a\u8003\u8651\u7ed3\u70b9\u4e3a\u7a7a\u548c\u5355\u7ed3\u70b9\u7684\u60c5\u51b5 if head is None or head.next is None: return head next = head.next new_head = self.reverseList(next) next.next = head head.next = None return new_head Java \u4ee3\u7801\uff1a class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } } public class Solution { // \u9012\u5f52\u5199\u6cd5\u8981\u753b\u4e2a\u56fe\u5c31\u6e05\u695a\u4e86 public ListNode ReverseList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode next = head.next; ListNode newHead = ReverseList(next); next.next = head; head.next = null; return newHead; } } \u601d\u8def2\uff1a\u975e\u9012\u5f52\u5199\u6cd5\uff0c\u7a7f\u9488\u5f15\u7ebf\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None # \u7a7f\u9488\u5f15\u7ebf\uff0c\u53ef\u4ee5\u770b\u5230 while \u5faa\u73af\u4f53\u90e8\u5206\u7684\u4ee3\u7801\u662f\u9996\u5c3e\u76f8\u8fde\u7684\uff0c\u6709\u4e9b\u5355\u94fe\u8868\u7684\u9898\u76ee\u4e5f\u6709\u8fd9\u79cd\u89c4\u5f8b\uff0c\u611f\u89c9\u5f88\u795e\u5947 # \u5728 Python \u4e2d\uff0c\u5176\u5b9e\u8fd8\u6709\u66f4\u7b80\u4fbf\u7684\u5199\u6cd5\uff0c\u5c31\u8ddf\u6590\u6ce2\u62c9\u5951\u6570\u5217\u4e00\u6837 class Solution: def reverseList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" pre = None cur = head while cur: next = cur.next cur.next = pre pre = cur cur = next return pre MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 24. \u53cd\u8f6c\u94fe\u8868"},{"location":"25/","text":"\u5251\u6307 Offer 25. \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868 \u5251\u6307 Offer 25. \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868 \uff1b AcWing\uff1a\u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e24\u4e2a\u5355\u8c03\u9012\u589e\u7684\u94fe\u8868\uff0c\u8f93\u51fa\u4e24\u4e2a\u94fe\u8868\u5408\u6210\u540e\u7684\u94fe\u8868\uff0c\u5f53\u7136\u6211\u4eec\u9700\u8981\u5408\u6210\u540e\u7684\u94fe\u8868\u6ee1\u8db3\u5355\u8c03\u4e0d\u51cf\u89c4\u5219\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a 1->3->5 , 2->4->5 \u8f93\u51fa\uff1a 1->2->3->4->5->5 \u5206\u6790\uff1a\u540c LeetCode \u7b2c 21 \u9898\uff0c\u4f20\u9001\u95e8\uff1a 21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 \u3002\u8fd9\u662f\u4e00\u9053\u7ecf\u5178\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u6c42\u89e3\uff0c\u4e2a\u4eba\u89c9\u5f97\u9012\u5f52\u7684\u4ee3\u7801\u6bd4\u8f83\u7b80\u6d01\u6613\u61c2\u3002\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u5219\u8981\u753b\u56fe\u3002 \u601d\u8def1\uff1a \u4f7f\u7528\u9012\u5f52\uff0c\u7f16\u7801\u7b80\u5355\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def merge(self, l1, l2): \"\"\" :type l1: ListNode :type l2: ListNode :rtype: ListNode \"\"\" if l1 is None: return l2 if l2 is None: return l1 # \u4ee3\u7801\u80fd\u8d70\u5230\u8fd9\u91cc\u8bf4\u660e l1 \u548c l2 \u5747\u975e\u7a7a # \u6bd4\u8f83\u54ea\u4e2a\u5c0f\u5c31\u884c\u4e86 if l1.val < l2.val: l1.next = self.merge(l1.next, l2) return l1 # \u8d70\u5230\u8fd9\u91cc l1.val >= l2.val l2.next = self.merge(l1, l2.next) return l2 Java \u4ee3\u7801\uff1a class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } } public class Solution { public ListNode Merge(ListNode list1, ListNode list2) { if (list1 == null) { return list2; } if (list2 == null) { return list1; } if (list1.val < list2.val) { list1.next = Merge(list1.next, list2); return list1; } else { list2.next = Merge(list1, list2.next); return list2; } } } \u601d\u8def2\uff1a\u7a7f\u9488\u5f15\u7ebf\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None # \u7a7f\u9488\u5f15\u7ebf\u7684\u5199\u6cd5\uff0c\u4e00\u5b9a\u8981\u753b\u56fe\u624d\u80fd\u5199\u51fa\u6765 # \u6bd4\u8f83\u9ebb\u70e6\uff0c\u8fd8\u662f\u9012\u5f52\u5904\u7406\u7b80\u5355 class Solution(object): def merge(self, l1, l2): \"\"\" :type l1: ListNode :type l2: ListNode :rtype: ListNode \"\"\" # \u5f15\u5165\u5934\u7ed3\u70b9\u53ef\u4ee5\u7b80\u5316\u5bf9\u95ee\u9898\u7684\u8ba8\u8bba dummy_node = ListNode(-1) cur_node = dummy_node p1 = l1 p2 = l2 while p1 and p2: # \u4e24\u8005\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u624d\u987b\u8981\u6bd4\u8f83 # \u5176\u4e2d\u6709\u4e00\u4e2a\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u628a\u5176\u4e2d\u4e00\u4e2a\u63a5\u5230\u53e6\u4e00\u4e2a\u5c3e\u5df4\u5c31\u597d\u4e86 if p1.val < p2.val: # next \u6307\u9488\u4fee\u6539 cur_node.next = p1 # p1 \u540e\u79fb p1 = p1.next else: cur_node.next = p2 p2 = p2.next cur_node = cur_node.next # \u8df3\u51fa\u5faa\u73af\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u6709\uff1ap1 \u4e3a\u7a7a\u6216\u8005 p2 \u4e3a\u7a7a # \u5176\u4e2d\u6709\u4e00\u4e2a\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u628a\u5176\u4e2d\u4e00\u4e2a\u63a5\u5230\u53e6\u4e00\u4e2a\u5c3e\u5df4\u5c31\u597d\u4e86 if p1 is None: # \u8fd9\u4e00\u53e5\u5199\u6210 if not p1 \u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4e0d\u8fc7\u4e0d\u597d\u7406\u89e3 cur_node.next = p2 if not p2: cur_node.next = p1 return dummy_node.next MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 25. \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868"},{"location":"25/#offer-25","text":"\u5251\u6307 Offer 25. \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868 \uff1b AcWing\uff1a\u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002","title":"\u5251\u6307 Offer 25. \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868"},{"location":"25/#_1","text":"\u8f93\u5165\u4e24\u4e2a\u5355\u8c03\u9012\u589e\u7684\u94fe\u8868\uff0c\u8f93\u51fa\u4e24\u4e2a\u94fe\u8868\u5408\u6210\u540e\u7684\u94fe\u8868\uff0c\u5f53\u7136\u6211\u4eec\u9700\u8981\u5408\u6210\u540e\u7684\u94fe\u8868\u6ee1\u8db3\u5355\u8c03\u4e0d\u51cf\u89c4\u5219\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a 1->3->5 , 2->4->5 \u8f93\u51fa\uff1a 1->2->3->4->5->5 \u5206\u6790\uff1a\u540c LeetCode \u7b2c 21 \u9898\uff0c\u4f20\u9001\u95e8\uff1a 21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 \u3002\u8fd9\u662f\u4e00\u9053\u7ecf\u5178\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u6c42\u89e3\uff0c\u4e2a\u4eba\u89c9\u5f97\u9012\u5f52\u7684\u4ee3\u7801\u6bd4\u8f83\u7b80\u6d01\u6613\u61c2\u3002\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u5219\u8981\u753b\u56fe\u3002 \u601d\u8def1\uff1a \u4f7f\u7528\u9012\u5f52\uff0c\u7f16\u7801\u7b80\u5355\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def merge(self, l1, l2): \"\"\" :type l1: ListNode :type l2: ListNode :rtype: ListNode \"\"\" if l1 is None: return l2 if l2 is None: return l1 # \u4ee3\u7801\u80fd\u8d70\u5230\u8fd9\u91cc\u8bf4\u660e l1 \u548c l2 \u5747\u975e\u7a7a # \u6bd4\u8f83\u54ea\u4e2a\u5c0f\u5c31\u884c\u4e86 if l1.val < l2.val: l1.next = self.merge(l1.next, l2) return l1 # \u8d70\u5230\u8fd9\u91cc l1.val >= l2.val l2.next = self.merge(l1, l2.next) return l2 Java \u4ee3\u7801\uff1a class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } } public class Solution { public ListNode Merge(ListNode list1, ListNode list2) { if (list1 == null) { return list2; } if (list2 == null) { return list1; } if (list1.val < list2.val) { list1.next = Merge(list1.next, list2); return list1; } else { list2.next = Merge(list1, list2.next); return list2; } } } \u601d\u8def2\uff1a\u7a7f\u9488\u5f15\u7ebf\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None # \u7a7f\u9488\u5f15\u7ebf\u7684\u5199\u6cd5\uff0c\u4e00\u5b9a\u8981\u753b\u56fe\u624d\u80fd\u5199\u51fa\u6765 # \u6bd4\u8f83\u9ebb\u70e6\uff0c\u8fd8\u662f\u9012\u5f52\u5904\u7406\u7b80\u5355 class Solution(object): def merge(self, l1, l2): \"\"\" :type l1: ListNode :type l2: ListNode :rtype: ListNode \"\"\" # \u5f15\u5165\u5934\u7ed3\u70b9\u53ef\u4ee5\u7b80\u5316\u5bf9\u95ee\u9898\u7684\u8ba8\u8bba dummy_node = ListNode(-1) cur_node = dummy_node p1 = l1 p2 = l2 while p1 and p2: # \u4e24\u8005\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u624d\u987b\u8981\u6bd4\u8f83 # \u5176\u4e2d\u6709\u4e00\u4e2a\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u628a\u5176\u4e2d\u4e00\u4e2a\u63a5\u5230\u53e6\u4e00\u4e2a\u5c3e\u5df4\u5c31\u597d\u4e86 if p1.val < p2.val: # next \u6307\u9488\u4fee\u6539 cur_node.next = p1 # p1 \u540e\u79fb p1 = p1.next else: cur_node.next = p2 p2 = p2.next cur_node = cur_node.next # \u8df3\u51fa\u5faa\u73af\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u6709\uff1ap1 \u4e3a\u7a7a\u6216\u8005 p2 \u4e3a\u7a7a # \u5176\u4e2d\u6709\u4e00\u4e2a\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u628a\u5176\u4e2d\u4e00\u4e2a\u63a5\u5230\u53e6\u4e00\u4e2a\u5c3e\u5df4\u5c31\u597d\u4e86 if p1 is None: # \u8fd9\u4e00\u53e5\u5199\u6210 if not p1 \u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4e0d\u8fc7\u4e0d\u597d\u7406\u89e3 cur_node.next = p2 if not p2: cur_node.next = p1 return dummy_node.next MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":""},{"location":"26/","text":"\u5251\u6307 Offer 26. \u6811\u7684\u5b50\u7ed3\u6784 \u5251\u6307 Offer 26. \u6811\u7684\u5b50\u7ed3\u6784","title":"\u5251\u6307 Offer 26. \u6811\u7684\u5b50\u7ed3\u6784"},{"location":"26/#offer-26","text":"\u5251\u6307 Offer 26. \u6811\u7684\u5b50\u7ed3\u6784","title":"\u5251\u6307 Offer 26. \u6811\u7684\u5b50\u7ed3\u6784"},{"location":"27/","text":"\u5251\u6307 Offer 27. \u4e8c\u53c9\u6811\u7684\u955c\u50cf \u5251\u6307 Offer 27. \u4e8c\u53c9\u6811\u7684\u955c\u50cf \u7b2c 27 \u9898\uff1a\u64cd\u4f5c\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\uff0c\u5c06\u5176\u53d8\u6362\u4e3a\u6e90\u4e8c\u53c9\u6811\u7684\u955c\u50cf \u4f20\u9001\u95e8\uff1a \u4e8c\u53c9\u6811\u7684\u955c\u50cf \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5c06\u5b83\u53d8\u6362\u4e3a\u5b83\u7684\u955c\u50cf\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\u6811\uff1a 8 / \\ 6 10 / \\ / \\ 5 7 9 11 [8,6,10,5,7,9,11,null,null,null,null,null,null,null,null] \u8f93\u51fa\u6811\uff1a 8 / \\ 10 6 / \\ / \\ 11 9 7 5 [8,10,6,11,9,7,5,null,null,null,null,null,null,null,null] \u5206\u6790\uff1a\u8fd9\u9053\u9898\u7684\u89e3\u51b3\u5b9e\u9645\u4e0a\u8003\u5bdf\u4e86\u4e8c\u53c9\u6811\u7684\u904d\u5386\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u524d\u5e8f\u904d\u5386\u3001\u540e\u5e8f\u904d\u5386\u3001\u5c42\u5e8f\u904d\u5386\u90fd\u662f\u53ef\u4ee5\u5b8c\u6210\u9898\u76ee\u8981\u6c42\u7684\u3002 \u601d\u8def1\uff1a\u9012\u5f52\u65b9\u5f0f\uff1a\u524d\u5e8f\u904d\u5386\u6216\u8005\u540e\u5e8f\u904d\u5386\u90fd\u884c\u3002 Python \u4ee3\u7801\uff1a\u524d\u5e8f\u904d\u5386 # Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution(object): def mirror(self, root): \"\"\" :type root: TreeNode :rtype: void \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if root is None: return root # \u6309\u7167\u524d\u5e8f\u904d\u5386\u7684\u65b9\u5f0f root.left, root.right = root.right, root.left self.mirror(root.left) self.mirror(root.right) Java \u4ee3\u7801\uff1a class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { // \u524d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u90fd\u662f\u53ef\u4ee5\u7684 public void Mirror(TreeNode root) { if (root == null) { return; } TreeNode temp = root.left; root.left = root.right; root.right = temp; Mirror(root.left); Mirror(root.right); } public void Mirror1(TreeNode root) { if (root == null) { return; } Mirror(root.left); Mirror(root.right); TreeNode temp = root.left; root.left = root.right; root.right = temp; } } Python \u4ee3\u7801\uff1a\u540e\u5e8f\u904d\u5386 # Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution(object): def mirror(self, root): \"\"\" :type root: TreeNode :rtype: void \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if root is None: return root # \u6309\u7167\u540e\u5e8f\u904d\u5386\u7684\u65b9\u5f0f self.mirror(root.left) self.mirror(root.right) root.left, root.right = root.right, root.left Python \u4ee3\u7801\uff1a\u5c42\u5e8f\u904d\u5386 class Solution(object): def mirror(self, root): \"\"\" :type root: TreeNode :rtype: void \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if root is None: return root queue = [root] while queue: top = queue.pop(0) top.left, top.right = top.right, top.left if top.left: queue.append(top.left) if top.right: queue.append(top.right) return root \u601d\u8def2\uff1a\u975e\u9012\u5f52\u65b9\u5f0f\uff08\u6ca1\u6709\u770b\u51fa\u6765\u662f\u90a3\u79cd\u9012\u5f52\u65b9\u5f0f\uff09\u3002 Java \u4ee3\u7801\uff1a class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { // \u524d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u90fd\u662f\u53ef\u4ee5\u7684 public void Mirror(TreeNode root) { if (root == null) { return; } TreeNode temp = root.left; root.left = root.right; root.right = temp; Mirror(root.left); Mirror(root.right); } public void Mirror1(TreeNode root) { if (root == null) { return; } Mirror(root.left); Mirror(root.right); TreeNode temp = root.left; root.left = root.right; root.right = temp; } } \u975e\u9012\u5f52\u65b9\u5f0f\uff1a\u4e0b\u9762\u8fd9\u4e2a\u4ee3\u7801\u6709\u70b9\u610f\u601d\u3002 Python \u4ee3\u7801\uff1a class Solution: def Mirror(self, root): if root is None: return stack = [] while root or stack: while root: root.left, root.right = root.right, root.left stack.append(root) root = root.left if stack: root = stack.pop() root = root.right MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 27. \u4e8c\u53c9\u6811\u7684\u955c\u50cf"},{"location":"27/#offer-27","text":"\u5251\u6307 Offer 27. \u4e8c\u53c9\u6811\u7684\u955c\u50cf","title":"\u5251\u6307 Offer 27. \u4e8c\u53c9\u6811\u7684\u955c\u50cf"},{"location":"27/#27","text":"\u4f20\u9001\u95e8\uff1a \u4e8c\u53c9\u6811\u7684\u955c\u50cf \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5c06\u5b83\u53d8\u6362\u4e3a\u5b83\u7684\u955c\u50cf\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\u6811\uff1a 8 / \\ 6 10 / \\ / \\ 5 7 9 11 [8,6,10,5,7,9,11,null,null,null,null,null,null,null,null] \u8f93\u51fa\u6811\uff1a 8 / \\ 10 6 / \\ / \\ 11 9 7 5 [8,10,6,11,9,7,5,null,null,null,null,null,null,null,null] \u5206\u6790\uff1a\u8fd9\u9053\u9898\u7684\u89e3\u51b3\u5b9e\u9645\u4e0a\u8003\u5bdf\u4e86\u4e8c\u53c9\u6811\u7684\u904d\u5386\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u524d\u5e8f\u904d\u5386\u3001\u540e\u5e8f\u904d\u5386\u3001\u5c42\u5e8f\u904d\u5386\u90fd\u662f\u53ef\u4ee5\u5b8c\u6210\u9898\u76ee\u8981\u6c42\u7684\u3002 \u601d\u8def1\uff1a\u9012\u5f52\u65b9\u5f0f\uff1a\u524d\u5e8f\u904d\u5386\u6216\u8005\u540e\u5e8f\u904d\u5386\u90fd\u884c\u3002 Python \u4ee3\u7801\uff1a\u524d\u5e8f\u904d\u5386 # Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution(object): def mirror(self, root): \"\"\" :type root: TreeNode :rtype: void \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if root is None: return root # \u6309\u7167\u524d\u5e8f\u904d\u5386\u7684\u65b9\u5f0f root.left, root.right = root.right, root.left self.mirror(root.left) self.mirror(root.right) Java \u4ee3\u7801\uff1a class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { // \u524d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u90fd\u662f\u53ef\u4ee5\u7684 public void Mirror(TreeNode root) { if (root == null) { return; } TreeNode temp = root.left; root.left = root.right; root.right = temp; Mirror(root.left); Mirror(root.right); } public void Mirror1(TreeNode root) { if (root == null) { return; } Mirror(root.left); Mirror(root.right); TreeNode temp = root.left; root.left = root.right; root.right = temp; } } Python \u4ee3\u7801\uff1a\u540e\u5e8f\u904d\u5386 # Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution(object): def mirror(self, root): \"\"\" :type root: TreeNode :rtype: void \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if root is None: return root # \u6309\u7167\u540e\u5e8f\u904d\u5386\u7684\u65b9\u5f0f self.mirror(root.left) self.mirror(root.right) root.left, root.right = root.right, root.left Python \u4ee3\u7801\uff1a\u5c42\u5e8f\u904d\u5386 class Solution(object): def mirror(self, root): \"\"\" :type root: TreeNode :rtype: void \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if root is None: return root queue = [root] while queue: top = queue.pop(0) top.left, top.right = top.right, top.left if top.left: queue.append(top.left) if top.right: queue.append(top.right) return root \u601d\u8def2\uff1a\u975e\u9012\u5f52\u65b9\u5f0f\uff08\u6ca1\u6709\u770b\u51fa\u6765\u662f\u90a3\u79cd\u9012\u5f52\u65b9\u5f0f\uff09\u3002 Java \u4ee3\u7801\uff1a class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { // \u524d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u90fd\u662f\u53ef\u4ee5\u7684 public void Mirror(TreeNode root) { if (root == null) { return; } TreeNode temp = root.left; root.left = root.right; root.right = temp; Mirror(root.left); Mirror(root.right); } public void Mirror1(TreeNode root) { if (root == null) { return; } Mirror(root.left); Mirror(root.right); TreeNode temp = root.left; root.left = root.right; root.right = temp; } } \u975e\u9012\u5f52\u65b9\u5f0f\uff1a\u4e0b\u9762\u8fd9\u4e2a\u4ee3\u7801\u6709\u70b9\u610f\u601d\u3002 Python \u4ee3\u7801\uff1a class Solution: def Mirror(self, root): if root is None: return stack = [] while root or stack: while root: root.left, root.right = root.right, root.left stack.append(root) root = root.left if stack: root = stack.pop() root = root.right MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 27 \u9898\uff1a\u64cd\u4f5c\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\uff0c\u5c06\u5176\u53d8\u6362\u4e3a\u6e90\u4e8c\u53c9\u6811\u7684\u955c\u50cf"},{"location":"28/","text":"\u5251\u6307 Offer 28. \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 \u5251\u6307 Offer 28. \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 \uff1b \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u4e00\u68f5\u4e8c\u53c9\u6811\u662f\u4e0d\u662f\u5bf9\u79f0\u7684\u3002 \u5982\u679c\u4e00\u68f5\u4e8c\u53c9\u6811\u548c\u5b83\u7684\u955c\u50cf\u4e00\u6837\uff0c\u90a3\u4e48\u5b83\u662f\u5bf9\u79f0\u7684\u3002 \u6837\u4f8b\uff1a \u5982\u4e0b\u56fe\u6240\u793a\u4e8c\u53c9\u6811 [1,2,2,3,4,4,3,null,null,null,null,null,null,null,null] \u4e3a\u5bf9\u79f0\u4e8c\u53c9\u6811\uff1a 1 / \\ 2 2 / \\ / \\ 3 4 4 3 \u5982\u4e0b\u56fe\u6240\u793a\u4e8c\u53c9\u6811 [1,2,2,null,4,4,3,null,null,null,null,null,null] \u4e0d\u662f\u5bf9\u79f0\u4e8c\u53c9\u6811\uff1a 1 / \\ 2 2 \\ / \\ 4 4 3 \u5206\u6790\uff1aLeetCode \u4e0a\u6709\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u4f7f\u7528\u53cc\u7aef\u961f\u5217\u53ef\u4ee5\u5b8c\u6210\uff0c\u753b\u56fe\u753b\u5230\u7b2c 4 \u5c42\u5c31\u975e\u5e38\u6e05\u6670\u4e86\u3002 \u540c LeetCode \u7b2c 101 \u9898\u3002 \u89e3\u6cd51\uff1a\u9012\u5f52\u5199\u6cd5\u3002 Java \u4ee3\u7801\uff1a class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { boolean isSymmetrical(TreeNode pRoot) { if (pRoot == null) { return true; } return helper(pRoot.left, pRoot.right); } private boolean helper(TreeNode pRoot1, TreeNode pRoot2) { if (pRoot1 == null && pRoot2 == null) { return true; } if (pRoot1 == null || pRoot2 == null || pRoot1.val != pRoot2.val) { return false; } return helper(pRoot1.left, pRoot2.right) && helper(pRoot1.right, pRoot2.left); } } Python \u4ee3\u7801\uff1a # Definition for a binary tree node. class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None # \u9012\u5f52\u5199\u6cd5\uff1a\u5f97\u5f15\u5165\u8f85\u52a9\u51fd\u6570 class Solution(object): def isSymmetric(self, root): \"\"\" :type root: TreeNode :rtype: bool \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if root is None: return True return self.__helper(root.left, root.right) def __helper(self, p1, p2): if p1 is None and p2 is None: return True if p1 is None or p2 is None: return False return p1.val == p2.val and self.__helper(p1.left, p2.right) and self.__helper(p1.right, p2.left) \u89e3\u6cd52\uff1a\u975e\u9012\u5f52\u5199\u6cd5\uff0c\u501f\u52a9\u53cc\u7aef\u961f\u5217\u8f85\u52a9\u5224\u65ad\u3002\u81ea\u5df1\u753b\u4e00\u4e2a\u56fe\uff0c\u5c31\u597d\u7406\u89e3\u4e86\u3002 Python \u4ee3\u7801\uff1a # Definition for a binary tree node. class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None # \u975e\u9012\u5f52\u5199\u6cd5\uff1a\u501f\u52a9\u53cc\u7aef\u961f\u5217\u8f85\u52a9\u5224\u65ad class Solution(object): def isSymmetric(self, root): \"\"\" :type root: TreeNode :rtype: bool \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if root is None: return True # \u5176\u5b9e\u5e94\u8be5\u7528 from collections import deque deque = [] deque.insert(0, root.left) deque.append(root.right) while deque: l_node = deque.pop(0) r_node = deque.pop() # \u8fd9\u4e00\u6b65\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u4e86 if l_node is None and r_node is None: continue if l_node is None or r_node is None: return False # \u4ee3\u7801\u8d70\u5230\u8fd9\u91cc\u4e00\u5b9a\u6709 l_node \u548c r_node \u975e\u7a7a # \u56e0\u6b64\u53ef\u4ee5\u53d6\u51fa val \u8fdb\u884c\u5224\u65ad\u4e86 if l_node.val != r_node.val: return False deque.insert(0, l_node.right) deque.insert(0, l_node.left) deque.append(r_node.left) deque.append(r_node.right) return True \u201c\u5927\u96ea\u83dc\u201d\u7684\u5199\u6cd5\uff1a\u7528\u6808\u6a21\u62df\u9012\u5f52\uff0c\u5bf9\u6839\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\uff0c\u6211\u4eec\u7528\u4e2d\u5e8f\u904d\u5386\uff1b\u5bf9\u6839\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\uff0c\u6211\u4eec\u7528\u53cd\u4e2d\u5e8f\u904d\u5386\u3002 \u5219\u4e24\u4e2a\u5b50\u6811\u4e92\u4e3a\u955c\u50cf\uff0c\u5f53\u4e14\u4ec5\u5f53\u540c\u65f6\u904d\u5386\u4e24\u68f5\u5b50\u6811\u65f6\uff0c\u5bf9\u5e94\u7ed3\u70b9\u7684\u503c\u76f8\u7b49\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6811\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u4ec5\u88ab\u904d\u5386\u4e00\u904d\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n)$\u3002 C++ \u4ee3\u7801\uff1a /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public: bool isSymmetric(TreeNode* root) { if (!root) return true; stack<TreeNode*> left, right; TreeNode *lc = root->left; TreeNode *rc = root->right; while(lc || rc || left.size()) { while (lc && rc) { left.push(lc), right.push(rc); lc = lc->left, rc = rc->right; } if (lc || rc) return false; lc = left.top(), rc = right.top(); left.pop(), right.pop(); if (lc->val != rc->val) return false; // \u8fd9\u91cc\u53cd\u8fc7\u6765\u64cd\u4f5c lc = lc->right, rc = rc->left; } return true; } }; \u4f5c\u8005\uff1ayxc \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/AcWing/content/747/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 28. \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811"},{"location":"28/#offer-28","text":"\u5251\u6307 Offer 28. \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 \uff1b \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002","title":"\u5251\u6307 Offer 28. \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811"},{"location":"28/#_1","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u4e00\u68f5\u4e8c\u53c9\u6811\u662f\u4e0d\u662f\u5bf9\u79f0\u7684\u3002 \u5982\u679c\u4e00\u68f5\u4e8c\u53c9\u6811\u548c\u5b83\u7684\u955c\u50cf\u4e00\u6837\uff0c\u90a3\u4e48\u5b83\u662f\u5bf9\u79f0\u7684\u3002 \u6837\u4f8b\uff1a \u5982\u4e0b\u56fe\u6240\u793a\u4e8c\u53c9\u6811 [1,2,2,3,4,4,3,null,null,null,null,null,null,null,null] \u4e3a\u5bf9\u79f0\u4e8c\u53c9\u6811\uff1a 1 / \\ 2 2 / \\ / \\ 3 4 4 3 \u5982\u4e0b\u56fe\u6240\u793a\u4e8c\u53c9\u6811 [1,2,2,null,4,4,3,null,null,null,null,null,null] \u4e0d\u662f\u5bf9\u79f0\u4e8c\u53c9\u6811\uff1a 1 / \\ 2 2 \\ / \\ 4 4 3 \u5206\u6790\uff1aLeetCode \u4e0a\u6709\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u4f7f\u7528\u53cc\u7aef\u961f\u5217\u53ef\u4ee5\u5b8c\u6210\uff0c\u753b\u56fe\u753b\u5230\u7b2c 4 \u5c42\u5c31\u975e\u5e38\u6e05\u6670\u4e86\u3002 \u540c LeetCode \u7b2c 101 \u9898\u3002 \u89e3\u6cd51\uff1a\u9012\u5f52\u5199\u6cd5\u3002 Java \u4ee3\u7801\uff1a class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { boolean isSymmetrical(TreeNode pRoot) { if (pRoot == null) { return true; } return helper(pRoot.left, pRoot.right); } private boolean helper(TreeNode pRoot1, TreeNode pRoot2) { if (pRoot1 == null && pRoot2 == null) { return true; } if (pRoot1 == null || pRoot2 == null || pRoot1.val != pRoot2.val) { return false; } return helper(pRoot1.left, pRoot2.right) && helper(pRoot1.right, pRoot2.left); } } Python \u4ee3\u7801\uff1a # Definition for a binary tree node. class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None # \u9012\u5f52\u5199\u6cd5\uff1a\u5f97\u5f15\u5165\u8f85\u52a9\u51fd\u6570 class Solution(object): def isSymmetric(self, root): \"\"\" :type root: TreeNode :rtype: bool \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if root is None: return True return self.__helper(root.left, root.right) def __helper(self, p1, p2): if p1 is None and p2 is None: return True if p1 is None or p2 is None: return False return p1.val == p2.val and self.__helper(p1.left, p2.right) and self.__helper(p1.right, p2.left) \u89e3\u6cd52\uff1a\u975e\u9012\u5f52\u5199\u6cd5\uff0c\u501f\u52a9\u53cc\u7aef\u961f\u5217\u8f85\u52a9\u5224\u65ad\u3002\u81ea\u5df1\u753b\u4e00\u4e2a\u56fe\uff0c\u5c31\u597d\u7406\u89e3\u4e86\u3002 Python \u4ee3\u7801\uff1a # Definition for a binary tree node. class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None # \u975e\u9012\u5f52\u5199\u6cd5\uff1a\u501f\u52a9\u53cc\u7aef\u961f\u5217\u8f85\u52a9\u5224\u65ad class Solution(object): def isSymmetric(self, root): \"\"\" :type root: TreeNode :rtype: bool \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if root is None: return True # \u5176\u5b9e\u5e94\u8be5\u7528 from collections import deque deque = [] deque.insert(0, root.left) deque.append(root.right) while deque: l_node = deque.pop(0) r_node = deque.pop() # \u8fd9\u4e00\u6b65\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u4e86 if l_node is None and r_node is None: continue if l_node is None or r_node is None: return False # \u4ee3\u7801\u8d70\u5230\u8fd9\u91cc\u4e00\u5b9a\u6709 l_node \u548c r_node \u975e\u7a7a # \u56e0\u6b64\u53ef\u4ee5\u53d6\u51fa val \u8fdb\u884c\u5224\u65ad\u4e86 if l_node.val != r_node.val: return False deque.insert(0, l_node.right) deque.insert(0, l_node.left) deque.append(r_node.left) deque.append(r_node.right) return True \u201c\u5927\u96ea\u83dc\u201d\u7684\u5199\u6cd5\uff1a\u7528\u6808\u6a21\u62df\u9012\u5f52\uff0c\u5bf9\u6839\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\uff0c\u6211\u4eec\u7528\u4e2d\u5e8f\u904d\u5386\uff1b\u5bf9\u6839\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\uff0c\u6211\u4eec\u7528\u53cd\u4e2d\u5e8f\u904d\u5386\u3002 \u5219\u4e24\u4e2a\u5b50\u6811\u4e92\u4e3a\u955c\u50cf\uff0c\u5f53\u4e14\u4ec5\u5f53\u540c\u65f6\u904d\u5386\u4e24\u68f5\u5b50\u6811\u65f6\uff0c\u5bf9\u5e94\u7ed3\u70b9\u7684\u503c\u76f8\u7b49\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6811\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u4ec5\u88ab\u904d\u5386\u4e00\u904d\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n)$\u3002 C++ \u4ee3\u7801\uff1a /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public: bool isSymmetric(TreeNode* root) { if (!root) return true; stack<TreeNode*> left, right; TreeNode *lc = root->left; TreeNode *rc = root->right; while(lc || rc || left.size()) { while (lc && rc) { left.push(lc), right.push(rc); lc = lc->left, rc = rc->right; } if (lc || rc) return false; lc = left.top(), rc = right.top(); left.pop(), right.pop(); if (lc->val != rc->val) return false; // \u8fd9\u91cc\u53cd\u8fc7\u6765\u64cd\u4f5c lc = lc->right, rc = rc->left; } return true; } }; \u4f5c\u8005\uff1ayxc \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/AcWing/content/747/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":""},{"location":"29/","text":"\u5251\u6307 Offer 29. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 \u5251\u6307 Offer 29. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 \uff1b \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u77e9\u9635\uff0c\u6309\u7167\u4ece\u5916\u5411\u91cc\u4ee5\u987a\u65f6\u9488\u7684\u987a\u5e8f\u4f9d\u6b21\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u6570\u5b57\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [ [1, 2, 3, 4], [5, 6, 7, 8], [9,10,11,12] ] \u8f93\u51fa\uff1a [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7] \u5206\u6790\uff1a + \u8fd9\u9053\u9898\uff0c\u4e66\u672c\u4e0a\u7684\u89e3\u6cd5\u6211\u4e2a\u4eba\u89c9\u5f97\u8fd8\u4e0d\u591f\u76f4\u89c2\u3001\u7b80\u6d01\uff0c\u8981\u8003\u8651\u5230\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u3002 + \u501f\u7528\u4e4b\u524d\u505a\u9898\u4e2d\uff0c\u4f7f\u7528\u72b6\u6001\u4ee5\u53ca\u72b6\u6001\u8f6c\u79fb\u7684\u7b56\u7565\uff0c\u4e0d\u96be\u753b\u51fa\u56fe\u5f62\u5982\u4e0b\u3002 \u4e0b\u9762\u662f\u5bf9\u8fd9\u5f20\u56fe\u7684\u89e3\u91ca\uff0c\u6211\u4eec\u53ea\u89e3\u91ca\u4e86\u4e00\u4e2a\u72b6\u6001\u6267\u884c\u7684\u4ee3\u7801\uff0c\u5176\u5b83\u72b6\u6001\u53ef\u4ee5\u540c\u6837\u5206\u6790\u5f97\u51fa\u3002 \u5728\u521d\u59cb\u72b6\u6001\u4e0b\uff0c\u5e94\u8be5\u5411\u53f3\u8fb9\u8d70\uff0c\u56e0\u6b64\u72b6\u6001\u4e3a\u201cRIGHT\u201d\uff08\u6216\u8bb8\uff0c\u8fd9\u91cc\u5b9a\u4e49\u6210\u201c\u65b9\u5411\u201d\u4f1a\u66f4\u8d34\u5207\u4e00\u4e9b\uff09\u3002 \u904d\u5386\u5b8c\u7b2c 1 \u884c\uff0c\u5176\u5b9e\u4ee5\u540e\uff0c\u6211\u4eec\u90fd\u4e0d\u4f1a\u518d\u904d\u5386\u5230\u6a2a\u5750\u6807\u4e3a 0 \u7684\u70b9\uff0c\u56e0\u6b64 row_min \u52a0 1\u3002 \u904d\u5386\u5b8c\u6210\u4ee5\u540e\uff0c\u5176\u5b9e\u70b9\u7684\u5750\u6807\u8d8a\u754c\u4e86\uff0c\u6211\u4eec\u8981\u628a\u5b83\u632a\u5230\u4e0b\u4e00\u6b21\u72b6\u6001\u7684\u8d77\u70b9\u3002 \u5982\u679c\u904d\u5386\u5230\u4e2d\u5fc3\u7684\u65f6\u5019\uff0c\u5f88\u53ef\u80fd\u9047\u5230\u53ea\u66f4\u6539\u4e86\u72b6\u6001\uff0c\u4e0d\u6267\u884c\u5faa\u73af\u4f53\u7684\u60c5\u51b5\uff0c\u8fd9\u5c31\u907f\u514d\u4e86\u5bf9\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u8003\u8651\u3002 Java \u4ee3\u7801\uff1a import java.util.ArrayList; // 29 \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 // \u53c2\u8003\u8d44\u6599\uff1ahttps://www.nowcoder.com/questionTerminal/9b4c81a02cd34f76be2659fa0d54342a public class Solution { private enum State { RIGHT, DOWN, LEFT, UP } public ArrayList<Integer> printMatrix(int[][] matrix) { ArrayList<Integer> res = new ArrayList<>(); int row_max = matrix.length; if (row_max == 0) { return res; } int col_max = matrix[0].length; row_max--; col_max--; int row_min = 0; int col_min = 0; // \u4e0a\u9762\u7684\u4ee3\u7801\u867d\u7136\u770b\u8d77\u6765\u884c\u6570\u6bd4\u8f83\u591a\uff0c\u4f46\u662f\u5176\u5b9e\u53ea\u662f\u505a\u4e86\u6781\u7aef\u60c5\u51b5\u7684\u8003\u8651\u548c\u4e00\u4e9b\u53d8\u91cf\u7684\u521d\u59cb\u5316\u5de5\u4f5c // \u4e0b\u9762\u7684\u4ee3\u7801\u867d\u7136\u770b\u8d77\u6765\u6bd4\u8f83\u957f\uff0c\u4f46\u662f\u4e5f\u53ea\u662f\u505a\u4e86\u5f53\u524d\u72b6\u6001\u7684\u5224\u65ad\u4ee5\u53ca\u72b6\u6001\u8f6c\u79fb\uff0c\u4ee3\u7801\u6846\u67b6\u662f\u4e00\u6a21\u4e00\u6837\u7684 // \u4ed4\u7ec6\u4f53\u4f1a\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5176\u5b9e\u5c31\u662f\uff1a\u6bcf\u6b21\u63a5\u6536\u4e00\u4e2a\u72b6\u6001\uff0c\u6839\u636e\u8fd9\u4e2a\u72b6\u6001\u505a\u51fa\u76f8\u5e94\u7684\u64cd\u4f5c\uff0c\u7136\u540e\u53d8\u66f4\u72b6\u6001 State state = State.RIGHT; int i = 0; int j = 0; while (row_min <= row_max && col_min <= col_max) { if (state == State.RIGHT) { while (j <= col_max) { res.add(matrix[i][j]); j++; } j--; i++; state = State.DOWN; row_min++; } else if (state == State.DOWN) { while (i <= row_max) { res.add(matrix[i][j]); i++; } i--; j--; state = State.LEFT; col_max--; } else if (state == State.LEFT) { while (j >= col_min) { res.add(matrix[i][j]); j--; } j++; i--; state = State.UP; row_max--; } else { assert state == State.UP; while (i >= row_min) { res.add(matrix[i][j]); i--; } i++; j++; state = State.RIGHT; col_min++; } } return res; } public static void main(String[] args) { int[][] matrix1 = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}; int[][] matrix = new int[5][6]; int count = 1; for (int i = 0; i < matrix.length; i++) { for (int j = 0; j < matrix[0].length; j++) { System.out.print(count + \"\\t\"); matrix[i][j] = count; count++; } System.out.println(); } Solution solution = new Solution(); ArrayList<Integer> printMatrix = solution.printMatrix(matrix); System.out.println(printMatrix); } } Python \u4ee3\u7801\uff1a class Solution: # matrix\u7c7b\u578b\u4e3a\u4e8c\u7ef4\u5217\u8868\uff0c\u9700\u8981\u8fd4\u56de\u5217\u8868 def printMatrix(self, matrix): rows = len(matrix) cols = len(matrix[0]) result = [] if rows == 0 and cols == 0: return result left, right, top, buttom = 0, cols - 1, 0, rows - 1 while left <= right and top <= buttom: for i in range(left, right + 1): result.append(matrix[top][i]) for i in range(top + 1, buttom + 1): result.append(matrix[i][right]) if top != buttom: for i in range(left, right)[::-1]: result.append(matrix[buttom][i]) if left != right: for i in range(top + 1, buttom)[::-1]: result.append(matrix[i][left]) left += 1 top += 1 right -= 1 buttom -= 1 return result \u201c\u5927\u96ea\u83dc\u201d\u7684\u5199\u6cd5\uff1a\u6211\u4eec\u987a\u65f6\u9488\u5b9a\u4e49\u56db\u4e2a\u65b9\u5411\uff1a\u4e0a\u53f3\u4e0b\u5de6\u3002\u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\u904d\u5386\uff0c\u5148\u5f80\u53f3\u8d70\uff0c\u8d70\u5230\u4e0d\u80fd\u8d70\u4e3a\u6b62\uff0c\u7136\u540e\u66f4\u6539\u5230\u4e0b\u4e2a\u65b9\u5411\uff0c\u518d\u8d70\u5230\u4e0d\u80fd\u8d70\u4e3a\u6b62\uff0c\u4f9d\u6b21\u7c7b\u63a8\uff0c\u904d\u5386 $n^2$ \u4e2a\u683c\u5b50\u540e\u505c\u6b62\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u77e9\u9635\u4e2d\u6bcf\u4e2a\u683c\u5b50\u904d\u5386\u4e00\u6b21\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^2)$\u3002 C++ \u4ee3\u7801\uff1a class Solution { public: vector<int> printMatrix(vector<vector<int>>& matrix) { vector<int> res; if (matrix.empty()) return res; int n = matrix.size(), m = matrix[0].size(); vector<vector<bool>> st(n, vector<bool>(m, false)); int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1}; int x = 0, y = 0, d = 1; for (int k = 0; k < n * m; k ++ ) { res.push_back(matrix[x][y]); st[x][y] = true; int a = x + dx[d], b = y + dy[d]; if (a < 0 || a >= n || b < 0 || b >= m || st[a][b]) { d = (d + 1) % 4; a = x + dx[d], b = y + dy[d]; } x = a, y = b; } return res; } }; \u4f5c\u8005\uff1ayxc \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/AcWing/content/748/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 29. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635"},{"location":"29/#offer-29","text":"\u5251\u6307 Offer 29. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 \uff1b \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u77e9\u9635\uff0c\u6309\u7167\u4ece\u5916\u5411\u91cc\u4ee5\u987a\u65f6\u9488\u7684\u987a\u5e8f\u4f9d\u6b21\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u6570\u5b57\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [ [1, 2, 3, 4], [5, 6, 7, 8], [9,10,11,12] ] \u8f93\u51fa\uff1a [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7] \u5206\u6790\uff1a + \u8fd9\u9053\u9898\uff0c\u4e66\u672c\u4e0a\u7684\u89e3\u6cd5\u6211\u4e2a\u4eba\u89c9\u5f97\u8fd8\u4e0d\u591f\u76f4\u89c2\u3001\u7b80\u6d01\uff0c\u8981\u8003\u8651\u5230\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u3002 + \u501f\u7528\u4e4b\u524d\u505a\u9898\u4e2d\uff0c\u4f7f\u7528\u72b6\u6001\u4ee5\u53ca\u72b6\u6001\u8f6c\u79fb\u7684\u7b56\u7565\uff0c\u4e0d\u96be\u753b\u51fa\u56fe\u5f62\u5982\u4e0b\u3002 \u4e0b\u9762\u662f\u5bf9\u8fd9\u5f20\u56fe\u7684\u89e3\u91ca\uff0c\u6211\u4eec\u53ea\u89e3\u91ca\u4e86\u4e00\u4e2a\u72b6\u6001\u6267\u884c\u7684\u4ee3\u7801\uff0c\u5176\u5b83\u72b6\u6001\u53ef\u4ee5\u540c\u6837\u5206\u6790\u5f97\u51fa\u3002 \u5728\u521d\u59cb\u72b6\u6001\u4e0b\uff0c\u5e94\u8be5\u5411\u53f3\u8fb9\u8d70\uff0c\u56e0\u6b64\u72b6\u6001\u4e3a\u201cRIGHT\u201d\uff08\u6216\u8bb8\uff0c\u8fd9\u91cc\u5b9a\u4e49\u6210\u201c\u65b9\u5411\u201d\u4f1a\u66f4\u8d34\u5207\u4e00\u4e9b\uff09\u3002 \u904d\u5386\u5b8c\u7b2c 1 \u884c\uff0c\u5176\u5b9e\u4ee5\u540e\uff0c\u6211\u4eec\u90fd\u4e0d\u4f1a\u518d\u904d\u5386\u5230\u6a2a\u5750\u6807\u4e3a 0 \u7684\u70b9\uff0c\u56e0\u6b64 row_min \u52a0 1\u3002 \u904d\u5386\u5b8c\u6210\u4ee5\u540e\uff0c\u5176\u5b9e\u70b9\u7684\u5750\u6807\u8d8a\u754c\u4e86\uff0c\u6211\u4eec\u8981\u628a\u5b83\u632a\u5230\u4e0b\u4e00\u6b21\u72b6\u6001\u7684\u8d77\u70b9\u3002 \u5982\u679c\u904d\u5386\u5230\u4e2d\u5fc3\u7684\u65f6\u5019\uff0c\u5f88\u53ef\u80fd\u9047\u5230\u53ea\u66f4\u6539\u4e86\u72b6\u6001\uff0c\u4e0d\u6267\u884c\u5faa\u73af\u4f53\u7684\u60c5\u51b5\uff0c\u8fd9\u5c31\u907f\u514d\u4e86\u5bf9\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u8003\u8651\u3002 Java \u4ee3\u7801\uff1a import java.util.ArrayList; // 29 \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 // \u53c2\u8003\u8d44\u6599\uff1ahttps://www.nowcoder.com/questionTerminal/9b4c81a02cd34f76be2659fa0d54342a public class Solution { private enum State { RIGHT, DOWN, LEFT, UP } public ArrayList<Integer> printMatrix(int[][] matrix) { ArrayList<Integer> res = new ArrayList<>(); int row_max = matrix.length; if (row_max == 0) { return res; } int col_max = matrix[0].length; row_max--; col_max--; int row_min = 0; int col_min = 0; // \u4e0a\u9762\u7684\u4ee3\u7801\u867d\u7136\u770b\u8d77\u6765\u884c\u6570\u6bd4\u8f83\u591a\uff0c\u4f46\u662f\u5176\u5b9e\u53ea\u662f\u505a\u4e86\u6781\u7aef\u60c5\u51b5\u7684\u8003\u8651\u548c\u4e00\u4e9b\u53d8\u91cf\u7684\u521d\u59cb\u5316\u5de5\u4f5c // \u4e0b\u9762\u7684\u4ee3\u7801\u867d\u7136\u770b\u8d77\u6765\u6bd4\u8f83\u957f\uff0c\u4f46\u662f\u4e5f\u53ea\u662f\u505a\u4e86\u5f53\u524d\u72b6\u6001\u7684\u5224\u65ad\u4ee5\u53ca\u72b6\u6001\u8f6c\u79fb\uff0c\u4ee3\u7801\u6846\u67b6\u662f\u4e00\u6a21\u4e00\u6837\u7684 // \u4ed4\u7ec6\u4f53\u4f1a\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5176\u5b9e\u5c31\u662f\uff1a\u6bcf\u6b21\u63a5\u6536\u4e00\u4e2a\u72b6\u6001\uff0c\u6839\u636e\u8fd9\u4e2a\u72b6\u6001\u505a\u51fa\u76f8\u5e94\u7684\u64cd\u4f5c\uff0c\u7136\u540e\u53d8\u66f4\u72b6\u6001 State state = State.RIGHT; int i = 0; int j = 0; while (row_min <= row_max && col_min <= col_max) { if (state == State.RIGHT) { while (j <= col_max) { res.add(matrix[i][j]); j++; } j--; i++; state = State.DOWN; row_min++; } else if (state == State.DOWN) { while (i <= row_max) { res.add(matrix[i][j]); i++; } i--; j--; state = State.LEFT; col_max--; } else if (state == State.LEFT) { while (j >= col_min) { res.add(matrix[i][j]); j--; } j++; i--; state = State.UP; row_max--; } else { assert state == State.UP; while (i >= row_min) { res.add(matrix[i][j]); i--; } i++; j++; state = State.RIGHT; col_min++; } } return res; } public static void main(String[] args) { int[][] matrix1 = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}; int[][] matrix = new int[5][6]; int count = 1; for (int i = 0; i < matrix.length; i++) { for (int j = 0; j < matrix[0].length; j++) { System.out.print(count + \"\\t\"); matrix[i][j] = count; count++; } System.out.println(); } Solution solution = new Solution(); ArrayList<Integer> printMatrix = solution.printMatrix(matrix); System.out.println(printMatrix); } } Python \u4ee3\u7801\uff1a class Solution: # matrix\u7c7b\u578b\u4e3a\u4e8c\u7ef4\u5217\u8868\uff0c\u9700\u8981\u8fd4\u56de\u5217\u8868 def printMatrix(self, matrix): rows = len(matrix) cols = len(matrix[0]) result = [] if rows == 0 and cols == 0: return result left, right, top, buttom = 0, cols - 1, 0, rows - 1 while left <= right and top <= buttom: for i in range(left, right + 1): result.append(matrix[top][i]) for i in range(top + 1, buttom + 1): result.append(matrix[i][right]) if top != buttom: for i in range(left, right)[::-1]: result.append(matrix[buttom][i]) if left != right: for i in range(top + 1, buttom)[::-1]: result.append(matrix[i][left]) left += 1 top += 1 right -= 1 buttom -= 1 return result \u201c\u5927\u96ea\u83dc\u201d\u7684\u5199\u6cd5\uff1a\u6211\u4eec\u987a\u65f6\u9488\u5b9a\u4e49\u56db\u4e2a\u65b9\u5411\uff1a\u4e0a\u53f3\u4e0b\u5de6\u3002\u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\u904d\u5386\uff0c\u5148\u5f80\u53f3\u8d70\uff0c\u8d70\u5230\u4e0d\u80fd\u8d70\u4e3a\u6b62\uff0c\u7136\u540e\u66f4\u6539\u5230\u4e0b\u4e2a\u65b9\u5411\uff0c\u518d\u8d70\u5230\u4e0d\u80fd\u8d70\u4e3a\u6b62\uff0c\u4f9d\u6b21\u7c7b\u63a8\uff0c\u904d\u5386 $n^2$ \u4e2a\u683c\u5b50\u540e\u505c\u6b62\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u77e9\u9635\u4e2d\u6bcf\u4e2a\u683c\u5b50\u904d\u5386\u4e00\u6b21\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^2)$\u3002 C++ \u4ee3\u7801\uff1a class Solution { public: vector<int> printMatrix(vector<vector<int>>& matrix) { vector<int> res; if (matrix.empty()) return res; int n = matrix.size(), m = matrix[0].size(); vector<vector<bool>> st(n, vector<bool>(m, false)); int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1}; int x = 0, y = 0, d = 1; for (int k = 0; k < n * m; k ++ ) { res.push_back(matrix[x][y]); st[x][y] = true; int a = x + dx[d], b = y + dy[d]; if (a < 0 || a >= n || b < 0 || b >= m || st[a][b]) { d = (d + 1) % 4; a = x + dx[d], b = y + dy[d]; } x = a, y = b; } return res; } }; \u4f5c\u8005\uff1ayxc \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/AcWing/content/748/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 29. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635"},{"location":"30/","text":"\u5251\u6307 Offer 30. \u5305\u542bmin\u51fd\u6570\u7684\u6808 \u5251\u6307 Offer 30. \u5305\u542bmin\u51fd\u6570\u7684\u6808 \uff1b AcWing\uff1a\u5305\u542bmin\u51fd\u6570\u7684\u6808 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7b2c 30 \u9898\uff1a\u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u6700\u5c0f\u5143\u7d20\u7684 min \u51fd\u6570 \u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301 push\uff0cpop\uff0ctop \u7b49\u64cd\u4f5c\u5e76\u4e14\u53ef\u4ee5\u5728 O(1) \u65f6\u95f4\u5185\u68c0\u7d22\u51fa\u6700\u5c0f\u5143\u7d20\u7684\u5806\u6808\u3002 push(x)\u2013\u5c06\u5143\u7d20x\u63d2\u5165\u6808\u4e2d pop()\u2013\u79fb\u9664\u6808\u9876\u5143\u7d20 top()\u2013\u5f97\u5230\u6808\u9876\u5143\u7d20 getMin()\u2013\u5f97\u5230\u6808\u4e2d\u6700\u5c0f\u5143\u7d20 \u6837\u4f8b\uff1a MinStack minStack = new MinStack(); minStack.push(-1); minStack.push(3); minStack.push(-4); minStack.getMin(); --> Returns -4. minStack.pop(); minStack.top(); --> Returns 3. minStack.getMin(); --> Returns -1. \u601d\u8def\uff1a \u5b9a\u4e49\u4e24\u4e2a\u6808\uff0c\u4e00\u4e2a\u5b58\u653e\u5165\u7684\u503c\uff0c\u53e6\u4e00\u4e2a\u5b58\u6700\u5c0f\u503c\uff0c\u4e24\u4e2a\u6808\u5e94\u8be5\u662f\u540c\u6b65 push \u548c pop\uff0c\u5426\u5219\u8fd8\u8981\u5206\u7c7b\u8ba8\u8bba\uff0c\u4ee3\u7801\u7f16\u5199\u5bb9\u6613\u51fa\u9519\u3002 \u56e0\u4e3a\u8981\u7528 $O(1)$ \u5b9e\u73b0\u5f53\u524d\u6808\u4e2d\u6700\u5c0f\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\uff0c\u56e0\u6b64\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u548c\u5e95\u5c42 Stack \u540c\u6b65\u7684\u3001\u79f0\u4e4b\u4e3a\u201c\u6700\u5c0f\u6808\u201d\u7684\u6808\u6210\u5458\u3002\u5177\u4f53\u64cd\u4f5c\u5982\u4e0b\u4ee3\u7801\u6240\u793a\u3002 Python \u4ee3\u7801\uff1a class MinStack(object): def __init__(self): \"\"\" initialize your data structure here. \"\"\" self.stack = [] self.helper = [] def push(self, x): \"\"\" :type x: int :rtype: void \"\"\" if len(self.stack) == 0: self.helper.append(x) self.stack.append(x) else: # \u5982\u679c\u5c06\u8981 push \u7684\u5143\u7d20\u6bd4\u8f85\u52a9\u6808\u7684\u6808\u9876\u5143\u7d20\u8fd8\u5927\uff0c\u4e0d\u80fd\u653e\u8fd9\u4e2a\u5143\u7d20\uff0c # \u6b64\u65f6\u5e94\u8be5\u628a\u8f85\u52a9\u6808\u7684\u6808\u9876\u5143\u7d20\u518d\u590d\u5236\u4e00\u4efd peek = self.helper[-1] if x > peek: self.stack.append(x) self.helper.append(peek) else: self.stack.append(x) self.helper.append(x) def pop(self): \"\"\" :rtype: void \"\"\" if len(self.stack) == 0: return # \u540c\u6b65 pop \u5143\u7d20 self.helper.pop() return self.stack.pop() def top(self): \"\"\" :rtype: int \"\"\" return self.stack[-1] def getMin(self): \"\"\" :rtype: int \"\"\" return self.helper[-1] Java \u4ee3\u7801\uff1a import java.util.Stack; public class Solution { private Stack<Integer> minStack = new Stack<>(); private Stack<Integer> dataStack = new Stack<>(); public void push(int node) { if (minStack.isEmpty()) { minStack.push(node); dataStack.push(node); return; } int curMin = minStack.peek(); if (node < curMin) { minStack.push(node); } else { minStack.push(curMin); } dataStack.push(node); } public void pop() { minStack.pop(); dataStack.pop(); } public int top() { return dataStack.pop(); } public int min() { return minStack.peek(); } } \u601d\u8def2\uff1a\u6211\u4eec\u9664\u4e86\u7ef4\u62a4\u57fa\u672c\u7684\u6808\u7ed3\u6784\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u201c\u8f85\u52a9\u6808\u201d\u3002\u4e0b\u9762\u4ecb\u7ecd\u5982\u4f55\u7ef4\u62a4\u5355\u8c03\u6808\uff1a\u505a\u5230\u4ee5\u4e0b\u4e24\u70b9\uff0c\u8f85\u52a9\u6808\u7684\u6808\u9876\u5143\u7d20\uff0c\u5c31\u662f\u5f53\u524d\u6808\u4e2d\u7684\u6700\u5c0f\u6570\u3002 1\u3001\u5f53\u6211\u4eec\u5411\u6808\u4e2d\u538b\u5165\u4e00\u4e2a\u6570\u65f6\uff0c\u5982\u679c\u8be5\u6570\u5c0f\u4e8e\uff08\u53ea\u8981\u5c0f\u4e8e\uff09\u201c\u8f85\u52a9\u6808\u201d\u7684\u6808\u9876\u5143\u7d20\uff0c\u5219\u5c06\u8be5\u6570\u540c\u65f6\u538b\u5165\u201c\u8f85\u52a9\u6808\u201d\u4e2d\uff1b\u5426\u5219\uff0c\u4e0d\u538b\u5165\u3002\u7531\u4e8e\u6808\u5177\u6709\u5148\u8fdb\u540e\u51fa\u6027\u8d28\uff0c\u6240\u4ee5\u5728\u8be5\u6570\u88ab\u5f39\u51fa\u4e4b\u524d\uff0c\u201c\u8f85\u52a9\u6808\u201d\u4e2d\u4e00\u76f4\u5b58\u5728\u4e00\u4e2a\u6570\u6bd4\u8be5\u6570\u5c0f\uff0c\u6240\u4ee5\u8be5\u6570\u4e00\u5b9a\u4e0d\u4f1a\u88ab\u5f53\u505a\u6700\u5c0f\u6570\u8f93\u51fa\u3002 2\u3001\u5f53\u6211\u4eec\u4ece\u6808\u4e2d\u5f39\u51fa\u4e00\u4e2a\u6570\u65f6\uff0c\u5982\u679c\u8be5\u6570\u7b49\u4e8e\u5355\u8c03\u6808\u7684\u6808\u9876\u5143\u7d20\uff0c\u540c\u65f6\u5c06\u5355\u8c03\u6808\u7684\u6808\u9876\u5143\u7d20\u5f39\u51fa\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u56db\u79cd\u64cd\u4f5c\u90fd\u53ea\u6709\u5e38\u6570\u6b21\u5165\u6808\u51fa\u6808\u64cd\u4f5c\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f $O(1)$\u3002 Python \u4ee3\u7801\uff1a # \u5b9a\u4e49\u4e24\u4e2a\u6808\uff0c\u4e00\u4e2a\u5b58\u653e\u5165\u7684\u503c\uff0c\u53e6\u4e00\u4e2a\u5b58\u6700\u5c0f\u503c\uff0c\u4e24\u4e2a\u6808\u5e94\u8be5\u662f\u540c\u6b65 push \u548c pop\uff0c\u5426\u5219\u8fd8\u8981\u5206\u7c7b\u8ba8\u8bba\uff0c\u4ee3\u7801\u7f16\u5199\u5bb9\u6613\u51fa\u9519\u3002 class MinStack(object): def __init__(self): \"\"\" initialize your data structure here. \"\"\" self.stack = [] self.helper = [] def push(self, x): \"\"\" :type x: int :rtype: void \"\"\" # \u65e0\u8bba\u5982\u4f55\u90fd push self.stack.append(x) # \u5982\u679c\u653e\u5165\u7684\u5143\u7d20\u5c0f\u4e8e\u8f85\u52a9\u6808\u9876\u5143\u7d20\uff0c\u8f85\u52a9\u6808\u9876\u624d push\uff0c\u5426\u5219\u4ec0\u4e48\u90fd\u4e0d\u505a if not self.helper or self.helper[-1] > x: self.helper.append(x) def pop(self): \"\"\" :rtype: void \"\"\" if len(self.stack) == 0: return # \u5982\u679c\u5f39\u51fa\u7684\u5143\u7d20\u7b49\u4e8e\u8f85\u52a9\u6808\u6808\u9876\u5143\u7d20\uff0c\u624d\u5c06\u8f85\u52a9\u6808\u9876\u5143\u7d20\u5f39\u51fa if self.helper[-1] == self.stack[-1]: self.helper.pop() return self.stack.pop() def top(self): \"\"\" :rtype: int \"\"\" return self.stack[-1] def getMin(self): \"\"\" :rtype: int \"\"\" return self.helper[-1] # Your MinStack object will be instantiated and called as such: # obj = MinStack() # obj.push(x) # obj.pop() # param_3 = obj.top() # param_4 = obj.getMin() Java \u4ee3\u7801\uff1a import java.util.Stack; public class Solution { private Stack<Integer> minStack = new Stack<>(); private Stack<Integer> dataStack = new Stack<>(); public void push(int node) { if (minStack.isEmpty()) { minStack.push(node); dataStack.push(node); return; } int curMin = minStack.peek(); if (node < curMin) { minStack.push(node); } else { minStack.push(curMin); } dataStack.push(node); } public void pop() { minStack.pop(); dataStack.pop(); } public int top() { return dataStack.pop(); } public int min() { return minStack.peek(); } } LeetCode \u7b2c 155 \u9898\uff1a\u6700\u5c0f\u6808 \u8bbe\u7f6e\u4e00\u4e2a\u8f85\u52a9\u6808\uff0c\u4fdd\u5b58\u5f53\u524d\u6700\u5c0f\u7684\u5143\u7d20\u3002 class MinStack(object): # \u3010\u7279\u522b\u6ce8\u610f\u3011\u6570\u636e\u6808\u548c\u8f85\u52a9\u6808\u8981\u540c\u6b65\uff0c\u7279\u6b8a\u6d4b\u8bd5\u7528\u4f8b\u4e3a\uff1a # \u4f9d\u6b21 push 0 1 0\uff0c\u9a6c\u4e0a\u5f39\u6808\uff0c\u67e5\u8be2\u6700\u5c0f def __init__(self): \"\"\" initialize your data structure here. \"\"\" # \u6570\u636e\u6808 self.data_stack = [] # \u8f85\u52a9\u6808 self.help_stack = [] def push(self, x): \"\"\" :type x: int :rtype: void \"\"\" self.data_stack.append(x) if len(self.help_stack) == 0 or x < self.help_stack[-1]: self.help_stack.append(x) else: self.help_stack.append(self.help_stack[-1]) def pop(self): \"\"\" :rtype: void \"\"\" if len(self.data_stack) > 0: ret = self.data_stack.pop() self.help_stack.pop() return ret def top(self): \"\"\" :rtype: int \"\"\" if len(self.data_stack) > 0: return self.data_stack[-1] def getMin(self): \"\"\" :rtype: int \"\"\" if len(self.data_stack) > 0: return self.help_stack[-1] # Your MinStack object will be instantiated and called as such: # obj = MinStack() # obj.push(x) # obj.pop() # param_3 = obj.top() # param_4 = obj.getMin() if __name__ == '__main__': min_stack = MinStack() min_stack.push(0) min_stack.push(1) min_stack.push(0) print(min_stack.getMin()) min_stack.pop() print(min_stack) print(min_stack.getMin()) MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 30. \u5305\u542bmin\u51fd\u6570\u7684\u6808"},{"location":"30/#offer-30-min","text":"\u5251\u6307 Offer 30. \u5305\u542bmin\u51fd\u6570\u7684\u6808 \uff1b AcWing\uff1a\u5305\u542bmin\u51fd\u6570\u7684\u6808 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002","title":"\u5251\u6307 Offer 30. \u5305\u542bmin\u51fd\u6570\u7684\u6808"},{"location":"30/#30-min","text":"\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301 push\uff0cpop\uff0ctop \u7b49\u64cd\u4f5c\u5e76\u4e14\u53ef\u4ee5\u5728 O(1) \u65f6\u95f4\u5185\u68c0\u7d22\u51fa\u6700\u5c0f\u5143\u7d20\u7684\u5806\u6808\u3002 push(x)\u2013\u5c06\u5143\u7d20x\u63d2\u5165\u6808\u4e2d pop()\u2013\u79fb\u9664\u6808\u9876\u5143\u7d20 top()\u2013\u5f97\u5230\u6808\u9876\u5143\u7d20 getMin()\u2013\u5f97\u5230\u6808\u4e2d\u6700\u5c0f\u5143\u7d20 \u6837\u4f8b\uff1a MinStack minStack = new MinStack(); minStack.push(-1); minStack.push(3); minStack.push(-4); minStack.getMin(); --> Returns -4. minStack.pop(); minStack.top(); --> Returns 3. minStack.getMin(); --> Returns -1. \u601d\u8def\uff1a \u5b9a\u4e49\u4e24\u4e2a\u6808\uff0c\u4e00\u4e2a\u5b58\u653e\u5165\u7684\u503c\uff0c\u53e6\u4e00\u4e2a\u5b58\u6700\u5c0f\u503c\uff0c\u4e24\u4e2a\u6808\u5e94\u8be5\u662f\u540c\u6b65 push \u548c pop\uff0c\u5426\u5219\u8fd8\u8981\u5206\u7c7b\u8ba8\u8bba\uff0c\u4ee3\u7801\u7f16\u5199\u5bb9\u6613\u51fa\u9519\u3002 \u56e0\u4e3a\u8981\u7528 $O(1)$ \u5b9e\u73b0\u5f53\u524d\u6808\u4e2d\u6700\u5c0f\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\uff0c\u56e0\u6b64\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u548c\u5e95\u5c42 Stack \u540c\u6b65\u7684\u3001\u79f0\u4e4b\u4e3a\u201c\u6700\u5c0f\u6808\u201d\u7684\u6808\u6210\u5458\u3002\u5177\u4f53\u64cd\u4f5c\u5982\u4e0b\u4ee3\u7801\u6240\u793a\u3002 Python \u4ee3\u7801\uff1a class MinStack(object): def __init__(self): \"\"\" initialize your data structure here. \"\"\" self.stack = [] self.helper = [] def push(self, x): \"\"\" :type x: int :rtype: void \"\"\" if len(self.stack) == 0: self.helper.append(x) self.stack.append(x) else: # \u5982\u679c\u5c06\u8981 push \u7684\u5143\u7d20\u6bd4\u8f85\u52a9\u6808\u7684\u6808\u9876\u5143\u7d20\u8fd8\u5927\uff0c\u4e0d\u80fd\u653e\u8fd9\u4e2a\u5143\u7d20\uff0c # \u6b64\u65f6\u5e94\u8be5\u628a\u8f85\u52a9\u6808\u7684\u6808\u9876\u5143\u7d20\u518d\u590d\u5236\u4e00\u4efd peek = self.helper[-1] if x > peek: self.stack.append(x) self.helper.append(peek) else: self.stack.append(x) self.helper.append(x) def pop(self): \"\"\" :rtype: void \"\"\" if len(self.stack) == 0: return # \u540c\u6b65 pop \u5143\u7d20 self.helper.pop() return self.stack.pop() def top(self): \"\"\" :rtype: int \"\"\" return self.stack[-1] def getMin(self): \"\"\" :rtype: int \"\"\" return self.helper[-1] Java \u4ee3\u7801\uff1a import java.util.Stack; public class Solution { private Stack<Integer> minStack = new Stack<>(); private Stack<Integer> dataStack = new Stack<>(); public void push(int node) { if (minStack.isEmpty()) { minStack.push(node); dataStack.push(node); return; } int curMin = minStack.peek(); if (node < curMin) { minStack.push(node); } else { minStack.push(curMin); } dataStack.push(node); } public void pop() { minStack.pop(); dataStack.pop(); } public int top() { return dataStack.pop(); } public int min() { return minStack.peek(); } } \u601d\u8def2\uff1a\u6211\u4eec\u9664\u4e86\u7ef4\u62a4\u57fa\u672c\u7684\u6808\u7ed3\u6784\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u201c\u8f85\u52a9\u6808\u201d\u3002\u4e0b\u9762\u4ecb\u7ecd\u5982\u4f55\u7ef4\u62a4\u5355\u8c03\u6808\uff1a\u505a\u5230\u4ee5\u4e0b\u4e24\u70b9\uff0c\u8f85\u52a9\u6808\u7684\u6808\u9876\u5143\u7d20\uff0c\u5c31\u662f\u5f53\u524d\u6808\u4e2d\u7684\u6700\u5c0f\u6570\u3002 1\u3001\u5f53\u6211\u4eec\u5411\u6808\u4e2d\u538b\u5165\u4e00\u4e2a\u6570\u65f6\uff0c\u5982\u679c\u8be5\u6570\u5c0f\u4e8e\uff08\u53ea\u8981\u5c0f\u4e8e\uff09\u201c\u8f85\u52a9\u6808\u201d\u7684\u6808\u9876\u5143\u7d20\uff0c\u5219\u5c06\u8be5\u6570\u540c\u65f6\u538b\u5165\u201c\u8f85\u52a9\u6808\u201d\u4e2d\uff1b\u5426\u5219\uff0c\u4e0d\u538b\u5165\u3002\u7531\u4e8e\u6808\u5177\u6709\u5148\u8fdb\u540e\u51fa\u6027\u8d28\uff0c\u6240\u4ee5\u5728\u8be5\u6570\u88ab\u5f39\u51fa\u4e4b\u524d\uff0c\u201c\u8f85\u52a9\u6808\u201d\u4e2d\u4e00\u76f4\u5b58\u5728\u4e00\u4e2a\u6570\u6bd4\u8be5\u6570\u5c0f\uff0c\u6240\u4ee5\u8be5\u6570\u4e00\u5b9a\u4e0d\u4f1a\u88ab\u5f53\u505a\u6700\u5c0f\u6570\u8f93\u51fa\u3002 2\u3001\u5f53\u6211\u4eec\u4ece\u6808\u4e2d\u5f39\u51fa\u4e00\u4e2a\u6570\u65f6\uff0c\u5982\u679c\u8be5\u6570\u7b49\u4e8e\u5355\u8c03\u6808\u7684\u6808\u9876\u5143\u7d20\uff0c\u540c\u65f6\u5c06\u5355\u8c03\u6808\u7684\u6808\u9876\u5143\u7d20\u5f39\u51fa\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u56db\u79cd\u64cd\u4f5c\u90fd\u53ea\u6709\u5e38\u6570\u6b21\u5165\u6808\u51fa\u6808\u64cd\u4f5c\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f $O(1)$\u3002 Python \u4ee3\u7801\uff1a # \u5b9a\u4e49\u4e24\u4e2a\u6808\uff0c\u4e00\u4e2a\u5b58\u653e\u5165\u7684\u503c\uff0c\u53e6\u4e00\u4e2a\u5b58\u6700\u5c0f\u503c\uff0c\u4e24\u4e2a\u6808\u5e94\u8be5\u662f\u540c\u6b65 push \u548c pop\uff0c\u5426\u5219\u8fd8\u8981\u5206\u7c7b\u8ba8\u8bba\uff0c\u4ee3\u7801\u7f16\u5199\u5bb9\u6613\u51fa\u9519\u3002 class MinStack(object): def __init__(self): \"\"\" initialize your data structure here. \"\"\" self.stack = [] self.helper = [] def push(self, x): \"\"\" :type x: int :rtype: void \"\"\" # \u65e0\u8bba\u5982\u4f55\u90fd push self.stack.append(x) # \u5982\u679c\u653e\u5165\u7684\u5143\u7d20\u5c0f\u4e8e\u8f85\u52a9\u6808\u9876\u5143\u7d20\uff0c\u8f85\u52a9\u6808\u9876\u624d push\uff0c\u5426\u5219\u4ec0\u4e48\u90fd\u4e0d\u505a if not self.helper or self.helper[-1] > x: self.helper.append(x) def pop(self): \"\"\" :rtype: void \"\"\" if len(self.stack) == 0: return # \u5982\u679c\u5f39\u51fa\u7684\u5143\u7d20\u7b49\u4e8e\u8f85\u52a9\u6808\u6808\u9876\u5143\u7d20\uff0c\u624d\u5c06\u8f85\u52a9\u6808\u9876\u5143\u7d20\u5f39\u51fa if self.helper[-1] == self.stack[-1]: self.helper.pop() return self.stack.pop() def top(self): \"\"\" :rtype: int \"\"\" return self.stack[-1] def getMin(self): \"\"\" :rtype: int \"\"\" return self.helper[-1] # Your MinStack object will be instantiated and called as such: # obj = MinStack() # obj.push(x) # obj.pop() # param_3 = obj.top() # param_4 = obj.getMin() Java \u4ee3\u7801\uff1a import java.util.Stack; public class Solution { private Stack<Integer> minStack = new Stack<>(); private Stack<Integer> dataStack = new Stack<>(); public void push(int node) { if (minStack.isEmpty()) { minStack.push(node); dataStack.push(node); return; } int curMin = minStack.peek(); if (node < curMin) { minStack.push(node); } else { minStack.push(curMin); } dataStack.push(node); } public void pop() { minStack.pop(); dataStack.pop(); } public int top() { return dataStack.pop(); } public int min() { return minStack.peek(); } } LeetCode \u7b2c 155 \u9898\uff1a\u6700\u5c0f\u6808 \u8bbe\u7f6e\u4e00\u4e2a\u8f85\u52a9\u6808\uff0c\u4fdd\u5b58\u5f53\u524d\u6700\u5c0f\u7684\u5143\u7d20\u3002 class MinStack(object): # \u3010\u7279\u522b\u6ce8\u610f\u3011\u6570\u636e\u6808\u548c\u8f85\u52a9\u6808\u8981\u540c\u6b65\uff0c\u7279\u6b8a\u6d4b\u8bd5\u7528\u4f8b\u4e3a\uff1a # \u4f9d\u6b21 push 0 1 0\uff0c\u9a6c\u4e0a\u5f39\u6808\uff0c\u67e5\u8be2\u6700\u5c0f def __init__(self): \"\"\" initialize your data structure here. \"\"\" # \u6570\u636e\u6808 self.data_stack = [] # \u8f85\u52a9\u6808 self.help_stack = [] def push(self, x): \"\"\" :type x: int :rtype: void \"\"\" self.data_stack.append(x) if len(self.help_stack) == 0 or x < self.help_stack[-1]: self.help_stack.append(x) else: self.help_stack.append(self.help_stack[-1]) def pop(self): \"\"\" :rtype: void \"\"\" if len(self.data_stack) > 0: ret = self.data_stack.pop() self.help_stack.pop() return ret def top(self): \"\"\" :rtype: int \"\"\" if len(self.data_stack) > 0: return self.data_stack[-1] def getMin(self): \"\"\" :rtype: int \"\"\" if len(self.data_stack) > 0: return self.help_stack[-1] # Your MinStack object will be instantiated and called as such: # obj = MinStack() # obj.push(x) # obj.pop() # param_3 = obj.top() # param_4 = obj.getMin() if __name__ == '__main__': min_stack = MinStack() min_stack.push(0) min_stack.push(1) min_stack.push(0) print(min_stack.getMin()) min_stack.pop() print(min_stack) print(min_stack.getMin()) MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 30 \u9898\uff1a\u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u6700\u5c0f\u5143\u7d20\u7684 min \u51fd\u6570"},{"location":"31-40/","text":"\u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09 \u9898\u89e3\uff08Python \u8bed\u8a00\u5b9e\u73b0\uff09\u7b2c 31-40 \u9898 \u7b2c 35 \u9898\uff1a\u590d\u6742\u94fe\u8868\u7684\u590d\u5236 \u4f20\u9001\u95e8\uff1a \u590d\u6742\u94fe\u8868\u7684\u590d\u523b \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u590d\u5236\u4e00\u4e2a\u590d\u6742\u94fe\u8868\u3002 \u5728\u590d\u6742\u94fe\u8868\u4e2d\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u9664\u4e86\u6709\u4e00\u4e2a\u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u989d\u5916\u7684\u6307\u9488\u6307\u5411\u94fe\u8868\u4e2d\u7684\u4efb\u610f\u7ed3\u70b9\u6216\u8005 null \u3002 \u5206\u6790\uff1a\u4e00\u4e9b\u7ec6\u8282\u8981\u8003\u8651\u5230\uff0c\u7279\u522b\u662f\u7a7a\u7ed3\u70b9\u7684\u5224\u65ad\uff0c\u4ee5\u4e0b\u4e24\u79cd\u65b9\u6cd5\u90fd\u8981\u904d\u5386\u94fe\u8868\u4e00\u904d\u4ee5\u4e0a\uff0c\u5373\u904d\u5386\u94fe\u8868\u4e00\u904d\u662f\u4e0d\u591f\u7684\u3002 \u601d\u8def1\uff1a\u6709\u70b9\u5de7\u5999\uff0c\u7a7f\u9488\u5f15\u7ebf\uff0c\u65b0\u65e7\u65ad\u5f00\u3002 Python \u4ee3\u7801\uff1a class ListNode(object): def __init__(self, x): self.val = x self.next = None self.random = None class Solution(object): def copyRandomList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None: return None # \u7b2c 1 \u6b65\uff1a\u6839\u636e next \u6307\u9488\u590d\u5236\u51fa\u4e00\u4e2a\u65b0\u65e7\u5408\u4e00\u7684\u94fe\u8868 cur_node = head while cur_node: # \u5148\u6682\u5b58 cur_node \u7684 next_node \u4e0b\u4e00\u6b21\u904d\u5386\u8981\u7528 next_node = cur_node.next new_node = ListNode(cur_node.val) cur_node.next = new_node new_node.next = next_node # \u6307\u9488\u904d\u5386\u5230\u4e0b\u4e00\u4e2a\u7ed3\u70b9 cur_node = next_node # \u7b2c 2 \u6b65\uff1a\u6839\u636e\u65e7\u7ed3\u70b9 random \u6307\u9488\uff0c\u7ed9\u65b0\u7ed3\u70b9\u7684 random \u6307\u9488\u505a\u51fa\u6b63\u786e\u7684\u6307\u5411 cur_node = head while cur_node: new_node = cur_node.next # \u540c\u6837\u8981\u5148\u6682\u5b58 cur_node.next_node next_node = new_node.next # \u8981\u8bb0\u5f97\u505a\u975e\u7a7a\u5224\u65ad\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\u4e86 random \u6709\u53ef\u80fd\u4e3a\u7a7a new_node.random = cur_node.random.next if cur_node.random else None cur_node = next_node # \u7b2c 3 \u6b65\uff1a\u65e7\u7ed3\u70b9\u548c\u65b0\u7ed3\u70b9\u5206\u79bb\uff08\u62c6\u5206\u94fe\u8868\uff09 cur_node = head res = cur_node.next while cur_node: new_node = cur_node.next # \u540c\u6837\u8981\u5148\u6682\u5b58\u4e0b\u4e00\u4e2a\u7ed3\u70b9 next_node = new_node.next # \u6062\u590d\u539f\u59cb\u7ed3\u70b9 cur_node.next = new_node.next # \u6062\u590d\u62f7\u8d1d\u7ed3\u70b9 # \u8fd9\u91cc\u4e5f\u8981\u540c\u6837\u6ce8\u610f\u7a7a\u6307\u9488\u7684\u95ee\u9898\uff0c\u514b\u9686\u7ed3\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u662f null new_node.next = next_node.next if next_node else None cur_node = next_node return res Java \u4ee3\u7801\uff1a class RandomListNode { int label; RandomListNode next = null; RandomListNode random = null; RandomListNode(int label) { this.label = label; } } public class Solution { public RandomListNode Clone(RandomListNode pHead) { // \u6781\u7aef\u60c5\u51b5\uff0c\u4e00\u5b9a\u8981\u5199\u5148\u51fa\u6765 if (pHead == null) { return null; } RandomListNode curNode = pHead; // \u7b2c 1 \u6b65\uff1a\u6839\u636e next \u6307\u9488\u590d\u5236\u51fa\u4e00\u4e2a\u65b0\u65e7\u5408\u4e00\u7684\u94fe\u8868 // \u6b64\u65f6\uff0c\u5947\u6570\u7d22\u5f15\uff08\u4ece 1 \u5f00\u59cb\u8ba1\u7b97\uff09\u7684\u7ed3\u70b9\u662f\u65e7\u7684\u7ed3\u70b9\uff0c\u5076\u6570\u7d22\u5f15\u7684\u7ed3\u70b9\u662f\u65b0\u7684\u7ed3\u70b9 RandomListNode nextNode; RandomListNode copyNode; while (curNode != null) { nextNode = curNode.next; copyNode = new RandomListNode(curNode.label); curNode.next = copyNode; copyNode.next = nextNode; curNode = nextNode; } // \u7b2c 2 \u6b65\uff1a\u6839\u636e\u65e7\u7ed3\u70b9 random \u6307\u9488\uff0c\u7ed9\u65b0\u7ed3\u70b9\u7684 random \u6307\u9488\u505a\u51fa\u6b63\u786e\u7684\u6307\u5411 // \u6307\u9488\u590d\u4f4d\u5230\u8d77\u59cb\u7ed3\u70b9 curNode = pHead; while (curNode != null) { copyNode = curNode.next; nextNode = copyNode.next; // \u7279\u522b\u6ce8\u610f // \u7279\u522b\u6ce8\u610f // \u7279\u522b\u6ce8\u610f\uff1a\u6709\u7684\u7ed3\u70b9\u5f88\u53ef\u80fd random \u7684\u6307\u5411\u4e3a\u7a7a\uff08\u9898\u76ee\u4e2d\u660e\u786e\u8bf4\u660e\uff09 // \u6240\u4ee5\uff1a\u53ea\u8981\u9047\u5230 next \u5f15\u7528\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u5224\u65ad\u662f\u5426\u4e3a\u7a7a copyNode.random = curNode.random == null ? null : curNode.random.next; curNode = nextNode; } // \u7b2c 3 \u6b65\uff1a\u65e7\u7ed3\u70b9\u548c\u65b0\u7ed3\u70b9\u5206\u79bb\uff08\u62c6\u5206\u94fe\u8868\uff09 curNode = pHead; RandomListNode res = pHead.next; while (curNode != null) { copyNode = curNode.next; nextNode = copyNode.next; // \u6062\u590d\u539f\u59cb\u7ed3\u70b9 curNode.next = copyNode.next; // \u6062\u590d\u62f7\u8d1d\u7ed3\u70b9 // \u8fd9\u91cc\u4e5f\u8981\u540c\u6837\u6ce8\u610f\u7a7a\u6307\u9488\u7684\u95ee\u9898\uff0c\u514b\u9686\u7ed3\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u662f null copyNode.next = copyNode.next == null ? null : copyNode.next.next; curNode = nextNode; } return res; } } C++ \u5199\u6cd5\uff1a Java \u7248\u672c\u91cc\u9762\u8fd8\u6709\u4e00\u4e2a\u7f51\u53cb\u7684\u5199\u6cd5\u3002 \u601d\u8def2\uff1a\u4f7f\u7528\u54c8\u5e0c\u8868\uff0c\u590d\u5236\u51fa\u968f\u673a\u8bbf\u95ee\u7684\u6307\u9488\u3002 Python \u4ee3\u7801\uff1a class ListNode(object): def __init__(self, x): self.val = x self.next = None self.random = None class Solution(object): def copyRandomList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None: return None map = dict() dummy_node = ListNode(-1) # p \u6307\u9488\u7528\u4e8e\u65b0\u94fe\u8868\u7684 next \u6307\u9488\u8d4b\u503c p = dummy_node # \u904d\u5386\u4e00\u6b21\u94fe\u8868\uff0c\u505a\u4e24\u4ef6\u4e8b # 1\u3001\u590d\u5236\u7ed3\u70b9 # 2\u3001\u53ea\u7ba1 next \u6307\u9488 cur_node = head while cur_node: new_node = ListNode(cur_node.val) # \u628a\u65b0\u65e7\u7ed3\u70b9\u7684\u5bf9\u5e94\u5173\u7cfb\u653e\u5728\u4e00\u4e2a map \u91cc map[cur_node] = new_node cur_node = cur_node.next p.next = new_node p = new_node # \u63a5\u4e0b\u6765\u505a\u968f\u673a\u6307\u9488\u7684\u590d\u5236 for old_node, new_node in map.items(): # \u8981\u8bb0\u5f97\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\uff0c\u5426\u5219 None \u4e0d\u80fd\u4f5c\u4e3a map key if old_node.random: new_node.random = map[old_node.random] return dummy_node.next Java \u4ee3\u7801\uff1a public class Solution3 { public RandomListNode Clone(RandomListNode pHead) { Map<RandomListNode, RandomListNode> map = new HashMap<>(); RandomListNode curNode = pHead; // \u4f53\u4f1a\u8fd9\u91cc\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u7684\u5fc5\u8981\u6027 RandomListNode dummyNode = new RandomListNode(-1); RandomListNode p = dummyNode; // \u5b8c\u6210\u590d\u5236 next \u7ed3\u70b9\uff0c\u5e76\u4e14\u5c06\u5bf9\u5e94\u5173\u7cfb\u653e\u5165 Hash \u8868 while (curNode != null) { RandomListNode newNode = new RandomListNode(curNode.label); map.put(curNode, newNode); curNode = curNode.next; p.next = newNode; p = newNode; } // \u5b8c\u6210\u590d\u5236\u94fe\u8868\u7684 random \u6307\u9488\u7684\u8d4b\u503c Set<Map.Entry<RandomListNode, RandomListNode>> entrySet = map.entrySet(); for (Map.Entry<RandomListNode, RandomListNode> entry : entrySet) { entry.getValue().random = map.get(entry.getKey().random); } return dummyNode.next; } } Java \u4ee3\u7801\uff1a\u7279\u522b\u6ce8\u610f\uff1a\u5728\u590d\u5236\u201c\u6307\u9488\u201d\u7684\u65f6\u5019\uff0c\u5bf9\u7a7a\u5bf9\u8c61\u7684\u5224\u5b9a\uff0c\u753b\u56fe\u662f\u5341\u5206\u5173\u952e\u7684\u3002 class RandomListNode { int label; RandomListNode next = null; RandomListNode random = null; RandomListNode(int label) { this.label = label; } } public class Solution { public RandomListNode Clone(RandomListNode pHead) { // \u6781\u7aef\u60c5\u51b5\uff0c\u4e00\u5b9a\u8981\u5199\u5148\u51fa\u6765 if (pHead == null) { return null; } RandomListNode curNode = pHead; // \u7b2c 1 \u6b65\uff1a\u6839\u636e next \u6307\u9488\u590d\u5236\u51fa\u4e00\u4e2a\u65b0\u65e7\u5408\u4e00\u7684\u94fe\u8868 // \u6b64\u65f6\uff0c\u5947\u6570\u7d22\u5f15\uff08\u4ece 1 \u5f00\u59cb\u8ba1\u7b97\uff09\u7684\u7ed3\u70b9\u662f\u65e7\u7684\u7ed3\u70b9\uff0c\u5076\u6570\u7d22\u5f15\u7684\u7ed3\u70b9\u662f\u65b0\u7684\u7ed3\u70b9 RandomListNode nextNode; RandomListNode copyNode; while (curNode != null) { nextNode = curNode.next; copyNode = new RandomListNode(curNode.label); curNode.next = copyNode; copyNode.next = nextNode; curNode = nextNode; } // \u7b2c 2 \u6b65\uff1a\u6839\u636e\u65e7\u7ed3\u70b9 random \u6307\u9488\uff0c\u7ed9\u65b0\u7ed3\u70b9\u7684 random \u6307\u9488\u505a\u51fa\u6b63\u786e\u7684\u6307\u5411 // \u6307\u9488\u590d\u4f4d\u5230\u8d77\u59cb\u7ed3\u70b9 curNode = pHead; while (curNode != null) { copyNode = curNode.next; nextNode = copyNode.next; // \u7279\u522b\u6ce8\u610f // \u7279\u522b\u6ce8\u610f // \u7279\u522b\u6ce8\u610f\uff1a\u6709\u7684\u7ed3\u70b9\u5f88\u53ef\u80fd random \u7684\u6307\u5411\u4e3a\u7a7a\uff08\u9898\u76ee\u4e2d\u660e\u786e\u8bf4\u660e\uff09 // \u6240\u4ee5\uff1a\u53ea\u8981\u9047\u5230 next \u5f15\u7528\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u5224\u65ad\u662f\u5426\u4e3a\u7a7a copyNode.random = curNode.random == null ? null : curNode.random.next; curNode = nextNode; } // \u7b2c 3 \u6b65\uff1a\u65e7\u7ed3\u70b9\u548c\u65b0\u7ed3\u70b9\u5206\u79bb\uff08\u62c6\u5206\u94fe\u8868\uff09 curNode = pHead; RandomListNode res = pHead.next; while (curNode != null) { copyNode = curNode.next; nextNode = copyNode.next; // \u6062\u590d\u539f\u59cb\u7ed3\u70b9 curNode.next = copyNode.next; // \u6062\u590d\u62f7\u8d1d\u7ed3\u70b9 // \u8fd9\u91cc\u4e5f\u8981\u540c\u6837\u6ce8\u610f\u7a7a\u6307\u9488\u7684\u95ee\u9898\uff0c\u514b\u9686\u7ed3\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u662f null copyNode.next = copyNode.next == null ? null : copyNode.next.next; curNode = nextNode; } return res; } } Java \u4ee3\u7801\uff1a import java.util.HashMap; import java.util.Map; import java.util.Set; /** * \u4f7f\u7528 Hash \u8868\u7684\u65b9\u5f0f * * @author liwei */ public class Solution2 { public RandomListNode Clone(RandomListNode pHead) { Map<RandomListNode, RandomListNode> map = new HashMap<>(); RandomListNode curNode = pHead; // \u4f53\u4f1a\u8fd9\u91cc\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u7684\u5fc5\u8981\u6027 RandomListNode dummyNode = new RandomListNode(-1); RandomListNode p = dummyNode; // \u5b8c\u6210\u590d\u5236 next \u7ed3\u70b9\uff0c\u5e76\u4e14\u5c06\u5bf9\u5e94\u5173\u7cfb\u653e\u5165 Hash \u8868 while (curNode != null) { RandomListNode newNode = new RandomListNode(curNode.label); map.put(curNode, newNode); curNode = curNode.next; p.next = newNode; p = newNode; } // \u5b8c\u6210\u590d\u5236\u94fe\u8868\u7684 random \u6307\u9488\u7684\u8d4b\u503c Set<Map.Entry<RandomListNode, RandomListNode>> entrySet = map.entrySet(); for (Map.Entry<RandomListNode, RandomListNode> entry : entrySet) { entry.getValue().random = map.get(entry.getKey().random); } return dummyNode.next; } } \u7b2c 36 \u9898\uff1a\u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868\uff08\u5178\u578b\u9012\u5f52\u95ee\u9898\uff09 \u4f20\u9001\u95e8\uff1a \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8be5\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\u3002 \u8981\u6c42\u4e0d\u80fd\u521b\u5efa\u4efb\u4f55\u65b0\u7684\u7ed3\u70b9\uff0c\u53ea\u80fd\u8c03\u6574\u6811\u4e2d\u7ed3\u70b9\u6307\u9488\u7684\u6307\u5411\u3002 \u6ce8\u610f \uff1a \u9700\u8981\u8fd4\u56de\u53cc\u5411\u94fe\u8868\u6700\u5de6\u4fa7\u7684\u8282\u70b9\u3002 \u4f8b\u5982\uff0c\u8f93\u5165\u4e0b\u56fe\u4e2d\u5de6\u8fb9\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5219\u8f93\u51fa\u53f3\u8fb9\u7684\u6392\u5e8f\u53cc\u5411\u94fe\u8868\u3002 \u601d\u8def\uff1a \u5206\u6790\uff1a\u53c2\u8003\u89e3\u7b54\u6709\u4e00\u5b9a\u4ef7\u503c\uff0c\u8981\u597d\u597d\u7814\u7a76\u4e00\u4e0b\u3002\u753b\u56fe\u5c31\u6e05\u695a\u89e3\u6cd5\u4e86\u3002 Python \u4ee3\u7801\uff1a class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def convert(self, root): \"\"\" :type root: TreeNode :rtype: TreeNode \"\"\" if root is None: return None head, _ = self.__dfs(root) return head def __dfs(self, root): \"\"\" \u8fd4\u56de\u53cc\u5411\u94fe\u8868\u7684\u4e24\u7aef \"\"\" # \u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u662f\u53f6\u5b50\u7ed3\u70b9 if root.left is None and root.right is None: return (root, root) # \u5982\u679c\u6709\u5de6\u5b69\u5b50\uff0c\u8fd8\u6709\u53f3\u8fb9\u5b69\u5b50 if root.left and root.right: ll, lr = self.__dfs(root.left) rl, rr = self.__dfs(root.right) # \u4e0b\u9762\u7a7f\u9488\u5f15\u7ebf lr.right = root root.left = lr root.right = rl rl.left = root return (ll, rr) # \u8d70\u5230\u8fd9\u91cc\uff0c\u5c31\u662f\u4e8c\u8005\u4e4b\u4e00\u4e3a\u7a7a if root.left: ll, lr = self.__dfs(root.left) lr.right = root root.left = lr return (ll, root) if root.right: rl, rr = self.__dfs(root.right) root.right = rl rl.left = root return (root, rr) C++ \u4ee3\u7801\uff1a\u8fd4\u56de\u4e00\u4e2a pair Java \u4ee3\u7801\uff1a class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { private TreeNode linkedListTail; private TreeNode res; public TreeNode Convert(TreeNode pRootOfTree) { convert(pRootOfTree); return res; } /** * \u4e2d\u5e8f\u904d\u5386 * * @param root */ private void convert(TreeNode root) { if (root == null) { return; } convert(root.left); // \u4e2d\u5e8f\u904d\u5386\u771f\u6b63\u505a\u4e8b\u60c5\u7684\u5730\u65b9 if (linkedListTail == null) { // \u5bf9\u5e94\u521a\u5f00\u59cb\u7684\u65f6\u5019 linkedListTail = root; // \u5728\u6700\u5de6\u8fb9\u7684\u5730\u65b9\u8bb0\u5f55\u9700\u8981\u8fd4\u56de\u7684\u53cc\u5411\u94fe\u8868\u7684\u6839\u7ed3\u70b9 res = root; } else { linkedListTail.right = root; root.left = linkedListTail; linkedListTail = root; } convert(root.right); } } Python \u4ee3\u7801\uff1a class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def __init__(self): self.linked_list_tail = None self.res = None def convert(self, root): \"\"\" :type root: TreeNode :rtype: TreeNode \"\"\" self.__dfs(root) return self.res # \u4e2d\u5e8f\u904d\u5386 def __dfs(self, root): if root is None: return self.__dfs(root.left) if self.linked_list_tail is None: self.linked_list_tail = root self.res = root else: self.linked_list_tail.right = root root.left = self.linked_list_tail self.linked_list_tail = root self.__dfs(root.right) Java \u4ee3\u7801\uff1a\u5206\u6cbb\u6cd5 public class Solution2 { public TreeNode convert(TreeNode root) { if (root == null) { return root; } TreeNode left = rightMost(root.left); TreeNode right = leftMost(root.right); convert(root.left); convert(root.right); if (left != null) { left.right = root; } root.left = left; if (right != null) { right.left = root; } root.right = right; // \u6700\u540e\u8fd4\u56de\u6700\u5de6\u8fb9\u7684\u7ed3\u70b9 while (root.left != null) { root = root.left; } return root; } TreeNode leftMost(TreeNode root) { if (root == null) { return null; } while (root.left != null) { root = root.left; } return root; } TreeNode rightMost(TreeNode root) { if (root == null) { return null; } while (root.right != null) { root = root.right; } return root; } } C++ \u4ee3\u7801\uff1a class Solution { public: TreeNode* convert(TreeNode* root) { if (!root) return root; stack<TreeNode*> st; while (root){ st.push(root); root = root->left; } TreeNode* ans = st.top(); TreeNode* last = NULL; while (!st.empty()){ TreeNode* tmp = st.top(); st.pop(); if (!last) last = tmp; else { last->right = tmp; tmp->left = last; last = tmp; } tmp = tmp->right; while (tmp){ st.push(tmp); tmp = tmp->left; } } return ans; } }; Java \u4ee3\u7801\uff1a /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { public TreeNode convert(TreeNode root) { if (root == null) return null; TreeNode dummy = new TreeNode(-1); TreeNode pre = dummy; Stack<TreeNode> stack = new Stack<>(); while (root != null || stack.size() != 0){ while (root != null){ stack.push(root); root = root.left; } if (stack.size() != 0){ TreeNode node = stack.pop(); pre.right = node; node.left = pre; pre = pre.right; root = node.right; } } dummy.right.left = null; dummy = dummy.right; return dummy; } } Java \u4ee3\u7801\uff1a class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { private TreeNode linkedListTail; private TreeNode res; public TreeNode Convert(TreeNode pRootOfTree) { convert(pRootOfTree); return res; } /** * \u4e2d\u5e8f\u904d\u5386 * * @param root */ private void convert(TreeNode root) { if (root == null) { return; } convert(root.left); // \u4e2d\u5e8f\u904d\u5386\u771f\u6b63\u505a\u4e8b\u60c5\u7684\u5730\u65b9 if (linkedListTail == null) { linkedListTail = root; // \u5728\u6700\u5de6\u8fb9\u7684\u5730\u65b9\u8bb0\u5f55\u9700\u8981\u8fd4\u56de\u7684\u53cc\u5411\u94fe\u8868\u7684\u6839\u7ed3\u70b9 res = root; } else { linkedListTail.right = root; root.left = linkedListTail; linkedListTail = root; } convert(root.right); } } \u53c2\u8003\u8d44\u6599\uff1ahttps://www.nowcoder.com/questionTerminal/947f6eb80d944a84850b0538bf0ec3a5 \u7b2c 37 \u9898\uff1a\u5e8f\u5217\u5316\u4e8c\u53c9\u6811 \u4f20\u9001\u95e8\uff1a \u5e8f\u5217\u5316\u4e8c\u53c9\u6811 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u7528\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u3002 \u60a8\u9700\u8981\u786e\u4fdd\u4e8c\u53c9\u6811\u53ef\u4ee5\u5e8f\u5217\u5316\u4e3a\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u6b64\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u539f\u59cb\u6811\u7ed3\u6784\u3002 \u6837\u4f8b\uff1a \u4f60\u53ef\u4ee5\u5e8f\u5217\u5316\u5982\u4e0b\u7684\u4e8c\u53c9\u6811 8 / \\ 12 2 / \\ 6 4 \u4e3a\uff1a \"[8, 12, 2, null, null, 6, 4, null, null, null, null]\" \u6ce8\u610f : \u4ee5\u4e0a\u7684\u683c\u5f0f\u662f AcWing \u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u7684\u65b9\u5f0f\uff0c\u4f60\u4e0d\u5fc5\u4e00\u5b9a\u6309\u7167\u6b64\u683c\u5f0f\uff0c\u6240\u4ee5\u53ef\u4ee5\u8bbe\u8ba1\u51fa\u4e00\u4e9b\u65b0\u7684\u6784\u9020\u65b9\u5f0f\u3002 \u5206\u6790\uff1a\u603b\u4e4b\u5c31\u662f\u524d\u5e8f\u904d\u5386\u3002\u56e0\u4e3a\u201c\u524d\u5e8f\u904d\u5386\u201d\u6709\u5f88\u597d\u7684\u6027\u8d28\uff1a \u8bf4\u660e\uff1a\u6839\u636e\u4e0a\u9762\u7684\u5e8f\u5217\u5316\u89c4\u5219\uff0c\u4e0a\u56fe\u4e2d\u7684\u4e8c\u53c9\u6811\u88ab\u5e8f\u5217\u5316\u6210\u5b57\u7b26\u4e32 \"1\uff0c2\uff0c4\uff0c$\uff0c$\uff0c$\uff0c3\uff0c5\uff0c$\uff0c$\uff0c6\uff0c$\uff0c$\" \u3002 Python \u4ee3\u7801\uff1a class Solution: # \u524d\u5e8f\u904d\u5386 def serialize(self, root): \"\"\"Encodes a tree to a single string. :type root: TreeNode :rtype: str \"\"\" res = '' if root is None: return '! ' res += str(root.val) res += ' ' res += self.serialize(root.left) res += self.serialize(root.right) return res def deserialize(self, data): \"\"\"Decodes your encoded data to tree. :type data: str :rtype: TreeNode \"\"\" arr = data.split(' ') return self.__helper(arr) def __helper(self, arr): if arr: top = arr.pop(0) if top != '!': root = TreeNode(int(top)) root.left = self.__helper(arr) root.right = self.__helper(arr) return root else: return None Python \u4ee3\u7801\uff1a\u5e8f\u5217\u5316\u65f6\u5019\uff0c\u4e0d\u7528\u9012\u5f52\uff0c\u7528\u6808\u7684\u5199\u6cd5 class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution: # \u524d\u5e8f\u904d\u5386 def serialize(self, root): \"\"\"Encodes a tree to a single string. :type root: TreeNode :rtype: str \"\"\" res = [] if root is None: return '!' stack = [root] while stack: top = stack.pop() if top is None: res.append('!') else: stack.append(top.right) stack.append(top.left) res.append(str(top.val)) return ' '.join(res) def deserialize(self, data): \"\"\"Decodes your encoded data to tree. :type data: str :rtype: TreeNode \"\"\" queue = data.split(' ') return self.__build_tree(queue) def __build_tree(self, queue): if queue: top = queue.pop(0) if top != '!': root = TreeNode(int(top)) root.left = self.__build_tree(queue) root.right = self.__build_tree(queue) return root else: return None # \u5982\u679c queue \u4e3a\u7a7a\uff0c\u5c31\u4ec0\u4e48\u90fd\u4e0d\u505a Java \u4ee3\u7801\uff1a\u5e8f\u5217\u5316\uff1a\u524d\u5e8f\u904d\u5386\u4e8c\u53c9\u6811\u5b58\u5165\u5b57\u7b26\u4e32\u4e2d\uff0c\u53cd\u5e8f\u5217\u5316\uff1a\u6839\u636e\u524d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811 import java.util.LinkedList; class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { /** * \u5e8f\u5217\u5316\u4e00\u68f5\u4e8c\u53c9\u6811\uff08\u5176\u5b9e\u5c31\u662f\u524d\u5e8f\u904d\u5386\uff09 * @param root * @return */ public String serialize(TreeNode root) { if (root == null) { return \"$,\"; } StringBuilder sb = new StringBuilder(root.val + \",\"); sb.append(serialize(root.left)); sb.append(serialize(root.right)); return sb.toString(); } // \u53cd\u5e8f\u5217\u5316\u4e00\u68f5\u4e8c\u53c9\u6811 public TreeNode deserialize(String str) { String[] strArr = str.split(\",\"); LinkedList<String> queue = new LinkedList<>(); for (String s : strArr) { queue.addLast(s); } return preOrder(queue); } // \u4f7f\u7528\u961f\u5217\u5c31\u5b9e\u73b0\u4e86\u8fed\u4ee3\u5668\u7684\u529f\u80fd private TreeNode preOrder(LinkedList<String> queue) { String s = queue.removeFirst(); if (!\"$\".endsWith(s)) { TreeNode newNode = new TreeNode(Integer.parseInt(s)); newNode.left = preOrder(queue); newNode.right = preOrder(queue); // \u7406\u89e3\u5c06\u65b0\u521b\u5efa\u7684\u7ed3\u70b9\u8fd4\u56de\u56de\u53bb\u7684\u5fc5\u8981\u6027 return newNode; } // \u662f \"$\" \u5c31\u8fd4\u56de\u7a7a\u6307\u9488\uff0c\u6ce8\u610f\u8fd9\u91cc\u7684\u9012\u5f52\u65b9\u6cd5\uff0c\u4f1a\u628a\u7a7a\u6307\u9488\u63a5\u5728\u539f\u6765\u7684\u6811\u8282\u70b9\u4e0a return null; } } \u53e6\u4e00\u79cd\u5199\u6cd5\uff1a Java \u4ee3\u7801\uff1a import java.util.LinkedList; // \u524d\u5e8f\u904d\u5386 public class Solution2 { String Serialize(TreeNode root) { StringBuilder stringBuilder = new StringBuilder(); preOrder(root, stringBuilder); return stringBuilder.toString(); } // \u4e0a\u9762\u51fd\u6570\u7684\u8f85\u52a9\u51fd\u6570 private void preOrder(TreeNode node, StringBuilder stringBuilder) { if (node == null) { stringBuilder.append(\"#\"); stringBuilder.append(\",\"); return; } stringBuilder.append(node.val); stringBuilder.append(\",\"); preOrder(node.left, stringBuilder); preOrder(node.right, stringBuilder); } TreeNode Deserialize(String str) { String[] strings = str.split(\",\"); int size = strings.length; System.out.println(size); LinkedList<String> queue = new LinkedList<>(); for (int i = 0; i < size; i++) { queue.addLast(strings[i]); } return inOrderGenerate(queue); } private TreeNode inOrderGenerate(LinkedList<String> queue) { if (queue.isEmpty()) { return null; } String s = queue.removeFirst(); if (!\"#\".equals(s)) { TreeNode root = new TreeNode(Integer.parseInt(s)); root.left = inOrderGenerate(queue); root.right = inOrderGenerate(queue); return root; } return null; } } C++ \u4ee3\u7801\uff1a /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public: // Encodes a tree to a single string. string serialize(TreeNode* root) { string res; dfs_s(root, res); return res; } void dfs_s(TreeNode *root, string &res) { if (!root) { res += \"null \"; return; } res += to_string(root->val) + ' '; dfs_s(root->left, res); dfs_s(root->right, res); } // Decodes your encoded data to tree. TreeNode* deserialize(string data) { int u = 0; return dfs_d(data, u); } TreeNode* dfs_d(string &data, int &u) { if (u == data.size()) return NULL; int k = u; while (data[k] != ' ') k ++ ; if (data[u] == 'n') { u = k + 1; return NULL; } int val = 0; for (int i = u; i < k; i ++ ) val = val * 10 + data[i] - '0'; u = k + 1; auto root = new TreeNode(val); root->left = dfs_d(data, u); root->right = dfs_d(data, u); return root; } }; \u4f5c\u8005\uff1ayxc \u94fe\u63a5\uff1ahttps://www.acwing.com/activity/content/code/content/20710/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u7b2c 38 \u9898\uff1a\u5b57\u7b26\u4e32\u7684\u6392\u5217\uff08\u91cd\u8981\uff0c\u56de\u6eaf\uff09 \u4f20\u9001\u95e8\uff1a \u6570\u5b57\u6392\u5217 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u7ec4\u6570\u5b57\uff08\u53ef\u80fd\u5305\u542b\u91cd\u590d\u6570\u5b57\uff09\uff0c\u8f93\u51fa\u5176\u6240\u6709\u7684\u6392\u5217\u65b9\u5f0f\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,3] \u8f93\u51fa\uff1a [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ] \u5206\u6790\uff1a\u516b\u7687\u540e\u95ee\u9898\u6839\u636e\u6392\u5217\u7ec4\u5408\u6765\u6c42\u89e3\uff0c\u5173\u952e\u662f\u5224\u5b9a\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u89e3\u3002\u56de\u6eaf\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n!)$\u3002 \u9898\u76ee\u63cf\u8ff0\uff1a\u8ddf LeetCode 47. Permutations II \u4e00\u6a21\u4e00\u6837\uff0c\u90fd\u662f\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002\u6ce8\u610f\u533a\u5206\u4e0a\u4e00\u9053\u9898 LeetCode 46. Permutations \u3002 Python \u4ee3\u7801\uff1a\u5b66\u4f1a\u4f7f\u7528\u4f4d\u8fd0\u7b97\u5224\u91cd class Solution: def permutation(self, nums): \"\"\" :type nums: List[int] :rtype: List[List[int]] \"\"\" l = len(nums) res = [] if l == 0: return res # \u56e0\u4e3a\u542b\u6709\u91cd\u590d\u6570\u7ec4\uff0c\u6240\u4ee5\u5148\u6392\u5e8f nums.sort() path = [0 for _ in range(l)] self.__dfs(nums, 0, 0, path, 0, res) return res def __dfs(self, nums, index, start, path, state, res): if index == len(nums): res.append(path[:]) return if index == 0 or nums[index] != nums[index - 1]: start = 0 for i in range(start, len(nums)): if (state >> i & 1) == 0: path[i] = nums[index] self.__dfs(nums, index + 1, i + 1, path, state + (1 << i), res) Java \u4ee3\u7801\uff1a import java.util.ArrayList; import java.util.Stack; class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { // \u4f7f\u7528\u641c\u7d22\u7684\u7b56\u7565\u53ef\u4ee5\u5b8c\u6210 public ArrayList<ArrayList<Integer>> FindPath(TreeNode root, int target) { ArrayList<ArrayList<Integer>> res = new ArrayList<>(); Stack<Integer> pre = new Stack<>(); findPath(root, target, pre, res); return res; } private void findPath(TreeNode root, int target, Stack<Integer> pre, ArrayList<ArrayList<Integer>> res) { if (root == null || root.val > target) { return; } // \u6ce8\u610f\uff1a\u9898\u76ee\u4e2d\u95ee\u7684\u662f\u5230\u53f6\u5b50\u7ed3\u70b9 if (root.val == target && root.left == null && root.right == null) { pre.add(root.val); res.add(new ArrayList<>(pre)); pre.pop(); return; } assert root.val < target && root != null; pre.add(root.val); findPath(root.left, target - root.val, pre, res); findPath(root.right, target - root.val, pre, res); pre.pop(); } public static void main(String[] args) { TreeNode node1 = new TreeNode(1); TreeNode node2 = new TreeNode(2); TreeNode node3 = new TreeNode(3); TreeNode node4 = new TreeNode(4); TreeNode node8 = new TreeNode(8); TreeNode node7 = new TreeNode(7); node1.left = node2; node1.right = node3; node2.left = node4; node2.right = node8; node3.left = node7; Solution solution = new Solution(); ArrayList<ArrayList<Integer>> findPath = solution.FindPath(node1, 11); System.out.println(findPath); } } \u7b2c 39 \u9898\uff1a\u6570\u7ec4\u4e2d\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 \u4f20\u9001\u95e8\uff1a \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u8bf7\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\u3002 \u5047\u8bbe\u6570\u7ec4\u975e\u7a7a\uff0c\u5e76\u4e14\u4e00\u5b9a\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5b57\u3002 \u601d\u8003\u9898 \uff1a \u5047\u8bbe\u8981\u6c42\u53ea\u80fd\u4f7f\u7528 $O(n)$ \u7684\u65f6\u95f4\u548c\u989d\u5916 $O(1)$ \u7684\u7a7a\u95f4\uff0c\u8be5\u600e\u4e48\u505a\u5462\uff1f \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,1,1,3] \u8f93\u51fa\uff1a1 \u601d\u8def1\uff1a\u9996\u5148\u6392\u5e8f\uff0c\u4e2d\u95f4\u90a3\u4e2a\u6570\uff0c\u4e00\u5b9a\u662f\u8981\u6c42\u7684\u3002 \u601d\u8def2\uff1a\u5c06\u9996\u6b21\u51fa\u73b0\u7684\u6570 count + 1 \uff0c\u4e0e\u4e4b\u540e\u7684\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u76f8\u7b49\u5219 +1 \uff0c\u5426\u5219 -1 \uff0c\u6700\u540e\u8fdb\u884c\u6821\u9a8c\u662f\u5426\u8d85\u8fc7\u957f\u5ea6\u7684\u4e00\u534a\u3002\u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u51fa\u73b0\u7684\u6b21\u6570\u6bd4\u5176\u4ed6\u6240\u6709\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u7684\u548c\u8fd8\u8981\u591a\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5728\u904d\u5386\u6570\u7ec4\u7684\u65f6\u5019\u4fdd\u5b58\u4e24\u4e2a\u503c\uff1a\u4e00\u4e2a\u662f\u6570\u7ec4\u7684\u4e00\u4e2a\u6570\u5b57\uff0c\u4e00\u4e2a\u662f\u6b21\u6570\u3002\u5f53\u6211\u4eec\u904d\u5386\u5230\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u65f6\u5019\uff0c\u5982\u679c\u4e0b\u4e00\u4e2a\u6570\u5b57\u548c\u6211\u4eec\u4e4b\u524d\u4fdd\u5b58\u7684\u6570\u5b57\u76f8\u540c\uff0c\u5219\u6b21\u6570\u52a0 $1$\uff1b\u5982\u679c\u4e0b\u4e00\u4e2a\u6570\u5b57\u548c\u6211\u4eec\u4e4b\u524d\u4fdd\u5b58\u7684\u6570\u5b57\u4e0d\u540c\uff0c\u5219\u6b21\u6570\u51cf $1$ \u3002\u5982\u679c\u6b21\u6570\u4e3a\u96f6\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u5b58\u4e0b\u4e00\u4e2a\u6570\u5b57\uff0c\u5e76\u628a\u6b21\u6570\u8bbe\u4e3a $1$\u3002\u7531\u4e8e\u6211\u4eec\u8981\u627e\u7684\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u6bd4\u5176\u4ed6\u6240\u6709\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u4e4b\u548c\u8fd8\u8981\u591a\uff0c\u90a3\u4e48\u8981\u627e\u7684\u6570\u5b57\u80af\u5b9a\u662f\u6700\u540e\u4e00\u6b21\u628a\u6b21\u6570\u8bbe\u4e3a $1$ \u65f6\u5bf9\u5e94\u7684\u6570\u5b57\u3002 Python \u4ee3\u7801\uff1a # -*- coding:utf-8 -*- class Solution: def MoreThanHalfNum_Solution(self, numbers): res = numbers[0] times = 1 for num in numbers[1:]: if times == 0: res = num times = 1 elif res == num: times += 1 else: times -= 1 # \u9a8c\u8bc1 res \u662f\u4e0d\u662f\u8d85\u8fc7\u4e00\u534a times = 0 for num in numbers: if num == res: times += 1 return res if times > len(numbers) // 2 else 0 \u8bf4\u660e\uff1a\u201c\u5047\u8bbe\u6570\u7ec4\u975e\u7a7a\uff0c\u5e76\u4e14\u4e00\u5b9a\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5b57\u201d\u7684\u65f6\u5019\uff0c\u5c31\u4e0d\u7528\u505a\u6700\u540e\u4e00\u6b65\u7684\u5224\u65ad\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def moreThanHalfNum_Solution(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" l = len(nums) if l == 1: return nums[0] num = nums[0] times = 1 for i in range(1, l): # \u6ce8\u610f\u5206\u7c7b\u8ba8\u8bba\u7684\u987a\u5e8f\uff0c\u5148\u770b\u6b21\u6570\u662f\u4e0d\u662f 0 # \u4ee5\u4e0b\u7684 3 \u79cd\u60c5\u51b5\u662f\u4e92\u65a5\u7684 if times == 0: num = nums[i] times += 1 elif num == nums[i]: times += 1 else: times -= 1 return num C++ \u4ee3\u7801\uff1a Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { // // {1,2,3,2,2,2,5,4,2} 9 4 // {1,2,3,2,2,2,5,4} 8 4 public int MoreThanHalfNum_Solution(int[] array) { int len = array.length; if (len == 0) { return 0; } Arrays.sort(array); int target = array[len / 2]; int count = 0; for (int i = 0; i < len; i++) { if (array[i] == target) { count++; } } if (count > len / 2) { return target; } return 0; } public static void main(String[] args) { int[] nums = new int[]{1, 2, 3, 2, 2, 2, 5, 4, 2}; // [1,2,3,2,4,2,5,2,3] Solution solution = new Solution(); int moreThanHalfNum_solution = solution.MoreThanHalfNum_Solution(nums); System.out.println(moreThanHalfNum_solution); } } \u7b2c 40 \u9898\uff1a\u6700\u5c0f\u7684 K \u4e2a\u6570 \u4f20\u9001\u95e8\uff1a \u6700\u5c0f\u7684k\u4e2a\u6570 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165 $n$ \u4e2a\u6574\u6570\uff0c\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684 $k$ \u4e2a\u6570\u3002 \u6ce8\u610f\uff1a \u6570\u636e\u4fdd\u8bc1 k \u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u8f93\u5165\u6570\u7ec4\u7684\u957f\u5ea6; \u8f93\u51fa\u6570\u7ec4\u5185\u5143\u7d20\u8bf7\u6309\u4ece\u5c0f\u5230\u5927\u987a\u5e8f\u6392\u5e8f; \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,3,4,5,6,7,8] , k=4 \u8f93\u51fa\uff1a [1,2,3,4] \u5206\u6790\uff1a\u6700\u7b80\u5355\u7684\u601d\u8def\u5c31\u662f\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u53d6\u51fa\u524d $k$ \u4e2a\u5143\u7d20\uff0c\u4e0d\u8fc7\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log n)$\uff0c$n$ \u4e3a\u6570\u7ec4\u7684\u957f\u5ea6\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getLeastNumbers_Solution(self, input, k): size = len(input) if size == 0: return [] if k == size: return sorted(input) return sorted(input)[:k] \u5176\u5b9e\u53ef\u4ee5\u7528 $O(n\\log k)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u627e\u5230\u6700\u5c0f\u7684 $k$ \u4e2a\u5143\u7d20\u3002\u6709\u4e24\u79cd\u601d\u8def\uff1a 1\u3001\u501f\u52a9\u5feb\u901f\u6392\u5e8f\u628a\u6570\u7ec4\u4e00\u5206\u4e3a\u4e8c\u7684 partition \u64cd\u4f5c\uff1b 2\u3001\u501f\u52a9\u6700\u5927\u5806\uff08\u9700\u8981\u628a\u6570\u7ec4\u505a\u4e00\u4e2a\u8f6c\u6362\uff0c\u90fd\u53d8\u6210\u76f8\u53cd\u6570\uff0c\u6700\u5c0f\u7684 $k$ \u4e2a\u6570\uff0c\u5c31\u662f\u6700\u5927\u5806\u91cc\u6700\u5927\u7684 $k$ \u4e2a\u6570\uff09\u3002 Python \u4ee3\u78011\uff1apartition\uff0c\u6ce8\u610f\uff0c\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5927\u4e8e\u7b49\u4e8e pivot \u7684\u5143\u7d20\u90fd\u88ab\u5206\u5728\u4e86\u53f3\u8fb9 class Solution(object): def getLeastNumbers_Solution(self, input, k): \"\"\" :type input: list[int] :type k: int :rtype: list[int] \"\"\" size = len(input) if size == 0: return [] if k == size: return sorted(input) l = 0 r = size - 1 while l <= r: p = self.__partition(input, l, r) if p == k - 1: return sorted(input[:p + 1]) elif p > k - 1: # \u6b64\u65f6 k-1 p r = p - 1 else: # \u6b64\u65f6 p k-1 l = p + 1 def __partition(self, input, left, right): # \u53ea\u6709\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u5c31\u6ca1\u6709\u5fc5\u8981 partition \u4e86 # \u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u6570\u7684\u7d22\u5f15 if left == right: return left pivot = input[left] j = left # [left + 1, j] \u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u5143\u7d20\u90fd\u4e25\u683c\u5c0f\u4e8e pivot for i in range(left + 1, right + 1): if input[i] < pivot: j += 1 input[i], input[j] = input[j], input[i] input[left], input[j] = input[j], input[left] return j if __name__ == '__main__': input = [9, 14, 1, 16, 19, 13, 12] k = 4 solution = Solution() result = solution.getLeastNumbers_Solution(input, k) print(result) Python \u4ee3\u78012\uff1a\u6700\u5927\u5806 class Solution(object): def getLeastNumbers_Solution(self, input, k): \"\"\" :type input: list[int] :type k: int :rtype: list[int] \"\"\" size = len(input) if size == 0: return [] if k == size: return sorted(input) import heapq l = [] for num in input[:k]: heapq.heappush(l, -num) for num in input[k:]: top = l[0] if top < -num: heapq.heappushpop(l, -num) return sorted([-num for num in l]) \u5f53\u7136\uff0cPython \u4e2d\u7684 heapq \u76f4\u63a5\u5c31\u6709\u83b7\u53d6\u6700\u5c0f $k$ \u4e2a\u5143\u7d20\u7684\u65b9\u6cd5\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getLeastNumbers_Solution(self, input, k): \"\"\" :type input: list[int] :type k: int :rtype: list[int] \"\"\" size = len(input) if size == 0: return [] if k == size: return sorted(input) import heapq heapq.heapify(input) return sorted(heapq.nsmallest(k, input)) Python \u4ee3\u7801\uff1a\u4e24\u8def partition \u7684\u5199\u6cd5\uff1a class Solution(object): def getLeastNumbers_Solution(self, input, k): \"\"\" :type input: list[int] :type k: int :rtype: list[int] \"\"\" size = len(input) if size == 0: return [] if k == size: return sorted(input) l = 0 r = size - 1 while l <= r: p = self.__partition(input, l, r) if p == k - 1: return sorted(input[:p + 1]) elif p > k - 1: # \u6b64\u65f6 k-1 p r = p - 1 else: # \u6b64\u65f6 p k-1 l = p + 1 def __partition(self, input, left, right): # \u53ea\u6709\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u5c31\u6ca1\u6709\u5fc5\u8981 partition \u4e86 # \u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u6570\u7684\u7d22\u5f15 if left == right: return left pivot = input[left] l = left + 1 r = right while True: while l <= right and input[l] <= pivot: l += 1 while r > left and input[r] >= pivot: r -= 1 if l > r: break input[l], input[r] = input[r], input[l] l += 1 r -= 1 input[left], input[r] = input[r], input[left] return r C++ \u4ee3\u7801\uff1a \uff08\u672c\u8282\u5b8c\uff09","title":"\u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09 \u9898\u89e3\uff08Python \u8bed\u8a00\u5b9e\u73b0\uff09\u7b2c 31-40 \u9898"},{"location":"31-40/#offer-2-python-31-40","text":"","title":"\u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09 \u9898\u89e3\uff08Python \u8bed\u8a00\u5b9e\u73b0\uff09\u7b2c 31-40 \u9898"},{"location":"31-40/#35","text":"\u4f20\u9001\u95e8\uff1a \u590d\u6742\u94fe\u8868\u7684\u590d\u523b \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u590d\u5236\u4e00\u4e2a\u590d\u6742\u94fe\u8868\u3002 \u5728\u590d\u6742\u94fe\u8868\u4e2d\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u9664\u4e86\u6709\u4e00\u4e2a\u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u989d\u5916\u7684\u6307\u9488\u6307\u5411\u94fe\u8868\u4e2d\u7684\u4efb\u610f\u7ed3\u70b9\u6216\u8005 null \u3002 \u5206\u6790\uff1a\u4e00\u4e9b\u7ec6\u8282\u8981\u8003\u8651\u5230\uff0c\u7279\u522b\u662f\u7a7a\u7ed3\u70b9\u7684\u5224\u65ad\uff0c\u4ee5\u4e0b\u4e24\u79cd\u65b9\u6cd5\u90fd\u8981\u904d\u5386\u94fe\u8868\u4e00\u904d\u4ee5\u4e0a\uff0c\u5373\u904d\u5386\u94fe\u8868\u4e00\u904d\u662f\u4e0d\u591f\u7684\u3002 \u601d\u8def1\uff1a\u6709\u70b9\u5de7\u5999\uff0c\u7a7f\u9488\u5f15\u7ebf\uff0c\u65b0\u65e7\u65ad\u5f00\u3002 Python \u4ee3\u7801\uff1a class ListNode(object): def __init__(self, x): self.val = x self.next = None self.random = None class Solution(object): def copyRandomList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None: return None # \u7b2c 1 \u6b65\uff1a\u6839\u636e next \u6307\u9488\u590d\u5236\u51fa\u4e00\u4e2a\u65b0\u65e7\u5408\u4e00\u7684\u94fe\u8868 cur_node = head while cur_node: # \u5148\u6682\u5b58 cur_node \u7684 next_node \u4e0b\u4e00\u6b21\u904d\u5386\u8981\u7528 next_node = cur_node.next new_node = ListNode(cur_node.val) cur_node.next = new_node new_node.next = next_node # \u6307\u9488\u904d\u5386\u5230\u4e0b\u4e00\u4e2a\u7ed3\u70b9 cur_node = next_node # \u7b2c 2 \u6b65\uff1a\u6839\u636e\u65e7\u7ed3\u70b9 random \u6307\u9488\uff0c\u7ed9\u65b0\u7ed3\u70b9\u7684 random \u6307\u9488\u505a\u51fa\u6b63\u786e\u7684\u6307\u5411 cur_node = head while cur_node: new_node = cur_node.next # \u540c\u6837\u8981\u5148\u6682\u5b58 cur_node.next_node next_node = new_node.next # \u8981\u8bb0\u5f97\u505a\u975e\u7a7a\u5224\u65ad\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\u4e86 random \u6709\u53ef\u80fd\u4e3a\u7a7a new_node.random = cur_node.random.next if cur_node.random else None cur_node = next_node # \u7b2c 3 \u6b65\uff1a\u65e7\u7ed3\u70b9\u548c\u65b0\u7ed3\u70b9\u5206\u79bb\uff08\u62c6\u5206\u94fe\u8868\uff09 cur_node = head res = cur_node.next while cur_node: new_node = cur_node.next # \u540c\u6837\u8981\u5148\u6682\u5b58\u4e0b\u4e00\u4e2a\u7ed3\u70b9 next_node = new_node.next # \u6062\u590d\u539f\u59cb\u7ed3\u70b9 cur_node.next = new_node.next # \u6062\u590d\u62f7\u8d1d\u7ed3\u70b9 # \u8fd9\u91cc\u4e5f\u8981\u540c\u6837\u6ce8\u610f\u7a7a\u6307\u9488\u7684\u95ee\u9898\uff0c\u514b\u9686\u7ed3\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u662f null new_node.next = next_node.next if next_node else None cur_node = next_node return res Java \u4ee3\u7801\uff1a class RandomListNode { int label; RandomListNode next = null; RandomListNode random = null; RandomListNode(int label) { this.label = label; } } public class Solution { public RandomListNode Clone(RandomListNode pHead) { // \u6781\u7aef\u60c5\u51b5\uff0c\u4e00\u5b9a\u8981\u5199\u5148\u51fa\u6765 if (pHead == null) { return null; } RandomListNode curNode = pHead; // \u7b2c 1 \u6b65\uff1a\u6839\u636e next \u6307\u9488\u590d\u5236\u51fa\u4e00\u4e2a\u65b0\u65e7\u5408\u4e00\u7684\u94fe\u8868 // \u6b64\u65f6\uff0c\u5947\u6570\u7d22\u5f15\uff08\u4ece 1 \u5f00\u59cb\u8ba1\u7b97\uff09\u7684\u7ed3\u70b9\u662f\u65e7\u7684\u7ed3\u70b9\uff0c\u5076\u6570\u7d22\u5f15\u7684\u7ed3\u70b9\u662f\u65b0\u7684\u7ed3\u70b9 RandomListNode nextNode; RandomListNode copyNode; while (curNode != null) { nextNode = curNode.next; copyNode = new RandomListNode(curNode.label); curNode.next = copyNode; copyNode.next = nextNode; curNode = nextNode; } // \u7b2c 2 \u6b65\uff1a\u6839\u636e\u65e7\u7ed3\u70b9 random \u6307\u9488\uff0c\u7ed9\u65b0\u7ed3\u70b9\u7684 random \u6307\u9488\u505a\u51fa\u6b63\u786e\u7684\u6307\u5411 // \u6307\u9488\u590d\u4f4d\u5230\u8d77\u59cb\u7ed3\u70b9 curNode = pHead; while (curNode != null) { copyNode = curNode.next; nextNode = copyNode.next; // \u7279\u522b\u6ce8\u610f // \u7279\u522b\u6ce8\u610f // \u7279\u522b\u6ce8\u610f\uff1a\u6709\u7684\u7ed3\u70b9\u5f88\u53ef\u80fd random \u7684\u6307\u5411\u4e3a\u7a7a\uff08\u9898\u76ee\u4e2d\u660e\u786e\u8bf4\u660e\uff09 // \u6240\u4ee5\uff1a\u53ea\u8981\u9047\u5230 next \u5f15\u7528\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u5224\u65ad\u662f\u5426\u4e3a\u7a7a copyNode.random = curNode.random == null ? null : curNode.random.next; curNode = nextNode; } // \u7b2c 3 \u6b65\uff1a\u65e7\u7ed3\u70b9\u548c\u65b0\u7ed3\u70b9\u5206\u79bb\uff08\u62c6\u5206\u94fe\u8868\uff09 curNode = pHead; RandomListNode res = pHead.next; while (curNode != null) { copyNode = curNode.next; nextNode = copyNode.next; // \u6062\u590d\u539f\u59cb\u7ed3\u70b9 curNode.next = copyNode.next; // \u6062\u590d\u62f7\u8d1d\u7ed3\u70b9 // \u8fd9\u91cc\u4e5f\u8981\u540c\u6837\u6ce8\u610f\u7a7a\u6307\u9488\u7684\u95ee\u9898\uff0c\u514b\u9686\u7ed3\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u662f null copyNode.next = copyNode.next == null ? null : copyNode.next.next; curNode = nextNode; } return res; } } C++ \u5199\u6cd5\uff1a Java \u7248\u672c\u91cc\u9762\u8fd8\u6709\u4e00\u4e2a\u7f51\u53cb\u7684\u5199\u6cd5\u3002 \u601d\u8def2\uff1a\u4f7f\u7528\u54c8\u5e0c\u8868\uff0c\u590d\u5236\u51fa\u968f\u673a\u8bbf\u95ee\u7684\u6307\u9488\u3002 Python \u4ee3\u7801\uff1a class ListNode(object): def __init__(self, x): self.val = x self.next = None self.random = None class Solution(object): def copyRandomList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None: return None map = dict() dummy_node = ListNode(-1) # p \u6307\u9488\u7528\u4e8e\u65b0\u94fe\u8868\u7684 next \u6307\u9488\u8d4b\u503c p = dummy_node # \u904d\u5386\u4e00\u6b21\u94fe\u8868\uff0c\u505a\u4e24\u4ef6\u4e8b # 1\u3001\u590d\u5236\u7ed3\u70b9 # 2\u3001\u53ea\u7ba1 next \u6307\u9488 cur_node = head while cur_node: new_node = ListNode(cur_node.val) # \u628a\u65b0\u65e7\u7ed3\u70b9\u7684\u5bf9\u5e94\u5173\u7cfb\u653e\u5728\u4e00\u4e2a map \u91cc map[cur_node] = new_node cur_node = cur_node.next p.next = new_node p = new_node # \u63a5\u4e0b\u6765\u505a\u968f\u673a\u6307\u9488\u7684\u590d\u5236 for old_node, new_node in map.items(): # \u8981\u8bb0\u5f97\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\uff0c\u5426\u5219 None \u4e0d\u80fd\u4f5c\u4e3a map key if old_node.random: new_node.random = map[old_node.random] return dummy_node.next Java \u4ee3\u7801\uff1a public class Solution3 { public RandomListNode Clone(RandomListNode pHead) { Map<RandomListNode, RandomListNode> map = new HashMap<>(); RandomListNode curNode = pHead; // \u4f53\u4f1a\u8fd9\u91cc\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u7684\u5fc5\u8981\u6027 RandomListNode dummyNode = new RandomListNode(-1); RandomListNode p = dummyNode; // \u5b8c\u6210\u590d\u5236 next \u7ed3\u70b9\uff0c\u5e76\u4e14\u5c06\u5bf9\u5e94\u5173\u7cfb\u653e\u5165 Hash \u8868 while (curNode != null) { RandomListNode newNode = new RandomListNode(curNode.label); map.put(curNode, newNode); curNode = curNode.next; p.next = newNode; p = newNode; } // \u5b8c\u6210\u590d\u5236\u94fe\u8868\u7684 random \u6307\u9488\u7684\u8d4b\u503c Set<Map.Entry<RandomListNode, RandomListNode>> entrySet = map.entrySet(); for (Map.Entry<RandomListNode, RandomListNode> entry : entrySet) { entry.getValue().random = map.get(entry.getKey().random); } return dummyNode.next; } } Java \u4ee3\u7801\uff1a\u7279\u522b\u6ce8\u610f\uff1a\u5728\u590d\u5236\u201c\u6307\u9488\u201d\u7684\u65f6\u5019\uff0c\u5bf9\u7a7a\u5bf9\u8c61\u7684\u5224\u5b9a\uff0c\u753b\u56fe\u662f\u5341\u5206\u5173\u952e\u7684\u3002 class RandomListNode { int label; RandomListNode next = null; RandomListNode random = null; RandomListNode(int label) { this.label = label; } } public class Solution { public RandomListNode Clone(RandomListNode pHead) { // \u6781\u7aef\u60c5\u51b5\uff0c\u4e00\u5b9a\u8981\u5199\u5148\u51fa\u6765 if (pHead == null) { return null; } RandomListNode curNode = pHead; // \u7b2c 1 \u6b65\uff1a\u6839\u636e next \u6307\u9488\u590d\u5236\u51fa\u4e00\u4e2a\u65b0\u65e7\u5408\u4e00\u7684\u94fe\u8868 // \u6b64\u65f6\uff0c\u5947\u6570\u7d22\u5f15\uff08\u4ece 1 \u5f00\u59cb\u8ba1\u7b97\uff09\u7684\u7ed3\u70b9\u662f\u65e7\u7684\u7ed3\u70b9\uff0c\u5076\u6570\u7d22\u5f15\u7684\u7ed3\u70b9\u662f\u65b0\u7684\u7ed3\u70b9 RandomListNode nextNode; RandomListNode copyNode; while (curNode != null) { nextNode = curNode.next; copyNode = new RandomListNode(curNode.label); curNode.next = copyNode; copyNode.next = nextNode; curNode = nextNode; } // \u7b2c 2 \u6b65\uff1a\u6839\u636e\u65e7\u7ed3\u70b9 random \u6307\u9488\uff0c\u7ed9\u65b0\u7ed3\u70b9\u7684 random \u6307\u9488\u505a\u51fa\u6b63\u786e\u7684\u6307\u5411 // \u6307\u9488\u590d\u4f4d\u5230\u8d77\u59cb\u7ed3\u70b9 curNode = pHead; while (curNode != null) { copyNode = curNode.next; nextNode = copyNode.next; // \u7279\u522b\u6ce8\u610f // \u7279\u522b\u6ce8\u610f // \u7279\u522b\u6ce8\u610f\uff1a\u6709\u7684\u7ed3\u70b9\u5f88\u53ef\u80fd random \u7684\u6307\u5411\u4e3a\u7a7a\uff08\u9898\u76ee\u4e2d\u660e\u786e\u8bf4\u660e\uff09 // \u6240\u4ee5\uff1a\u53ea\u8981\u9047\u5230 next \u5f15\u7528\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u5224\u65ad\u662f\u5426\u4e3a\u7a7a copyNode.random = curNode.random == null ? null : curNode.random.next; curNode = nextNode; } // \u7b2c 3 \u6b65\uff1a\u65e7\u7ed3\u70b9\u548c\u65b0\u7ed3\u70b9\u5206\u79bb\uff08\u62c6\u5206\u94fe\u8868\uff09 curNode = pHead; RandomListNode res = pHead.next; while (curNode != null) { copyNode = curNode.next; nextNode = copyNode.next; // \u6062\u590d\u539f\u59cb\u7ed3\u70b9 curNode.next = copyNode.next; // \u6062\u590d\u62f7\u8d1d\u7ed3\u70b9 // \u8fd9\u91cc\u4e5f\u8981\u540c\u6837\u6ce8\u610f\u7a7a\u6307\u9488\u7684\u95ee\u9898\uff0c\u514b\u9686\u7ed3\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u662f null copyNode.next = copyNode.next == null ? null : copyNode.next.next; curNode = nextNode; } return res; } } Java \u4ee3\u7801\uff1a import java.util.HashMap; import java.util.Map; import java.util.Set; /** * \u4f7f\u7528 Hash \u8868\u7684\u65b9\u5f0f * * @author liwei */ public class Solution2 { public RandomListNode Clone(RandomListNode pHead) { Map<RandomListNode, RandomListNode> map = new HashMap<>(); RandomListNode curNode = pHead; // \u4f53\u4f1a\u8fd9\u91cc\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u7684\u5fc5\u8981\u6027 RandomListNode dummyNode = new RandomListNode(-1); RandomListNode p = dummyNode; // \u5b8c\u6210\u590d\u5236 next \u7ed3\u70b9\uff0c\u5e76\u4e14\u5c06\u5bf9\u5e94\u5173\u7cfb\u653e\u5165 Hash \u8868 while (curNode != null) { RandomListNode newNode = new RandomListNode(curNode.label); map.put(curNode, newNode); curNode = curNode.next; p.next = newNode; p = newNode; } // \u5b8c\u6210\u590d\u5236\u94fe\u8868\u7684 random \u6307\u9488\u7684\u8d4b\u503c Set<Map.Entry<RandomListNode, RandomListNode>> entrySet = map.entrySet(); for (Map.Entry<RandomListNode, RandomListNode> entry : entrySet) { entry.getValue().random = map.get(entry.getKey().random); } return dummyNode.next; } }","title":"\u7b2c 35 \u9898\uff1a\u590d\u6742\u94fe\u8868\u7684\u590d\u5236"},{"location":"31-40/#36","text":"\u4f20\u9001\u95e8\uff1a \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8be5\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\u3002 \u8981\u6c42\u4e0d\u80fd\u521b\u5efa\u4efb\u4f55\u65b0\u7684\u7ed3\u70b9\uff0c\u53ea\u80fd\u8c03\u6574\u6811\u4e2d\u7ed3\u70b9\u6307\u9488\u7684\u6307\u5411\u3002 \u6ce8\u610f \uff1a \u9700\u8981\u8fd4\u56de\u53cc\u5411\u94fe\u8868\u6700\u5de6\u4fa7\u7684\u8282\u70b9\u3002 \u4f8b\u5982\uff0c\u8f93\u5165\u4e0b\u56fe\u4e2d\u5de6\u8fb9\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5219\u8f93\u51fa\u53f3\u8fb9\u7684\u6392\u5e8f\u53cc\u5411\u94fe\u8868\u3002 \u601d\u8def\uff1a \u5206\u6790\uff1a\u53c2\u8003\u89e3\u7b54\u6709\u4e00\u5b9a\u4ef7\u503c\uff0c\u8981\u597d\u597d\u7814\u7a76\u4e00\u4e0b\u3002\u753b\u56fe\u5c31\u6e05\u695a\u89e3\u6cd5\u4e86\u3002 Python \u4ee3\u7801\uff1a class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def convert(self, root): \"\"\" :type root: TreeNode :rtype: TreeNode \"\"\" if root is None: return None head, _ = self.__dfs(root) return head def __dfs(self, root): \"\"\" \u8fd4\u56de\u53cc\u5411\u94fe\u8868\u7684\u4e24\u7aef \"\"\" # \u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u662f\u53f6\u5b50\u7ed3\u70b9 if root.left is None and root.right is None: return (root, root) # \u5982\u679c\u6709\u5de6\u5b69\u5b50\uff0c\u8fd8\u6709\u53f3\u8fb9\u5b69\u5b50 if root.left and root.right: ll, lr = self.__dfs(root.left) rl, rr = self.__dfs(root.right) # \u4e0b\u9762\u7a7f\u9488\u5f15\u7ebf lr.right = root root.left = lr root.right = rl rl.left = root return (ll, rr) # \u8d70\u5230\u8fd9\u91cc\uff0c\u5c31\u662f\u4e8c\u8005\u4e4b\u4e00\u4e3a\u7a7a if root.left: ll, lr = self.__dfs(root.left) lr.right = root root.left = lr return (ll, root) if root.right: rl, rr = self.__dfs(root.right) root.right = rl rl.left = root return (root, rr) C++ \u4ee3\u7801\uff1a\u8fd4\u56de\u4e00\u4e2a pair Java \u4ee3\u7801\uff1a class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { private TreeNode linkedListTail; private TreeNode res; public TreeNode Convert(TreeNode pRootOfTree) { convert(pRootOfTree); return res; } /** * \u4e2d\u5e8f\u904d\u5386 * * @param root */ private void convert(TreeNode root) { if (root == null) { return; } convert(root.left); // \u4e2d\u5e8f\u904d\u5386\u771f\u6b63\u505a\u4e8b\u60c5\u7684\u5730\u65b9 if (linkedListTail == null) { // \u5bf9\u5e94\u521a\u5f00\u59cb\u7684\u65f6\u5019 linkedListTail = root; // \u5728\u6700\u5de6\u8fb9\u7684\u5730\u65b9\u8bb0\u5f55\u9700\u8981\u8fd4\u56de\u7684\u53cc\u5411\u94fe\u8868\u7684\u6839\u7ed3\u70b9 res = root; } else { linkedListTail.right = root; root.left = linkedListTail; linkedListTail = root; } convert(root.right); } } Python \u4ee3\u7801\uff1a class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def __init__(self): self.linked_list_tail = None self.res = None def convert(self, root): \"\"\" :type root: TreeNode :rtype: TreeNode \"\"\" self.__dfs(root) return self.res # \u4e2d\u5e8f\u904d\u5386 def __dfs(self, root): if root is None: return self.__dfs(root.left) if self.linked_list_tail is None: self.linked_list_tail = root self.res = root else: self.linked_list_tail.right = root root.left = self.linked_list_tail self.linked_list_tail = root self.__dfs(root.right) Java \u4ee3\u7801\uff1a\u5206\u6cbb\u6cd5 public class Solution2 { public TreeNode convert(TreeNode root) { if (root == null) { return root; } TreeNode left = rightMost(root.left); TreeNode right = leftMost(root.right); convert(root.left); convert(root.right); if (left != null) { left.right = root; } root.left = left; if (right != null) { right.left = root; } root.right = right; // \u6700\u540e\u8fd4\u56de\u6700\u5de6\u8fb9\u7684\u7ed3\u70b9 while (root.left != null) { root = root.left; } return root; } TreeNode leftMost(TreeNode root) { if (root == null) { return null; } while (root.left != null) { root = root.left; } return root; } TreeNode rightMost(TreeNode root) { if (root == null) { return null; } while (root.right != null) { root = root.right; } return root; } } C++ \u4ee3\u7801\uff1a class Solution { public: TreeNode* convert(TreeNode* root) { if (!root) return root; stack<TreeNode*> st; while (root){ st.push(root); root = root->left; } TreeNode* ans = st.top(); TreeNode* last = NULL; while (!st.empty()){ TreeNode* tmp = st.top(); st.pop(); if (!last) last = tmp; else { last->right = tmp; tmp->left = last; last = tmp; } tmp = tmp->right; while (tmp){ st.push(tmp); tmp = tmp->left; } } return ans; } }; Java \u4ee3\u7801\uff1a /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { public TreeNode convert(TreeNode root) { if (root == null) return null; TreeNode dummy = new TreeNode(-1); TreeNode pre = dummy; Stack<TreeNode> stack = new Stack<>(); while (root != null || stack.size() != 0){ while (root != null){ stack.push(root); root = root.left; } if (stack.size() != 0){ TreeNode node = stack.pop(); pre.right = node; node.left = pre; pre = pre.right; root = node.right; } } dummy.right.left = null; dummy = dummy.right; return dummy; } } Java \u4ee3\u7801\uff1a class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { private TreeNode linkedListTail; private TreeNode res; public TreeNode Convert(TreeNode pRootOfTree) { convert(pRootOfTree); return res; } /** * \u4e2d\u5e8f\u904d\u5386 * * @param root */ private void convert(TreeNode root) { if (root == null) { return; } convert(root.left); // \u4e2d\u5e8f\u904d\u5386\u771f\u6b63\u505a\u4e8b\u60c5\u7684\u5730\u65b9 if (linkedListTail == null) { linkedListTail = root; // \u5728\u6700\u5de6\u8fb9\u7684\u5730\u65b9\u8bb0\u5f55\u9700\u8981\u8fd4\u56de\u7684\u53cc\u5411\u94fe\u8868\u7684\u6839\u7ed3\u70b9 res = root; } else { linkedListTail.right = root; root.left = linkedListTail; linkedListTail = root; } convert(root.right); } } \u53c2\u8003\u8d44\u6599\uff1ahttps://www.nowcoder.com/questionTerminal/947f6eb80d944a84850b0538bf0ec3a5","title":"\u7b2c 36 \u9898\uff1a\u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868\uff08\u5178\u578b\u9012\u5f52\u95ee\u9898\uff09"},{"location":"31-40/#37","text":"\u4f20\u9001\u95e8\uff1a \u5e8f\u5217\u5316\u4e8c\u53c9\u6811 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u7528\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u3002 \u60a8\u9700\u8981\u786e\u4fdd\u4e8c\u53c9\u6811\u53ef\u4ee5\u5e8f\u5217\u5316\u4e3a\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u6b64\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u539f\u59cb\u6811\u7ed3\u6784\u3002 \u6837\u4f8b\uff1a \u4f60\u53ef\u4ee5\u5e8f\u5217\u5316\u5982\u4e0b\u7684\u4e8c\u53c9\u6811 8 / \\ 12 2 / \\ 6 4 \u4e3a\uff1a \"[8, 12, 2, null, null, 6, 4, null, null, null, null]\" \u6ce8\u610f : \u4ee5\u4e0a\u7684\u683c\u5f0f\u662f AcWing \u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u7684\u65b9\u5f0f\uff0c\u4f60\u4e0d\u5fc5\u4e00\u5b9a\u6309\u7167\u6b64\u683c\u5f0f\uff0c\u6240\u4ee5\u53ef\u4ee5\u8bbe\u8ba1\u51fa\u4e00\u4e9b\u65b0\u7684\u6784\u9020\u65b9\u5f0f\u3002 \u5206\u6790\uff1a\u603b\u4e4b\u5c31\u662f\u524d\u5e8f\u904d\u5386\u3002\u56e0\u4e3a\u201c\u524d\u5e8f\u904d\u5386\u201d\u6709\u5f88\u597d\u7684\u6027\u8d28\uff1a \u8bf4\u660e\uff1a\u6839\u636e\u4e0a\u9762\u7684\u5e8f\u5217\u5316\u89c4\u5219\uff0c\u4e0a\u56fe\u4e2d\u7684\u4e8c\u53c9\u6811\u88ab\u5e8f\u5217\u5316\u6210\u5b57\u7b26\u4e32 \"1\uff0c2\uff0c4\uff0c$\uff0c$\uff0c$\uff0c3\uff0c5\uff0c$\uff0c$\uff0c6\uff0c$\uff0c$\" \u3002 Python \u4ee3\u7801\uff1a class Solution: # \u524d\u5e8f\u904d\u5386 def serialize(self, root): \"\"\"Encodes a tree to a single string. :type root: TreeNode :rtype: str \"\"\" res = '' if root is None: return '! ' res += str(root.val) res += ' ' res += self.serialize(root.left) res += self.serialize(root.right) return res def deserialize(self, data): \"\"\"Decodes your encoded data to tree. :type data: str :rtype: TreeNode \"\"\" arr = data.split(' ') return self.__helper(arr) def __helper(self, arr): if arr: top = arr.pop(0) if top != '!': root = TreeNode(int(top)) root.left = self.__helper(arr) root.right = self.__helper(arr) return root else: return None Python \u4ee3\u7801\uff1a\u5e8f\u5217\u5316\u65f6\u5019\uff0c\u4e0d\u7528\u9012\u5f52\uff0c\u7528\u6808\u7684\u5199\u6cd5 class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution: # \u524d\u5e8f\u904d\u5386 def serialize(self, root): \"\"\"Encodes a tree to a single string. :type root: TreeNode :rtype: str \"\"\" res = [] if root is None: return '!' stack = [root] while stack: top = stack.pop() if top is None: res.append('!') else: stack.append(top.right) stack.append(top.left) res.append(str(top.val)) return ' '.join(res) def deserialize(self, data): \"\"\"Decodes your encoded data to tree. :type data: str :rtype: TreeNode \"\"\" queue = data.split(' ') return self.__build_tree(queue) def __build_tree(self, queue): if queue: top = queue.pop(0) if top != '!': root = TreeNode(int(top)) root.left = self.__build_tree(queue) root.right = self.__build_tree(queue) return root else: return None # \u5982\u679c queue \u4e3a\u7a7a\uff0c\u5c31\u4ec0\u4e48\u90fd\u4e0d\u505a Java \u4ee3\u7801\uff1a\u5e8f\u5217\u5316\uff1a\u524d\u5e8f\u904d\u5386\u4e8c\u53c9\u6811\u5b58\u5165\u5b57\u7b26\u4e32\u4e2d\uff0c\u53cd\u5e8f\u5217\u5316\uff1a\u6839\u636e\u524d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811 import java.util.LinkedList; class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { /** * \u5e8f\u5217\u5316\u4e00\u68f5\u4e8c\u53c9\u6811\uff08\u5176\u5b9e\u5c31\u662f\u524d\u5e8f\u904d\u5386\uff09 * @param root * @return */ public String serialize(TreeNode root) { if (root == null) { return \"$,\"; } StringBuilder sb = new StringBuilder(root.val + \",\"); sb.append(serialize(root.left)); sb.append(serialize(root.right)); return sb.toString(); } // \u53cd\u5e8f\u5217\u5316\u4e00\u68f5\u4e8c\u53c9\u6811 public TreeNode deserialize(String str) { String[] strArr = str.split(\",\"); LinkedList<String> queue = new LinkedList<>(); for (String s : strArr) { queue.addLast(s); } return preOrder(queue); } // \u4f7f\u7528\u961f\u5217\u5c31\u5b9e\u73b0\u4e86\u8fed\u4ee3\u5668\u7684\u529f\u80fd private TreeNode preOrder(LinkedList<String> queue) { String s = queue.removeFirst(); if (!\"$\".endsWith(s)) { TreeNode newNode = new TreeNode(Integer.parseInt(s)); newNode.left = preOrder(queue); newNode.right = preOrder(queue); // \u7406\u89e3\u5c06\u65b0\u521b\u5efa\u7684\u7ed3\u70b9\u8fd4\u56de\u56de\u53bb\u7684\u5fc5\u8981\u6027 return newNode; } // \u662f \"$\" \u5c31\u8fd4\u56de\u7a7a\u6307\u9488\uff0c\u6ce8\u610f\u8fd9\u91cc\u7684\u9012\u5f52\u65b9\u6cd5\uff0c\u4f1a\u628a\u7a7a\u6307\u9488\u63a5\u5728\u539f\u6765\u7684\u6811\u8282\u70b9\u4e0a return null; } } \u53e6\u4e00\u79cd\u5199\u6cd5\uff1a Java \u4ee3\u7801\uff1a import java.util.LinkedList; // \u524d\u5e8f\u904d\u5386 public class Solution2 { String Serialize(TreeNode root) { StringBuilder stringBuilder = new StringBuilder(); preOrder(root, stringBuilder); return stringBuilder.toString(); } // \u4e0a\u9762\u51fd\u6570\u7684\u8f85\u52a9\u51fd\u6570 private void preOrder(TreeNode node, StringBuilder stringBuilder) { if (node == null) { stringBuilder.append(\"#\"); stringBuilder.append(\",\"); return; } stringBuilder.append(node.val); stringBuilder.append(\",\"); preOrder(node.left, stringBuilder); preOrder(node.right, stringBuilder); } TreeNode Deserialize(String str) { String[] strings = str.split(\",\"); int size = strings.length; System.out.println(size); LinkedList<String> queue = new LinkedList<>(); for (int i = 0; i < size; i++) { queue.addLast(strings[i]); } return inOrderGenerate(queue); } private TreeNode inOrderGenerate(LinkedList<String> queue) { if (queue.isEmpty()) { return null; } String s = queue.removeFirst(); if (!\"#\".equals(s)) { TreeNode root = new TreeNode(Integer.parseInt(s)); root.left = inOrderGenerate(queue); root.right = inOrderGenerate(queue); return root; } return null; } } C++ \u4ee3\u7801\uff1a /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public: // Encodes a tree to a single string. string serialize(TreeNode* root) { string res; dfs_s(root, res); return res; } void dfs_s(TreeNode *root, string &res) { if (!root) { res += \"null \"; return; } res += to_string(root->val) + ' '; dfs_s(root->left, res); dfs_s(root->right, res); } // Decodes your encoded data to tree. TreeNode* deserialize(string data) { int u = 0; return dfs_d(data, u); } TreeNode* dfs_d(string &data, int &u) { if (u == data.size()) return NULL; int k = u; while (data[k] != ' ') k ++ ; if (data[u] == 'n') { u = k + 1; return NULL; } int val = 0; for (int i = u; i < k; i ++ ) val = val * 10 + data[i] - '0'; u = k + 1; auto root = new TreeNode(val); root->left = dfs_d(data, u); root->right = dfs_d(data, u); return root; } }; \u4f5c\u8005\uff1ayxc \u94fe\u63a5\uff1ahttps://www.acwing.com/activity/content/code/content/20710/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u7b2c 37 \u9898\uff1a\u5e8f\u5217\u5316\u4e8c\u53c9\u6811"},{"location":"31-40/#38","text":"\u4f20\u9001\u95e8\uff1a \u6570\u5b57\u6392\u5217 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u7ec4\u6570\u5b57\uff08\u53ef\u80fd\u5305\u542b\u91cd\u590d\u6570\u5b57\uff09\uff0c\u8f93\u51fa\u5176\u6240\u6709\u7684\u6392\u5217\u65b9\u5f0f\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,3] \u8f93\u51fa\uff1a [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ] \u5206\u6790\uff1a\u516b\u7687\u540e\u95ee\u9898\u6839\u636e\u6392\u5217\u7ec4\u5408\u6765\u6c42\u89e3\uff0c\u5173\u952e\u662f\u5224\u5b9a\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u89e3\u3002\u56de\u6eaf\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n!)$\u3002 \u9898\u76ee\u63cf\u8ff0\uff1a\u8ddf LeetCode 47. Permutations II \u4e00\u6a21\u4e00\u6837\uff0c\u90fd\u662f\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002\u6ce8\u610f\u533a\u5206\u4e0a\u4e00\u9053\u9898 LeetCode 46. Permutations \u3002 Python \u4ee3\u7801\uff1a\u5b66\u4f1a\u4f7f\u7528\u4f4d\u8fd0\u7b97\u5224\u91cd class Solution: def permutation(self, nums): \"\"\" :type nums: List[int] :rtype: List[List[int]] \"\"\" l = len(nums) res = [] if l == 0: return res # \u56e0\u4e3a\u542b\u6709\u91cd\u590d\u6570\u7ec4\uff0c\u6240\u4ee5\u5148\u6392\u5e8f nums.sort() path = [0 for _ in range(l)] self.__dfs(nums, 0, 0, path, 0, res) return res def __dfs(self, nums, index, start, path, state, res): if index == len(nums): res.append(path[:]) return if index == 0 or nums[index] != nums[index - 1]: start = 0 for i in range(start, len(nums)): if (state >> i & 1) == 0: path[i] = nums[index] self.__dfs(nums, index + 1, i + 1, path, state + (1 << i), res) Java \u4ee3\u7801\uff1a import java.util.ArrayList; import java.util.Stack; class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { // \u4f7f\u7528\u641c\u7d22\u7684\u7b56\u7565\u53ef\u4ee5\u5b8c\u6210 public ArrayList<ArrayList<Integer>> FindPath(TreeNode root, int target) { ArrayList<ArrayList<Integer>> res = new ArrayList<>(); Stack<Integer> pre = new Stack<>(); findPath(root, target, pre, res); return res; } private void findPath(TreeNode root, int target, Stack<Integer> pre, ArrayList<ArrayList<Integer>> res) { if (root == null || root.val > target) { return; } // \u6ce8\u610f\uff1a\u9898\u76ee\u4e2d\u95ee\u7684\u662f\u5230\u53f6\u5b50\u7ed3\u70b9 if (root.val == target && root.left == null && root.right == null) { pre.add(root.val); res.add(new ArrayList<>(pre)); pre.pop(); return; } assert root.val < target && root != null; pre.add(root.val); findPath(root.left, target - root.val, pre, res); findPath(root.right, target - root.val, pre, res); pre.pop(); } public static void main(String[] args) { TreeNode node1 = new TreeNode(1); TreeNode node2 = new TreeNode(2); TreeNode node3 = new TreeNode(3); TreeNode node4 = new TreeNode(4); TreeNode node8 = new TreeNode(8); TreeNode node7 = new TreeNode(7); node1.left = node2; node1.right = node3; node2.left = node4; node2.right = node8; node3.left = node7; Solution solution = new Solution(); ArrayList<ArrayList<Integer>> findPath = solution.FindPath(node1, 11); System.out.println(findPath); } }","title":"\u7b2c 38 \u9898\uff1a\u5b57\u7b26\u4e32\u7684\u6392\u5217\uff08\u91cd\u8981\uff0c\u56de\u6eaf\uff09"},{"location":"31-40/#39","text":"\u4f20\u9001\u95e8\uff1a \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u8bf7\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\u3002 \u5047\u8bbe\u6570\u7ec4\u975e\u7a7a\uff0c\u5e76\u4e14\u4e00\u5b9a\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5b57\u3002 \u601d\u8003\u9898 \uff1a \u5047\u8bbe\u8981\u6c42\u53ea\u80fd\u4f7f\u7528 $O(n)$ \u7684\u65f6\u95f4\u548c\u989d\u5916 $O(1)$ \u7684\u7a7a\u95f4\uff0c\u8be5\u600e\u4e48\u505a\u5462\uff1f \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,1,1,3] \u8f93\u51fa\uff1a1 \u601d\u8def1\uff1a\u9996\u5148\u6392\u5e8f\uff0c\u4e2d\u95f4\u90a3\u4e2a\u6570\uff0c\u4e00\u5b9a\u662f\u8981\u6c42\u7684\u3002 \u601d\u8def2\uff1a\u5c06\u9996\u6b21\u51fa\u73b0\u7684\u6570 count + 1 \uff0c\u4e0e\u4e4b\u540e\u7684\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u76f8\u7b49\u5219 +1 \uff0c\u5426\u5219 -1 \uff0c\u6700\u540e\u8fdb\u884c\u6821\u9a8c\u662f\u5426\u8d85\u8fc7\u957f\u5ea6\u7684\u4e00\u534a\u3002\u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u51fa\u73b0\u7684\u6b21\u6570\u6bd4\u5176\u4ed6\u6240\u6709\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u7684\u548c\u8fd8\u8981\u591a\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5728\u904d\u5386\u6570\u7ec4\u7684\u65f6\u5019\u4fdd\u5b58\u4e24\u4e2a\u503c\uff1a\u4e00\u4e2a\u662f\u6570\u7ec4\u7684\u4e00\u4e2a\u6570\u5b57\uff0c\u4e00\u4e2a\u662f\u6b21\u6570\u3002\u5f53\u6211\u4eec\u904d\u5386\u5230\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u65f6\u5019\uff0c\u5982\u679c\u4e0b\u4e00\u4e2a\u6570\u5b57\u548c\u6211\u4eec\u4e4b\u524d\u4fdd\u5b58\u7684\u6570\u5b57\u76f8\u540c\uff0c\u5219\u6b21\u6570\u52a0 $1$\uff1b\u5982\u679c\u4e0b\u4e00\u4e2a\u6570\u5b57\u548c\u6211\u4eec\u4e4b\u524d\u4fdd\u5b58\u7684\u6570\u5b57\u4e0d\u540c\uff0c\u5219\u6b21\u6570\u51cf $1$ \u3002\u5982\u679c\u6b21\u6570\u4e3a\u96f6\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u5b58\u4e0b\u4e00\u4e2a\u6570\u5b57\uff0c\u5e76\u628a\u6b21\u6570\u8bbe\u4e3a $1$\u3002\u7531\u4e8e\u6211\u4eec\u8981\u627e\u7684\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u6bd4\u5176\u4ed6\u6240\u6709\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u4e4b\u548c\u8fd8\u8981\u591a\uff0c\u90a3\u4e48\u8981\u627e\u7684\u6570\u5b57\u80af\u5b9a\u662f\u6700\u540e\u4e00\u6b21\u628a\u6b21\u6570\u8bbe\u4e3a $1$ \u65f6\u5bf9\u5e94\u7684\u6570\u5b57\u3002 Python \u4ee3\u7801\uff1a # -*- coding:utf-8 -*- class Solution: def MoreThanHalfNum_Solution(self, numbers): res = numbers[0] times = 1 for num in numbers[1:]: if times == 0: res = num times = 1 elif res == num: times += 1 else: times -= 1 # \u9a8c\u8bc1 res \u662f\u4e0d\u662f\u8d85\u8fc7\u4e00\u534a times = 0 for num in numbers: if num == res: times += 1 return res if times > len(numbers) // 2 else 0 \u8bf4\u660e\uff1a\u201c\u5047\u8bbe\u6570\u7ec4\u975e\u7a7a\uff0c\u5e76\u4e14\u4e00\u5b9a\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5b57\u201d\u7684\u65f6\u5019\uff0c\u5c31\u4e0d\u7528\u505a\u6700\u540e\u4e00\u6b65\u7684\u5224\u65ad\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def moreThanHalfNum_Solution(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" l = len(nums) if l == 1: return nums[0] num = nums[0] times = 1 for i in range(1, l): # \u6ce8\u610f\u5206\u7c7b\u8ba8\u8bba\u7684\u987a\u5e8f\uff0c\u5148\u770b\u6b21\u6570\u662f\u4e0d\u662f 0 # \u4ee5\u4e0b\u7684 3 \u79cd\u60c5\u51b5\u662f\u4e92\u65a5\u7684 if times == 0: num = nums[i] times += 1 elif num == nums[i]: times += 1 else: times -= 1 return num C++ \u4ee3\u7801\uff1a Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { // // {1,2,3,2,2,2,5,4,2} 9 4 // {1,2,3,2,2,2,5,4} 8 4 public int MoreThanHalfNum_Solution(int[] array) { int len = array.length; if (len == 0) { return 0; } Arrays.sort(array); int target = array[len / 2]; int count = 0; for (int i = 0; i < len; i++) { if (array[i] == target) { count++; } } if (count > len / 2) { return target; } return 0; } public static void main(String[] args) { int[] nums = new int[]{1, 2, 3, 2, 2, 2, 5, 4, 2}; // [1,2,3,2,4,2,5,2,3] Solution solution = new Solution(); int moreThanHalfNum_solution = solution.MoreThanHalfNum_Solution(nums); System.out.println(moreThanHalfNum_solution); } }","title":"\u7b2c 39 \u9898\uff1a\u6570\u7ec4\u4e2d\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57"},{"location":"31-40/#40-k","text":"\u4f20\u9001\u95e8\uff1a \u6700\u5c0f\u7684k\u4e2a\u6570 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165 $n$ \u4e2a\u6574\u6570\uff0c\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684 $k$ \u4e2a\u6570\u3002 \u6ce8\u610f\uff1a \u6570\u636e\u4fdd\u8bc1 k \u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u8f93\u5165\u6570\u7ec4\u7684\u957f\u5ea6; \u8f93\u51fa\u6570\u7ec4\u5185\u5143\u7d20\u8bf7\u6309\u4ece\u5c0f\u5230\u5927\u987a\u5e8f\u6392\u5e8f; \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,3,4,5,6,7,8] , k=4 \u8f93\u51fa\uff1a [1,2,3,4] \u5206\u6790\uff1a\u6700\u7b80\u5355\u7684\u601d\u8def\u5c31\u662f\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u53d6\u51fa\u524d $k$ \u4e2a\u5143\u7d20\uff0c\u4e0d\u8fc7\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log n)$\uff0c$n$ \u4e3a\u6570\u7ec4\u7684\u957f\u5ea6\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getLeastNumbers_Solution(self, input, k): size = len(input) if size == 0: return [] if k == size: return sorted(input) return sorted(input)[:k] \u5176\u5b9e\u53ef\u4ee5\u7528 $O(n\\log k)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u627e\u5230\u6700\u5c0f\u7684 $k$ \u4e2a\u5143\u7d20\u3002\u6709\u4e24\u79cd\u601d\u8def\uff1a 1\u3001\u501f\u52a9\u5feb\u901f\u6392\u5e8f\u628a\u6570\u7ec4\u4e00\u5206\u4e3a\u4e8c\u7684 partition \u64cd\u4f5c\uff1b 2\u3001\u501f\u52a9\u6700\u5927\u5806\uff08\u9700\u8981\u628a\u6570\u7ec4\u505a\u4e00\u4e2a\u8f6c\u6362\uff0c\u90fd\u53d8\u6210\u76f8\u53cd\u6570\uff0c\u6700\u5c0f\u7684 $k$ \u4e2a\u6570\uff0c\u5c31\u662f\u6700\u5927\u5806\u91cc\u6700\u5927\u7684 $k$ \u4e2a\u6570\uff09\u3002 Python \u4ee3\u78011\uff1apartition\uff0c\u6ce8\u610f\uff0c\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5927\u4e8e\u7b49\u4e8e pivot \u7684\u5143\u7d20\u90fd\u88ab\u5206\u5728\u4e86\u53f3\u8fb9 class Solution(object): def getLeastNumbers_Solution(self, input, k): \"\"\" :type input: list[int] :type k: int :rtype: list[int] \"\"\" size = len(input) if size == 0: return [] if k == size: return sorted(input) l = 0 r = size - 1 while l <= r: p = self.__partition(input, l, r) if p == k - 1: return sorted(input[:p + 1]) elif p > k - 1: # \u6b64\u65f6 k-1 p r = p - 1 else: # \u6b64\u65f6 p k-1 l = p + 1 def __partition(self, input, left, right): # \u53ea\u6709\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u5c31\u6ca1\u6709\u5fc5\u8981 partition \u4e86 # \u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u6570\u7684\u7d22\u5f15 if left == right: return left pivot = input[left] j = left # [left + 1, j] \u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u5143\u7d20\u90fd\u4e25\u683c\u5c0f\u4e8e pivot for i in range(left + 1, right + 1): if input[i] < pivot: j += 1 input[i], input[j] = input[j], input[i] input[left], input[j] = input[j], input[left] return j if __name__ == '__main__': input = [9, 14, 1, 16, 19, 13, 12] k = 4 solution = Solution() result = solution.getLeastNumbers_Solution(input, k) print(result) Python \u4ee3\u78012\uff1a\u6700\u5927\u5806 class Solution(object): def getLeastNumbers_Solution(self, input, k): \"\"\" :type input: list[int] :type k: int :rtype: list[int] \"\"\" size = len(input) if size == 0: return [] if k == size: return sorted(input) import heapq l = [] for num in input[:k]: heapq.heappush(l, -num) for num in input[k:]: top = l[0] if top < -num: heapq.heappushpop(l, -num) return sorted([-num for num in l]) \u5f53\u7136\uff0cPython \u4e2d\u7684 heapq \u76f4\u63a5\u5c31\u6709\u83b7\u53d6\u6700\u5c0f $k$ \u4e2a\u5143\u7d20\u7684\u65b9\u6cd5\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getLeastNumbers_Solution(self, input, k): \"\"\" :type input: list[int] :type k: int :rtype: list[int] \"\"\" size = len(input) if size == 0: return [] if k == size: return sorted(input) import heapq heapq.heapify(input) return sorted(heapq.nsmallest(k, input)) Python \u4ee3\u7801\uff1a\u4e24\u8def partition \u7684\u5199\u6cd5\uff1a class Solution(object): def getLeastNumbers_Solution(self, input, k): \"\"\" :type input: list[int] :type k: int :rtype: list[int] \"\"\" size = len(input) if size == 0: return [] if k == size: return sorted(input) l = 0 r = size - 1 while l <= r: p = self.__partition(input, l, r) if p == k - 1: return sorted(input[:p + 1]) elif p > k - 1: # \u6b64\u65f6 k-1 p r = p - 1 else: # \u6b64\u65f6 p k-1 l = p + 1 def __partition(self, input, left, right): # \u53ea\u6709\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u5c31\u6ca1\u6709\u5fc5\u8981 partition \u4e86 # \u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u6570\u7684\u7d22\u5f15 if left == right: return left pivot = input[left] l = left + 1 r = right while True: while l <= right and input[l] <= pivot: l += 1 while r > left and input[r] >= pivot: r -= 1 if l > r: break input[l], input[r] = input[r], input[l] l += 1 r -= 1 input[left], input[r] = input[r], input[left] return r C++ \u4ee3\u7801\uff1a \uff08\u672c\u8282\u5b8c\uff09","title":"\u7b2c 40 \u9898\uff1a\u6700\u5c0f\u7684 K \u4e2a\u6570"},{"location":"31/","text":"\u5251\u6307 Offer 31. \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217 \u5251\u6307 Offer 31. \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217 \u7b2c 31 \u9898\uff1a\u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217 \u4f20\u9001\u95e8\uff1a \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u8868\u793a\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u8bf7\u5224\u65ad\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u5426\u53ef\u80fd\u4e3a\u8be5\u6808\u7684\u5f39\u51fa\u987a\u5e8f\u3002 \u5047\u8bbe\u538b\u5165\u6808\u7684\u6240\u6709\u6570\u5b57\u5747\u4e0d\u76f8\u7b49\u3002 \u4f8b\u5982\u5e8f\u5217 $[1,2,3,4,5]$ \u662f\u67d0\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u5e8f\u5217 $[4,5,3,2,1]$ \u662f\u8be5\u538b\u6808\u5e8f\u5217\u5bf9\u5e94\u7684\u4e00\u4e2a\u5f39\u51fa\u5e8f\u5217\uff0c\u4f46 $[4,3,5,1,2]$ \u5c31\u4e0d\u53ef\u80fd\u662f\u8be5\u538b\u6808\u5e8f\u5217\u7684\u5f39\u51fa\u5e8f\u5217\u3002 \u6ce8\u610f \uff1a\u82e5\u4e24\u4e2a\u5e8f\u5217\u4e3a\u7a7a\u6216\u957f\u5ea6\u4e0d\u7b49\u5219\u89c6\u4e3a\u5e76\u4e0d\u662f\u4e00\u4e2a\u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,3,4,5] \uff0c [4,5,3,2,1] \u8f93\u51fa\uff1a true \u601d\u8def\uff1a\u4e0b\u9762\u5c55\u793a\u4e86\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u5199\u6cd5\uff1a\u4e24\u4e2a\u6808\u90fd\u4e3a\u7a7a\u7684\u60c5\u51b5\u8981\u8003\u8651\u5230\u3002 Python \u4ee3\u7801\uff1a\u5f15\u5165\u4e00\u4e2a\u6570\u7ec4\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u6070\u597d\u4e5f\u662f\u6808 class Solution(object): def isPopOrder(self, pushV, popV): \"\"\" :type pushV: list[int] :type popV: list[int] :rtype: bool \"\"\" if len(pushV) == 0 and len(popV) == 0: return False if pushV is None or popV is None or len(pushV) != len(popV): return False stack = [] index = 0 for ele in pushV: stack.append(ele) while stack and stack[-1] == popV[index]: stack.pop() index += 1 # \u6700\u540e\u4e0d\u8981\u5fd8\u8bb0\u5224\u65ad stack \u4e3a\u7a7a\u7684\u60c5\u51b5 return len(stack) == 0 if __name__ == '__main__': pushV = [] popV = [] solution = Solution() result = solution.isPopOrder(pushV, popV) print(result) Java \u4ee3\u7801\uff1a\u8fd9\u9053\u9898\u7684\u6c42\u89e3\u8981\u501f\u52a9\u4e00\u4e9b\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u6b63\u4f8b\u548c\u53cd\u4f8b\uff0c\u5c31\u8db3\u591f\u5e2e\u52a9\u6211\u4eec\u5206\u6790\u51fa\u4ee3\u7801\u7684\u903b\u8f91\u4e86\u3002 import java.util.LinkedList; import java.util.Stack; public class Solution { // \u8fd9\u9053\u9898\u82b1\u4e86\u597d\u957f\u65f6\u95f4\uff0c\u4e0d\u8fc7\u7ec8\u4e8e\u601d\u8def\u6e05\u6670\u4e86 public boolean IsPopOrder(int[] pushA, int[] popA) { int lenA = pushA.length; int lenB = popA.length; if (lenA != lenB) { return false; } // \u628a\u4e24\u4e2a\u6570\u7ec4\u653e\u5165\u4e00\u4e2a\u961f\u5217\u4e2d\uff0c\u662f\u4e3a\u4e86\u65b9\u4fbf\u904d\u5386 LinkedList<Integer> queue1 = new LinkedList<>(); for (int i = 0; i < lenA; i++) { queue1.addLast(pushA[i]); } LinkedList<Integer> queue2 = new LinkedList<>(); for (int i = 0; i < lenA; i++) { queue2.addLast(popA[i]); } Stack<Integer> stack = new Stack<>(); // \u4ee5\u4e0a\u7684\u4ee3\u7801\u867d\u7136\u957f\uff0c\u4f46\u4e5f\u53ea\u662f\u505a\u4e86\u4e00\u4e9b\u6781\u7aef\u6d4b\u8bd5\u7528\u4f8b\u7684\u8003\u8651\u548c\u53d8\u91cf\u7684\u521d\u59cb\u5316\u5de5\u4f5c // \u6b65\u9aa41\uff1a // \u628a\u539f\u59cb\u6570\u7ec4\u5f62\u6210\u7684\u961f\u5217\u904d\u5386\u5b8c\u6210\uff0c // \u53ea\u8981\u662f\u4e0e\u6808\u6570\u7ec4\u5f62\u6210\u7684\u961f\u5217\u7684\u961f\u9996\u5143\u7d20\u4e0d\u7b49\u7684\uff0c\u90fd\u653e\u5165\u4e00\u4e2a\u8f85\u52a9\u6808\u4e2d while (!queue1.isEmpty()) { int peekFirst1 = queue1.removeFirst(); int peekFirst2 = queue2.peekFirst(); if (peekFirst1 != peekFirst2) { stack.add(peekFirst1); } else { queue2.removeFirst(); } } // \u6b65\u9aa4 2\uff1a\u9646\u7eed\u5f39\u51fa\u6808\uff0c\u904d\u5386\u6808\u6570\u7ec4\u5f62\u6210\u7684\u961f\u5217\uff0c\u53ea\u8981\u4e0d\u7b49\u5c31\u8868\u793a\u4e0d\u7b26\u5408\u9898\u76ee\u8981\u6c42 while (!stack.isEmpty()) { if (!queue2.removeFirst().equals(stack.pop())) { return false; } } // \u6b65\u9aa4 3\uff1a\u80fd\u8d70\u5230\u6700\u540e\u7684\uff0c\u8bf4\u660e\u7b26\u5408\u9898\u76ee\u8981\u6c42 return true; } public static void main(String[] args) { Solution solution = new Solution(); // int[] pushA = new int[]{1, 2, 3, 4, 5}; // int[] popA = new int[]{4, 5, 3, 2, 1}; int[] pushA = new int[]{1}; int[] popA = new int[]{1}; boolean isPopOrder = solution.IsPopOrder(pushA, popA); System.out.println(isPopOrder); } } \u540c LeetCode \u7b2c 946 \u9898\uff0c\u4f20\u9001\u95e8\uff1a 946. \u9a8c\u8bc1\u6808\u5e8f\u5217 \u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 31. \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217"},{"location":"31/#offer-31","text":"\u5251\u6307 Offer 31. \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217","title":"\u5251\u6307 Offer 31. \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217"},{"location":"31/#31","text":"\u4f20\u9001\u95e8\uff1a \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u8868\u793a\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u8bf7\u5224\u65ad\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u5426\u53ef\u80fd\u4e3a\u8be5\u6808\u7684\u5f39\u51fa\u987a\u5e8f\u3002 \u5047\u8bbe\u538b\u5165\u6808\u7684\u6240\u6709\u6570\u5b57\u5747\u4e0d\u76f8\u7b49\u3002 \u4f8b\u5982\u5e8f\u5217 $[1,2,3,4,5]$ \u662f\u67d0\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u5e8f\u5217 $[4,5,3,2,1]$ \u662f\u8be5\u538b\u6808\u5e8f\u5217\u5bf9\u5e94\u7684\u4e00\u4e2a\u5f39\u51fa\u5e8f\u5217\uff0c\u4f46 $[4,3,5,1,2]$ \u5c31\u4e0d\u53ef\u80fd\u662f\u8be5\u538b\u6808\u5e8f\u5217\u7684\u5f39\u51fa\u5e8f\u5217\u3002 \u6ce8\u610f \uff1a\u82e5\u4e24\u4e2a\u5e8f\u5217\u4e3a\u7a7a\u6216\u957f\u5ea6\u4e0d\u7b49\u5219\u89c6\u4e3a\u5e76\u4e0d\u662f\u4e00\u4e2a\u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,3,4,5] \uff0c [4,5,3,2,1] \u8f93\u51fa\uff1a true \u601d\u8def\uff1a\u4e0b\u9762\u5c55\u793a\u4e86\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u5199\u6cd5\uff1a\u4e24\u4e2a\u6808\u90fd\u4e3a\u7a7a\u7684\u60c5\u51b5\u8981\u8003\u8651\u5230\u3002 Python \u4ee3\u7801\uff1a\u5f15\u5165\u4e00\u4e2a\u6570\u7ec4\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u6070\u597d\u4e5f\u662f\u6808 class Solution(object): def isPopOrder(self, pushV, popV): \"\"\" :type pushV: list[int] :type popV: list[int] :rtype: bool \"\"\" if len(pushV) == 0 and len(popV) == 0: return False if pushV is None or popV is None or len(pushV) != len(popV): return False stack = [] index = 0 for ele in pushV: stack.append(ele) while stack and stack[-1] == popV[index]: stack.pop() index += 1 # \u6700\u540e\u4e0d\u8981\u5fd8\u8bb0\u5224\u65ad stack \u4e3a\u7a7a\u7684\u60c5\u51b5 return len(stack) == 0 if __name__ == '__main__': pushV = [] popV = [] solution = Solution() result = solution.isPopOrder(pushV, popV) print(result) Java \u4ee3\u7801\uff1a\u8fd9\u9053\u9898\u7684\u6c42\u89e3\u8981\u501f\u52a9\u4e00\u4e9b\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u6b63\u4f8b\u548c\u53cd\u4f8b\uff0c\u5c31\u8db3\u591f\u5e2e\u52a9\u6211\u4eec\u5206\u6790\u51fa\u4ee3\u7801\u7684\u903b\u8f91\u4e86\u3002 import java.util.LinkedList; import java.util.Stack; public class Solution { // \u8fd9\u9053\u9898\u82b1\u4e86\u597d\u957f\u65f6\u95f4\uff0c\u4e0d\u8fc7\u7ec8\u4e8e\u601d\u8def\u6e05\u6670\u4e86 public boolean IsPopOrder(int[] pushA, int[] popA) { int lenA = pushA.length; int lenB = popA.length; if (lenA != lenB) { return false; } // \u628a\u4e24\u4e2a\u6570\u7ec4\u653e\u5165\u4e00\u4e2a\u961f\u5217\u4e2d\uff0c\u662f\u4e3a\u4e86\u65b9\u4fbf\u904d\u5386 LinkedList<Integer> queue1 = new LinkedList<>(); for (int i = 0; i < lenA; i++) { queue1.addLast(pushA[i]); } LinkedList<Integer> queue2 = new LinkedList<>(); for (int i = 0; i < lenA; i++) { queue2.addLast(popA[i]); } Stack<Integer> stack = new Stack<>(); // \u4ee5\u4e0a\u7684\u4ee3\u7801\u867d\u7136\u957f\uff0c\u4f46\u4e5f\u53ea\u662f\u505a\u4e86\u4e00\u4e9b\u6781\u7aef\u6d4b\u8bd5\u7528\u4f8b\u7684\u8003\u8651\u548c\u53d8\u91cf\u7684\u521d\u59cb\u5316\u5de5\u4f5c // \u6b65\u9aa41\uff1a // \u628a\u539f\u59cb\u6570\u7ec4\u5f62\u6210\u7684\u961f\u5217\u904d\u5386\u5b8c\u6210\uff0c // \u53ea\u8981\u662f\u4e0e\u6808\u6570\u7ec4\u5f62\u6210\u7684\u961f\u5217\u7684\u961f\u9996\u5143\u7d20\u4e0d\u7b49\u7684\uff0c\u90fd\u653e\u5165\u4e00\u4e2a\u8f85\u52a9\u6808\u4e2d while (!queue1.isEmpty()) { int peekFirst1 = queue1.removeFirst(); int peekFirst2 = queue2.peekFirst(); if (peekFirst1 != peekFirst2) { stack.add(peekFirst1); } else { queue2.removeFirst(); } } // \u6b65\u9aa4 2\uff1a\u9646\u7eed\u5f39\u51fa\u6808\uff0c\u904d\u5386\u6808\u6570\u7ec4\u5f62\u6210\u7684\u961f\u5217\uff0c\u53ea\u8981\u4e0d\u7b49\u5c31\u8868\u793a\u4e0d\u7b26\u5408\u9898\u76ee\u8981\u6c42 while (!stack.isEmpty()) { if (!queue2.removeFirst().equals(stack.pop())) { return false; } } // \u6b65\u9aa4 3\uff1a\u80fd\u8d70\u5230\u6700\u540e\u7684\uff0c\u8bf4\u660e\u7b26\u5408\u9898\u76ee\u8981\u6c42 return true; } public static void main(String[] args) { Solution solution = new Solution(); // int[] pushA = new int[]{1, 2, 3, 4, 5}; // int[] popA = new int[]{4, 5, 3, 2, 1}; int[] pushA = new int[]{1}; int[] popA = new int[]{1}; boolean isPopOrder = solution.IsPopOrder(pushA, popA); System.out.println(isPopOrder); } } \u540c LeetCode \u7b2c 946 \u9898\uff0c\u4f20\u9001\u95e8\uff1a 946. \u9a8c\u8bc1\u6808\u5e8f\u5217 \u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 31 \u9898\uff1a\u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217"},{"location":"32-1/","text":"\u5251\u6307 Offer 32 - I. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \u5251\u6307 Offer 32 - I. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \u7b2c 32-1 \u9898\uff1a\u4e0d\u5206\u884c\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \u4f20\u9001\u95e8\uff1a \u4e0d\u5206\u884c\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u540c\u4e00\u5c42\u7684\u7ed3\u70b9\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\u5982\u4e0b\u56fe\u6240\u793a\u4e8c\u53c9\u6811 [8, 12, 2, null, null, 6, null, 4, null, null, null] 8 / \\ 12 2 / 6 / 4 \u8f93\u51fa\uff1a [8, 12, 2, 6, 4] \u601d\u8def\uff1a\u5c42\u5e8f\u904d\u5386\uff0c\u501f\u52a9\u5229\u7528\u961f\u5217\u5b9e\u73b0\u3002\u5176\u5b9e\u5c31\u662f\u5c42\u5e8f\u904d\u5386\uff0c\u4f7f\u7528\u7684\u8f85\u52a9\u7684\u6570\u636e\u7ed3\u6784\u662f\u201c\u961f\u5217\u201d\uff0c\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6ce8\u610f\u5230\u4e00\u4e9b\u7ec6\u8282\u5c31\u53ef\u4ee5\u4e86\u3002\u5728\u5b9e\u73b0\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8981\u9632\u6b62\uff1a 1\u3001\u5c06\u7a7a\u5143\u7d20\u653e\u5165\u961f\u5217\uff1b 2\u3001\u961f\u5217\u5143\u7d20\u51fa\u961f\u7684\u65f6\u5019\uff0c\u5148\u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff0c\u975e\u7a7a\u624d\u53ef\u4ee5\u51fa\u961f\u3002 Python \u4ee3\u7801\uff1a # Definition for a binary tree node. class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution: def printFromTopToBottom(self, root): \"\"\" :type root: TreeNode :rtype: List[int] \"\"\" if root is None: return [] queue = [root] res = [] while queue: # \u5f39\u51fa\u961f\u9996\u5143\u7d20\uff0c\u7d22\u5f15\u7f16\u53f7 0 \u4e0d\u8981\u5fd8\u8bb0\u5199\u4e86 top = queue.pop(0) res.append(top.val) if top.left: queue.append(top.left) if top.right: queue.append(top.right) return res Java \u4ee3\u7801\uff1a import java.util.ArrayList; import java.util.LinkedList; class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { public ArrayList<Integer> PrintFromTopToBottom(TreeNode root) { ArrayList<Integer> res = new ArrayList<>(); if (root == null) { return res; } LinkedList<TreeNode> queue = new LinkedList<>(); queue.addLast(root); while (!queue.isEmpty()) { int curSize = queue.size(); for (int i = 0; i < curSize; i++) { TreeNode curNode = queue.removeFirst(); res.add(curNode.val); if (curNode.left != null) { queue.addLast(curNode.left); } if (curNode.right != null) { queue.addLast(curNode.right); } } } return res; } public static void main(String[] args) { TreeNode node8 = new TreeNode(8); TreeNode node6 = new TreeNode(6); TreeNode node10 = new TreeNode(10); TreeNode node5 = new TreeNode(5); TreeNode node7 = new TreeNode(7); TreeNode node9 = new TreeNode(9); TreeNode node11 = new TreeNode(11); node8.left = node6; node8.right = node10; node6.left = node5; node6.right = node7; node10.left = node9; node10.right = node11; Solution solution = new Solution(); ArrayList<Integer> printFromTopToBottom = solution.PrintFromTopToBottom(node8); System.out.println(printFromTopToBottom); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 32 - I. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"32-1/#offer-32-i","text":"\u5251\u6307 Offer 32 - I. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811","title":"\u5251\u6307 Offer 32 - I. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"32-1/#32-1","text":"\u4f20\u9001\u95e8\uff1a \u4e0d\u5206\u884c\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u540c\u4e00\u5c42\u7684\u7ed3\u70b9\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\u5982\u4e0b\u56fe\u6240\u793a\u4e8c\u53c9\u6811 [8, 12, 2, null, null, 6, null, 4, null, null, null] 8 / \\ 12 2 / 6 / 4 \u8f93\u51fa\uff1a [8, 12, 2, 6, 4] \u601d\u8def\uff1a\u5c42\u5e8f\u904d\u5386\uff0c\u501f\u52a9\u5229\u7528\u961f\u5217\u5b9e\u73b0\u3002\u5176\u5b9e\u5c31\u662f\u5c42\u5e8f\u904d\u5386\uff0c\u4f7f\u7528\u7684\u8f85\u52a9\u7684\u6570\u636e\u7ed3\u6784\u662f\u201c\u961f\u5217\u201d\uff0c\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6ce8\u610f\u5230\u4e00\u4e9b\u7ec6\u8282\u5c31\u53ef\u4ee5\u4e86\u3002\u5728\u5b9e\u73b0\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8981\u9632\u6b62\uff1a 1\u3001\u5c06\u7a7a\u5143\u7d20\u653e\u5165\u961f\u5217\uff1b 2\u3001\u961f\u5217\u5143\u7d20\u51fa\u961f\u7684\u65f6\u5019\uff0c\u5148\u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff0c\u975e\u7a7a\u624d\u53ef\u4ee5\u51fa\u961f\u3002 Python \u4ee3\u7801\uff1a # Definition for a binary tree node. class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution: def printFromTopToBottom(self, root): \"\"\" :type root: TreeNode :rtype: List[int] \"\"\" if root is None: return [] queue = [root] res = [] while queue: # \u5f39\u51fa\u961f\u9996\u5143\u7d20\uff0c\u7d22\u5f15\u7f16\u53f7 0 \u4e0d\u8981\u5fd8\u8bb0\u5199\u4e86 top = queue.pop(0) res.append(top.val) if top.left: queue.append(top.left) if top.right: queue.append(top.right) return res Java \u4ee3\u7801\uff1a import java.util.ArrayList; import java.util.LinkedList; class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { public ArrayList<Integer> PrintFromTopToBottom(TreeNode root) { ArrayList<Integer> res = new ArrayList<>(); if (root == null) { return res; } LinkedList<TreeNode> queue = new LinkedList<>(); queue.addLast(root); while (!queue.isEmpty()) { int curSize = queue.size(); for (int i = 0; i < curSize; i++) { TreeNode curNode = queue.removeFirst(); res.add(curNode.val); if (curNode.left != null) { queue.addLast(curNode.left); } if (curNode.right != null) { queue.addLast(curNode.right); } } } return res; } public static void main(String[] args) { TreeNode node8 = new TreeNode(8); TreeNode node6 = new TreeNode(6); TreeNode node10 = new TreeNode(10); TreeNode node5 = new TreeNode(5); TreeNode node7 = new TreeNode(7); TreeNode node9 = new TreeNode(9); TreeNode node11 = new TreeNode(11); node8.left = node6; node8.right = node10; node6.left = node5; node6.right = node7; node10.left = node9; node10.right = node11; Solution solution = new Solution(); ArrayList<Integer> printFromTopToBottom = solution.PrintFromTopToBottom(node8); System.out.println(printFromTopToBottom); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 32-1 \u9898\uff1a\u4e0d\u5206\u884c\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"32-2/","text":"\u5251\u6307 Offer 32 - II. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 II \u5251\u6307 Offer 32 - II. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 II \u7b2c 32-2 \u9898\uff1a\u5206\u884c\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \u4f20\u9001\u95e8\uff1a \u5206\u884c\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u4ece\u4e0a\u5230\u4e0b\u6309\u5c42\u6253\u5370\u4e8c\u53c9\u6811\uff0c\u540c\u4e00\u5c42\u7684\u7ed3\u70b9\u6309\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u6bcf\u4e00\u5c42\u6253\u5370\u5230\u4e00\u884c\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\u5982\u4e0b\u56fe\u6240\u793a\u4e8c\u53c9\u6811 [8, 12, 2, null, null, 6, null, 4, null, null, null] 8 / \\ 12 2 / 6 / 4 \u8f93\u51fa\uff1a [[8], [12, 2], [6], [4]] \u5206\u6790\uff1a\u4e0e\u201c\u4e0d\u5206\u884c\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811\u201d\u7684\u533a\u522b\u5c31\u5728\u4e8e\uff0c\u5728\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u5143\u7d20\u7684\u4e4b\u524d\uff0c\u5148\u770b\u770b\u961f\u5217\u4e2d\u6709\u591a\u5c11\u5143\u7d20\uff0c\u7136\u540e\u4f9d\u6b21\u5c06\u8fd9\u4e9b\u5143\u7d20\u5168\u90e8\u53d6\u51fa\u6765\u3002\u53d6\u51fa\u6765\u4ee5\u540e\uff0c\u518d\u5c06\u5de6\u53f3\u5b50\u6811\u7684\u6839\u7ed3\u70b9\u52a0\u5165\u961f\u5217\u3002 Python \u4ee3\u7801\uff1a # Definition for a binary tree node. class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def printFromTopToBottom(self, root): \"\"\" :type root: TreeNode :rtype: List[List[int]] \"\"\" if root is None: return [] queue = [root] res = [] while queue: size = len(queue) cur_list = [] for _ in range(size): top = queue.pop(0) cur_list.append(top.val) if top.left: queue.append(top.left) if top.right: queue.append(top.right) res.append(cur_list) return res Java \u4ee3\u7801\uff1a import java.util.ArrayList; import java.util.LinkedList; class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } // \u4ece\u4e0a\u5230\u4e0b\u6309\u5c42\u6253\u5370\u4e8c\u53c9\u6811\uff0c\u540c\u4e00\u5c42\u7ed3\u70b9\u4ece\u5de6\u81f3\u53f3\u8f93\u51fa\u3002\u6bcf\u4e00\u5c42\u8f93\u51fa\u4e00\u884c\u3002 // \u5c42\u5e8f\u904d\u5386 public class Solution { ArrayList<ArrayList<Integer>> Print(TreeNode pRoot) { ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>(); if (pRoot == null) { return res; } LinkedList<TreeNode> queue = new LinkedList<>(); queue.addLast(pRoot); while (!queue.isEmpty()) { int size = queue.size(); ArrayList<Integer> curLevel = new ArrayList<>(); for (int i = 0; i < size; i++) { TreeNode top = queue.removeFirst(); curLevel.add(top.val); if (top.left != null) { queue.addLast(top.left); } if (top.right != null) { queue.addLast(top.right); } } res.add(curLevel); } return res; } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 32 - II. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 II"},{"location":"32-2/#offer-32-ii-ii","text":"\u5251\u6307 Offer 32 - II. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 II","title":"\u5251\u6307 Offer 32 - II. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 II"},{"location":"32-2/#32-2","text":"\u4f20\u9001\u95e8\uff1a \u5206\u884c\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u4ece\u4e0a\u5230\u4e0b\u6309\u5c42\u6253\u5370\u4e8c\u53c9\u6811\uff0c\u540c\u4e00\u5c42\u7684\u7ed3\u70b9\u6309\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u6bcf\u4e00\u5c42\u6253\u5370\u5230\u4e00\u884c\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\u5982\u4e0b\u56fe\u6240\u793a\u4e8c\u53c9\u6811 [8, 12, 2, null, null, 6, null, 4, null, null, null] 8 / \\ 12 2 / 6 / 4 \u8f93\u51fa\uff1a [[8], [12, 2], [6], [4]] \u5206\u6790\uff1a\u4e0e\u201c\u4e0d\u5206\u884c\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811\u201d\u7684\u533a\u522b\u5c31\u5728\u4e8e\uff0c\u5728\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u5143\u7d20\u7684\u4e4b\u524d\uff0c\u5148\u770b\u770b\u961f\u5217\u4e2d\u6709\u591a\u5c11\u5143\u7d20\uff0c\u7136\u540e\u4f9d\u6b21\u5c06\u8fd9\u4e9b\u5143\u7d20\u5168\u90e8\u53d6\u51fa\u6765\u3002\u53d6\u51fa\u6765\u4ee5\u540e\uff0c\u518d\u5c06\u5de6\u53f3\u5b50\u6811\u7684\u6839\u7ed3\u70b9\u52a0\u5165\u961f\u5217\u3002 Python \u4ee3\u7801\uff1a # Definition for a binary tree node. class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def printFromTopToBottom(self, root): \"\"\" :type root: TreeNode :rtype: List[List[int]] \"\"\" if root is None: return [] queue = [root] res = [] while queue: size = len(queue) cur_list = [] for _ in range(size): top = queue.pop(0) cur_list.append(top.val) if top.left: queue.append(top.left) if top.right: queue.append(top.right) res.append(cur_list) return res Java \u4ee3\u7801\uff1a import java.util.ArrayList; import java.util.LinkedList; class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } // \u4ece\u4e0a\u5230\u4e0b\u6309\u5c42\u6253\u5370\u4e8c\u53c9\u6811\uff0c\u540c\u4e00\u5c42\u7ed3\u70b9\u4ece\u5de6\u81f3\u53f3\u8f93\u51fa\u3002\u6bcf\u4e00\u5c42\u8f93\u51fa\u4e00\u884c\u3002 // \u5c42\u5e8f\u904d\u5386 public class Solution { ArrayList<ArrayList<Integer>> Print(TreeNode pRoot) { ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>(); if (pRoot == null) { return res; } LinkedList<TreeNode> queue = new LinkedList<>(); queue.addLast(pRoot); while (!queue.isEmpty()) { int size = queue.size(); ArrayList<Integer> curLevel = new ArrayList<>(); for (int i = 0; i < size; i++) { TreeNode top = queue.removeFirst(); curLevel.add(top.val); if (top.left != null) { queue.addLast(top.left); } if (top.right != null) { queue.addLast(top.right); } } res.add(curLevel); } return res; } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 32-2 \u9898\uff1a\u5206\u884c\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"32-3/","text":"\u5251\u6307 Offer 32 - III. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 III \u5251\u6307 Offer 32 - III. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 III \uff1b \u4e4b\u5b57\u5f62\u6253\u5370\u4e8c\u53c9\u6811 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u4f20\u9001\u95e8\uff1a \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6309\u7167\u4e4b\u5b57\u5f62\u987a\u5e8f\u4ece\u4e0a\u5411\u4e0b\u6253\u5370\u4e8c\u53c9\u6811\u3002 \u5373\u7b2c\u4e00\u884c\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e8c\u5c42\u6309\u7167\u4ece\u53f3\u5230\u5de6\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e09\u884c\u518d\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u5176\u4ed6\u884c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\u5982\u4e0b\u56fe\u6240\u793a\u4e8c\u53c9\u6811 [8, 12, 2, null, null, 6, 4, null, null, null, null] 8 / \\ 12 2 / \\ 6 4 \u8f93\u51fa\uff1a [[8], [2, 12], [6, 4]] \u601d\u8def\uff1a\u8bbe\u7f6e\u4e00\u4e2a\u5411\u5de6\u5411\u53f3\u7684\u53d8\u91cf\u66f4\u6362\u5f53\u524d\u5c42\u5143\u7d20\u7684\u63d2\u5165\u65b9\u5f0f\u5373\u53ef\u3002 Python \u4ee3\u7801\uff1a # \u6837\u4f8b # \u8f93\u5165\u5982\u4e0b\u56fe\u6240\u793a\u4e8c\u53c9\u6811[8, 12, 2, null, null, 6, 4, null, null, null, null] # 8 # / \\ # 12 2 # / \\ # 6 4 # \u8f93\u51fa\uff1a[[8], [2, 12], [6, 4]] # Definition for a binary tree node. class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def printFromTopToBottom(self, root): \"\"\" :type root: TreeNode :rtype: List[List[int]] \"\"\" if root is None: return [] queue = [root] res = [] turn_left = True while queue: cur_list = [] size = len(queue) for _ in range(size): top = queue.pop(0) if turn_left: cur_list.append(top.val) else: cur_list.insert(0, top.val) if top.left: queue.append(top.left) if top.right: queue.append(top.right) res.append(cur_list) turn_left = not turn_left return res Java \u4ee3\u7801\uff1a import java.util.ArrayList; import java.util.LinkedList; import java.util.Stack; class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { public ArrayList<ArrayList<Integer>> Print(TreeNode pRoot) { ArrayList<ArrayList<Integer>> res = new ArrayList<>(); if (pRoot == null) { return res; } LinkedList<TreeNode> queue = new LinkedList<>(); queue.addLast(pRoot); boolean right = true; while (!queue.isEmpty()) { int size = queue.size(); // \u4e4b \u5b57\u5f62 \u4e00\u5f00\u59cb\u5411\u53f3 ArrayList<Integer> curLevel = new ArrayList<>(); Stack<TreeNode> stack = new Stack<>(); for (int i = 0; i < size; i++) { if (right) { TreeNode node = queue.removeFirst(); curLevel.add(node.val); if (node.left != null) { stack.add(node.left); } if (node.right != null) { stack.add(node.right); } } else { TreeNode node = queue.removeFirst(); curLevel.add(node.val); if (node.right != null) { stack.add(node.right); } if (node.left != null) { stack.add(node.left); } } } while (!stack.isEmpty()) { queue.addLast(stack.pop()); } right = !right; res.add(curLevel); } return res; } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 32 - III. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 III"},{"location":"32-3/#offer-32-iii-iii","text":"\u5251\u6307 Offer 32 - III. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 III \uff1b \u4e4b\u5b57\u5f62\u6253\u5370\u4e8c\u53c9\u6811 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u4f20\u9001\u95e8\uff1a \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6309\u7167\u4e4b\u5b57\u5f62\u987a\u5e8f\u4ece\u4e0a\u5411\u4e0b\u6253\u5370\u4e8c\u53c9\u6811\u3002 \u5373\u7b2c\u4e00\u884c\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e8c\u5c42\u6309\u7167\u4ece\u53f3\u5230\u5de6\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e09\u884c\u518d\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u5176\u4ed6\u884c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\u5982\u4e0b\u56fe\u6240\u793a\u4e8c\u53c9\u6811 [8, 12, 2, null, null, 6, 4, null, null, null, null] 8 / \\ 12 2 / \\ 6 4 \u8f93\u51fa\uff1a [[8], [2, 12], [6, 4]] \u601d\u8def\uff1a\u8bbe\u7f6e\u4e00\u4e2a\u5411\u5de6\u5411\u53f3\u7684\u53d8\u91cf\u66f4\u6362\u5f53\u524d\u5c42\u5143\u7d20\u7684\u63d2\u5165\u65b9\u5f0f\u5373\u53ef\u3002 Python \u4ee3\u7801\uff1a # \u6837\u4f8b # \u8f93\u5165\u5982\u4e0b\u56fe\u6240\u793a\u4e8c\u53c9\u6811[8, 12, 2, null, null, 6, 4, null, null, null, null] # 8 # / \\ # 12 2 # / \\ # 6 4 # \u8f93\u51fa\uff1a[[8], [2, 12], [6, 4]] # Definition for a binary tree node. class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def printFromTopToBottom(self, root): \"\"\" :type root: TreeNode :rtype: List[List[int]] \"\"\" if root is None: return [] queue = [root] res = [] turn_left = True while queue: cur_list = [] size = len(queue) for _ in range(size): top = queue.pop(0) if turn_left: cur_list.append(top.val) else: cur_list.insert(0, top.val) if top.left: queue.append(top.left) if top.right: queue.append(top.right) res.append(cur_list) turn_left = not turn_left return res Java \u4ee3\u7801\uff1a import java.util.ArrayList; import java.util.LinkedList; import java.util.Stack; class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { public ArrayList<ArrayList<Integer>> Print(TreeNode pRoot) { ArrayList<ArrayList<Integer>> res = new ArrayList<>(); if (pRoot == null) { return res; } LinkedList<TreeNode> queue = new LinkedList<>(); queue.addLast(pRoot); boolean right = true; while (!queue.isEmpty()) { int size = queue.size(); // \u4e4b \u5b57\u5f62 \u4e00\u5f00\u59cb\u5411\u53f3 ArrayList<Integer> curLevel = new ArrayList<>(); Stack<TreeNode> stack = new Stack<>(); for (int i = 0; i < size; i++) { if (right) { TreeNode node = queue.removeFirst(); curLevel.add(node.val); if (node.left != null) { stack.add(node.left); } if (node.right != null) { stack.add(node.right); } } else { TreeNode node = queue.removeFirst(); curLevel.add(node.val); if (node.right != null) { stack.add(node.right); } if (node.left != null) { stack.add(node.left); } } } while (!stack.isEmpty()) { queue.addLast(stack.pop()); } right = !right; res.add(curLevel); } return res; } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 32 - III. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 III"},{"location":"33/","text":"\u5251\u6307 Offer 33. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 \u5251\u6307 Offer 33. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 \uff1b \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7b2c 33 \u9898\uff1a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217\uff08\u9012\u5f52\u3001\u5206\u6cbb\uff09 \u4f20\u9001\u95e8\uff1a \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002 \u5982\u679c\u662f\u5219\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false\u3002 \u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [4, 8, 6, 12, 16, 14, 10] \u8f93\u51fa\uff1a true \u5206\u6790\uff1a\u524d\u63d0\uff1a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5404\u4e0d\u76f8\u540c\u3002\u6ce8\u610f\u5230\u9898\u76ee\u4e2d\u5df2\u7ecf\u6ce8\u660e\u4e86\uff1a \u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c \u3002 \u6839\u7ed3\u70b9\u662f\u540e\u5e8f\u904d\u5386\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u4e00\u5b9a\u4f4d\u4e8e\u7ed9\u5b9a\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4f4d\uff1b \u90a3\u4e48\u7ed9\u5b9a\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4f4d\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6570\u7ec4\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u524d\u534a\u90e8\u5206 \u4e25\u683c\u5c0f\u4e8e \u6700\u540e\u4e00\u4e2a\u6570\uff0c\u540e\u534a\u90e8\u5206 \u4e25\u683c\u5927\u4e8e \u6700\u540e\u4e00\u4e2a\u6570\uff1b \u6839\u636e\u4ee5\u4e0a\u4e24\u6761\u5c31\u5f88\u5bb9\u6613\u5199\u51fa\u9012\u5f52\u7684\u4ee3\u7801\u3002 \u4f9d\u636e\uff1a\u540e\u5e8f\u904d\u5386\u6700\u540e\u904d\u5386\u5230\u7684\u4e00\u5b9a\u662f\u6839\u7ed3\u70b9\u3002 \u6ce8\u610f\uff1a\u8fb9\u754c\u6761\u4ef6\u3002 \u601d\u60f3\uff1a\u5206\u6cbb\u3002 Python \u4ee3\u7801\uff1a class Solution: def verifySquenceOfBST(self, sequence): \"\"\" :type sequence: List[int] :rtype: bool \"\"\" # \u5148\u5199\u7279\u6b8a\u60c5\u51b5 l = len(sequence) if l == 0: return False if l == 1: return True return self.__helper(sequence, 0, l - 1) def __helper(self, sequence, left, right): # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if left >= right: return True # \u6b64\u65f6\u533a\u95f4\u6700\u53f3\u8fb9\u7684\u6570\u4f5c\u4e3a\u6807\u5b9a\u5143\u7d20 pivot = sequence[right] # \u8bbe\u7f6e\u4e00\u4e2a\u904d\u5386\u6307\u9488\uff0c\u628a [left, right -1] \u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u5143\u7d20\u5168\u90e8\u770b\u4e00\u904d # \u6b63\u786e\u7684\u60c5\u51b5\u662f\uff1a\u6700\u53f3\u8fb9\u7684\u5143\u7d20\u628a\u524d\u9762\u7684\u6570\u7ec4\u5206\u6210\u4e24\u90e8\u5206\uff1a # \u7b2c 1 \u90e8\u5206\u7684\u5143\u7d20\u5168\u90e8\u4e25\u683c\u5c0f\u4e8e\u6700\u53f3\u8fb9\u7684\u5143\u7d20 # \u7b2c 2 \u90e8\u5206\u7684\u5143\u7d20\u5168\u90e8\u4e25\u683c\u5927\u4e8e\u6700\u53f3\u8fb9\u7684\u5143\u7d20 point = left while sequence[point] < pivot: point += 1 # \u6b64\u65f6 [left, point - 1] \u4e2d\u7684\u5143\u7d20\u90fd\u4e25\u683c\u6bd4\u6700\u53f3\u8fb9\u7684\u5143\u7d20\u5c0f # \u4e0b\u9762\u5c31\u4f9d\u6b21\u9a8c\u8bc1\u540e\u9762\u7684\u5143\u7d20\u662f\u4e0d\u662f\u90fd\u4e25\u683c\u6bd4\u6700\u53f3\u8fb9\u7684\u5143\u7d20\u5927\u5c31\u597d\u4e86 mid = point - 1 # \u6b64\u540e\uff0c\u6240\u6709\u7684\u6570\u90fd\u5e94\u8be5\u6bd4 pivot \u5927 while point < right: if sequence[point] > pivot: point += 1 else: return False return self.__helper(sequence, left, mid) and self.__helper(sequence, mid + 1, right - 1) Python \u4ee3\u7801\uff1a\u5206\u6cbb\u6cd5 class Solution: def verifySquenceOfBST(self, sequence): \"\"\" :type sequence: List[int] :rtype: bool \"\"\" if not sequence: return False root = sequence[-1] for i in range(len(sequence)): if sequence[i] > root: break for j in range(i,len(sequence)): if sequence[j] < root: return False left = True if i > 0: left = self.verifySquenceOfBST(sequence[:i]) right = True if i < len(sequence)-1: right = self.verifySquenceOfBST(sequence[i:-1]) if left and right: return True return False Java \u4ee3\u7801\uff1a \u6839\u7ed3\u70b9\u662f\u540e\u5e8f\u904d\u5386\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u4e00\u5b9a\u4f4d\u4e8e\u7ed9\u5b9a\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4f4d\u3002 \u90a3\u4e48\u7ed9\u5b9a\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4f4d\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6570\u7ec4\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u524d\u534a\u90e8\u5206\u5c0f\u4e8e\u6700\u540e\u4e00\u4e2a\u6570\uff0c\u540e\u534a\u90e8\u5206\u5927\u4e8e\u6700\u540e\u4e00\u4e2a\u6570\u3002 \u6839\u636e\u4ee5\u4e0a\u4e24\u6761\u5c31\u5f88\u5bb9\u6613\u5199\u51fa\u9012\u5f52\u7684\u4ee3\u7801\u3002 Java \u4ee3\u7801\uff1a public class Solution { public boolean VerifySquenceOfBST(int[] sequence) { int len = sequence.length; if (len == 0) { return false; } if (len == 1) { return true; } int l = 0; int r = len - 1; while (l <= r) { int mid = judgeBST(sequence, l, r); if (mid == -1) { return false; } // \u6ce8\u610f\u8003\u8651\u6570\u7ec4\u4e0b\u6807\u8d8a\u754c\u7684\u95ee\u9898 // return (mid > 1 ? judgeBST(sequence, l, mid - 1) != -1 : true) && judgeBST(sequence, mid, r) != -1; return (mid <= 1 || judgeBST(sequence, l, mid - 1) != -1) && judgeBST(sequence, mid, r) != -1; } return true; } // mid \u4ee5\u53ca mid \u4ee5\u540e\u7684\u6570\u5b50\u90fd\u5c0f\u4e8e arr[r] private int judgeBST(int[] arr, int l, int r) { int p = arr[r]; int i = l; int mid; // 5\uff0c4\uff0c3\uff0c2\uff0c1 while (arr[i] < p) { i++; } mid = i; while (arr[i] > p && i < r) { i++; } // \u5982\u679c\u904d\u5386\u5230\u672b\u5c3e\u4e86\uff0c\u5c31\u8bf4\u660e\uff0c\u5728\u8fd9\u4e00\u5c42\uff0c\u662f\u53ef\u4ee5\u6784\u6210 BST \u7684 if (i == r) { return mid; } return -1; } public static void main(String[] args) { // int[] nums1 = {5, 7, 6, 9, 11, 10, 8}; int[] nums = {5, 4, 3, 2, 1}; Solution solution = new Solution(); boolean verifySquenceOfBST = solution.VerifySquenceOfBST(nums); System.out.println(verifySquenceOfBST); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 33. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217"},{"location":"33/#offer-33","text":"\u5251\u6307 Offer 33. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 \uff1b \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002","title":"\u5251\u6307 Offer 33. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217"},{"location":"33/#33","text":"\u4f20\u9001\u95e8\uff1a \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002 \u5982\u679c\u662f\u5219\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false\u3002 \u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [4, 8, 6, 12, 16, 14, 10] \u8f93\u51fa\uff1a true \u5206\u6790\uff1a\u524d\u63d0\uff1a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5404\u4e0d\u76f8\u540c\u3002\u6ce8\u610f\u5230\u9898\u76ee\u4e2d\u5df2\u7ecf\u6ce8\u660e\u4e86\uff1a \u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c \u3002 \u6839\u7ed3\u70b9\u662f\u540e\u5e8f\u904d\u5386\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u4e00\u5b9a\u4f4d\u4e8e\u7ed9\u5b9a\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4f4d\uff1b \u90a3\u4e48\u7ed9\u5b9a\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4f4d\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6570\u7ec4\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u524d\u534a\u90e8\u5206 \u4e25\u683c\u5c0f\u4e8e \u6700\u540e\u4e00\u4e2a\u6570\uff0c\u540e\u534a\u90e8\u5206 \u4e25\u683c\u5927\u4e8e \u6700\u540e\u4e00\u4e2a\u6570\uff1b \u6839\u636e\u4ee5\u4e0a\u4e24\u6761\u5c31\u5f88\u5bb9\u6613\u5199\u51fa\u9012\u5f52\u7684\u4ee3\u7801\u3002 \u4f9d\u636e\uff1a\u540e\u5e8f\u904d\u5386\u6700\u540e\u904d\u5386\u5230\u7684\u4e00\u5b9a\u662f\u6839\u7ed3\u70b9\u3002 \u6ce8\u610f\uff1a\u8fb9\u754c\u6761\u4ef6\u3002 \u601d\u60f3\uff1a\u5206\u6cbb\u3002 Python \u4ee3\u7801\uff1a class Solution: def verifySquenceOfBST(self, sequence): \"\"\" :type sequence: List[int] :rtype: bool \"\"\" # \u5148\u5199\u7279\u6b8a\u60c5\u51b5 l = len(sequence) if l == 0: return False if l == 1: return True return self.__helper(sequence, 0, l - 1) def __helper(self, sequence, left, right): # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if left >= right: return True # \u6b64\u65f6\u533a\u95f4\u6700\u53f3\u8fb9\u7684\u6570\u4f5c\u4e3a\u6807\u5b9a\u5143\u7d20 pivot = sequence[right] # \u8bbe\u7f6e\u4e00\u4e2a\u904d\u5386\u6307\u9488\uff0c\u628a [left, right -1] \u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u5143\u7d20\u5168\u90e8\u770b\u4e00\u904d # \u6b63\u786e\u7684\u60c5\u51b5\u662f\uff1a\u6700\u53f3\u8fb9\u7684\u5143\u7d20\u628a\u524d\u9762\u7684\u6570\u7ec4\u5206\u6210\u4e24\u90e8\u5206\uff1a # \u7b2c 1 \u90e8\u5206\u7684\u5143\u7d20\u5168\u90e8\u4e25\u683c\u5c0f\u4e8e\u6700\u53f3\u8fb9\u7684\u5143\u7d20 # \u7b2c 2 \u90e8\u5206\u7684\u5143\u7d20\u5168\u90e8\u4e25\u683c\u5927\u4e8e\u6700\u53f3\u8fb9\u7684\u5143\u7d20 point = left while sequence[point] < pivot: point += 1 # \u6b64\u65f6 [left, point - 1] \u4e2d\u7684\u5143\u7d20\u90fd\u4e25\u683c\u6bd4\u6700\u53f3\u8fb9\u7684\u5143\u7d20\u5c0f # \u4e0b\u9762\u5c31\u4f9d\u6b21\u9a8c\u8bc1\u540e\u9762\u7684\u5143\u7d20\u662f\u4e0d\u662f\u90fd\u4e25\u683c\u6bd4\u6700\u53f3\u8fb9\u7684\u5143\u7d20\u5927\u5c31\u597d\u4e86 mid = point - 1 # \u6b64\u540e\uff0c\u6240\u6709\u7684\u6570\u90fd\u5e94\u8be5\u6bd4 pivot \u5927 while point < right: if sequence[point] > pivot: point += 1 else: return False return self.__helper(sequence, left, mid) and self.__helper(sequence, mid + 1, right - 1) Python \u4ee3\u7801\uff1a\u5206\u6cbb\u6cd5 class Solution: def verifySquenceOfBST(self, sequence): \"\"\" :type sequence: List[int] :rtype: bool \"\"\" if not sequence: return False root = sequence[-1] for i in range(len(sequence)): if sequence[i] > root: break for j in range(i,len(sequence)): if sequence[j] < root: return False left = True if i > 0: left = self.verifySquenceOfBST(sequence[:i]) right = True if i < len(sequence)-1: right = self.verifySquenceOfBST(sequence[i:-1]) if left and right: return True return False Java \u4ee3\u7801\uff1a \u6839\u7ed3\u70b9\u662f\u540e\u5e8f\u904d\u5386\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u4e00\u5b9a\u4f4d\u4e8e\u7ed9\u5b9a\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4f4d\u3002 \u90a3\u4e48\u7ed9\u5b9a\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4f4d\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6570\u7ec4\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u524d\u534a\u90e8\u5206\u5c0f\u4e8e\u6700\u540e\u4e00\u4e2a\u6570\uff0c\u540e\u534a\u90e8\u5206\u5927\u4e8e\u6700\u540e\u4e00\u4e2a\u6570\u3002 \u6839\u636e\u4ee5\u4e0a\u4e24\u6761\u5c31\u5f88\u5bb9\u6613\u5199\u51fa\u9012\u5f52\u7684\u4ee3\u7801\u3002 Java \u4ee3\u7801\uff1a public class Solution { public boolean VerifySquenceOfBST(int[] sequence) { int len = sequence.length; if (len == 0) { return false; } if (len == 1) { return true; } int l = 0; int r = len - 1; while (l <= r) { int mid = judgeBST(sequence, l, r); if (mid == -1) { return false; } // \u6ce8\u610f\u8003\u8651\u6570\u7ec4\u4e0b\u6807\u8d8a\u754c\u7684\u95ee\u9898 // return (mid > 1 ? judgeBST(sequence, l, mid - 1) != -1 : true) && judgeBST(sequence, mid, r) != -1; return (mid <= 1 || judgeBST(sequence, l, mid - 1) != -1) && judgeBST(sequence, mid, r) != -1; } return true; } // mid \u4ee5\u53ca mid \u4ee5\u540e\u7684\u6570\u5b50\u90fd\u5c0f\u4e8e arr[r] private int judgeBST(int[] arr, int l, int r) { int p = arr[r]; int i = l; int mid; // 5\uff0c4\uff0c3\uff0c2\uff0c1 while (arr[i] < p) { i++; } mid = i; while (arr[i] > p && i < r) { i++; } // \u5982\u679c\u904d\u5386\u5230\u672b\u5c3e\u4e86\uff0c\u5c31\u8bf4\u660e\uff0c\u5728\u8fd9\u4e00\u5c42\uff0c\u662f\u53ef\u4ee5\u6784\u6210 BST \u7684 if (i == r) { return mid; } return -1; } public static void main(String[] args) { // int[] nums1 = {5, 7, 6, 9, 11, 10, 8}; int[] nums = {5, 4, 3, 2, 1}; Solution solution = new Solution(); boolean verifySquenceOfBST = solution.VerifySquenceOfBST(nums); System.out.println(verifySquenceOfBST); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 33 \u9898\uff1a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217\uff08\u9012\u5f52\u3001\u5206\u6cbb\uff09"},{"location":"34/","text":"\u5251\u6307 Offer 34. \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84 \u5251\u6307 Offer 34. \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84 \u4f20\u9001\u95e8\uff1a \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u4e2d\u7ed3\u70b9\u503c\u7684\u548c\u4e3a\u8f93\u5165\u6574\u6570\u7684\u6240\u6709\u8def\u5f84\u3002 \u4ece\u6811\u7684\u6839\u7ed3\u70b9\u5f00\u59cb\u5f80\u4e0b\u4e00\u76f4\u5230\u53f6\u7ed3\u70b9\u6240\u7ecf\u8fc7\u7684\u7ed3\u70b9\u5f62\u6210\u4e00\u6761\u8def\u5f84\u3002 \u6837\u4f8b \u7ed9\u51fa\u4e8c\u53c9\u6811\u5982\u4e0b\u6240\u793a\uff0c\u5e76\u7ed9\u51fanum=22\u3002 5 / \\ 4 6 / / \\ 12 13 6 / \\ / \\ 9 1 5 1 \u8f93\u51fa\uff1a [[5,4,12,1],[5,6,6,5]] Python \u4ee3\u7801\uff1a class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def findPath(self, root, sum): \"\"\" :type root: TreeNode :type sum: int :rtype: List[List[int]] \"\"\" res = [] if root is None: return res self.__dfs(root, sum, [], res) return res def __dfs(self, node, residue, path, res): # \u9012\u5f52\uff0c\u5c31\u5e94\u8be5\u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if node is None: return # \u8d70\u5230\u8fd9\u91cc node \u80af\u5b9a\u975e\u7a7a\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 left \u548c right \u6210\u5458\u53d8\u91cf # \u8d70\u5b8c\u4ee5\u540e\uff0c\u8981\u8bb0\u5f97\u56de\u6eaf\uff0c\u72b6\u6001\u8981\u91cd\u7f6e # \u5148\u628a\u5b83\u52a0\u5230\u8def\u5f84\u4e2d\uff0c\u5728\u5404\u79cd if \u90fd\u4e0d\u6210\u7acb\u7684\u6700\u540e\uff0c\u8981\u8bb0\u5f97 pop \u51fa\u53bb path.append(node.val) if node.left is None and node.right is None: # \u5982\u679c\u662f\u53f6\u5b50\u7ed3\u70b9\uff0c\u5e76\u4e14 residue \u5c31\u7b49\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684\u503c if node.val == residue: res.append(path[:]) # \u6ce8\u610f\uff1a\u8fd9\u91cc\u4e0d\u8981 return \uff0c\u5982\u679c\u8981 return\uff0creturn \u4e4b\u524d\u628a path \u6267\u884c pop \u64cd\u4f5c # \u8d70\u5230\u8fd9\u91cc\u662f\u975e\u53f6\u5b50\u7ed3\u70b9\uff0c\u6240\u4ee5\u5de6\u8fb9\u8981\u8d70\u4e00\u8d70\uff0c\u53f3\u8fb9\u4e5f\u8981\u8d70\u4e00\u8d70 if node.left: self.__dfs(node.left, residue - node.val, path, res) if node.right: self.__dfs(node.right, residue - node.val, path, res) path.pop() Java \u4ee3\u7801\uff1a import java.util.ArrayList; import java.util.Stack; class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { // \u4f7f\u7528\u641c\u7d22\u7684\u7b56\u7565\u53ef\u4ee5\u5b8c\u6210 public ArrayList<ArrayList<Integer>> FindPath(TreeNode root, int target) { ArrayList<ArrayList<Integer>> res = new ArrayList<>(); Stack<Integer> pre = new Stack<>(); findPath(root, target, pre, res); return res; } private void findPath(TreeNode root, int target, Stack<Integer> pre, ArrayList<ArrayList<Integer>> res) { if (root == null || root.val > target) { return; } // \u6ce8\u610f\uff1a\u9898\u76ee\u4e2d\u95ee\u7684\u662f\u5230\u53f6\u5b50\u7ed3\u70b9 if (root.val == target && root.left == null && root.right == null) { pre.add(root.val); res.add(new ArrayList<>(pre)); pre.pop(); return; } assert root.val < target && root != null; pre.add(root.val); findPath(root.left, target - root.val, pre, res); findPath(root.right, target - root.val, pre, res); pre.pop(); } public static void main(String[] args) { TreeNode node1 = new TreeNode(1); TreeNode node2 = new TreeNode(2); TreeNode node3 = new TreeNode(3); TreeNode node4 = new TreeNode(4); TreeNode node8 = new TreeNode(8); TreeNode node7 = new TreeNode(7); node1.left = node2; node1.right = node3; node2.left = node4; node2.right = node8; node3.left = node7; Solution solution = new Solution(); ArrayList<ArrayList<Integer>> findPath = solution.FindPath(node1, 11); System.out.println(findPath); } } \u53c2\u8003\u8d44\u6599\uff1a LeetCode \u7b2c 113\u9898\uff1a\u8def\u5f84\u603b\u548c II \u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 34. \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84"},{"location":"34/#offer-34","text":"\u5251\u6307 Offer 34. \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84 \u4f20\u9001\u95e8\uff1a \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u4e2d\u7ed3\u70b9\u503c\u7684\u548c\u4e3a\u8f93\u5165\u6574\u6570\u7684\u6240\u6709\u8def\u5f84\u3002 \u4ece\u6811\u7684\u6839\u7ed3\u70b9\u5f00\u59cb\u5f80\u4e0b\u4e00\u76f4\u5230\u53f6\u7ed3\u70b9\u6240\u7ecf\u8fc7\u7684\u7ed3\u70b9\u5f62\u6210\u4e00\u6761\u8def\u5f84\u3002 \u6837\u4f8b \u7ed9\u51fa\u4e8c\u53c9\u6811\u5982\u4e0b\u6240\u793a\uff0c\u5e76\u7ed9\u51fanum=22\u3002 5 / \\ 4 6 / / \\ 12 13 6 / \\ / \\ 9 1 5 1 \u8f93\u51fa\uff1a [[5,4,12,1],[5,6,6,5]] Python \u4ee3\u7801\uff1a class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def findPath(self, root, sum): \"\"\" :type root: TreeNode :type sum: int :rtype: List[List[int]] \"\"\" res = [] if root is None: return res self.__dfs(root, sum, [], res) return res def __dfs(self, node, residue, path, res): # \u9012\u5f52\uff0c\u5c31\u5e94\u8be5\u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if node is None: return # \u8d70\u5230\u8fd9\u91cc node \u80af\u5b9a\u975e\u7a7a\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 left \u548c right \u6210\u5458\u53d8\u91cf # \u8d70\u5b8c\u4ee5\u540e\uff0c\u8981\u8bb0\u5f97\u56de\u6eaf\uff0c\u72b6\u6001\u8981\u91cd\u7f6e # \u5148\u628a\u5b83\u52a0\u5230\u8def\u5f84\u4e2d\uff0c\u5728\u5404\u79cd if \u90fd\u4e0d\u6210\u7acb\u7684\u6700\u540e\uff0c\u8981\u8bb0\u5f97 pop \u51fa\u53bb path.append(node.val) if node.left is None and node.right is None: # \u5982\u679c\u662f\u53f6\u5b50\u7ed3\u70b9\uff0c\u5e76\u4e14 residue \u5c31\u7b49\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684\u503c if node.val == residue: res.append(path[:]) # \u6ce8\u610f\uff1a\u8fd9\u91cc\u4e0d\u8981 return \uff0c\u5982\u679c\u8981 return\uff0creturn \u4e4b\u524d\u628a path \u6267\u884c pop \u64cd\u4f5c # \u8d70\u5230\u8fd9\u91cc\u662f\u975e\u53f6\u5b50\u7ed3\u70b9\uff0c\u6240\u4ee5\u5de6\u8fb9\u8981\u8d70\u4e00\u8d70\uff0c\u53f3\u8fb9\u4e5f\u8981\u8d70\u4e00\u8d70 if node.left: self.__dfs(node.left, residue - node.val, path, res) if node.right: self.__dfs(node.right, residue - node.val, path, res) path.pop() Java \u4ee3\u7801\uff1a import java.util.ArrayList; import java.util.Stack; class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { // \u4f7f\u7528\u641c\u7d22\u7684\u7b56\u7565\u53ef\u4ee5\u5b8c\u6210 public ArrayList<ArrayList<Integer>> FindPath(TreeNode root, int target) { ArrayList<ArrayList<Integer>> res = new ArrayList<>(); Stack<Integer> pre = new Stack<>(); findPath(root, target, pre, res); return res; } private void findPath(TreeNode root, int target, Stack<Integer> pre, ArrayList<ArrayList<Integer>> res) { if (root == null || root.val > target) { return; } // \u6ce8\u610f\uff1a\u9898\u76ee\u4e2d\u95ee\u7684\u662f\u5230\u53f6\u5b50\u7ed3\u70b9 if (root.val == target && root.left == null && root.right == null) { pre.add(root.val); res.add(new ArrayList<>(pre)); pre.pop(); return; } assert root.val < target && root != null; pre.add(root.val); findPath(root.left, target - root.val, pre, res); findPath(root.right, target - root.val, pre, res); pre.pop(); } public static void main(String[] args) { TreeNode node1 = new TreeNode(1); TreeNode node2 = new TreeNode(2); TreeNode node3 = new TreeNode(3); TreeNode node4 = new TreeNode(4); TreeNode node8 = new TreeNode(8); TreeNode node7 = new TreeNode(7); node1.left = node2; node1.right = node3; node2.left = node4; node2.right = node8; node3.left = node7; Solution solution = new Solution(); ArrayList<ArrayList<Integer>> findPath = solution.FindPath(node1, 11); System.out.println(findPath); } } \u53c2\u8003\u8d44\u6599\uff1a LeetCode \u7b2c 113\u9898\uff1a\u8def\u5f84\u603b\u548c II \u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 34. \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84"},{"location":"35/","text":"\u5251\u6307 Offer 35. \u590d\u6742\u94fe\u8868\u7684\u590d\u5236 \u5251\u6307 Offer 35. \u590d\u6742\u94fe\u8868\u7684\u590d\u5236 \uff1b \u590d\u6742\u94fe\u8868\u7684\u590d\u523b \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u4f20\u9001\u95e8\uff1a \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u590d\u5236\u4e00\u4e2a\u590d\u6742\u94fe\u8868\u3002 \u5728\u590d\u6742\u94fe\u8868\u4e2d\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u9664\u4e86\u6709\u4e00\u4e2a\u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u989d\u5916\u7684\u6307\u9488\u6307\u5411\u94fe\u8868\u4e2d\u7684\u4efb\u610f\u7ed3\u70b9\u6216\u8005 null \u3002 \u5206\u6790\uff1a\u4e00\u4e9b\u7ec6\u8282\u8981\u8003\u8651\u5230\uff0c\u7279\u522b\u662f\u7a7a\u7ed3\u70b9\u7684\u5224\u65ad\uff0c\u4ee5\u4e0b\u4e24\u79cd\u65b9\u6cd5\u90fd\u8981\u904d\u5386\u94fe\u8868\u4e00\u904d\u4ee5\u4e0a\uff0c\u5373\u904d\u5386\u94fe\u8868\u4e00\u904d\u662f\u4e0d\u591f\u7684\u3002 \u601d\u8def1\uff1a\u6709\u70b9\u5de7\u5999\uff0c\u7a7f\u9488\u5f15\u7ebf\uff0c\u65b0\u65e7\u65ad\u5f00\u3002 Python \u4ee3\u7801\uff1a class ListNode(object): def __init__(self, x): self.val = x self.next = None self.random = None class Solution(object): def copyRandomList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None: return None # \u7b2c 1 \u6b65\uff1a\u6839\u636e next \u6307\u9488\u590d\u5236\u51fa\u4e00\u4e2a\u65b0\u65e7\u5408\u4e00\u7684\u94fe\u8868 cur_node = head while cur_node: # \u5148\u6682\u5b58 cur_node \u7684 next_node \u4e0b\u4e00\u6b21\u904d\u5386\u8981\u7528 next_node = cur_node.next new_node = ListNode(cur_node.val) cur_node.next = new_node new_node.next = next_node # \u6307\u9488\u904d\u5386\u5230\u4e0b\u4e00\u4e2a\u7ed3\u70b9 cur_node = next_node # \u7b2c 2 \u6b65\uff1a\u6839\u636e\u65e7\u7ed3\u70b9 random \u6307\u9488\uff0c\u7ed9\u65b0\u7ed3\u70b9\u7684 random \u6307\u9488\u505a\u51fa\u6b63\u786e\u7684\u6307\u5411 cur_node = head while cur_node: new_node = cur_node.next # \u540c\u6837\u8981\u5148\u6682\u5b58 cur_node.next_node next_node = new_node.next # \u8981\u8bb0\u5f97\u505a\u975e\u7a7a\u5224\u65ad\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\u4e86 random \u6709\u53ef\u80fd\u4e3a\u7a7a new_node.random = cur_node.random.next if cur_node.random else None cur_node = next_node # \u7b2c 3 \u6b65\uff1a\u65e7\u7ed3\u70b9\u548c\u65b0\u7ed3\u70b9\u5206\u79bb\uff08\u62c6\u5206\u94fe\u8868\uff09 cur_node = head res = cur_node.next while cur_node: new_node = cur_node.next # \u540c\u6837\u8981\u5148\u6682\u5b58\u4e0b\u4e00\u4e2a\u7ed3\u70b9 next_node = new_node.next # \u6062\u590d\u539f\u59cb\u7ed3\u70b9 cur_node.next = new_node.next # \u6062\u590d\u62f7\u8d1d\u7ed3\u70b9 # \u8fd9\u91cc\u4e5f\u8981\u540c\u6837\u6ce8\u610f\u7a7a\u6307\u9488\u7684\u95ee\u9898\uff0c\u514b\u9686\u7ed3\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u662f null new_node.next = next_node.next if next_node else None cur_node = next_node return res Java \u4ee3\u7801\uff1a class RandomListNode { int label; RandomListNode next = null; RandomListNode random = null; RandomListNode(int label) { this.label = label; } } public class Solution { public RandomListNode Clone(RandomListNode pHead) { // \u6781\u7aef\u60c5\u51b5\uff0c\u4e00\u5b9a\u8981\u5199\u5148\u51fa\u6765 if (pHead == null) { return null; } RandomListNode curNode = pHead; // \u7b2c 1 \u6b65\uff1a\u6839\u636e next \u6307\u9488\u590d\u5236\u51fa\u4e00\u4e2a\u65b0\u65e7\u5408\u4e00\u7684\u94fe\u8868 // \u6b64\u65f6\uff0c\u5947\u6570\u7d22\u5f15\uff08\u4ece 1 \u5f00\u59cb\u8ba1\u7b97\uff09\u7684\u7ed3\u70b9\u662f\u65e7\u7684\u7ed3\u70b9\uff0c\u5076\u6570\u7d22\u5f15\u7684\u7ed3\u70b9\u662f\u65b0\u7684\u7ed3\u70b9 RandomListNode nextNode; RandomListNode copyNode; while (curNode != null) { nextNode = curNode.next; copyNode = new RandomListNode(curNode.label); curNode.next = copyNode; copyNode.next = nextNode; curNode = nextNode; } // \u7b2c 2 \u6b65\uff1a\u6839\u636e\u65e7\u7ed3\u70b9 random \u6307\u9488\uff0c\u7ed9\u65b0\u7ed3\u70b9\u7684 random \u6307\u9488\u505a\u51fa\u6b63\u786e\u7684\u6307\u5411 // \u6307\u9488\u590d\u4f4d\u5230\u8d77\u59cb\u7ed3\u70b9 curNode = pHead; while (curNode != null) { copyNode = curNode.next; nextNode = copyNode.next; // \u7279\u522b\u6ce8\u610f // \u7279\u522b\u6ce8\u610f // \u7279\u522b\u6ce8\u610f\uff1a\u6709\u7684\u7ed3\u70b9\u5f88\u53ef\u80fd random \u7684\u6307\u5411\u4e3a\u7a7a\uff08\u9898\u76ee\u4e2d\u660e\u786e\u8bf4\u660e\uff09 // \u6240\u4ee5\uff1a\u53ea\u8981\u9047\u5230 next \u5f15\u7528\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u5224\u65ad\u662f\u5426\u4e3a\u7a7a copyNode.random = curNode.random == null ? null : curNode.random.next; curNode = nextNode; } // \u7b2c 3 \u6b65\uff1a\u65e7\u7ed3\u70b9\u548c\u65b0\u7ed3\u70b9\u5206\u79bb\uff08\u62c6\u5206\u94fe\u8868\uff09 curNode = pHead; RandomListNode res = pHead.next; while (curNode != null) { copyNode = curNode.next; nextNode = copyNode.next; // \u6062\u590d\u539f\u59cb\u7ed3\u70b9 curNode.next = copyNode.next; // \u6062\u590d\u62f7\u8d1d\u7ed3\u70b9 // \u8fd9\u91cc\u4e5f\u8981\u540c\u6837\u6ce8\u610f\u7a7a\u6307\u9488\u7684\u95ee\u9898\uff0c\u514b\u9686\u7ed3\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u662f null copyNode.next = copyNode.next == null ? null : copyNode.next.next; curNode = nextNode; } return res; } } C++ \u5199\u6cd5\uff1a Java \u7248\u672c\u91cc\u9762\u8fd8\u6709\u4e00\u4e2a\u7f51\u53cb\u7684\u5199\u6cd5\u3002 \u601d\u8def2\uff1a\u4f7f\u7528\u54c8\u5e0c\u8868\uff0c\u590d\u5236\u51fa\u968f\u673a\u8bbf\u95ee\u7684\u6307\u9488\u3002 Python \u4ee3\u7801\uff1a class ListNode(object): def __init__(self, x): self.val = x self.next = None self.random = None class Solution(object): def copyRandomList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None: return None map = dict() dummy_node = ListNode(-1) # p \u6307\u9488\u7528\u4e8e\u65b0\u94fe\u8868\u7684 next \u6307\u9488\u8d4b\u503c p = dummy_node # \u904d\u5386\u4e00\u6b21\u94fe\u8868\uff0c\u505a\u4e24\u4ef6\u4e8b # 1\u3001\u590d\u5236\u7ed3\u70b9 # 2\u3001\u53ea\u7ba1 next \u6307\u9488 cur_node = head while cur_node: new_node = ListNode(cur_node.val) # \u628a\u65b0\u65e7\u7ed3\u70b9\u7684\u5bf9\u5e94\u5173\u7cfb\u653e\u5728\u4e00\u4e2a map \u91cc map[cur_node] = new_node cur_node = cur_node.next p.next = new_node p = new_node # \u63a5\u4e0b\u6765\u505a\u968f\u673a\u6307\u9488\u7684\u590d\u5236 for old_node, new_node in map.items(): # \u8981\u8bb0\u5f97\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\uff0c\u5426\u5219 None \u4e0d\u80fd\u4f5c\u4e3a map key if old_node.random: new_node.random = map[old_node.random] return dummy_node.next Java \u4ee3\u7801\uff1a public class Solution3 { public RandomListNode Clone(RandomListNode pHead) { Map<RandomListNode, RandomListNode> map = new HashMap<>(); RandomListNode curNode = pHead; // \u4f53\u4f1a\u8fd9\u91cc\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u7684\u5fc5\u8981\u6027 RandomListNode dummyNode = new RandomListNode(-1); RandomListNode p = dummyNode; // \u5b8c\u6210\u590d\u5236 next \u7ed3\u70b9\uff0c\u5e76\u4e14\u5c06\u5bf9\u5e94\u5173\u7cfb\u653e\u5165 Hash \u8868 while (curNode != null) { RandomListNode newNode = new RandomListNode(curNode.label); map.put(curNode, newNode); curNode = curNode.next; p.next = newNode; p = newNode; } // \u5b8c\u6210\u590d\u5236\u94fe\u8868\u7684 random \u6307\u9488\u7684\u8d4b\u503c Set<Map.Entry<RandomListNode, RandomListNode>> entrySet = map.entrySet(); for (Map.Entry<RandomListNode, RandomListNode> entry : entrySet) { entry.getValue().random = map.get(entry.getKey().random); } return dummyNode.next; } } Java \u4ee3\u7801\uff1a\u7279\u522b\u6ce8\u610f\uff1a\u5728\u590d\u5236\u201c\u6307\u9488\u201d\u7684\u65f6\u5019\uff0c\u5bf9\u7a7a\u5bf9\u8c61\u7684\u5224\u5b9a\uff0c\u753b\u56fe\u662f\u5341\u5206\u5173\u952e\u7684\u3002 class RandomListNode { int label; RandomListNode next = null; RandomListNode random = null; RandomListNode(int label) { this.label = label; } } public class Solution { public RandomListNode Clone(RandomListNode pHead) { // \u6781\u7aef\u60c5\u51b5\uff0c\u4e00\u5b9a\u8981\u5199\u5148\u51fa\u6765 if (pHead == null) { return null; } RandomListNode curNode = pHead; // \u7b2c 1 \u6b65\uff1a\u6839\u636e next \u6307\u9488\u590d\u5236\u51fa\u4e00\u4e2a\u65b0\u65e7\u5408\u4e00\u7684\u94fe\u8868 // \u6b64\u65f6\uff0c\u5947\u6570\u7d22\u5f15\uff08\u4ece 1 \u5f00\u59cb\u8ba1\u7b97\uff09\u7684\u7ed3\u70b9\u662f\u65e7\u7684\u7ed3\u70b9\uff0c\u5076\u6570\u7d22\u5f15\u7684\u7ed3\u70b9\u662f\u65b0\u7684\u7ed3\u70b9 RandomListNode nextNode; RandomListNode copyNode; while (curNode != null) { nextNode = curNode.next; copyNode = new RandomListNode(curNode.label); curNode.next = copyNode; copyNode.next = nextNode; curNode = nextNode; } // \u7b2c 2 \u6b65\uff1a\u6839\u636e\u65e7\u7ed3\u70b9 random \u6307\u9488\uff0c\u7ed9\u65b0\u7ed3\u70b9\u7684 random \u6307\u9488\u505a\u51fa\u6b63\u786e\u7684\u6307\u5411 // \u6307\u9488\u590d\u4f4d\u5230\u8d77\u59cb\u7ed3\u70b9 curNode = pHead; while (curNode != null) { copyNode = curNode.next; nextNode = copyNode.next; // \u7279\u522b\u6ce8\u610f // \u7279\u522b\u6ce8\u610f // \u7279\u522b\u6ce8\u610f\uff1a\u6709\u7684\u7ed3\u70b9\u5f88\u53ef\u80fd random \u7684\u6307\u5411\u4e3a\u7a7a\uff08\u9898\u76ee\u4e2d\u660e\u786e\u8bf4\u660e\uff09 // \u6240\u4ee5\uff1a\u53ea\u8981\u9047\u5230 next \u5f15\u7528\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u5224\u65ad\u662f\u5426\u4e3a\u7a7a copyNode.random = curNode.random == null ? null : curNode.random.next; curNode = nextNode; } // \u7b2c 3 \u6b65\uff1a\u65e7\u7ed3\u70b9\u548c\u65b0\u7ed3\u70b9\u5206\u79bb\uff08\u62c6\u5206\u94fe\u8868\uff09 curNode = pHead; RandomListNode res = pHead.next; while (curNode != null) { copyNode = curNode.next; nextNode = copyNode.next; // \u6062\u590d\u539f\u59cb\u7ed3\u70b9 curNode.next = copyNode.next; // \u6062\u590d\u62f7\u8d1d\u7ed3\u70b9 // \u8fd9\u91cc\u4e5f\u8981\u540c\u6837\u6ce8\u610f\u7a7a\u6307\u9488\u7684\u95ee\u9898\uff0c\u514b\u9686\u7ed3\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u662f null copyNode.next = copyNode.next == null ? null : copyNode.next.next; curNode = nextNode; } return res; } } Java \u4ee3\u7801\uff1a import java.util.HashMap; import java.util.Map; import java.util.Set; /** * \u4f7f\u7528 Hash \u8868\u7684\u65b9\u5f0f * * @author liwei */ public class Solution2 { public RandomListNode Clone(RandomListNode pHead) { Map<RandomListNode, RandomListNode> map = new HashMap<>(); RandomListNode curNode = pHead; // \u4f53\u4f1a\u8fd9\u91cc\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u7684\u5fc5\u8981\u6027 RandomListNode dummyNode = new RandomListNode(-1); RandomListNode p = dummyNode; // \u5b8c\u6210\u590d\u5236 next \u7ed3\u70b9\uff0c\u5e76\u4e14\u5c06\u5bf9\u5e94\u5173\u7cfb\u653e\u5165 Hash \u8868 while (curNode != null) { RandomListNode newNode = new RandomListNode(curNode.label); map.put(curNode, newNode); curNode = curNode.next; p.next = newNode; p = newNode; } // \u5b8c\u6210\u590d\u5236\u94fe\u8868\u7684 random \u6307\u9488\u7684\u8d4b\u503c Set<Map.Entry<RandomListNode, RandomListNode>> entrySet = map.entrySet(); for (Map.Entry<RandomListNode, RandomListNode> entry : entrySet) { entry.getValue().random = map.get(entry.getKey().random); } return dummyNode.next; } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 35. \u590d\u6742\u94fe\u8868\u7684\u590d\u5236"},{"location":"35/#offer-35","text":"\u5251\u6307 Offer 35. \u590d\u6742\u94fe\u8868\u7684\u590d\u5236 \uff1b \u590d\u6742\u94fe\u8868\u7684\u590d\u523b \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002","title":"\u5251\u6307 Offer 35. \u590d\u6742\u94fe\u8868\u7684\u590d\u5236"},{"location":"35/#_1","text":"\u4f20\u9001\u95e8\uff1a \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u590d\u5236\u4e00\u4e2a\u590d\u6742\u94fe\u8868\u3002 \u5728\u590d\u6742\u94fe\u8868\u4e2d\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u9664\u4e86\u6709\u4e00\u4e2a\u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u989d\u5916\u7684\u6307\u9488\u6307\u5411\u94fe\u8868\u4e2d\u7684\u4efb\u610f\u7ed3\u70b9\u6216\u8005 null \u3002 \u5206\u6790\uff1a\u4e00\u4e9b\u7ec6\u8282\u8981\u8003\u8651\u5230\uff0c\u7279\u522b\u662f\u7a7a\u7ed3\u70b9\u7684\u5224\u65ad\uff0c\u4ee5\u4e0b\u4e24\u79cd\u65b9\u6cd5\u90fd\u8981\u904d\u5386\u94fe\u8868\u4e00\u904d\u4ee5\u4e0a\uff0c\u5373\u904d\u5386\u94fe\u8868\u4e00\u904d\u662f\u4e0d\u591f\u7684\u3002 \u601d\u8def1\uff1a\u6709\u70b9\u5de7\u5999\uff0c\u7a7f\u9488\u5f15\u7ebf\uff0c\u65b0\u65e7\u65ad\u5f00\u3002 Python \u4ee3\u7801\uff1a class ListNode(object): def __init__(self, x): self.val = x self.next = None self.random = None class Solution(object): def copyRandomList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None: return None # \u7b2c 1 \u6b65\uff1a\u6839\u636e next \u6307\u9488\u590d\u5236\u51fa\u4e00\u4e2a\u65b0\u65e7\u5408\u4e00\u7684\u94fe\u8868 cur_node = head while cur_node: # \u5148\u6682\u5b58 cur_node \u7684 next_node \u4e0b\u4e00\u6b21\u904d\u5386\u8981\u7528 next_node = cur_node.next new_node = ListNode(cur_node.val) cur_node.next = new_node new_node.next = next_node # \u6307\u9488\u904d\u5386\u5230\u4e0b\u4e00\u4e2a\u7ed3\u70b9 cur_node = next_node # \u7b2c 2 \u6b65\uff1a\u6839\u636e\u65e7\u7ed3\u70b9 random \u6307\u9488\uff0c\u7ed9\u65b0\u7ed3\u70b9\u7684 random \u6307\u9488\u505a\u51fa\u6b63\u786e\u7684\u6307\u5411 cur_node = head while cur_node: new_node = cur_node.next # \u540c\u6837\u8981\u5148\u6682\u5b58 cur_node.next_node next_node = new_node.next # \u8981\u8bb0\u5f97\u505a\u975e\u7a7a\u5224\u65ad\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\u4e86 random \u6709\u53ef\u80fd\u4e3a\u7a7a new_node.random = cur_node.random.next if cur_node.random else None cur_node = next_node # \u7b2c 3 \u6b65\uff1a\u65e7\u7ed3\u70b9\u548c\u65b0\u7ed3\u70b9\u5206\u79bb\uff08\u62c6\u5206\u94fe\u8868\uff09 cur_node = head res = cur_node.next while cur_node: new_node = cur_node.next # \u540c\u6837\u8981\u5148\u6682\u5b58\u4e0b\u4e00\u4e2a\u7ed3\u70b9 next_node = new_node.next # \u6062\u590d\u539f\u59cb\u7ed3\u70b9 cur_node.next = new_node.next # \u6062\u590d\u62f7\u8d1d\u7ed3\u70b9 # \u8fd9\u91cc\u4e5f\u8981\u540c\u6837\u6ce8\u610f\u7a7a\u6307\u9488\u7684\u95ee\u9898\uff0c\u514b\u9686\u7ed3\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u662f null new_node.next = next_node.next if next_node else None cur_node = next_node return res Java \u4ee3\u7801\uff1a class RandomListNode { int label; RandomListNode next = null; RandomListNode random = null; RandomListNode(int label) { this.label = label; } } public class Solution { public RandomListNode Clone(RandomListNode pHead) { // \u6781\u7aef\u60c5\u51b5\uff0c\u4e00\u5b9a\u8981\u5199\u5148\u51fa\u6765 if (pHead == null) { return null; } RandomListNode curNode = pHead; // \u7b2c 1 \u6b65\uff1a\u6839\u636e next \u6307\u9488\u590d\u5236\u51fa\u4e00\u4e2a\u65b0\u65e7\u5408\u4e00\u7684\u94fe\u8868 // \u6b64\u65f6\uff0c\u5947\u6570\u7d22\u5f15\uff08\u4ece 1 \u5f00\u59cb\u8ba1\u7b97\uff09\u7684\u7ed3\u70b9\u662f\u65e7\u7684\u7ed3\u70b9\uff0c\u5076\u6570\u7d22\u5f15\u7684\u7ed3\u70b9\u662f\u65b0\u7684\u7ed3\u70b9 RandomListNode nextNode; RandomListNode copyNode; while (curNode != null) { nextNode = curNode.next; copyNode = new RandomListNode(curNode.label); curNode.next = copyNode; copyNode.next = nextNode; curNode = nextNode; } // \u7b2c 2 \u6b65\uff1a\u6839\u636e\u65e7\u7ed3\u70b9 random \u6307\u9488\uff0c\u7ed9\u65b0\u7ed3\u70b9\u7684 random \u6307\u9488\u505a\u51fa\u6b63\u786e\u7684\u6307\u5411 // \u6307\u9488\u590d\u4f4d\u5230\u8d77\u59cb\u7ed3\u70b9 curNode = pHead; while (curNode != null) { copyNode = curNode.next; nextNode = copyNode.next; // \u7279\u522b\u6ce8\u610f // \u7279\u522b\u6ce8\u610f // \u7279\u522b\u6ce8\u610f\uff1a\u6709\u7684\u7ed3\u70b9\u5f88\u53ef\u80fd random \u7684\u6307\u5411\u4e3a\u7a7a\uff08\u9898\u76ee\u4e2d\u660e\u786e\u8bf4\u660e\uff09 // \u6240\u4ee5\uff1a\u53ea\u8981\u9047\u5230 next \u5f15\u7528\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u5224\u65ad\u662f\u5426\u4e3a\u7a7a copyNode.random = curNode.random == null ? null : curNode.random.next; curNode = nextNode; } // \u7b2c 3 \u6b65\uff1a\u65e7\u7ed3\u70b9\u548c\u65b0\u7ed3\u70b9\u5206\u79bb\uff08\u62c6\u5206\u94fe\u8868\uff09 curNode = pHead; RandomListNode res = pHead.next; while (curNode != null) { copyNode = curNode.next; nextNode = copyNode.next; // \u6062\u590d\u539f\u59cb\u7ed3\u70b9 curNode.next = copyNode.next; // \u6062\u590d\u62f7\u8d1d\u7ed3\u70b9 // \u8fd9\u91cc\u4e5f\u8981\u540c\u6837\u6ce8\u610f\u7a7a\u6307\u9488\u7684\u95ee\u9898\uff0c\u514b\u9686\u7ed3\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u662f null copyNode.next = copyNode.next == null ? null : copyNode.next.next; curNode = nextNode; } return res; } } C++ \u5199\u6cd5\uff1a Java \u7248\u672c\u91cc\u9762\u8fd8\u6709\u4e00\u4e2a\u7f51\u53cb\u7684\u5199\u6cd5\u3002 \u601d\u8def2\uff1a\u4f7f\u7528\u54c8\u5e0c\u8868\uff0c\u590d\u5236\u51fa\u968f\u673a\u8bbf\u95ee\u7684\u6307\u9488\u3002 Python \u4ee3\u7801\uff1a class ListNode(object): def __init__(self, x): self.val = x self.next = None self.random = None class Solution(object): def copyRandomList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None: return None map = dict() dummy_node = ListNode(-1) # p \u6307\u9488\u7528\u4e8e\u65b0\u94fe\u8868\u7684 next \u6307\u9488\u8d4b\u503c p = dummy_node # \u904d\u5386\u4e00\u6b21\u94fe\u8868\uff0c\u505a\u4e24\u4ef6\u4e8b # 1\u3001\u590d\u5236\u7ed3\u70b9 # 2\u3001\u53ea\u7ba1 next \u6307\u9488 cur_node = head while cur_node: new_node = ListNode(cur_node.val) # \u628a\u65b0\u65e7\u7ed3\u70b9\u7684\u5bf9\u5e94\u5173\u7cfb\u653e\u5728\u4e00\u4e2a map \u91cc map[cur_node] = new_node cur_node = cur_node.next p.next = new_node p = new_node # \u63a5\u4e0b\u6765\u505a\u968f\u673a\u6307\u9488\u7684\u590d\u5236 for old_node, new_node in map.items(): # \u8981\u8bb0\u5f97\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\uff0c\u5426\u5219 None \u4e0d\u80fd\u4f5c\u4e3a map key if old_node.random: new_node.random = map[old_node.random] return dummy_node.next Java \u4ee3\u7801\uff1a public class Solution3 { public RandomListNode Clone(RandomListNode pHead) { Map<RandomListNode, RandomListNode> map = new HashMap<>(); RandomListNode curNode = pHead; // \u4f53\u4f1a\u8fd9\u91cc\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u7684\u5fc5\u8981\u6027 RandomListNode dummyNode = new RandomListNode(-1); RandomListNode p = dummyNode; // \u5b8c\u6210\u590d\u5236 next \u7ed3\u70b9\uff0c\u5e76\u4e14\u5c06\u5bf9\u5e94\u5173\u7cfb\u653e\u5165 Hash \u8868 while (curNode != null) { RandomListNode newNode = new RandomListNode(curNode.label); map.put(curNode, newNode); curNode = curNode.next; p.next = newNode; p = newNode; } // \u5b8c\u6210\u590d\u5236\u94fe\u8868\u7684 random \u6307\u9488\u7684\u8d4b\u503c Set<Map.Entry<RandomListNode, RandomListNode>> entrySet = map.entrySet(); for (Map.Entry<RandomListNode, RandomListNode> entry : entrySet) { entry.getValue().random = map.get(entry.getKey().random); } return dummyNode.next; } } Java \u4ee3\u7801\uff1a\u7279\u522b\u6ce8\u610f\uff1a\u5728\u590d\u5236\u201c\u6307\u9488\u201d\u7684\u65f6\u5019\uff0c\u5bf9\u7a7a\u5bf9\u8c61\u7684\u5224\u5b9a\uff0c\u753b\u56fe\u662f\u5341\u5206\u5173\u952e\u7684\u3002 class RandomListNode { int label; RandomListNode next = null; RandomListNode random = null; RandomListNode(int label) { this.label = label; } } public class Solution { public RandomListNode Clone(RandomListNode pHead) { // \u6781\u7aef\u60c5\u51b5\uff0c\u4e00\u5b9a\u8981\u5199\u5148\u51fa\u6765 if (pHead == null) { return null; } RandomListNode curNode = pHead; // \u7b2c 1 \u6b65\uff1a\u6839\u636e next \u6307\u9488\u590d\u5236\u51fa\u4e00\u4e2a\u65b0\u65e7\u5408\u4e00\u7684\u94fe\u8868 // \u6b64\u65f6\uff0c\u5947\u6570\u7d22\u5f15\uff08\u4ece 1 \u5f00\u59cb\u8ba1\u7b97\uff09\u7684\u7ed3\u70b9\u662f\u65e7\u7684\u7ed3\u70b9\uff0c\u5076\u6570\u7d22\u5f15\u7684\u7ed3\u70b9\u662f\u65b0\u7684\u7ed3\u70b9 RandomListNode nextNode; RandomListNode copyNode; while (curNode != null) { nextNode = curNode.next; copyNode = new RandomListNode(curNode.label); curNode.next = copyNode; copyNode.next = nextNode; curNode = nextNode; } // \u7b2c 2 \u6b65\uff1a\u6839\u636e\u65e7\u7ed3\u70b9 random \u6307\u9488\uff0c\u7ed9\u65b0\u7ed3\u70b9\u7684 random \u6307\u9488\u505a\u51fa\u6b63\u786e\u7684\u6307\u5411 // \u6307\u9488\u590d\u4f4d\u5230\u8d77\u59cb\u7ed3\u70b9 curNode = pHead; while (curNode != null) { copyNode = curNode.next; nextNode = copyNode.next; // \u7279\u522b\u6ce8\u610f // \u7279\u522b\u6ce8\u610f // \u7279\u522b\u6ce8\u610f\uff1a\u6709\u7684\u7ed3\u70b9\u5f88\u53ef\u80fd random \u7684\u6307\u5411\u4e3a\u7a7a\uff08\u9898\u76ee\u4e2d\u660e\u786e\u8bf4\u660e\uff09 // \u6240\u4ee5\uff1a\u53ea\u8981\u9047\u5230 next \u5f15\u7528\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u5224\u65ad\u662f\u5426\u4e3a\u7a7a copyNode.random = curNode.random == null ? null : curNode.random.next; curNode = nextNode; } // \u7b2c 3 \u6b65\uff1a\u65e7\u7ed3\u70b9\u548c\u65b0\u7ed3\u70b9\u5206\u79bb\uff08\u62c6\u5206\u94fe\u8868\uff09 curNode = pHead; RandomListNode res = pHead.next; while (curNode != null) { copyNode = curNode.next; nextNode = copyNode.next; // \u6062\u590d\u539f\u59cb\u7ed3\u70b9 curNode.next = copyNode.next; // \u6062\u590d\u62f7\u8d1d\u7ed3\u70b9 // \u8fd9\u91cc\u4e5f\u8981\u540c\u6837\u6ce8\u610f\u7a7a\u6307\u9488\u7684\u95ee\u9898\uff0c\u514b\u9686\u7ed3\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u662f null copyNode.next = copyNode.next == null ? null : copyNode.next.next; curNode = nextNode; } return res; } } Java \u4ee3\u7801\uff1a import java.util.HashMap; import java.util.Map; import java.util.Set; /** * \u4f7f\u7528 Hash \u8868\u7684\u65b9\u5f0f * * @author liwei */ public class Solution2 { public RandomListNode Clone(RandomListNode pHead) { Map<RandomListNode, RandomListNode> map = new HashMap<>(); RandomListNode curNode = pHead; // \u4f53\u4f1a\u8fd9\u91cc\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u7684\u5fc5\u8981\u6027 RandomListNode dummyNode = new RandomListNode(-1); RandomListNode p = dummyNode; // \u5b8c\u6210\u590d\u5236 next \u7ed3\u70b9\uff0c\u5e76\u4e14\u5c06\u5bf9\u5e94\u5173\u7cfb\u653e\u5165 Hash \u8868 while (curNode != null) { RandomListNode newNode = new RandomListNode(curNode.label); map.put(curNode, newNode); curNode = curNode.next; p.next = newNode; p = newNode; } // \u5b8c\u6210\u590d\u5236\u94fe\u8868\u7684 random \u6307\u9488\u7684\u8d4b\u503c Set<Map.Entry<RandomListNode, RandomListNode>> entrySet = map.entrySet(); for (Map.Entry<RandomListNode, RandomListNode> entry : entrySet) { entry.getValue().random = map.get(entry.getKey().random); } return dummyNode.next; } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":""},{"location":"36/","text":"\u5251\u6307 Offer 36. \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868 \u5251\u6307 Offer 36. \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868 \u7b2c 36 \u9898\uff1a\u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868\uff08\u5178\u578b\u9012\u5f52\u95ee\u9898\uff09 \u4f20\u9001\u95e8\uff1a \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8be5\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\u3002 \u8981\u6c42\u4e0d\u80fd\u521b\u5efa\u4efb\u4f55\u65b0\u7684\u7ed3\u70b9\uff0c\u53ea\u80fd\u8c03\u6574\u6811\u4e2d\u7ed3\u70b9\u6307\u9488\u7684\u6307\u5411\u3002 \u6ce8\u610f \uff1a \u9700\u8981\u8fd4\u56de\u53cc\u5411\u94fe\u8868\u6700\u5de6\u4fa7\u7684\u8282\u70b9\u3002 \u4f8b\u5982\uff0c\u8f93\u5165\u4e0b\u56fe\u4e2d\u5de6\u8fb9\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5219\u8f93\u51fa\u53f3\u8fb9\u7684\u6392\u5e8f\u53cc\u5411\u94fe\u8868\u3002 \u601d\u8def\uff1a \u5206\u6790\uff1a\u53c2\u8003\u89e3\u7b54\u6709\u4e00\u5b9a\u4ef7\u503c\uff0c\u8981\u597d\u597d\u7814\u7a76\u4e00\u4e0b\u3002\u753b\u56fe\u5c31\u6e05\u695a\u89e3\u6cd5\u4e86\u3002 Python \u4ee3\u7801\uff1a class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def convert(self, root): \"\"\" :type root: TreeNode :rtype: TreeNode \"\"\" if root is None: return None head, _ = self.__dfs(root) return head def __dfs(self, root): \"\"\" \u8fd4\u56de\u53cc\u5411\u94fe\u8868\u7684\u4e24\u7aef \"\"\" # \u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u662f\u53f6\u5b50\u7ed3\u70b9 if root.left is None and root.right is None: return (root, root) # \u5982\u679c\u6709\u5de6\u5b69\u5b50\uff0c\u8fd8\u6709\u53f3\u8fb9\u5b69\u5b50 if root.left and root.right: ll, lr = self.__dfs(root.left) rl, rr = self.__dfs(root.right) # \u4e0b\u9762\u7a7f\u9488\u5f15\u7ebf lr.right = root root.left = lr root.right = rl rl.left = root return (ll, rr) # \u8d70\u5230\u8fd9\u91cc\uff0c\u5c31\u662f\u4e8c\u8005\u4e4b\u4e00\u4e3a\u7a7a if root.left: ll, lr = self.__dfs(root.left) lr.right = root root.left = lr return (ll, root) if root.right: rl, rr = self.__dfs(root.right) root.right = rl rl.left = root return (root, rr) C++ \u4ee3\u7801\uff1a\u8fd4\u56de\u4e00\u4e2a pair Java \u4ee3\u7801\uff1a class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { private TreeNode linkedListTail; private TreeNode res; public TreeNode Convert(TreeNode pRootOfTree) { convert(pRootOfTree); return res; } /** * \u4e2d\u5e8f\u904d\u5386 * * @param root */ private void convert(TreeNode root) { if (root == null) { return; } convert(root.left); // \u4e2d\u5e8f\u904d\u5386\u771f\u6b63\u505a\u4e8b\u60c5\u7684\u5730\u65b9 if (linkedListTail == null) { // \u5bf9\u5e94\u521a\u5f00\u59cb\u7684\u65f6\u5019 linkedListTail = root; // \u5728\u6700\u5de6\u8fb9\u7684\u5730\u65b9\u8bb0\u5f55\u9700\u8981\u8fd4\u56de\u7684\u53cc\u5411\u94fe\u8868\u7684\u6839\u7ed3\u70b9 res = root; } else { linkedListTail.right = root; root.left = linkedListTail; linkedListTail = root; } convert(root.right); } } Python \u4ee3\u7801\uff1a class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def __init__(self): self.linked_list_tail = None self.res = None def convert(self, root): \"\"\" :type root: TreeNode :rtype: TreeNode \"\"\" self.__dfs(root) return self.res # \u4e2d\u5e8f\u904d\u5386 def __dfs(self, root): if root is None: return self.__dfs(root.left) if self.linked_list_tail is None: self.linked_list_tail = root self.res = root else: self.linked_list_tail.right = root root.left = self.linked_list_tail self.linked_list_tail = root self.__dfs(root.right) Java \u4ee3\u7801\uff1a\u5206\u6cbb\u7b97\u6cd5 public class Solution2 { public TreeNode convert(TreeNode root) { if (root == null) { return root; } TreeNode left = rightMost(root.left); TreeNode right = leftMost(root.right); convert(root.left); convert(root.right); if (left != null) { left.right = root; } root.left = left; if (right != null) { right.left = root; } root.right = right; // \u6700\u540e\u8fd4\u56de\u6700\u5de6\u8fb9\u7684\u7ed3\u70b9 while (root.left != null) { root = root.left; } return root; } TreeNode leftMost(TreeNode root) { if (root == null) { return null; } while (root.left != null) { root = root.left; } return root; } TreeNode rightMost(TreeNode root) { if (root == null) { return null; } while (root.right != null) { root = root.right; } return root; } } C++ \u4ee3\u7801\uff1a class Solution { public: TreeNode* convert(TreeNode* root) { if (!root) return root; stack<TreeNode*> st; while (root){ st.push(root); root = root->left; } TreeNode* ans = st.top(); TreeNode* last = NULL; while (!st.empty()){ TreeNode* tmp = st.top(); st.pop(); if (!last) last = tmp; else { last->right = tmp; tmp->left = last; last = tmp; } tmp = tmp->right; while (tmp){ st.push(tmp); tmp = tmp->left; } } return ans; } }; Java \u4ee3\u7801\uff1a /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { public TreeNode convert(TreeNode root) { if (root == null) return null; TreeNode dummy = new TreeNode(-1); TreeNode pre = dummy; Stack<TreeNode> stack = new Stack<>(); while (root != null || stack.size() != 0){ while (root != null){ stack.push(root); root = root.left; } if (stack.size() != 0){ TreeNode node = stack.pop(); pre.right = node; node.left = pre; pre = pre.right; root = node.right; } } dummy.right.left = null; dummy = dummy.right; return dummy; } } Java \u4ee3\u7801\uff1a class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { private TreeNode linkedListTail; private TreeNode res; public TreeNode Convert(TreeNode pRootOfTree) { convert(pRootOfTree); return res; } /** * \u4e2d\u5e8f\u904d\u5386 * * @param root */ private void convert(TreeNode root) { if (root == null) { return; } convert(root.left); // \u4e2d\u5e8f\u904d\u5386\u771f\u6b63\u505a\u4e8b\u60c5\u7684\u5730\u65b9 if (linkedListTail == null) { linkedListTail = root; // \u5728\u6700\u5de6\u8fb9\u7684\u5730\u65b9\u8bb0\u5f55\u9700\u8981\u8fd4\u56de\u7684\u53cc\u5411\u94fe\u8868\u7684\u6839\u7ed3\u70b9 res = root; } else { linkedListTail.right = root; root.left = linkedListTail; linkedListTail = root; } convert(root.right); } } \u53c2\u8003\u8d44\u6599\uff1ahttps://www.nowcoder.com/questionTerminal/947f6eb80d944a84850b0538bf0ec3a5 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 36. \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868"},{"location":"36/#offer-36","text":"\u5251\u6307 Offer 36. \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868","title":"\u5251\u6307 Offer 36. \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868"},{"location":"36/#36","text":"\u4f20\u9001\u95e8\uff1a \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8be5\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\u3002 \u8981\u6c42\u4e0d\u80fd\u521b\u5efa\u4efb\u4f55\u65b0\u7684\u7ed3\u70b9\uff0c\u53ea\u80fd\u8c03\u6574\u6811\u4e2d\u7ed3\u70b9\u6307\u9488\u7684\u6307\u5411\u3002 \u6ce8\u610f \uff1a \u9700\u8981\u8fd4\u56de\u53cc\u5411\u94fe\u8868\u6700\u5de6\u4fa7\u7684\u8282\u70b9\u3002 \u4f8b\u5982\uff0c\u8f93\u5165\u4e0b\u56fe\u4e2d\u5de6\u8fb9\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5219\u8f93\u51fa\u53f3\u8fb9\u7684\u6392\u5e8f\u53cc\u5411\u94fe\u8868\u3002 \u601d\u8def\uff1a \u5206\u6790\uff1a\u53c2\u8003\u89e3\u7b54\u6709\u4e00\u5b9a\u4ef7\u503c\uff0c\u8981\u597d\u597d\u7814\u7a76\u4e00\u4e0b\u3002\u753b\u56fe\u5c31\u6e05\u695a\u89e3\u6cd5\u4e86\u3002 Python \u4ee3\u7801\uff1a class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def convert(self, root): \"\"\" :type root: TreeNode :rtype: TreeNode \"\"\" if root is None: return None head, _ = self.__dfs(root) return head def __dfs(self, root): \"\"\" \u8fd4\u56de\u53cc\u5411\u94fe\u8868\u7684\u4e24\u7aef \"\"\" # \u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u662f\u53f6\u5b50\u7ed3\u70b9 if root.left is None and root.right is None: return (root, root) # \u5982\u679c\u6709\u5de6\u5b69\u5b50\uff0c\u8fd8\u6709\u53f3\u8fb9\u5b69\u5b50 if root.left and root.right: ll, lr = self.__dfs(root.left) rl, rr = self.__dfs(root.right) # \u4e0b\u9762\u7a7f\u9488\u5f15\u7ebf lr.right = root root.left = lr root.right = rl rl.left = root return (ll, rr) # \u8d70\u5230\u8fd9\u91cc\uff0c\u5c31\u662f\u4e8c\u8005\u4e4b\u4e00\u4e3a\u7a7a if root.left: ll, lr = self.__dfs(root.left) lr.right = root root.left = lr return (ll, root) if root.right: rl, rr = self.__dfs(root.right) root.right = rl rl.left = root return (root, rr) C++ \u4ee3\u7801\uff1a\u8fd4\u56de\u4e00\u4e2a pair Java \u4ee3\u7801\uff1a class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { private TreeNode linkedListTail; private TreeNode res; public TreeNode Convert(TreeNode pRootOfTree) { convert(pRootOfTree); return res; } /** * \u4e2d\u5e8f\u904d\u5386 * * @param root */ private void convert(TreeNode root) { if (root == null) { return; } convert(root.left); // \u4e2d\u5e8f\u904d\u5386\u771f\u6b63\u505a\u4e8b\u60c5\u7684\u5730\u65b9 if (linkedListTail == null) { // \u5bf9\u5e94\u521a\u5f00\u59cb\u7684\u65f6\u5019 linkedListTail = root; // \u5728\u6700\u5de6\u8fb9\u7684\u5730\u65b9\u8bb0\u5f55\u9700\u8981\u8fd4\u56de\u7684\u53cc\u5411\u94fe\u8868\u7684\u6839\u7ed3\u70b9 res = root; } else { linkedListTail.right = root; root.left = linkedListTail; linkedListTail = root; } convert(root.right); } } Python \u4ee3\u7801\uff1a class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def __init__(self): self.linked_list_tail = None self.res = None def convert(self, root): \"\"\" :type root: TreeNode :rtype: TreeNode \"\"\" self.__dfs(root) return self.res # \u4e2d\u5e8f\u904d\u5386 def __dfs(self, root): if root is None: return self.__dfs(root.left) if self.linked_list_tail is None: self.linked_list_tail = root self.res = root else: self.linked_list_tail.right = root root.left = self.linked_list_tail self.linked_list_tail = root self.__dfs(root.right) Java \u4ee3\u7801\uff1a\u5206\u6cbb\u7b97\u6cd5 public class Solution2 { public TreeNode convert(TreeNode root) { if (root == null) { return root; } TreeNode left = rightMost(root.left); TreeNode right = leftMost(root.right); convert(root.left); convert(root.right); if (left != null) { left.right = root; } root.left = left; if (right != null) { right.left = root; } root.right = right; // \u6700\u540e\u8fd4\u56de\u6700\u5de6\u8fb9\u7684\u7ed3\u70b9 while (root.left != null) { root = root.left; } return root; } TreeNode leftMost(TreeNode root) { if (root == null) { return null; } while (root.left != null) { root = root.left; } return root; } TreeNode rightMost(TreeNode root) { if (root == null) { return null; } while (root.right != null) { root = root.right; } return root; } } C++ \u4ee3\u7801\uff1a class Solution { public: TreeNode* convert(TreeNode* root) { if (!root) return root; stack<TreeNode*> st; while (root){ st.push(root); root = root->left; } TreeNode* ans = st.top(); TreeNode* last = NULL; while (!st.empty()){ TreeNode* tmp = st.top(); st.pop(); if (!last) last = tmp; else { last->right = tmp; tmp->left = last; last = tmp; } tmp = tmp->right; while (tmp){ st.push(tmp); tmp = tmp->left; } } return ans; } }; Java \u4ee3\u7801\uff1a /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { public TreeNode convert(TreeNode root) { if (root == null) return null; TreeNode dummy = new TreeNode(-1); TreeNode pre = dummy; Stack<TreeNode> stack = new Stack<>(); while (root != null || stack.size() != 0){ while (root != null){ stack.push(root); root = root.left; } if (stack.size() != 0){ TreeNode node = stack.pop(); pre.right = node; node.left = pre; pre = pre.right; root = node.right; } } dummy.right.left = null; dummy = dummy.right; return dummy; } } Java \u4ee3\u7801\uff1a class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { private TreeNode linkedListTail; private TreeNode res; public TreeNode Convert(TreeNode pRootOfTree) { convert(pRootOfTree); return res; } /** * \u4e2d\u5e8f\u904d\u5386 * * @param root */ private void convert(TreeNode root) { if (root == null) { return; } convert(root.left); // \u4e2d\u5e8f\u904d\u5386\u771f\u6b63\u505a\u4e8b\u60c5\u7684\u5730\u65b9 if (linkedListTail == null) { linkedListTail = root; // \u5728\u6700\u5de6\u8fb9\u7684\u5730\u65b9\u8bb0\u5f55\u9700\u8981\u8fd4\u56de\u7684\u53cc\u5411\u94fe\u8868\u7684\u6839\u7ed3\u70b9 res = root; } else { linkedListTail.right = root; root.left = linkedListTail; linkedListTail = root; } convert(root.right); } } \u53c2\u8003\u8d44\u6599\uff1ahttps://www.nowcoder.com/questionTerminal/947f6eb80d944a84850b0538bf0ec3a5 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 36 \u9898\uff1a\u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868\uff08\u5178\u578b\u9012\u5f52\u95ee\u9898\uff09"},{"location":"37/","text":"\u5251\u6307 Offer 37. \u5e8f\u5217\u5316\u4e8c\u53c9\u6811 \u5251\u6307 Offer 37. \u5e8f\u5217\u5316\u4e8c\u53c9\u6811 \u7b2c 37 \u9898\uff1a\u5e8f\u5217\u5316\u4e8c\u53c9\u6811 \u4f20\u9001\u95e8\uff1a \u5e8f\u5217\u5316\u4e8c\u53c9\u6811 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u7528\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u3002 \u60a8\u9700\u8981\u786e\u4fdd\u4e8c\u53c9\u6811\u53ef\u4ee5\u5e8f\u5217\u5316\u4e3a\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u6b64\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u539f\u59cb\u6811\u7ed3\u6784\u3002 \u6837\u4f8b\uff1a \u4f60\u53ef\u4ee5\u5e8f\u5217\u5316\u5982\u4e0b\u7684\u4e8c\u53c9\u6811 8 / \\ 12 2 / \\ 6 4 \u4e3a\uff1a \"[8, 12, 2, null, null, 6, 4, null, null, null, null]\" \u6ce8\u610f : \u4ee5\u4e0a\u7684\u683c\u5f0f\u662f AcWing \u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u7684\u65b9\u5f0f\uff0c\u4f60\u4e0d\u5fc5\u4e00\u5b9a\u6309\u7167\u6b64\u683c\u5f0f\uff0c\u6240\u4ee5\u53ef\u4ee5\u8bbe\u8ba1\u51fa\u4e00\u4e9b\u65b0\u7684\u6784\u9020\u65b9\u5f0f\u3002 \u5206\u6790\uff1a\u603b\u4e4b\u5c31\u662f\u524d\u5e8f\u904d\u5386\u3002\u56e0\u4e3a\u201c\u524d\u5e8f\u904d\u5386\u201d\u6709\u5f88\u597d\u7684\u6027\u8d28\uff1a \u8bf4\u660e\uff1a\u6839\u636e\u4e0a\u9762\u7684\u5e8f\u5217\u5316\u89c4\u5219\uff0c\u4e0a\u56fe\u4e2d\u7684\u4e8c\u53c9\u6811\u88ab\u5e8f\u5217\u5316\u6210\u5b57\u7b26\u4e32 \"1\uff0c2\uff0c4\uff0c$\uff0c$\uff0c$\uff0c3\uff0c5\uff0c$\uff0c$\uff0c6\uff0c$\uff0c$\" \u3002 Python \u4ee3\u7801\uff1a class Solution: # \u524d\u5e8f\u904d\u5386 def serialize(self, root): \"\"\"Encodes a tree to a single string. :type root: TreeNode :rtype: str \"\"\" res = '' if root is None: return '! ' res += str(root.val) res += ' ' res += self.serialize(root.left) res += self.serialize(root.right) return res def deserialize(self, data): \"\"\"Decodes your encoded data to tree. :type data: str :rtype: TreeNode \"\"\" arr = data.split(' ') return self.__helper(arr) def __helper(self, arr): if arr: top = arr.pop(0) if top != '!': root = TreeNode(int(top)) root.left = self.__helper(arr) root.right = self.__helper(arr) return root else: return None Python \u4ee3\u7801\uff1a\u5e8f\u5217\u5316\u65f6\u5019\uff0c\u4e0d\u7528\u9012\u5f52\uff0c\u7528\u6808\u7684\u5199\u6cd5 class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution: # \u524d\u5e8f\u904d\u5386 def serialize(self, root): \"\"\"Encodes a tree to a single string. :type root: TreeNode :rtype: str \"\"\" res = [] if root is None: return '!' stack = [root] while stack: top = stack.pop() if top is None: res.append('!') else: stack.append(top.right) stack.append(top.left) res.append(str(top.val)) return ' '.join(res) def deserialize(self, data): \"\"\"Decodes your encoded data to tree. :type data: str :rtype: TreeNode \"\"\" queue = data.split(' ') return self.__build_tree(queue) def __build_tree(self, queue): if queue: top = queue.pop(0) if top != '!': root = TreeNode(int(top)) root.left = self.__build_tree(queue) root.right = self.__build_tree(queue) return root else: return None # \u5982\u679c queue \u4e3a\u7a7a\uff0c\u5c31\u4ec0\u4e48\u90fd\u4e0d\u505a Java \u4ee3\u7801\uff1a\u5e8f\u5217\u5316\uff1a\u524d\u5e8f\u904d\u5386\u4e8c\u53c9\u6811\u5b58\u5165\u5b57\u7b26\u4e32\u4e2d\uff0c\u53cd\u5e8f\u5217\u5316\uff1a\u6839\u636e\u524d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811 import java.util.LinkedList; class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { /** * \u5e8f\u5217\u5316\u4e00\u68f5\u4e8c\u53c9\u6811\uff08\u5176\u5b9e\u5c31\u662f\u524d\u5e8f\u904d\u5386\uff09 * @param root * @return */ public String serialize(TreeNode root) { if (root == null) { return \"$,\"; } StringBuilder sb = new StringBuilder(root.val + \",\"); sb.append(serialize(root.left)); sb.append(serialize(root.right)); return sb.toString(); } // \u53cd\u5e8f\u5217\u5316\u4e00\u68f5\u4e8c\u53c9\u6811 public TreeNode deserialize(String str) { String[] strArr = str.split(\",\"); LinkedList<String> queue = new LinkedList<>(); for (String s : strArr) { queue.addLast(s); } return preOrder(queue); } // \u4f7f\u7528\u961f\u5217\u5c31\u5b9e\u73b0\u4e86\u8fed\u4ee3\u5668\u7684\u529f\u80fd private TreeNode preOrder(LinkedList<String> queue) { String s = queue.removeFirst(); if (!\"$\".endsWith(s)) { TreeNode newNode = new TreeNode(Integer.parseInt(s)); newNode.left = preOrder(queue); newNode.right = preOrder(queue); // \u7406\u89e3\u5c06\u65b0\u521b\u5efa\u7684\u7ed3\u70b9\u8fd4\u56de\u56de\u53bb\u7684\u5fc5\u8981\u6027 return newNode; } // \u662f \"$\" \u5c31\u8fd4\u56de\u7a7a\u6307\u9488\uff0c\u6ce8\u610f\u8fd9\u91cc\u7684\u9012\u5f52\u65b9\u6cd5\uff0c\u4f1a\u628a\u7a7a\u6307\u9488\u63a5\u5728\u539f\u6765\u7684\u6811\u8282\u70b9\u4e0a return null; } } \u53e6\u4e00\u79cd\u5199\u6cd5\uff1a Java \u4ee3\u7801\uff1a import java.util.LinkedList; // \u524d\u5e8f\u904d\u5386 public class Solution2 { String Serialize(TreeNode root) { StringBuilder stringBuilder = new StringBuilder(); preOrder(root, stringBuilder); return stringBuilder.toString(); } // \u4e0a\u9762\u51fd\u6570\u7684\u8f85\u52a9\u51fd\u6570 private void preOrder(TreeNode node, StringBuilder stringBuilder) { if (node == null) { stringBuilder.append(\"#\"); stringBuilder.append(\",\"); return; } stringBuilder.append(node.val); stringBuilder.append(\",\"); preOrder(node.left, stringBuilder); preOrder(node.right, stringBuilder); } TreeNode Deserialize(String str) { String[] strings = str.split(\",\"); int size = strings.length; System.out.println(size); LinkedList<String> queue = new LinkedList<>(); for (int i = 0; i < size; i++) { queue.addLast(strings[i]); } return inOrderGenerate(queue); } private TreeNode inOrderGenerate(LinkedList<String> queue) { if (queue.isEmpty()) { return null; } String s = queue.removeFirst(); if (!\"#\".equals(s)) { TreeNode root = new TreeNode(Integer.parseInt(s)); root.left = inOrderGenerate(queue); root.right = inOrderGenerate(queue); return root; } return null; } } C++ \u4ee3\u7801\uff1a /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public: // Encodes a tree to a single string. string serialize(TreeNode* root) { string res; dfs_s(root, res); return res; } void dfs_s(TreeNode *root, string &res) { if (!root) { res += \"null \"; return; } res += to_string(root->val) + ' '; dfs_s(root->left, res); dfs_s(root->right, res); } // Decodes your encoded data to tree. TreeNode* deserialize(string data) { int u = 0; return dfs_d(data, u); } TreeNode* dfs_d(string &data, int &u) { if (u == data.size()) return NULL; int k = u; while (data[k] != ' ') k ++ ; if (data[u] == 'n') { u = k + 1; return NULL; } int val = 0; for (int i = u; i < k; i ++ ) val = val * 10 + data[i] - '0'; u = k + 1; auto root = new TreeNode(val); root->left = dfs_d(data, u); root->right = dfs_d(data, u); return root; } }; \u4f5c\u8005\uff1ayxc \u94fe\u63a5\uff1ahttps://www.acwing.com/activity/content/code/content/20710/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 37. \u5e8f\u5217\u5316\u4e8c\u53c9\u6811"},{"location":"37/#offer-37","text":"\u5251\u6307 Offer 37. \u5e8f\u5217\u5316\u4e8c\u53c9\u6811","title":"\u5251\u6307 Offer 37. \u5e8f\u5217\u5316\u4e8c\u53c9\u6811"},{"location":"37/#37","text":"\u4f20\u9001\u95e8\uff1a \u5e8f\u5217\u5316\u4e8c\u53c9\u6811 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u7528\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u3002 \u60a8\u9700\u8981\u786e\u4fdd\u4e8c\u53c9\u6811\u53ef\u4ee5\u5e8f\u5217\u5316\u4e3a\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u6b64\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u539f\u59cb\u6811\u7ed3\u6784\u3002 \u6837\u4f8b\uff1a \u4f60\u53ef\u4ee5\u5e8f\u5217\u5316\u5982\u4e0b\u7684\u4e8c\u53c9\u6811 8 / \\ 12 2 / \\ 6 4 \u4e3a\uff1a \"[8, 12, 2, null, null, 6, 4, null, null, null, null]\" \u6ce8\u610f : \u4ee5\u4e0a\u7684\u683c\u5f0f\u662f AcWing \u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u7684\u65b9\u5f0f\uff0c\u4f60\u4e0d\u5fc5\u4e00\u5b9a\u6309\u7167\u6b64\u683c\u5f0f\uff0c\u6240\u4ee5\u53ef\u4ee5\u8bbe\u8ba1\u51fa\u4e00\u4e9b\u65b0\u7684\u6784\u9020\u65b9\u5f0f\u3002 \u5206\u6790\uff1a\u603b\u4e4b\u5c31\u662f\u524d\u5e8f\u904d\u5386\u3002\u56e0\u4e3a\u201c\u524d\u5e8f\u904d\u5386\u201d\u6709\u5f88\u597d\u7684\u6027\u8d28\uff1a \u8bf4\u660e\uff1a\u6839\u636e\u4e0a\u9762\u7684\u5e8f\u5217\u5316\u89c4\u5219\uff0c\u4e0a\u56fe\u4e2d\u7684\u4e8c\u53c9\u6811\u88ab\u5e8f\u5217\u5316\u6210\u5b57\u7b26\u4e32 \"1\uff0c2\uff0c4\uff0c$\uff0c$\uff0c$\uff0c3\uff0c5\uff0c$\uff0c$\uff0c6\uff0c$\uff0c$\" \u3002 Python \u4ee3\u7801\uff1a class Solution: # \u524d\u5e8f\u904d\u5386 def serialize(self, root): \"\"\"Encodes a tree to a single string. :type root: TreeNode :rtype: str \"\"\" res = '' if root is None: return '! ' res += str(root.val) res += ' ' res += self.serialize(root.left) res += self.serialize(root.right) return res def deserialize(self, data): \"\"\"Decodes your encoded data to tree. :type data: str :rtype: TreeNode \"\"\" arr = data.split(' ') return self.__helper(arr) def __helper(self, arr): if arr: top = arr.pop(0) if top != '!': root = TreeNode(int(top)) root.left = self.__helper(arr) root.right = self.__helper(arr) return root else: return None Python \u4ee3\u7801\uff1a\u5e8f\u5217\u5316\u65f6\u5019\uff0c\u4e0d\u7528\u9012\u5f52\uff0c\u7528\u6808\u7684\u5199\u6cd5 class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution: # \u524d\u5e8f\u904d\u5386 def serialize(self, root): \"\"\"Encodes a tree to a single string. :type root: TreeNode :rtype: str \"\"\" res = [] if root is None: return '!' stack = [root] while stack: top = stack.pop() if top is None: res.append('!') else: stack.append(top.right) stack.append(top.left) res.append(str(top.val)) return ' '.join(res) def deserialize(self, data): \"\"\"Decodes your encoded data to tree. :type data: str :rtype: TreeNode \"\"\" queue = data.split(' ') return self.__build_tree(queue) def __build_tree(self, queue): if queue: top = queue.pop(0) if top != '!': root = TreeNode(int(top)) root.left = self.__build_tree(queue) root.right = self.__build_tree(queue) return root else: return None # \u5982\u679c queue \u4e3a\u7a7a\uff0c\u5c31\u4ec0\u4e48\u90fd\u4e0d\u505a Java \u4ee3\u7801\uff1a\u5e8f\u5217\u5316\uff1a\u524d\u5e8f\u904d\u5386\u4e8c\u53c9\u6811\u5b58\u5165\u5b57\u7b26\u4e32\u4e2d\uff0c\u53cd\u5e8f\u5217\u5316\uff1a\u6839\u636e\u524d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811 import java.util.LinkedList; class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { /** * \u5e8f\u5217\u5316\u4e00\u68f5\u4e8c\u53c9\u6811\uff08\u5176\u5b9e\u5c31\u662f\u524d\u5e8f\u904d\u5386\uff09 * @param root * @return */ public String serialize(TreeNode root) { if (root == null) { return \"$,\"; } StringBuilder sb = new StringBuilder(root.val + \",\"); sb.append(serialize(root.left)); sb.append(serialize(root.right)); return sb.toString(); } // \u53cd\u5e8f\u5217\u5316\u4e00\u68f5\u4e8c\u53c9\u6811 public TreeNode deserialize(String str) { String[] strArr = str.split(\",\"); LinkedList<String> queue = new LinkedList<>(); for (String s : strArr) { queue.addLast(s); } return preOrder(queue); } // \u4f7f\u7528\u961f\u5217\u5c31\u5b9e\u73b0\u4e86\u8fed\u4ee3\u5668\u7684\u529f\u80fd private TreeNode preOrder(LinkedList<String> queue) { String s = queue.removeFirst(); if (!\"$\".endsWith(s)) { TreeNode newNode = new TreeNode(Integer.parseInt(s)); newNode.left = preOrder(queue); newNode.right = preOrder(queue); // \u7406\u89e3\u5c06\u65b0\u521b\u5efa\u7684\u7ed3\u70b9\u8fd4\u56de\u56de\u53bb\u7684\u5fc5\u8981\u6027 return newNode; } // \u662f \"$\" \u5c31\u8fd4\u56de\u7a7a\u6307\u9488\uff0c\u6ce8\u610f\u8fd9\u91cc\u7684\u9012\u5f52\u65b9\u6cd5\uff0c\u4f1a\u628a\u7a7a\u6307\u9488\u63a5\u5728\u539f\u6765\u7684\u6811\u8282\u70b9\u4e0a return null; } } \u53e6\u4e00\u79cd\u5199\u6cd5\uff1a Java \u4ee3\u7801\uff1a import java.util.LinkedList; // \u524d\u5e8f\u904d\u5386 public class Solution2 { String Serialize(TreeNode root) { StringBuilder stringBuilder = new StringBuilder(); preOrder(root, stringBuilder); return stringBuilder.toString(); } // \u4e0a\u9762\u51fd\u6570\u7684\u8f85\u52a9\u51fd\u6570 private void preOrder(TreeNode node, StringBuilder stringBuilder) { if (node == null) { stringBuilder.append(\"#\"); stringBuilder.append(\",\"); return; } stringBuilder.append(node.val); stringBuilder.append(\",\"); preOrder(node.left, stringBuilder); preOrder(node.right, stringBuilder); } TreeNode Deserialize(String str) { String[] strings = str.split(\",\"); int size = strings.length; System.out.println(size); LinkedList<String> queue = new LinkedList<>(); for (int i = 0; i < size; i++) { queue.addLast(strings[i]); } return inOrderGenerate(queue); } private TreeNode inOrderGenerate(LinkedList<String> queue) { if (queue.isEmpty()) { return null; } String s = queue.removeFirst(); if (!\"#\".equals(s)) { TreeNode root = new TreeNode(Integer.parseInt(s)); root.left = inOrderGenerate(queue); root.right = inOrderGenerate(queue); return root; } return null; } } C++ \u4ee3\u7801\uff1a /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public: // Encodes a tree to a single string. string serialize(TreeNode* root) { string res; dfs_s(root, res); return res; } void dfs_s(TreeNode *root, string &res) { if (!root) { res += \"null \"; return; } res += to_string(root->val) + ' '; dfs_s(root->left, res); dfs_s(root->right, res); } // Decodes your encoded data to tree. TreeNode* deserialize(string data) { int u = 0; return dfs_d(data, u); } TreeNode* dfs_d(string &data, int &u) { if (u == data.size()) return NULL; int k = u; while (data[k] != ' ') k ++ ; if (data[u] == 'n') { u = k + 1; return NULL; } int val = 0; for (int i = u; i < k; i ++ ) val = val * 10 + data[i] - '0'; u = k + 1; auto root = new TreeNode(val); root->left = dfs_d(data, u); root->right = dfs_d(data, u); return root; } }; \u4f5c\u8005\uff1ayxc \u94fe\u63a5\uff1ahttps://www.acwing.com/activity/content/code/content/20710/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 37 \u9898\uff1a\u5e8f\u5217\u5316\u4e8c\u53c9\u6811"},{"location":"38/","text":"\u5251\u6307 Offer 38. \u5b57\u7b26\u4e32\u7684\u6392\u5217 \u5251\u6307 Offer 38. \u5b57\u7b26\u4e32\u7684\u6392\u5217 \uff1b \u6570\u5b57\u6392\u5217 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u4f20\u9001\u95e8\uff1a \u8f93\u5165\u4e00\u7ec4\u6570\u5b57\uff08\u53ef\u80fd\u5305\u542b\u91cd\u590d\u6570\u5b57\uff09\uff0c\u8f93\u51fa\u5176\u6240\u6709\u7684\u6392\u5217\u65b9\u5f0f\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,3] \u8f93\u51fa\uff1a [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ] \u5206\u6790\uff1a\u516b\u7687\u540e\u95ee\u9898\u6839\u636e\u6392\u5217\u7ec4\u5408\u6765\u6c42\u89e3\uff0c\u5173\u952e\u662f\u5224\u5b9a\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u89e3\u3002\u56de\u6eaf\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n!)$\u3002 \u9898\u76ee\u63cf\u8ff0\uff1a\u8ddf LeetCode 47. Permutations II \u4e00\u6a21\u4e00\u6837\uff0c\u90fd\u662f\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002\u6ce8\u610f\u533a\u5206\u4e0a\u4e00\u9053\u9898 LeetCode 46. Permutations \u3002 Python \u4ee3\u7801\uff1a\u5b66\u4f1a\u4f7f\u7528\u4f4d\u8fd0\u7b97\u5224\u91cd class Solution: def permutation(self, nums): \"\"\" :type nums: List[int] :rtype: List[List[int]] \"\"\" l = len(nums) res = [] if l == 0: return res # \u56e0\u4e3a\u542b\u6709\u91cd\u590d\u6570\u7ec4\uff0c\u6240\u4ee5\u5148\u6392\u5e8f nums.sort() path = [0 for _ in range(l)] self.__dfs(nums, 0, 0, path, 0, res) return res def __dfs(self, nums, index, start, path, state, res): if index == len(nums): res.append(path[:]) return if index == 0 or nums[index] != nums[index - 1]: start = 0 for i in range(start, len(nums)): if (state >> i & 1) == 0: path[i] = nums[index] self.__dfs(nums, index + 1, i + 1, path, state + (1 << i), res) Java \u4ee3\u7801\uff1a import java.util.ArrayList; import java.util.Stack; class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { // \u4f7f\u7528\u641c\u7d22\u7684\u7b56\u7565\u53ef\u4ee5\u5b8c\u6210 public ArrayList<ArrayList<Integer>> FindPath(TreeNode root, int target) { ArrayList<ArrayList<Integer>> res = new ArrayList<>(); Stack<Integer> pre = new Stack<>(); findPath(root, target, pre, res); return res; } private void findPath(TreeNode root, int target, Stack<Integer> pre, ArrayList<ArrayList<Integer>> res) { if (root == null || root.val > target) { return; } // \u6ce8\u610f\uff1a\u9898\u76ee\u4e2d\u95ee\u7684\u662f\u5230\u53f6\u5b50\u7ed3\u70b9 if (root.val == target && root.left == null && root.right == null) { pre.add(root.val); res.add(new ArrayList<>(pre)); pre.pop(); return; } assert root.val < target && root != null; pre.add(root.val); findPath(root.left, target - root.val, pre, res); findPath(root.right, target - root.val, pre, res); pre.pop(); } public static void main(String[] args) { TreeNode node1 = new TreeNode(1); TreeNode node2 = new TreeNode(2); TreeNode node3 = new TreeNode(3); TreeNode node4 = new TreeNode(4); TreeNode node8 = new TreeNode(8); TreeNode node7 = new TreeNode(7); node1.left = node2; node1.right = node3; node2.left = node4; node2.right = node8; node3.left = node7; Solution solution = new Solution(); ArrayList<ArrayList<Integer>> findPath = solution.FindPath(node1, 11); System.out.println(findPath); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 38. \u5b57\u7b26\u4e32\u7684\u6392\u5217"},{"location":"38/#offer-38","text":"\u5251\u6307 Offer 38. \u5b57\u7b26\u4e32\u7684\u6392\u5217 \uff1b \u6570\u5b57\u6392\u5217 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002","title":"\u5251\u6307 Offer 38. \u5b57\u7b26\u4e32\u7684\u6392\u5217"},{"location":"38/#_1","text":"\u4f20\u9001\u95e8\uff1a \u8f93\u5165\u4e00\u7ec4\u6570\u5b57\uff08\u53ef\u80fd\u5305\u542b\u91cd\u590d\u6570\u5b57\uff09\uff0c\u8f93\u51fa\u5176\u6240\u6709\u7684\u6392\u5217\u65b9\u5f0f\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,3] \u8f93\u51fa\uff1a [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ] \u5206\u6790\uff1a\u516b\u7687\u540e\u95ee\u9898\u6839\u636e\u6392\u5217\u7ec4\u5408\u6765\u6c42\u89e3\uff0c\u5173\u952e\u662f\u5224\u5b9a\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u89e3\u3002\u56de\u6eaf\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n!)$\u3002 \u9898\u76ee\u63cf\u8ff0\uff1a\u8ddf LeetCode 47. Permutations II \u4e00\u6a21\u4e00\u6837\uff0c\u90fd\u662f\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002\u6ce8\u610f\u533a\u5206\u4e0a\u4e00\u9053\u9898 LeetCode 46. Permutations \u3002 Python \u4ee3\u7801\uff1a\u5b66\u4f1a\u4f7f\u7528\u4f4d\u8fd0\u7b97\u5224\u91cd class Solution: def permutation(self, nums): \"\"\" :type nums: List[int] :rtype: List[List[int]] \"\"\" l = len(nums) res = [] if l == 0: return res # \u56e0\u4e3a\u542b\u6709\u91cd\u590d\u6570\u7ec4\uff0c\u6240\u4ee5\u5148\u6392\u5e8f nums.sort() path = [0 for _ in range(l)] self.__dfs(nums, 0, 0, path, 0, res) return res def __dfs(self, nums, index, start, path, state, res): if index == len(nums): res.append(path[:]) return if index == 0 or nums[index] != nums[index - 1]: start = 0 for i in range(start, len(nums)): if (state >> i & 1) == 0: path[i] = nums[index] self.__dfs(nums, index + 1, i + 1, path, state + (1 << i), res) Java \u4ee3\u7801\uff1a import java.util.ArrayList; import java.util.Stack; class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } public class Solution { // \u4f7f\u7528\u641c\u7d22\u7684\u7b56\u7565\u53ef\u4ee5\u5b8c\u6210 public ArrayList<ArrayList<Integer>> FindPath(TreeNode root, int target) { ArrayList<ArrayList<Integer>> res = new ArrayList<>(); Stack<Integer> pre = new Stack<>(); findPath(root, target, pre, res); return res; } private void findPath(TreeNode root, int target, Stack<Integer> pre, ArrayList<ArrayList<Integer>> res) { if (root == null || root.val > target) { return; } // \u6ce8\u610f\uff1a\u9898\u76ee\u4e2d\u95ee\u7684\u662f\u5230\u53f6\u5b50\u7ed3\u70b9 if (root.val == target && root.left == null && root.right == null) { pre.add(root.val); res.add(new ArrayList<>(pre)); pre.pop(); return; } assert root.val < target && root != null; pre.add(root.val); findPath(root.left, target - root.val, pre, res); findPath(root.right, target - root.val, pre, res); pre.pop(); } public static void main(String[] args) { TreeNode node1 = new TreeNode(1); TreeNode node2 = new TreeNode(2); TreeNode node3 = new TreeNode(3); TreeNode node4 = new TreeNode(4); TreeNode node8 = new TreeNode(8); TreeNode node7 = new TreeNode(7); node1.left = node2; node1.right = node3; node2.left = node4; node2.right = node8; node3.left = node7; Solution solution = new Solution(); ArrayList<ArrayList<Integer>> findPath = solution.FindPath(node1, 11); System.out.println(findPath); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":""},{"location":"39/","text":"\u5251\u6307 Offer 39. \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 \u5251\u6307 Offer 39. \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 \uff1b \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u4f20\u9001\u95e8\uff1a \u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u8bf7\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\u3002 \u5047\u8bbe\u6570\u7ec4\u975e\u7a7a\uff0c\u5e76\u4e14\u4e00\u5b9a\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5b57\u3002 \u601d\u8003\u9898 \uff1a \u5047\u8bbe\u8981\u6c42\u53ea\u80fd\u4f7f\u7528 $O(n)$ \u7684\u65f6\u95f4\u548c\u989d\u5916 $O(1)$ \u7684\u7a7a\u95f4\uff0c\u8be5\u600e\u4e48\u505a\u5462\uff1f \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,1,1,3] \u8f93\u51fa\uff1a1 \u601d\u8def1\uff1a\u9996\u5148\u6392\u5e8f\uff0c\u4e2d\u95f4\u90a3\u4e2a\u6570\uff0c\u4e00\u5b9a\u662f\u8981\u6c42\u7684\u3002 \u601d\u8def2\uff1a\u5c06\u9996\u6b21\u51fa\u73b0\u7684\u6570 count + 1 \uff0c\u4e0e\u4e4b\u540e\u7684\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u76f8\u7b49\u5219 +1 \uff0c\u5426\u5219 -1 \uff0c\u6700\u540e\u8fdb\u884c\u6821\u9a8c\u662f\u5426\u8d85\u8fc7\u957f\u5ea6\u7684\u4e00\u534a\u3002\u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u51fa\u73b0\u7684\u6b21\u6570\u6bd4\u5176\u4ed6\u6240\u6709\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u7684\u548c\u8fd8\u8981\u591a\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5728\u904d\u5386\u6570\u7ec4\u7684\u65f6\u5019\u4fdd\u5b58\u4e24\u4e2a\u503c\uff1a\u4e00\u4e2a\u662f\u6570\u7ec4\u7684\u4e00\u4e2a\u6570\u5b57\uff0c\u4e00\u4e2a\u662f\u6b21\u6570\u3002\u5f53\u6211\u4eec\u904d\u5386\u5230\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u65f6\u5019\uff0c\u5982\u679c\u4e0b\u4e00\u4e2a\u6570\u5b57\u548c\u6211\u4eec\u4e4b\u524d\u4fdd\u5b58\u7684\u6570\u5b57\u76f8\u540c\uff0c\u5219\u6b21\u6570\u52a0 $1$\uff1b\u5982\u679c\u4e0b\u4e00\u4e2a\u6570\u5b57\u548c\u6211\u4eec\u4e4b\u524d\u4fdd\u5b58\u7684\u6570\u5b57\u4e0d\u540c\uff0c\u5219\u6b21\u6570\u51cf $1$ \u3002\u5982\u679c\u6b21\u6570\u4e3a\u96f6\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u5b58\u4e0b\u4e00\u4e2a\u6570\u5b57\uff0c\u5e76\u628a\u6b21\u6570\u8bbe\u4e3a $1$\u3002\u7531\u4e8e\u6211\u4eec\u8981\u627e\u7684\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u6bd4\u5176\u4ed6\u6240\u6709\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u4e4b\u548c\u8fd8\u8981\u591a\uff0c\u90a3\u4e48\u8981\u627e\u7684\u6570\u5b57\u80af\u5b9a\u662f\u6700\u540e\u4e00\u6b21\u628a\u6b21\u6570\u8bbe\u4e3a $1$ \u65f6\u5bf9\u5e94\u7684\u6570\u5b57\u3002 Python \u4ee3\u7801\uff1a # -*- coding:utf-8 -*- class Solution: def MoreThanHalfNum_Solution(self, numbers): res = numbers[0] times = 1 for num in numbers[1:]: if times == 0: res = num times = 1 elif res == num: times += 1 else: times -= 1 # \u9a8c\u8bc1 res \u662f\u4e0d\u662f\u8d85\u8fc7\u4e00\u534a times = 0 for num in numbers: if num == res: times += 1 return res if times > len(numbers) // 2 else 0 \u8bf4\u660e\uff1a\u201c\u5047\u8bbe\u6570\u7ec4\u975e\u7a7a\uff0c\u5e76\u4e14\u4e00\u5b9a\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5b57\u3002\u201d\u7684\u65f6\u5019\uff0c\u5c31\u4e0d\u7528\u505a\u6700\u540e\u4e00\u6b65\u7684\u5224\u65ad\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def moreThanHalfNum_Solution(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" l = len(nums) if l == 1: return nums[0] num = nums[0] times = 1 for i in range(1, l): # \u6ce8\u610f\u5206\u7c7b\u8ba8\u8bba\u7684\u987a\u5e8f\uff0c\u5148\u770b\u6b21\u6570\u662f\u4e0d\u662f 0 # \u4ee5\u4e0b\u7684 3 \u79cd\u60c5\u51b5\u662f\u4e92\u65a5\u7684 if times == 0: num = nums[i] times += 1 elif num == nums[i]: times += 1 else: times -= 1 return num C++ \u4ee3\u7801\uff1a Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { // // {1,2,3,2,2,2,5,4,2} 9 4 // {1,2,3,2,2,2,5,4} 8 4 public int MoreThanHalfNum_Solution(int[] array) { int len = array.length; if (len == 0) { return 0; } Arrays.sort(array); int target = array[len / 2]; int count = 0; for (int i = 0; i < len; i++) { if (array[i] == target) { count++; } } if (count > len / 2) { return target; } return 0; } public static void main(String[] args) { int[] nums = new int[]{1, 2, 3, 2, 2, 2, 5, 4, 2}; // [1,2,3,2,4,2,5,2,3] Solution solution = new Solution(); int moreThanHalfNum_solution = solution.MoreThanHalfNum_Solution(nums); System.out.println(moreThanHalfNum_solution); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 39. \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57"},{"location":"39/#offer-39","text":"\u5251\u6307 Offer 39. \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 \uff1b \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002","title":"\u5251\u6307 Offer 39. \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57"},{"location":"39/#_1","text":"\u4f20\u9001\u95e8\uff1a \u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u8bf7\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\u3002 \u5047\u8bbe\u6570\u7ec4\u975e\u7a7a\uff0c\u5e76\u4e14\u4e00\u5b9a\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5b57\u3002 \u601d\u8003\u9898 \uff1a \u5047\u8bbe\u8981\u6c42\u53ea\u80fd\u4f7f\u7528 $O(n)$ \u7684\u65f6\u95f4\u548c\u989d\u5916 $O(1)$ \u7684\u7a7a\u95f4\uff0c\u8be5\u600e\u4e48\u505a\u5462\uff1f \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,1,1,3] \u8f93\u51fa\uff1a1 \u601d\u8def1\uff1a\u9996\u5148\u6392\u5e8f\uff0c\u4e2d\u95f4\u90a3\u4e2a\u6570\uff0c\u4e00\u5b9a\u662f\u8981\u6c42\u7684\u3002 \u601d\u8def2\uff1a\u5c06\u9996\u6b21\u51fa\u73b0\u7684\u6570 count + 1 \uff0c\u4e0e\u4e4b\u540e\u7684\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u76f8\u7b49\u5219 +1 \uff0c\u5426\u5219 -1 \uff0c\u6700\u540e\u8fdb\u884c\u6821\u9a8c\u662f\u5426\u8d85\u8fc7\u957f\u5ea6\u7684\u4e00\u534a\u3002\u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u51fa\u73b0\u7684\u6b21\u6570\u6bd4\u5176\u4ed6\u6240\u6709\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u7684\u548c\u8fd8\u8981\u591a\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5728\u904d\u5386\u6570\u7ec4\u7684\u65f6\u5019\u4fdd\u5b58\u4e24\u4e2a\u503c\uff1a\u4e00\u4e2a\u662f\u6570\u7ec4\u7684\u4e00\u4e2a\u6570\u5b57\uff0c\u4e00\u4e2a\u662f\u6b21\u6570\u3002\u5f53\u6211\u4eec\u904d\u5386\u5230\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u65f6\u5019\uff0c\u5982\u679c\u4e0b\u4e00\u4e2a\u6570\u5b57\u548c\u6211\u4eec\u4e4b\u524d\u4fdd\u5b58\u7684\u6570\u5b57\u76f8\u540c\uff0c\u5219\u6b21\u6570\u52a0 $1$\uff1b\u5982\u679c\u4e0b\u4e00\u4e2a\u6570\u5b57\u548c\u6211\u4eec\u4e4b\u524d\u4fdd\u5b58\u7684\u6570\u5b57\u4e0d\u540c\uff0c\u5219\u6b21\u6570\u51cf $1$ \u3002\u5982\u679c\u6b21\u6570\u4e3a\u96f6\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u5b58\u4e0b\u4e00\u4e2a\u6570\u5b57\uff0c\u5e76\u628a\u6b21\u6570\u8bbe\u4e3a $1$\u3002\u7531\u4e8e\u6211\u4eec\u8981\u627e\u7684\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u6bd4\u5176\u4ed6\u6240\u6709\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u4e4b\u548c\u8fd8\u8981\u591a\uff0c\u90a3\u4e48\u8981\u627e\u7684\u6570\u5b57\u80af\u5b9a\u662f\u6700\u540e\u4e00\u6b21\u628a\u6b21\u6570\u8bbe\u4e3a $1$ \u65f6\u5bf9\u5e94\u7684\u6570\u5b57\u3002 Python \u4ee3\u7801\uff1a # -*- coding:utf-8 -*- class Solution: def MoreThanHalfNum_Solution(self, numbers): res = numbers[0] times = 1 for num in numbers[1:]: if times == 0: res = num times = 1 elif res == num: times += 1 else: times -= 1 # \u9a8c\u8bc1 res \u662f\u4e0d\u662f\u8d85\u8fc7\u4e00\u534a times = 0 for num in numbers: if num == res: times += 1 return res if times > len(numbers) // 2 else 0 \u8bf4\u660e\uff1a\u201c\u5047\u8bbe\u6570\u7ec4\u975e\u7a7a\uff0c\u5e76\u4e14\u4e00\u5b9a\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5b57\u3002\u201d\u7684\u65f6\u5019\uff0c\u5c31\u4e0d\u7528\u505a\u6700\u540e\u4e00\u6b65\u7684\u5224\u65ad\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def moreThanHalfNum_Solution(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" l = len(nums) if l == 1: return nums[0] num = nums[0] times = 1 for i in range(1, l): # \u6ce8\u610f\u5206\u7c7b\u8ba8\u8bba\u7684\u987a\u5e8f\uff0c\u5148\u770b\u6b21\u6570\u662f\u4e0d\u662f 0 # \u4ee5\u4e0b\u7684 3 \u79cd\u60c5\u51b5\u662f\u4e92\u65a5\u7684 if times == 0: num = nums[i] times += 1 elif num == nums[i]: times += 1 else: times -= 1 return num C++ \u4ee3\u7801\uff1a Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { // // {1,2,3,2,2,2,5,4,2} 9 4 // {1,2,3,2,2,2,5,4} 8 4 public int MoreThanHalfNum_Solution(int[] array) { int len = array.length; if (len == 0) { return 0; } Arrays.sort(array); int target = array[len / 2]; int count = 0; for (int i = 0; i < len; i++) { if (array[i] == target) { count++; } } if (count > len / 2) { return target; } return 0; } public static void main(String[] args) { int[] nums = new int[]{1, 2, 3, 2, 2, 2, 5, 4, 2}; // [1,2,3,2,4,2,5,2,3] Solution solution = new Solution(); int moreThanHalfNum_solution = solution.MoreThanHalfNum_Solution(nums); System.out.println(moreThanHalfNum_solution); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":""},{"location":"40/","text":"\u5251\u6307 Offer 40. \u6700\u5c0f\u7684k\u4e2a\u6570 \u5251\u6307 Offer 40. \u6700\u5c0f\u7684k\u4e2a\u6570 \uff1b \u6700\u5c0f\u7684k\u4e2a\u6570 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165 $n$ \u4e2a\u6574\u6570\uff0c\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684 $k$ \u4e2a\u6570\u3002 \u6ce8\u610f\uff1a \u6570\u636e\u4fdd\u8bc1 k \u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u8f93\u5165\u6570\u7ec4\u7684\u957f\u5ea6; \u8f93\u51fa\u6570\u7ec4\u5185\u5143\u7d20\u8bf7\u6309\u4ece\u5c0f\u5230\u5927\u987a\u5e8f\u6392\u5e8f; \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,3,4,5,6,7,8] , k=4 \u8f93\u51fa\uff1a [1,2,3,4] \u5206\u6790\uff1a\u6700\u7b80\u5355\u7684\u601d\u8def\u5c31\u662f\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u53d6\u51fa\u524d $k$ \u4e2a\u5143\u7d20\uff0c\u4e0d\u8fc7\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log n)$\uff0c$n$ \u4e3a\u6570\u7ec4\u7684\u957f\u5ea6\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getLeastNumbers_Solution(self, input, k): size = len(input) if size == 0: return [] if k == size: return sorted(input) return sorted(input)[:k] \u5176\u5b9e\u53ef\u4ee5\u7528 $O(n\\log k)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u627e\u5230\u6700\u5c0f\u7684 $k$ \u4e2a\u5143\u7d20\u3002\u6709\u4e24\u79cd\u601d\u8def\uff1a 1\u3001\u501f\u52a9\u5feb\u901f\u6392\u5e8f\u628a\u6570\u7ec4\u4e00\u5206\u4e3a\u4e8c\u7684 partition \u64cd\u4f5c\uff1b 2\u3001\u501f\u52a9\u6700\u5927\u5806\uff08\u9700\u8981\u628a\u6570\u7ec4\u505a\u4e00\u4e2a\u8f6c\u6362\uff0c\u90fd\u53d8\u6210\u76f8\u53cd\u6570\uff0c\u6700\u5c0f\u7684 $k$ \u4e2a\u6570\uff0c\u5c31\u662f\u6700\u5927\u5806\u91cc\u6700\u5927\u7684 $k$ \u4e2a\u6570\uff09\u3002 Python \u4ee3\u78011\uff1apartition\uff0c\u6ce8\u610f\uff0c\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5927\u4e8e\u7b49\u4e8e pivot \u7684\u5143\u7d20\u90fd\u88ab\u5206\u5728\u4e86\u53f3\u8fb9 class Solution(object): def getLeastNumbers_Solution(self, input, k): \"\"\" :type input: list[int] :type k: int :rtype: list[int] \"\"\" size = len(input) if size == 0: return [] if k == size: return sorted(input) l = 0 r = size - 1 while l <= r: p = self.__partition(input, l, r) if p == k - 1: return sorted(input[:p + 1]) elif p > k - 1: # \u6b64\u65f6 k-1 p r = p - 1 else: # \u6b64\u65f6 p k-1 l = p + 1 def __partition(self, input, left, right): # \u53ea\u6709\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u5c31\u6ca1\u6709\u5fc5\u8981 partition \u4e86 # \u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u6570\u7684\u7d22\u5f15 if left == right: return left pivot = input[left] j = left # [left + 1, j] \u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u5143\u7d20\u90fd\u4e25\u683c\u5c0f\u4e8e pivot for i in range(left + 1, right + 1): if input[i] < pivot: j += 1 input[i], input[j] = input[j], input[i] input[left], input[j] = input[j], input[left] return j if __name__ == '__main__': input = [9, 14, 1, 16, 19, 13, 12] k = 4 solution = Solution() result = solution.getLeastNumbers_Solution(input, k) print(result) Python \u4ee3\u78012\uff1a\u6700\u5927\u5806 class Solution(object): def getLeastNumbers_Solution(self, input, k): \"\"\" :type input: list[int] :type k: int :rtype: list[int] \"\"\" size = len(input) if size == 0: return [] if k == size: return sorted(input) import heapq l = [] for num in input[:k]: heapq.heappush(l, -num) for num in input[k:]: top = l[0] if top < -num: heapq.heappushpop(l, -num) return sorted([-num for num in l]) \u5f53\u7136\uff0cPython \u4e2d\u7684 heapq \u76f4\u63a5\u5c31\u6709\u83b7\u53d6\u6700\u5c0f $k$ \u4e2a\u5143\u7d20\u7684\u65b9\u6cd5\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getLeastNumbers_Solution(self, input, k): \"\"\" :type input: list[int] :type k: int :rtype: list[int] \"\"\" size = len(input) if size == 0: return [] if k == size: return sorted(input) import heapq heapq.heapify(input) return sorted(heapq.nsmallest(k, input)) Python \u4ee3\u7801\uff1a\u4e24\u8def partition \u7684\u5199\u6cd5\uff1a class Solution(object): def getLeastNumbers_Solution(self, input, k): \"\"\" :type input: list[int] :type k: int :rtype: list[int] \"\"\" size = len(input) if size == 0: return [] if k == size: return sorted(input) l = 0 r = size - 1 while l <= r: p = self.__partition(input, l, r) if p == k - 1: return sorted(input[:p + 1]) elif p > k - 1: # \u6b64\u65f6 k-1 p r = p - 1 else: # \u6b64\u65f6 p k-1 l = p + 1 def __partition(self, input, left, right): # \u53ea\u6709\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u5c31\u6ca1\u6709\u5fc5\u8981 partition \u4e86 # \u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u6570\u7684\u7d22\u5f15 if left == right: return left pivot = input[left] l = left + 1 r = right while True: while l <= right and input[l] <= pivot: l += 1 while r > left and input[r] >= pivot: r -= 1 if l > r: break input[l], input[r] = input[r], input[l] l += 1 r -= 1 input[left], input[r] = input[r], input[left] return r C++ \u4ee3\u7801\uff1a MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 40. \u6700\u5c0f\u7684k\u4e2a\u6570"},{"location":"40/#offer-40-k","text":"\u5251\u6307 Offer 40. \u6700\u5c0f\u7684k\u4e2a\u6570 \uff1b \u6700\u5c0f\u7684k\u4e2a\u6570 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165 $n$ \u4e2a\u6574\u6570\uff0c\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684 $k$ \u4e2a\u6570\u3002 \u6ce8\u610f\uff1a \u6570\u636e\u4fdd\u8bc1 k \u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u8f93\u5165\u6570\u7ec4\u7684\u957f\u5ea6; \u8f93\u51fa\u6570\u7ec4\u5185\u5143\u7d20\u8bf7\u6309\u4ece\u5c0f\u5230\u5927\u987a\u5e8f\u6392\u5e8f; \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,3,4,5,6,7,8] , k=4 \u8f93\u51fa\uff1a [1,2,3,4] \u5206\u6790\uff1a\u6700\u7b80\u5355\u7684\u601d\u8def\u5c31\u662f\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u53d6\u51fa\u524d $k$ \u4e2a\u5143\u7d20\uff0c\u4e0d\u8fc7\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log n)$\uff0c$n$ \u4e3a\u6570\u7ec4\u7684\u957f\u5ea6\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getLeastNumbers_Solution(self, input, k): size = len(input) if size == 0: return [] if k == size: return sorted(input) return sorted(input)[:k] \u5176\u5b9e\u53ef\u4ee5\u7528 $O(n\\log k)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u627e\u5230\u6700\u5c0f\u7684 $k$ \u4e2a\u5143\u7d20\u3002\u6709\u4e24\u79cd\u601d\u8def\uff1a 1\u3001\u501f\u52a9\u5feb\u901f\u6392\u5e8f\u628a\u6570\u7ec4\u4e00\u5206\u4e3a\u4e8c\u7684 partition \u64cd\u4f5c\uff1b 2\u3001\u501f\u52a9\u6700\u5927\u5806\uff08\u9700\u8981\u628a\u6570\u7ec4\u505a\u4e00\u4e2a\u8f6c\u6362\uff0c\u90fd\u53d8\u6210\u76f8\u53cd\u6570\uff0c\u6700\u5c0f\u7684 $k$ \u4e2a\u6570\uff0c\u5c31\u662f\u6700\u5927\u5806\u91cc\u6700\u5927\u7684 $k$ \u4e2a\u6570\uff09\u3002 Python \u4ee3\u78011\uff1apartition\uff0c\u6ce8\u610f\uff0c\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5927\u4e8e\u7b49\u4e8e pivot \u7684\u5143\u7d20\u90fd\u88ab\u5206\u5728\u4e86\u53f3\u8fb9 class Solution(object): def getLeastNumbers_Solution(self, input, k): \"\"\" :type input: list[int] :type k: int :rtype: list[int] \"\"\" size = len(input) if size == 0: return [] if k == size: return sorted(input) l = 0 r = size - 1 while l <= r: p = self.__partition(input, l, r) if p == k - 1: return sorted(input[:p + 1]) elif p > k - 1: # \u6b64\u65f6 k-1 p r = p - 1 else: # \u6b64\u65f6 p k-1 l = p + 1 def __partition(self, input, left, right): # \u53ea\u6709\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u5c31\u6ca1\u6709\u5fc5\u8981 partition \u4e86 # \u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u6570\u7684\u7d22\u5f15 if left == right: return left pivot = input[left] j = left # [left + 1, j] \u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u5143\u7d20\u90fd\u4e25\u683c\u5c0f\u4e8e pivot for i in range(left + 1, right + 1): if input[i] < pivot: j += 1 input[i], input[j] = input[j], input[i] input[left], input[j] = input[j], input[left] return j if __name__ == '__main__': input = [9, 14, 1, 16, 19, 13, 12] k = 4 solution = Solution() result = solution.getLeastNumbers_Solution(input, k) print(result) Python \u4ee3\u78012\uff1a\u6700\u5927\u5806 class Solution(object): def getLeastNumbers_Solution(self, input, k): \"\"\" :type input: list[int] :type k: int :rtype: list[int] \"\"\" size = len(input) if size == 0: return [] if k == size: return sorted(input) import heapq l = [] for num in input[:k]: heapq.heappush(l, -num) for num in input[k:]: top = l[0] if top < -num: heapq.heappushpop(l, -num) return sorted([-num for num in l]) \u5f53\u7136\uff0cPython \u4e2d\u7684 heapq \u76f4\u63a5\u5c31\u6709\u83b7\u53d6\u6700\u5c0f $k$ \u4e2a\u5143\u7d20\u7684\u65b9\u6cd5\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getLeastNumbers_Solution(self, input, k): \"\"\" :type input: list[int] :type k: int :rtype: list[int] \"\"\" size = len(input) if size == 0: return [] if k == size: return sorted(input) import heapq heapq.heapify(input) return sorted(heapq.nsmallest(k, input)) Python \u4ee3\u7801\uff1a\u4e24\u8def partition \u7684\u5199\u6cd5\uff1a class Solution(object): def getLeastNumbers_Solution(self, input, k): \"\"\" :type input: list[int] :type k: int :rtype: list[int] \"\"\" size = len(input) if size == 0: return [] if k == size: return sorted(input) l = 0 r = size - 1 while l <= r: p = self.__partition(input, l, r) if p == k - 1: return sorted(input[:p + 1]) elif p > k - 1: # \u6b64\u65f6 k-1 p r = p - 1 else: # \u6b64\u65f6 p k-1 l = p + 1 def __partition(self, input, left, right): # \u53ea\u6709\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u5c31\u6ca1\u6709\u5fc5\u8981 partition \u4e86 # \u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u6570\u7684\u7d22\u5f15 if left == right: return left pivot = input[left] l = left + 1 r = right while True: while l <= right and input[l] <= pivot: l += 1 while r > left and input[r] >= pivot: r -= 1 if l > r: break input[l], input[r] = input[r], input[l] l += 1 r -= 1 input[left], input[r] = input[r], input[left] return r C++ \u4ee3\u7801\uff1a MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 40. \u6700\u5c0f\u7684k\u4e2a\u6570"},{"location":"41-50/","text":"41-50 \u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09 \u9898\u89e3\uff08Python \u8bed\u8a00\u5b9e\u73b0\uff09\u7b2c 41-50 \u9898 \u7b2c 41 \u9898\uff1a\u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570 \u3002 \u5982\u4f55\u5f97\u5230\u4e00\u4e2a\u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570\uff1f \u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5947\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4f4d\u4e8e\u4e2d\u95f4\u7684\u6570\u503c\u3002 \u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5076\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u3002 \u6837\u4f8b \u8f93\u5165\uff1a1, 2, 3, 4 \u8f93\u51fa\uff1a1,1.5,2,2.5 \u89e3\u91ca\uff1a\u6bcf\u5f53\u6570\u636e\u6d41\u8bfb\u5165\u4e00\u4e2a\u6570\u636e\uff0c\u5c31\u8fdb\u884c\u4e00\u6b21\u5224\u65ad\u5e76\u8f93\u51fa\u5f53\u524d\u7684\u4e2d\u4f4d\u6570\u3002 \u53c2\u8003\u8d44\u6599\uff1a LeetCode \u7b2c 295 \u9898\uff1a\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570 \u3002 \u95ee\u9898\uff1a1\u3001\u4e0a\u9762\u7684\u601d\u8def\u662f\u5f88\u7b80\u5355\u7684\uff0c\u60f3\u60f3\u7528 Python \u5982\u4f55\u5b9e\u73b0\u3002 2\u3001LeetCode \u4e0a\u9762\u7b2c 4 \u9898\uff1a\u6392\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\u5982\u4f55\u6c42\uff1f \u53e6\u4e00\u79cd\u4f7f\u7528\u5806\u7684\u89e3\u6cd5\uff1a\u8fd9\u9053\u9898\u662f\u5806\u89e3\u51b3\u7684\u95ee\u9898\u3002 \u7528\u4e24\u4e2a\u5806\uff1amax heap \u548c min heap\uff0c\u518d\u4e00\u4e2amedian\u503c\uff0c \u7ef4\u6301\u4e24\u4e2a\u5806\u7684\u5927\u5c0f\u76f8\u7b49(max\u5806\u53ef\u4ee5\u6bd4min\u5806\u591a\u4e00\u4e2a). \u5bf9\u4e8e\u65b0\u6765\u7684\u5143\u7d20\uff0c\u6bd4\u8f83\u65b0\u5143\u7d20\u548cmedian\u7684\u5927\u5c0f\uff0c\u5982\u679c\u5927\u4e8emedian\u5c31\u653e\u5165\u6700\u5c0f\u5806\u91cc\u9762\uff0c\u5982\u679c\u5c0f\u4e8emedian\u5c31\u653e\u5165\u6700\u5927\u5806\u91cc\u9762\uff0c\u5982\u679cmax heap,\u548cmin heap\u4e0d\u5e73\u8861\u4e86\uff0c\u5c31\u8c03\u6574\u4e00\u4e0b\u3002 \u7136\u540e\u8c03\u6574\u8fc7\u540emedian \u91cc\u9762\u7684\u503c\u5c31\u662f\u6211\u4eec\u8981\u6c42\u7684\u4e2d\u4f4d\u6570\u3002 C++ \u4ee3\u7801\uff1a \u7b2c 42 \u9898\uff1a\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u4f20\u9001\u95e8\uff1a \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a \u975e\u7a7a \u6574\u578b\u6570\u7ec4\uff0c\u6570\u7ec4\u91cc\u7684\u6570\u53ef\u80fd\u4e3a\u6b63\uff0c\u4e5f\u53ef\u80fd\u4e3a\u8d1f\u3002 \u6570\u7ec4\u4e2d\u4e00\u4e2a\u6216\u8fde\u7eed\u7684\u591a\u4e2a\u6574\u6570\u7ec4\u6210\u4e00\u4e2a\u5b50\u6570\u7ec4\u3002 \u6c42\u6240\u6709\u5b50\u6570\u7ec4\u7684\u548c\u7684\u6700\u5927\u503c\u3002 \u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1, -2, 3, 10, -4, 7, 2, -5] \u8f93\u51fa\uff1a18 \u540c LeetCode \u7b2c 53 \u9898\uff0c\u9898\u89e3\u4f20\u9001\u95e8\uff1a LeetCode \u7b2c 53 \u9898\uff1a\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u3002 \u201c\u5927\u96ea\u83dc\u201d\u7684\u505a\u6cd5\uff1a\u72b6\u6001\uff1a\u4ee5\u524d\u4e00\u4e2a\u6570\u7ed3\u5c3e\u7684\u201c\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\u201d\u4e3a\u72b6\u6001\u3002 C++ \u4ee3\u7801\uff1a \u5206\u6790\uff1a \u6839\u636e\u201c\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u201d\u95ee\u9898\u7684\u601d\u8def\uff0c\u6211\u4eec\u5728\u8003\u8651\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u5b9a\u4e49\u4ee5\u5f53\u524d\u6570\u7ec4\u5143\u7d20\u4e3a\u7ed3\u5c3e\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u5f80\u5f80\u4f1a\u4f7f\u7528\u60c5\u51b5\u53d8\u5f97\u7b80\u5355\u4e00\u4e9b\u3002 \u8bbe\u7f6e\u72b6\u6001\uff1a dp[i] \u4ee5 i \u7ed3\u5c3e\u7684\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\u3002 \u8003\u8651\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \u5982\u679c nums[i] < 0\uff0cdp[i] = max(dp[i-1] + nums[i],nums[i]) ; \u5982\u679c nums[i] >= 0\uff0cdp[i] = dp[i-1] + nums[i] ; \u7efc\u4e0a\u6240\u8ff0\uff0c\u4e0d\u8bba\u5f53\u524d\u8003\u8651\u7684\u6570\u7ec4\u5143\u7d20\u662f\u5927\u4e8e\u7b49\u4e8e 0 \u8fd8\u662f\u5c0f\u4e8e 0\uff0c\u53ea\u8981\u6ee1\u8db3 dp[i] = max(dp[i-1] + nums[i], nums[i]) \u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u5c31\u662f\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u3002 Java \u4ee3\u7801\uff1a public class Solution { public int FindGreatestSumOfSubArray(int[] array) { int n = array.length; if (n == 0) { return 0; } int[] dp = new int[n]; dp[0] = array[0]; int res = array[0]; for (int i = 1; i < n; i++) { dp[i] = Integer.max(dp[i - 1] + array[i], array[i]); res = Integer.max(res, dp[i]); } return res; } public static void main(String[] args) { int[] nums = new int[]{6, -3, -2, 7, -15, 1, 2, 2}; Solution solution = new Solution(); int findGreatestSumOfSubArray = solution.FindGreatestSumOfSubArray(nums); System.out.println(findGreatestSumOfSubArray); } } \u7b2c 43 \u9898\uff1a\u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff08\u4ece 1 \u5230 n \u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff09 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u4ece 1 \u5230 n \u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570 \u3002 \u8f93\u5165\u4e00\u4e2a\u6574\u6570 $n$\uff0c\u6c42\u4ece $1$ \u5230 $n$ \u8fd9 $n$ \u4e2a\u6574\u6570\u7684\u5341\u8fdb\u5236\u8868\u793a\u4e2d $1$ \u51fa\u73b0\u7684\u6b21\u6570\u3002 \u4f8b\u5982\u8f93\u5165 $12$\uff0c\u4ece $1$ \u5230 $12$ \u8fd9\u4e9b\u6574\u6570\u4e2d\u5305\u542b $1$ \u7684\u6570\u5b57\u6709 $1$\uff0c$10$\uff0c$11$ \u548c $12$\uff0c\u201c$1$\u201d \u4e00\u5171\u51fa\u73b0\u4e86 $5$ \u6b21\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a 12 \u8f93\u51fa\uff1a 5 \u540c LeetCode \u7b2c 233 \u9898\uff1a\u6570\u5b57 $1$ \u7684\u4e2a\u6570\u3002 \u5927\u96ea\u83dc\u7684\u89e3\u6cd5\uff1a C++ \u4ee3\u7801\uff1a \u601d\u8def\uff1a Python \u4ee3\u7801\uff1a # 56. \u4ece1\u5230n\u6574\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570 # # \u8f93\u5165\u4e00\u4e2a\u6574\u6570n\uff0c\u6c42\u4ece1\u5230n\u8fd9n\u4e2a\u6574\u6570\u7684\u5341\u8fdb\u5236\u8868\u793a\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570\u3002 # # \u4f8b\u5982\u8f93\u516512\uff0c\u4ece1\u523012\u8fd9\u4e9b\u6574\u6570\u4e2d\u5305\u542b\u201c1\u201d\u7684\u6570\u5b57\u67091\uff0c10\uff0c11\u548c12\uff0c\u5176\u4e2d\u201c1\u201d\u4e00\u5171\u51fa\u73b0\u4e865\u6b21\u3002 # # \u6837\u4f8b # \u8f93\u5165\uff1a 12 # \u8f93\u51fa\uff1a 5 class Solution(object): def numberOf1Between1AndN_Solution(self, n): \"\"\" :type n: int :rtype: int \"\"\" if n <= 0: return 0 number = [] while n: number.append(n % 10) n //= 10 res = 0 for i in range(len(number) - 1, -1, -1): left = 0 right = 0 # \u60f3\u6e05\u695a\u8fd9\u91cc t \u4e3a\u4ec0\u4e48\u4ece 1 \u5f00\u59cb t = 1 for j in range(len(number) - 1, i, -1): left = left * 10 + number[j] for j in range(i - 1, -1, -1): right = right * 10 + number[j] t *= 10 # print(left, right) # \u81f3\u5c11\u6709\u5de6\u8fb9\u7684\u6570\u8fd9\u4e48\u591a res += left * t # print(number[i], left, right, t, left * t) if number[i] == 1: res += right + 1 elif number[i] > 1: res += t return res if __name__ == '__main__': solution = Solution() n = 45032 result = solution.numberOf1Between1AndN_Solution(n) print('result', result) \u89e3\u6cd51\uff1a\u4ece $1$ \u5230 $n$ \u904d\u5386\uff0c\u6bcf\u4e2a\u6570\u901a\u8fc7\u5bf9 $10$ \u6c42\u4f59\u6570\u5224\u65ad\u6574\u6570\u7684\u4e2a\u4f4d\u6570\u5b57\u662f\u4e0d\u662f $1$\uff0c\u5927\u4e8e $10$ \u7684\u9664\u4ee5 $10$ \u4e4b\u540e\u518d\u5224\u65ad\u3002\u6211\u4eec\u5bf9\u6bcf\u4e2a\u6570\u5b57\u90fd\u8981\u505a\u9664\u6cd5\u548c\u6c42\u4f59\u8fd0\u7b97\u4ee5\u6c42\u51fa\u8be5\u6570\u5b57\u4e2d $1$ \u51fa\u73b0\u7684\u6b21\u6570\u3002\u5982\u679c\u8f93\u5165\u6570\u5b57 $n$\uff0c$n$ \u6709 $O(\\log n)$ \u4f4d\uff0c\u6211\u4eec\u9700\u8981\u5224\u65ad\u6bcf\u4e00\u4f4d\u662f\u4e0d\u662f $1$\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n* \\log n)$\u3002\u8fd9\u6837\u505a\uff0c\u8ba1\u7b97\u91cf\u5927\uff0c\u6548\u7387\u4e0d\u9ad8\u3002 \u672c\u6587\u91c7\u7528\u300a\u6570\u5b66\u4e4b\u7f8e\u300b\u4e0a\u9762\u63d0\u51fa\u7684\u65b9\u6cd5\uff0c\u8bbe\u5b9a\u6574\u6570\u70b9\uff08\u5982 $1$\u3001$10$\u3001$100$\u7b49\u7b49\uff09\u4f5c\u4e3a\u4f4d\u7f6e\u70b9$i$\uff08\u5bf9\u5e94 $n$\u7684\u4e2a\u4f4d\u3001\u5341\u4f4d\u3001\u767e\u4f4d\u7b49\u7b49\uff09\uff0c\u5206\u522b\u5bf9\u6bcf\u4e2a\u6570\u4f4d\u4e0a\u6709\u591a\u5c11\u5305\u542b $1$ \u7684\u70b9\u8fdb\u884c\u5206\u6790\u3002 \u6839\u636e\u8bbe\u5b9a\u7684\u6574\u6570\u4f4d\u7f6e\uff0c\u5bf9 $n$ \u8fdb\u884c\u5206\u5272\uff0c\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u9ad8\u4f4d $n/i$\uff0c\u4f4e\u4f4d $n \\% i$\uff1b 1\u3001\u5f53 $i$ \u8868\u793a\u767e\u4f4d\uff0c\u4e14\u767e\u4f4d\u5bf9\u5e94\u7684\u6570 $\\ge2$\uff0c \u4f8b\u5982 $n=31456$\uff0c\u6b64\u65f6\u8003\u8651 $i=100$\uff0c\u5219 $a=314$\uff0c$b=56$\u3002 \u6b64\u65f6\u767e\u4f4d\u4e3a $1$ \u7684\u6b21\u6570\u6709 $a/10+1=32$ \u6279\u6b21\uff0c\u5177\u4f53\u5982\u4e0b\uff1a \u8bf4\u660e\uff1a\u7b2c 1 \u6279\u6b21\uff1a$00100-00199$\uff0c\u4e00\u5171 $100$ \u4e2a\u6570\uff1b \u7b2c 2 \u6279\u6b21\uff1a$01100-01199$\uff0c\u4e00\u5171 $100$ \u4e2a\u6570\uff1b \u2026\u2026 \u7b2c 32 \u6279\u6b21\uff1a$31100-31199$\uff0c\u4e00\u5171 $100$ \u4e2a\u6570\uff1b \u6700\u9ad8\u4e24\u4f4d $0-31$\uff0c\u6bcf\u4e00\u6279\u6b21\u90fd\u5305\u542b $100$ \u4e2a\u8fde\u7eed\u7684\u70b9\uff0c\u5373\u5171\u6709 $(a/10+1)\\times100$ \u4e2a\u70b9\u7684\u767e\u4f4d\u4e3a $1$\uff1b 2\u3001\u5f53 $i$ \u8868\u793a\u767e\u4f4d\uff0c\u4e14\u767e\u4f4d\u5bf9\u5e94\u7684\u6570\u4e3a $1$\uff0c \u4f8b\u5982 $n=31156$\uff0c$i=100$\uff0c\u5219 $a=311$\uff0c$b=56$\uff0c\u6b64\u65f6\u767e\u4f4d\u5bf9\u5e94\u7684\u5c31\u662f $1$\u3002 \u7b2c 1 \u6279\u6b21\uff1a$00100-00199$\uff0c\u4e00\u5171 $100$ \u4e2a\u6570\uff1b \u7b2c 2 \u6279\u6b21\uff1a$01100-01199$\uff0c\u4e00\u5171 $100$ \u4e2a\u6570\uff1b \u2026\u2026 \u7b2c 31 \u6279\u6b21\uff1a$30100-30199$\uff0c\u4e00\u5171 $100$ \u4e2a\u6570\uff1b \u7b2c 32 \u6279\u6b21\uff1a$31100-311569$\uff0c\u4e00\u5171 $57$ \u4e2a\u6570\uff1b \u5219\u5171\u6709 $a/10$ \u6b21\u662f\u5305\u542b $100$ \u4e2a\u8fde\u7eed\u70b9\uff0c\u6700\u9ad8\u4e24\u4f4d $0-30$\u3002 \u5f53\u6700\u9ad8\u4e24\u4f4d\u4e3a $31$\uff08\u5373 $a=311$\uff09\uff0c\u672c\u6b21\u53ea\u5bf9\u5e94\u5c40\u90e8\u70b9 $00-56$\uff0c\u5171 $b+1$\u6b21\uff0c\u6240\u6709\u70b9\u52a0\u8d77\u6765\u5171\u6709 $\uff08a/10\\times100\uff09+(b+1)$\uff0c\u8fd9\u4e9b\u70b9\u767e\u4f4d\u5bf9\u5e94\u4e3a $1$; 3\u3001\u5f53 $i$ \u8868\u793a\u767e\u4f4d\uff0c\u4e14\u767e\u4f4d\u5bf9\u5e94\u7684\u6570\u4e3a $0$\uff0c\u5982 $n=31056$\uff0c$i=100$\uff0c\u5219 $a=310$\uff0c$b=56$\u3002 \u7b2c 1 \u6279\u6b21\uff1a$00100-00199$\uff0c\u4e00\u5171 $100$ \u4e2a\u6570\uff1b \u7b2c 2 \u6279\u6b21\uff1a$01100-01199$\uff0c\u4e00\u5171 $100$ \u4e2a\u6570\uff1b \u2026\u2026 \u7b2c 31 \u6279\u6b21\uff1a$30100-30199$\uff0c\u4e00\u5171 $100$ \u4e2a\u6570\uff1b \u7b2c 32 \u6279\u6b21\uff1a$31000-31056$\uff0c\u4e00\u5171 $0$ \u4e2a\u6570\uff1b \u6b64\u65f6\u767e\u4f4d\u4e3a $1$ \u7684\u6b21\u6570\u6709 $a/10=31$\uff0c\u6700\u9ad8\u4e24\u4f4d $0-30$\uff1b \u7efc\u5408\u4ee5\u4e0a $3$ \u79cd\u60c5\u51b5\uff0c\u5f53\u767e\u4f4d\u5bf9\u5e94 $0$ \u6216 $\\ge2$ \u65f6\uff0c\u6709 $(a+8)/10$ \u6b21\u5305\u542b\u6240\u6709 $100$ \u4e2a\u70b9\uff0c\u8fd8\u6709\u5f53\u767e\u4f4d\u4e3a $1$ \uff08$a\\%10==1$\uff09\uff0c\u9700\u8981\u589e\u52a0\u5c40\u90e8\u70b9 $b+1$\u3002 \u4e4b\u6240\u4ee5\u8865 $8$\uff0c\u662f\u56e0\u4e3a\u5f53\u767e\u4f4d\u4e3a $0$\uff0c\u5219 $a/10==(a+8)/10$\uff0c\u5f53\u767e\u4f4d $\\ge2$\uff0c\u8865 $8$ \u4f1a\u4ea7\u751f\u8fdb\u4f4d\uff0c\u6548\u679c\u7b49\u540c\u4e8e $(a/10+1)$\u3002 Python \u4ee3\u7801\uff1a class Solution: def NumberOf1Between1AndN_Solution(self, n): # write code here count = 0 i = 1 while i <= n: a = n / i b = n % i count += (a+8) / 10 * i + (a % 10 == 1)*(b + 1) i *= 10 return count \u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_38211852/article/details/80863364 https://cuijiahua.com/blog/2017/12/basis_31.html \u7b2c 44 \u9898\uff1a\u6570\u5b57\u5e8f\u5217\u4e2d\u67d0\u4e00\u4f4d\u7684\u6570\u5b57 \u4f20\u9001\u95e8\uff1a \u6570\u5b57\u5e8f\u5217\u4e2d\u67d0\u4e00\u4f4d\u7684\u6570\u5b57 \u3002 \u6570\u5b57\u4ee5 0123456789101112131415\u2026 \u7684\u683c\u5f0f\u5e8f\u5217\u5316\u5230\u4e00\u4e2a\u5b57\u7b26\u5e8f\u5217\u4e2d\u3002 \u5728\u8fd9\u4e2a\u5e8f\u5217\u4e2d\uff0c\u7b2c 5 \u4f4d\uff08\u4ece 0 \u5f00\u59cb\u8ba1\u6570\uff09\u662f 5 \uff0c\u7b2c 13 \u4f4d\u662f 1 \uff0c\u7b2c 19 \u4f4d\u662f 4 \uff0c\u7b49\u7b49\u3002 \u8bf7\u5199\u4e00\u4e2a\u51fd\u6570\u6c42\u4efb\u610f\u4f4d\u5bf9\u5e94\u7684\u6570\u5b57\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a13 \u8f93\u51fa\uff1a1 Python \u4ee3\u7801\uff1a\u53c2\u8003\u4e86 LeetCode \u7b2c 400 \u9898\u8ba8\u8bba\u533a\u4ee3\u7801 class Solution(object): def digitAtIndex(self, n): \"\"\" :type n: int :rtype: int \"\"\" # \u5982\u679c n \u5c0f\u4e8e 10 \uff0c\u76f4\u63a5\u8fd4\u56de\u5c31\u53ef\u4ee5\u4e86 if n < 10: return n # \u8ba1\u7b97\u524d\u7f00\u90e8\u5206 base = 9 digits = 1 # 2 \u4f4d\u6570\uff0c\u4ece 10 \u5230 99 \u4e00\u5171 ( 99 - 10 + 1) * 2 = 90 * 2 = 180 \u4f4d # 3 \u4f4d\u6570\uff0c\u4ece 100 \u5230 999 \u4e00\u5171 ( 999 - 100 + 1) * 2 = 900 * 3 = 2700 \u4f4d # 4 \u4f4d\u6570\uff0c\u4ece 1000 \u5230 9999 \u4e00\u5171 ( 9999 - 1000 + 1) * 2 = 9000 * 4 = 3600 \u4f4d while n - base * digits > 0: n -= base * digits base *= 10 digits += 1 index = n % digits if index == 0: # \u8ba1\u7b97\u51fa num \u662f\u591a\u5c11 # \u4f8b\u5982\uff1a192\uff0c\u6709 1 \u4e2a\u4f4d\u79fb\u7684\u504f\u5dee num = 10 ** (digits - 1) + n // digits - 1 # \u8fd4\u56de\u4e2a\u4f4d\u5c31\u53ef\u4ee5\u4e86 return num % 10 else: # \u4e0d\u80fd\u6574\u9664\uff0c\u90a3\u4e2a\u504f\u79fb\u5c31\u4e0d\u7528\u7b97\u4e86 # \u4f8b\u5982 194 = 189 + 5 # 100 + 2 = 102 num = 10 ** (digits - 1) + n // digits # \u4ece\u5de6\u8fb9\u5411\u53f3\u8fb9\u6570\uff0c\u7b2c 2 \u4f4d for i in range(index, digits): num //= 10 return num % 10 \u53c2\u8003\u8d44\u6599\uff1a 1\u3001https://www.acwing.com/activity/content/code/content/20758/ 2\u3001https://blog.csdn.net/Koala_Tree/article/details/79536284 [\u7ad9\u5916\u56fe\u7247\u4e0a\u4f20\u4e2d...(image-a760ae-1558582697894)] \u601d\u8def\uff1a\u8df3\u8fc7\u4e0d\u540c\u4f4d\u6570\u7684\u6570\u5b57\uff0c\u5728\u76f8\u5e94\u4f4d\u6570\u4e2d\u5bfb\u627e\u3002 \u4ee5\u5e8f\u5217\u4e2d\u7b2c $1001$ \u4f4d\u4e3a\u4f8b\uff1a 1\u3001\u5e8f\u5217\u524d $10$ \u4f4d\u4e3a $0$ \u5230 $9$\uff0c\u8df3\u8fc7\uff0c\u518d\u4ece\u540e\u9762\u627e $991$ \u4f4d\uff1b 2\u3001\u540e\u9762 $180$ \u4f4d\u4e3a $10$ \u5230 $99$\uff0c\u56e0\u4e3a\u4e00\u5171 $99-10+1=90$ \u4e2a\u6570\uff0c\u6bcf\u4e2a\u6570 $2$ \u4f4d\uff0c\u6240\u4ee5 $180$ \u4f4d\uff1b \u8df3\u8fc7\uff0c\u518d\u4ece\u540e\u9762\u627e $811$ \u4f4d\uff08$1001-10-180=811$\uff09\uff1b \u540e\u9762 $2700$ \u4f4d\u4e3a $100$ \u5230 $999$\uff0c\u56e0\u4e3a $811<2700$\uff0c\u6240\u4ee5 $811$ \u4f4d\u662f\u67d0\u4e2a\u4e09\u4f4d\u6570\u4e2d\u7684\u4e00\u4f4d\uff1b \u7531\u4e8e811=270*3+1\uff0c\u8fd9\u5c31\u662f\u8bf4811\u4f4d\u662f\u4ece100\u5f00\u59cb\u7684\u7b2c270\u4e2a\u6570\u5b57\u5373370\u7684\u4e2d\u95f4\u4e00\u4f4d\uff0c\u53737\u3002(\u6ce8\u610f\uff0c\u8fd9\u91cc\u90fd\u662f\u4ece\u7b2c0\u4f4d\u5f00\u59cb\u8ba1\u6570\u7684) \u4f5c\u8005\uff1aKoala_Tree \u6765\u6e90\uff1aCSDN \u539f\u6587\uff1ahttps://blog.csdn.net/Koala_Tree/article/details/79536284 \u7248\u6743\u58f0\u660e\uff1a\u672c\u6587\u4e3a\u535a\u4e3b\u539f\u521b\u6587\u7ae0\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u535a\u6587\u94fe\u63a5\uff01 Java \u4ee3\u7801\uff1a class Solution { // 9*1 9*10*2 9*10*10*3 public int digitAtIndex(int n) { int len = 1; long count = 9; int start = 1; while (n > len * count) { //13 n=n-9=4 len=2 count=90 start=10 n -= len * count; //start=10+3/2=11 \u7b54\u6848\u662f11\u7684\u7b2c\u4e8c\u4e2a1 len += 1; count *= 10; start *= 10; } // start \u8bb0\u5f55\u5f53\u524d\u5faa\u73af\u533a\u95f4\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\uff0c\u5f53 n \u843d\u5230\u67d0\u4e00\u4e2a\u786e\u5b9a\u7684\u533a\u95f4\u91cc\u4e86, // \u90a3\u4e48 (n-1)/len \u5c31\u662f\u76ee\u6807\u6570\u5b57\u5728\u8be5\u533a\u95f4\u91cc\u7684\u5750\u6807\uff0c\u52a0\u4e0a start \u5c31\u662f\u5f97\u5230\u4e86\u76ee\u6807\u6570\u5b57 start += (n - 1) / len; String s = Integer.toString(start); return Character.getNumericValue(s.charAt((n - 1) % len)); } } \u53c2\u8003\u8d44\u6599\uff1a\u8fd9\u7bc7\u7b80\u4e66\u4e0a\u7684\u6587\u7ae0\u6709\u8be6\u7ec6\u6b65\u9aa4\u3002https://www.jianshu.com/p/0bbf1fcbe070\u3002 \u540c LeetCode \u7b2c 400 \u9898\uff1a 400. \u7b2c N \u4e2a\u6570\u5b57 \u8bf4\u660e\uff1a\u53ea\u4e0d\u8fc7 LeetCode \u7b2c 400 \u9898\u4ece 1 \u5f00\u59cb\uff0c\u4f20\u9001\u95e8\uff1a 400. \u7b2c N \u4e2a\u6570\u5b57 \u3002 \u5728\u65e0\u9650\u7684\u6574\u6570\u5e8f\u5217 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...\u4e2d\u627e\u5230\u7b2c n \u4e2a\u6570\u5b57\u3002 \u6ce8\u610f: n \u662f\u6b63\u6570\u4e14\u572832\u4e3a\u6574\u5f62\u8303\u56f4\u5185 ( n < 231)\u3002 \u793a\u4f8b 1: ``` \u8f93\u5165: 3 \u8f93\u51fa: 3 ``` \u793a\u4f8b 2: ``` \u8f93\u5165: 11 \u8f93\u51fa: 0 \u8bf4\u660e: \u7b2c11\u4e2a\u6570\u5b57\u5728\u5e8f\u5217 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... \u91cc\u662f0\uff0c\u5b83\u662f10\u7684\u4e00\u90e8\u5206\u3002 ``` Python \u4ee3\u7801\uff1a class Solution: def findNthDigit(self, n): \"\"\" :type n: int :rtype: int \"\"\" # \u7279\u5224\uff1a\u5982\u679c n \u5c0f\u4e8e 10 \uff0c\u76f4\u63a5\u8fd4\u56de\u5c31\u53ef\u4ee5\u4e86 if n < 10: return n # \u8868\u793a\u51e0\u4f4d\u6570 # 2 \u4f4d\u6570\uff0c\u4ece 10 \u5230 99 \u4e00\u5171 ( 99 - 10 + 1) * 2 = 90 * 2 = 180 \u4f4d # 3 \u4f4d\u6570\uff0c\u4ece 100 \u5230 999 \u4e00\u5171 ( 999 - 100 + 1) * 2 = 900 * 3 = 2700 \u4f4d # 4 \u4f4d\u6570\uff0c\u4ece 1000 \u5230 9999 \u4e00\u5171 ( 9999 - 1000 + 1) * 2 = 9000 * 4 = 3600 \u4f4d # \u6b65\u9aa41\uff1acalculate how many digits the number has # \u8ba1\u7b97\u524d\u7f00\u90e8\u5206 length = 0 base = 9 digits = 1 # n = 1001 \u65f6\uff0c9 \u8fc7\uff0c180 \u8fc7\uff0c\u5269\u4e0b 812 # \u4e0d\u8d8a\u754c\u624d\u52a0\uff0c\u8981\u6e05\u695a\u8fd9\u4e00\u70b9 while length + base * digits < n: length += base * digits base *= 10 digits += 1 n -= length # step 2. calculate what the number is # \u5230\u8fd9\u91cc\uff0cnum \u662f \"digits \u4f4d\u6570\" \u4e2d\u7684\u67d0\u4e00\u4e2a\u6570\u5b57 # \u4ee5 digits = 3 \u4e3a\u4f8b\uff0cn \u662f 100 - 999 \u4e2d\u7684\u4e00\u4f4d\uff0cnum \u8868\u793a\u662f\u54ea\u4e2a\u6570\u5b57 index = n % digits if index == 0: # \u5982\u679c\u6574\u9664\uff0c\u5c31\u662f\u90a3\u4e2a\u6570\u5b57\u7684\u6700\u540e\u4e00\u4f4d num = 10 ** (digits - 1) + n // digits - 1 return num % 10 else: num = 10 ** (digits - 1) + n // digits for i in range(index, digits): num //= 10 return num % 10 if __name__ == '__main__': solution = Solution() n = 190 result1 = solution.findNthDigit(n) print(result1) \u7b2c 45 \u9898\uff1a\u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 \u4f20\u9001\u95e8\uff1a \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4\uff0c\u628a\u6570\u7ec4\u91cc\u6240\u6709\u6570\u5b57\u62fc\u63a5\u8d77\u6765\u6392\u6210\u4e00\u4e2a\u6570\uff0c\u6253\u5370\u80fd\u62fc\u63a5\u51fa\u7684\u6240\u6709\u6570\u5b57\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u3002 \u4f8b\u5982\u8f93\u5165\u6570\u7ec4 [3, 32, 321] \uff0c\u5219\u6253\u5370\u51fa\u8fd9 3 \u4e2a\u6570\u5b57\u80fd\u6392\u6210\u7684\u6700\u5c0f\u6570\u5b57 321323 \u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [3, 32, 321] \u8f93\u51fa\uff1a 321323 \u6ce8\u610f \uff1a\u8f93\u51fa\u6570\u5b57\u7684\u683c\u5f0f\u4e3a\u5b57\u7b26\u4e32\u3002 \u540c LeetCode \u7b2c 179 \u9898\uff0c \u6700\u5927\u6570 \u3002 Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { public String PrintMinNumber(int[] numbers) { int len = numbers.length; if (len == 0) { return \"\"; } String[] numsStr = new String[len]; for (int i = 0; i < len; i++) { numsStr[i] = numbers[i] + \"\"; } Arrays.sort(numsStr, (a, b) -> (a + b).compareTo(b + a)); StringBuilder builder = new StringBuilder(); for (int i = 0; i < len; i++) { builder.append(numsStr[i]); } return builder.toString(); } public static void main(String[] args) { int[] nums = new int[]{3, 32, 321}; Solution solution = new Solution(); String printMinNumber = solution.PrintMinNumber(nums); System.out.println(printMinNumber); } } \u8bf4\u660e\uff1a\u5176\u5b9e\u5c31\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219\u3002Python3 \u60f3\u7528 cmp \u800c\u4e0d\u662f key \u7684\u8bdd\uff0c\u9700\u8981 from functools import cmp_to_key \uff0c\u7136\u540e sort \u6216\u8005 sorted \u7684\u65f6\u5019 key = cmp_to_key(your_comparator) \u3002 Python \u4ee3\u7801\uff1a class Solution(object): def printMinNumber(self, nums): \"\"\" :type nums: List[int] :rtype: str \"\"\" if len(nums) == 0: return '' # \u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219 from functools import cmp_to_key key_func = cmp_to_key(lambda a, b: int(a + b) - int(b + a)) result = sorted(map(str, nums), key=key_func) return ''.join(result) if __name__ == '__main__': list1 = [7, -8, 5, 4, 0, -2, -5] # \u8981\u6c42\uff1a1\u3001\u6b63\u6570\u5728\u524d\u8d1f\u6570\u5728\u540e # 2\u3001\u6b63\u6570\u4ece\u5c0f\u5230\u5927 # 3\u3001\u8d1f\u6570\u4ece\u5927\u5230\u5c0f result = sorted(list1, key=lambda x: (x < 0, abs(x))) print(result) s = 'asdf234GDSdsf23' # \u6392\u5e8f:\u5c0f\u5199-\u5927\u5199-\u5947\u6570-\u5076\u6570 print( \"\".join( sorted( s, key=lambda x: ( x.isdigit(), x.isdigit() and int(x) % 2 == 0, x.isupper(), x)))) \u53e6\u4e00\u79cd\u5199\u6cd5\uff1a Python \u4ee3\u7801\uff1a class NumCompare(str): # \u6ce8\u610f\uff1a\u8fd9\u91cc\u7ee7\u627f str \u7c7b def __lt__(self, other): return self + other < other + self class Solution(object): def printMinNumber(self, nums): \"\"\" :type nums: List[int] :rtype: str \"\"\" if len(nums) == 0: return '' # \u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219 result = sorted(map(str, nums), key=NumCompare) return ''.join(result) \u7b2c 46 \u9898\uff1a\u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32 \u4f20\u9001\u95e8\uff1a \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u89c4\u5219\u628a\u5b83\u7ffb\u8bd1\u4e3a\u5b57\u7b26\u4e32\uff1a 0 \u7ffb\u8bd1\u6210 \u201ca\u201d\uff0c1 \u7ffb\u8bd1\u6210 \u201cb\u201d\uff0c\u2026\u2026\uff0c11 \u7ffb\u8bd1\u6210\u201cl\u201d\uff0c\u2026\u2026\uff0c25 \u7ffb\u8bd1\u6210 \u201cz\u201d\u3002 \u4e00\u4e2a\u6570\u5b57\u53ef\u80fd\u6709\u591a\u4e2a\u7ffb\u8bd1\u3002\u4f8b\u5982 12258 \u6709 5 \u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\uff0c\u5b83\u4eec\u5206\u522b\u662f \u201cbccfi\u201d\u3001\u201cbwfi\u201d\u3001\u201cbczi\u201d\u3001\u201cmcfi\u201d \u548c \u201cmzi\u201d\u3002 \u8bf7\u7f16\u7a0b\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u8ba1\u7b97\u4e00\u4e2a\u6570\u5b57\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\u65b9\u6cd5\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\"12258\" \u8f93\u51fa\uff1a5 \u601d\u8def\uff1a\u540c LeetCode \u7b2c 91 \u9898 Decode Ways\uff0c\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u3002 \u72b6\u6001\u5b9a\u4e49\uff1a dp[i] \u8868\u793a s[0, i] \uff08\u5305\u62ec i \uff09\uff0c\u4e00\u5171\u6709\u591a\u5c11\u79cd\u7ffb\u8bd1\u7684\u65b9\u6cd5\u3002 \u5206\u7c7b\u8ba8\u8bba\uff1a 1\u3001\u5f53\u524d\u5b57\u7b26\u53ef\u4ee5\u5355\u72ec\u7ffb\u8bd1\uff1b 2\u3001\u5f53\u524d\u5b57\u7b26\u53ef\u4ee5\u548c\u524d\u9762\u4e00\u4e2a\u5b57\u7b26\u4e00\u8d77\u7ffb\u8bd1\u3002 dp[i] \u5c31\u662f\u4ee5\u4e0a\u4e8c\u8005\u4e4b\u548c\u3002 Python \u4ee3\u7801\uff1a class Solution: def getTranslationCount(self, s): \"\"\" :type s: str :rtype: int \"\"\" s = str(s) l = len(s) if l == 0: return 0 dp = [None for _ in range(l)] # dp[i] \u8868\u793a s[0, i] \uff0c\u5305\u62ec i \uff0c\u4e00\u5171\u6709\u591a\u5c11\u79cd\u7ffb\u8bd1\u7684\u65b9\u6cd5 dp[0] = 1 for i in range(1, l): # \u5f53\u524d\u503c\u81f3\u5c11\u662f dp[i - 1]\uff0c\u56e0\u4e3a s[i] \u4e00\u5b9a\u53ef\u4ee5\u5355\u72ec\u7ffb\u8bd1 cur = dp[i - 1] # \u770b\u4e00\u770b s[i-1,i] \u662f\u4e0d\u662f\u53ef\u4ee5\u7ffb\u8bd1 if 9 < int(s[i - 1:i + 1]) < 26: if i - 2 < 0: # 12 cur += 1 else: # \u8981\u8003\u8651\u5230\u6570\u7ec4\u4e0b\u6807\u8d8a\u754c\u95ee\u9898 cur += dp[i - 2] dp[i] = cur return dp[l - 1] LeetCode \u7b2c 91 \u9898\uff1a\u89e3\u7801\u65b9\u6cd5 \u4f20\u9001\u95e8\uff1a 91. \u89e3\u7801\u65b9\u6cd5 \u3002 \u4e00\u6761\u5305\u542b\u5b57\u6bcd A-Z \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a 'A' -> 1 'B' -> 2 ... 'Z' -> 26 \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684 \u975e\u7a7a \u5b57\u7b26\u4e32\uff0c\u8bf7\u8ba1\u7b97\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"12\" \u8f93\u51fa: 2 \u89e3\u91ca: \u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"AB\"\uff081 2\uff09\u6216\u8005 \"L\"\uff0812\uff09\u3002 \u793a\u4f8b 2: \u8f93\u5165: \"226\" \u8f93\u51fa: 3 \u89e3\u91ca: \u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"BZ\" (2 26), \"VF\" (22 6), \u6216\u8005 \"BBF\" (2 2 6) \u3002 Python \u4ee3\u7801\uff1a # 91\u3001\u89e3\u7801\u65b9\u6cd5 # \u4e00\u6761\u5305\u542b\u5b57\u6bcd A-Z \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a # # 'A' -> 1 # 'B' -> 2 # ... # 'Z' -> 26 # \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684\u975e\u7a7a\u5b57\u7b26\u4e32\uff0c\u8bf7\u8ba1\u7b97\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002 class Solution: def numDecodings(self, s): \"\"\" :type s: str :rtype: int \"\"\" l = len(s) if l == 0: return 0 if l == 1: return 1 if s[0] != '0' else 0 dp = [0 for _ in range(l)] dp[0] = 1 if s[0] != '0' else 0 for i in range(1, l): if s[i] != '0': # \u5982\u679c\u4e0d\u662f '0' \uff0c\u90a3\u4e48 s[i] \u5c31\u53ef\u4ee5\u7f16\u7801\uff0c\u6240\u4ee5 cur \u5c31\u81f3\u5c11\u662f dp[i - 1] dp[i] += dp[i - 1] if 9 < int(s[i - 1:i + 1]) < 27: # \u53ef\u4ee5\u548c\u524d\u9762\u7684\u6570\u5b57\u7ec4\u6210\u4e00\u4e2a\u7f16\u7801 if i - 2 < 0: # 12 dp[i] += 1 else: dp[i] += dp[i - 2] return dp[l - 1] if __name__ == '__main__': test_str = '12' s = Solution() res = s.numDecodings(test_str) print(res) \u7b2c 47 \u9898\uff1a\u793c\u7269\u7684\u6700\u5927\u4ef7\u503c \u4f20\u9001\u95e8\uff1a \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5728\u4e00\u4e2a m\u00d7n \u7684\u68cb\u76d8\u7684\u6bcf\u4e00\u683c\u90fd\u653e\u6709\u4e00\u4e2a\u793c\u7269\uff0c\u6bcf\u4e2a\u793c\u7269\u90fd\u6709\u4e00\u5b9a\u7684\u4ef7\u503c\uff08\u4ef7\u503c\u5927\u4e8e0\uff09\u3002 \u4f60\u53ef\u4ee5\u4ece\u68cb\u76d8\u7684\u5de6\u4e0a\u89d2\u5f00\u59cb\u62ff\u683c\u5b50\u91cc\u7684\u793c\u7269\uff0c\u5e76\u6bcf\u6b21\u5411\u53f3\u6216\u8005\u5411\u4e0b\u79fb\u52a8\u4e00\u683c\u76f4\u5230\u5230\u8fbe\u68cb\u76d8\u7684\u53f3\u4e0b\u89d2\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u68cb\u76d8\u53ca\u5176\u4e0a\u9762\u7684\u793c\u7269\uff0c\u8bf7\u8ba1\u7b97\u4f60\u6700\u591a\u80fd\u62ff\u5230\u591a\u5c11\u4ef7\u503c\u7684\u793c\u7269\uff1f \u6ce8\u610f\uff1a m,n>0 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [ [2,3,1], [1,7,1], [4,6,1] ] \u8f93\u51fa\uff1a19 \u89e3\u91ca\uff1a\u6cbf\u7740\u8def\u5f84 2\u21923\u21927\u21926\u21921 \u53ef\u4ee5\u5f97\u5230\u62ff\u5230\u6700\u5927\u4ef7\u503c\u793c\u7269\u3002 \u601d\u8def\uff1a\u52a8\u6001\u89c4\u5212\u3002\u793c\u7269\u8981\u4e48\u6765\u81ea\u5de6\u8fb9\u4e00\u683c\uff0c\u8981\u4e48\u6765\u81ea\u4e0a\u9762\u4e00\u683c\uff0c\u4e24\u8005\u53d6\u6700\u5927\u3002\u8981\u7279\u6b8a\u5224\u65ad\u7684\u5c31\u662f\u8fb9\u754c\u60c5\u51b5\u3002\u53e6\u5916\u53ef\u4ee5\u4f7f\u7528\u4e00\u7ef4\u6570\u7ec4\u5b8c\u6210\u52a8\u6001\u89c4\u5212\u3002\u5982\u679c\u53ef\u4ee5\u4fee\u6539 grid\uff0c\u76f4\u63a5\u5728 grid \u4e0a\u4fee\u6539\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u7528\u8f85\u52a9\u7a7a\u95f4\u3002 \u52a8\u6001\u89c4\u5212\u3002 \u53ef\u4ee5\u5c3d\u91cf\u51cf\u5c11\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getMaxValue(self, grid): \"\"\" :type grid: List[List[int]] :rtype: int \"\"\" m = len(grid) if m == 0: return 0 n = len(grid[0]) dp = [None for _ in range(n)] dp[0] = grid[0][0] for i in range(1, n): dp[i] = dp[i - 1] + grid[0][i] for i in range(1, m): for j in range(n): if j == 0: dp[j] += grid[i][0] else: dp[j] = grid[i][j] + max(dp[j - 1], dp[j]) return dp[n - 1] Java \u4ee3\u7801\uff1a public class Solution { public int getMaxValue(int[][] matrix) { int row = matrix.length; if (row == 0) { return 0; } int col = matrix[0].length; int[][] dp = new int[row][col]; dp[0][0] = matrix[0][0]; for (int j = 1; j < col; j++) { dp[0][j] = dp[0][j - 1] + matrix[0][j]; } for (int i = 1; i < row; i++) { dp[i][0] = dp[i - 1][0] + matrix[i][0]; for (int j = 1; j < col; j++) { dp[i][j] = Integer.max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]; } } return dp[row - 1][col - 1]; } public static void main(String[] args) { int[][] matrix = new int[][]{ {1, 10, 3, 8}, {12, 2, 9, 6}, {5, 7, 4, 11}, {3, 7, 16, 5} }; Solution solution = new Solution(); int maxValue = solution.getMaxValue(matrix); System.out.println(maxValue); } } Java \u4ee3\u7801\uff1a public class Solution2 { public int getMaxValue(int[][] matrix) { int row = matrix.length; if (row == 0) { return 0; } int col = matrix[0].length; int[] dp = new int[col]; dp[0] = matrix[0][0]; for (int j = 1; j < col; j++) { dp[j] = dp[j - 1] + matrix[0][j]; } for (int i = 1; i < row; i++) { dp[0] = dp[0] + matrix[i][0]; for (int j = 1; j < col; j++) { dp[j] = Integer.max(dp[j], dp[j - 1]) + matrix[i][j]; } } return dp[col - 1]; } public static void main(String[] args) { int[][] matrix = new int[][]{ {1, 10, 3, 8}, {12, 2, 9, 6}, {5, 7, 4, 11}, {3, 7, 16, 5} }; Solution2 solution2 = new Solution2(); int maxValue = solution2.getMaxValue(matrix); System.out.println(maxValue); } } Java \u4ee3\u7801\uff1a public class Solution3 { public int getMaxValue(int[][] matrix) { int row = matrix.length; if (row == 0) { return 0; } int col = matrix[0].length; int[] dp = new int[col]; for (int i = 0; i < row; i++) { for (int j = 0; j < col; j++) { dp[j] = Integer.max(dp[j], j - 1 < 0 ? 0 : dp[j - 1]) + matrix[i][j]; } } return dp[col - 1]; } public static void main(String[] args) { int[][] matrix = new int[][]{ {1, 10, 3, 8}, {12, 2, 9, 6}, {5, 7, 4, 11}, {3, 7, 16, 5} }; Solution3 solution3 = new Solution3(); int maxValue = solution3.getMaxValue(matrix); System.out.println(maxValue); } } \u7b2c 48 \u9898\uff1a\u6700\u957f\u4e0d\u91cd\u590d\u5b57\u7b26\u4e32\u7684\u5b50\u5b57\u7b26\u4e32 \u4f20\u9001\u95e8\uff1a \u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32 \u3002 \u8bf7\u4ece\u5b57\u7b26\u4e32\u4e2d\u627e\u51fa\u4e00\u4e2a\u6700\u957f\u7684\u4e0d\u5305\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32\uff0c\u8ba1\u7b97\u8be5\u6700\u957f\u5b50\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002 \u5047\u8bbe\u5b57\u7b26\u4e32\u4e2d\u53ea\u5305\u542b\u4ece\u2019a\u2019\u5230\u2019z\u2019\u7684\u5b57\u7b26\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\"abcabc\" \u8f93\u51fa\uff1a3 \u601d\u8def1\uff1a\u6ed1\u52a8\u7a97\u53e3\uff1a Python \u4ee3\u7801\uff1a class Solution: def lengthOfLongestSubstring(self, s): \"\"\" :type s: str :rtype: int \"\"\" # \u7279\u5224 size = len(s) if size < 2: return size l = 0 r = -1 counter = [0 for _ in range(256)] res = 1 while l < size: # \u9996\u5148\"\u53f3\u6307\u9488\"\u4e0d\u65ad\u5411\u53f3\u8fb9\u5c1d\u8bd5\uff0c\u8d70\u5230\u51fa\u73b0\u91cd\u590d\u7684\u6700\u53f3\u8fb9 while r + 1 < size and counter[ord(s[r + 1])] == 0: # \u8868\u793a\u6ca1\u6709\u91cd\u590d\u5143\u7d20\uff0cr \u53ef\u4ee5\u52a0 1 counter[ord(s[r + 1])] += 1 r += 1 # \u6b64\u65f6\uff0c\u8bb0\u5f55\u4e0d\u91cd\u590d\u5b50\u4e32\u662f\"\u5de6\u6307\u9488\"\u56fa\u5b9a\u65f6\u5019\u6700\u957f res = max(res, r - l + 1) # \u8003\u8651\u79fb\u52a8\"\u5de6\u6307\u9488\" # \u6b64\u65f6 s[r+1] \u5c31\u662f\u5df2\u7ecf\u626b\u8fc7\u7684\u533a\u95f4\u91cc\u91cd\u590d\u7684\u5143\u7d20\uff0c\u8981\u628a\u5b83\u5254\u9664\u51fa\u53bb while r + 1 < size and s[l] != s[r + 1]: # \u6709\u91cd\u590d\u5143\u7d20\uff0c\u5de6\u8fb9\u5c31\u8981\u51cf 1 counter[ord(s[l])] -= 1 l += 1 # \u51fa\u4e86\u4e0a\u4e00\u4e2a\u5faa\u73af\u4ee5\u540e\uff0c\u8fd8\u8981\u518d\u628a\u5de6\u6307\u9488\u5411\u53f3\u79fb\u52a8\u4e00\u683c\uff0c\u5426\u5219\u53f3\u6307\u9488\u4e0d\u80fd\u5411\u53f3\u79fb\u52a8 counter[ord(s[l])] -= 1 l += 1 return res \u601d\u8def2\uff1a\u52a8\u6001\u89c4\u5212 Python \u4ee3\u7801\uff1a class Solution: def lengthOfLongestSubstring(self, s): \"\"\" :type s: str :rtype: int \"\"\" # \u7279\u5224 l = len(s) if l < 2: return l # dp[i] \u8868\u793a\u4ee5 s[i] \u7ed3\u5c3e\u7684\u6700\u957f\u4e0d\u91cd\u590d\u5b50\u4e32\u7684\u957f\u5ea6 # \u56e0\u4e3a\u81ea\u5df1\u80af\u5b9a\u662f\u4e0d\u91cd\u590d\u5b50\u4e32\uff0c\u6240\u4ee5\u521d\u59cb\u503c\u8bbe\u7f6e\u4e3a 1 dp = [1 for _ in range(l)] map = dict() map[s[0]] = 0 for i in range(1, l): if s[i] in map: if i - map[s[i]] > dp[i - 1]: dp[i] = dp[i - 1] + 1 else: dp[i] = i - map[s[i]] else: dp[i] = dp[i - 1] + 1 # \u8bbe\u7f6e\u5b57\u7b26\u4e0e\u7d22\u5f15\u952e\u503c\u5bf9 map[s[i]] = i # \u6700\u540e\u62c9\u901a\u770b\u4e00\u904d\u6700\u5927\u503c return max(dp) \u601d\u8def3\uff1a\u9694\u677f\u6cd5 Python \u4ee3\u7801\uff1a class Solution: def lengthOfLongestSubstring(self, s): # \u7279\u5224 l = len(s) if l < 2: return l # \u9694\u677f\u6cd5 # key:\u5b57\u7b26\uff0cval \u51fa\u73b0\u7684\u7d22\u5f15 map = dict() point = 0 res = 1 for i in range(l): # \u5173\u952e1\uff1amap[s[i]] >= point\uff0c\u7b49\u4e8e\u662f\u53ef\u4ee5\u7684 if s[i] in map and map[s[i]] >= point: # \u5148\u628a\u9694\u677f\u5411\u540e\u79fb\u52a8\u4e00\u4f4d point = map[s[i]] + 1 # \u7136\u540e\u8bb0\u5f55\u6700\u957f\u4e0d\u91cd\u590d\u5b50\u4e32\u7684\u957f\u5ea6 res = max(res, i - point + 1) # \u5173\u952e2\uff1a\u65e0\u8bba\u5982\u4f55\u90fd\u66f4\u65b0\u4f4d\u7f6e map[s[i]] = i return res \u53c2\u8003\u8d44\u6599\uff1a LeetCode \u7b2c 3 \u9898\uff1a\u6700\u957f\u4e0d\u91cd\u590d\u5b57\u7b26\u4e32 \u3002 \u7b2c 49 \u9898\uff1a\u4e11\u6570 \u4f20\u9001\u95e8\uff1a \u4e11\u6570 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u628a\u53ea\u5305\u542b\u56e0\u5b50 $2$\u3001$3$ \u548c $5$ \u7684\u6570\u79f0\u4f5c \u4e11\u6570 \uff08Ugly Number\uff09\u3002 \u4f8b\u5982 $6$\u3001$8$ \u90fd\u662f \u4e11\u6570 \uff0c\u4f46 $14$ \u4e0d\u662f\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u56e0\u5b50 $7$\u3002 \u6c42\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u7684\u7b2c $N$ \u4e2a\u4e11\u6570\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a5 \u8f93\u51fa\uff1a5 \u6ce8\u610f \uff1a\u4e60\u60ef\u4e0a\u6211\u4eec\u628a $1$ \u5f53\u505a\u662f\u7b2c\u4e00\u4e2a\u4e11\u6570\u3002 \u540c LeetCode \u7b2c 264 \u9898\uff0c\u9898\u89e3\u4f20\u9001\u95e8\uff1a LeetCode \u4e0a\u7684\u4e11\u6570\u95ee\u9898 \u3002 \u601d\u8def\uff1a\u6240\u8c13\u7684\u4e00\u4e2a\u6570 $m$ \u662f\u53e6\u4e00\u4e2a\u6570 $n$ \u7684\u56e0\u5b50\uff0c\u662f\u6307 $n$ \u80fd\u88ab $m$ \u6574\u9664\uff0c\u4e5f\u5c31\u662f $n\\%m==0$ \u6210\u7acb\u3002\u6839\u636e\u4e11\u6570\u7684\u5b9a\u4e49\uff0c\u4e11\u6570\u53ea\u80fd\u88ab $2$\u3001$3$ \u548c $5$ \u6574\u9664\u3002\u6839\u636e\u4e11\u6570\u7684\u5b9a\u4e49\uff0c\u4e11\u6570\u5e94\u8be5\u662f\u53e6\u4e00\u4e2a\u4e11\u6570\u4e58\u4ee5 $2$\u3001$3$ \u6216\u8005 $5$ \u7684\u7ed3\u679c\uff08$1$\u9664\u5916\uff09\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6570\u7ec4\uff0c\u91cc\u9762\u7684\u6570\u5b57\u662f\u6392\u597d\u5e8f\u7684\u4e11\u6570\uff0c\u6bcf\u4e00\u4e2a\u4e11\u6570\u90fd\u662f\u524d\u9762\u7684\u4e11\u6570\u4e58\u4ee5 $2$\u3001$3$ \u6216\u8005 $5$ \u5f97\u5230\u7684\u3002 \u8fd9\u4e2a\u601d\u8def\u7684\u5173\u952e\u95ee\u9898\u5728\u4e8e\u600e\u6837\u4fdd\u8bc1\u6570\u7ec4\u91cc\u9762\u7684\u4e11\u6570\u662f\u6392\u597d\u5e8f\u7684\u3002\u5bf9\u4e58\u4ee5 $2$ \u800c\u8a00\uff0c\u80af\u5b9a\u5b58\u5728\u67d0\u4e00\u4e2a\u4e11\u6570 $T2$\uff0c\u6392\u5728\u5b83\u4e4b\u524d\u7684\u6bcf\u4e00\u4e2a\u4e11\u6570\u4e58\u4ee5 $2$ \u5f97\u5230\u7684\u7ed3\u679c\u90fd\u4f1a\u5c0f\u4e8e\u5df2\u6709\u6700\u5927\u7684\u4e11\u6570\uff0c\u5728\u5b83\u4e4b\u540e\u7684\u6bcf\u4e00\u4e2a\u4e11\u6570\u4e58\u4ee5\u4e58\u4ee5 $2$ \u5f97\u5230\u7684\u7ed3\u679c\u90fd\u4f1a\u592a\u5927\u3002\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u4e0b\u8fd9\u4e2a\u4e11\u6570\u7684\u4f4d\u7f6e\uff0c\u540c\u65f6\u6bcf\u6b21\u751f\u6210\u65b0\u7684\u4e11\u6570\u7684\u65f6\u5019\uff0c\u53bb\u66f4\u65b0\u8fd9\u4e2a $T2$\u3002\u5bf9\u4e58\u4ee5 $3$ \u548c $5$ \u800c\u8a00\uff0c\u4e5f\u5b58\u5728\u7740\u540c\u6837\u7684 $T3$ \u548c $T5$\u3002 Python \u4ee3\u7801\uff1a class Solution: def GetUglyNumber_Solution(self, index): # write code here if index < 7: return index res = [1, 2, 3, 4, 5, 6] t2, t3, t5 = 3, 2, 1 for i in range(6, index): res.append(min(res[t2] * 2, min(res[t3] * 3, res[t5] * 5))) while res[t2] * 2 <= res[i]: t2 += 1 while res[t3] * 3 <= res[i]: t3 += 1 while res[t5] * 5 <= res[i]: t5 += 1 return res[index - 1] Java \u4ee3\u7801\uff1a public class Solution2 { // 1\u30012\u30013\u30014\u30015\u30016 \u90fd\u662f\u4e11\u6570 public int GetUglyNumber_Solution(int index) { if (index < 7) { return index; } // \u72b6\u6001\u7684\u5b9a\u4e49\uff1a\u7b2c i \u4e2a\u4e11\u6570\u7684\u6700\u5c0f\u503c\uff0c\u4ece 0 \u5f00\u59cb\u8ba1\u7b97 int[] dp = new int[index]; dp[0] = 1; int t2 = 0; int t3 = 0; int t5 = 0; // \u6ce8\u610f\uff1a i \u4ece 1 \u5f00\u59cb for (int i = 1; i < index; i++) { dp[i] = min3(dp[t2] * 2, dp[t3] * 3, dp[t5] * 5); if (dp[i] == dp[t2] * 2) { t2++; } if (dp[i] == dp[t3] * 3) { t3++; } if (dp[i] == dp[t5] * 5) { t5++; } } // System.out.println(Arrays.toString(dp)); return dp[index - 1]; } private int min3(int n1, int n2, int n3) { return Integer.min(Integer.min(n1, n2), n3); } public static void main(String[] args) { Solution2 solution2 = new Solution2(); // 1 2 3 4 5 6 8 9 10 12 15 16 18 20 24 // [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24] int getUglyNumberSolution = solution2.GetUglyNumber_Solution(15); } } \u7b2c 50-1 \u9898\uff1a\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26 \u4f20\u9001\u95e8\uff1a \u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26 \u3002 \u5728\u5b57\u7b26\u4e32\u4e2d\u627e\u51fa\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u3002 \u5982\u8f93\u5165 \"abaccdeff\" \uff0c\u5219\u8f93\u51fa b \u3002 \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u4e0d\u5b58\u5728\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\uff0c\u8fd4\u56de#\u5b57\u7b26\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a \"abaccdeff\" \u8f93\u51fa\uff1a 'b' \u540c LeetCode \u7b2c 387 \u9898\uff0c\u4f20\u9001\u95e8\uff1a \u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u552f\u4e00\u5b57\u7b26 \u3002 \u601d\u8def\uff1a\u7279\u522b\u5bb9\u6613\u60f3\u5230\u7684\u601d\u8def\uff0c\u5c31\u662f\u7edf\u8ba1\u8bcd\u9891\uff0c\u7edf\u8ba1\u8bcd\u9891\u53ef\u4ee5\u7528\u54c8\u5e0c\u8868\uff0c\u4e5f\u53ef\u4ee5\u7528\u6570\u7ec4\u3002 Python \u4ee3\u7801\uff1a class Solution: def firstNotRepeatingChar(self, s): \"\"\" :type s: str :rtype: str \"\"\" if len(s) < 1: return '#' counter = [0 for _ in range(256)] for alpha in s: counter[ord(alpha)] += 1 for alpha in s: if counter[ord(alpha)] == 1: return alpha # \u8981\u6ce8\u610f\uff1a\u5982\u679c\u662f \"aabbcc\" \u8fd9\u79cd\u6240\u6709\u7684\u5b57\u7b26\u90fd\u51fa\u73b0\u4e0d\u6b62 1 \u6b21\uff0c # \u5c31\u6309\u7167\u9898\u610f\uff0c\u8fd4\u56de '#' return '#' \u7b2c 50-2 \u9898\uff1a\u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26 \u4f20\u9001\u95e8\uff1a \u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u627e\u51fa\u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u3002 \u4f8b\u5982\uff0c\u5f53\u4ece\u5b57\u7b26\u6d41\u4e2d\u53ea\u8bfb\u51fa\u524d\u4e24\u4e2a\u5b57\u7b26\u201dgo\u201d\u65f6\uff0c\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u662f\u2019g\u2019\u3002 \u5f53\u4ece\u8be5\u5b57\u7b26\u6d41\u4e2d\u8bfb\u51fa\u524d\u516d\u4e2a\u5b57\u7b26\u201dgoogle\u201d\u65f6\uff0c\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u662f\u2019l\u2019\u3002 \u5982\u679c\u5f53\u524d\u5b57\u7b26\u6d41\u6ca1\u6709\u5b58\u5728\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\uff0c\u8fd4\u56de#\u5b57\u7b26\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a \"google\" \u8f93\u51fa\uff1a \"ggg#ll\" \u89e3\u91ca\uff1a\u6bcf\u5f53\u5b57\u7b26\u6d41\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\uff0c\u5c31\u8fdb\u884c\u4e00\u6b21\u5224\u65ad\u5e76\u8f93\u51fa\u5f53\u524d\u7684\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u3002 Python \u4ee3\u7801\uff1a\u4f7f\u7528\u8f85\u52a9\u6570\u7ec4\uff0c\u505a\u5b57\u6bcd\u9891\u6570\u7edf\u8ba1 class Solution: def __init__(self): self.chars = [0 for _ in range(256)] self.strs = [] def firstAppearingOnce(self): \"\"\" :rtype: str \"\"\" for char in self.strs: if self.chars[ord(char)] == 1: return char return '#' def insert(self, char): \"\"\" :type char: str :rtype: void \"\"\" self.chars[ord(char)] += 1 self.strs.append(char) Java \u4ee3\u7801\uff1a Python \u4ee3\u7801\uff1a Python \u4ee3\u7801\uff1a class Solution: h = {} r = [] def firstAppearingOnce(self): while len(Solution.r): if Solution.h[Solution.r[0]] == 1: return Solution.r[0] Solution.r = Solution.r[1:] return '#' def insert(self, char): Solution.h[char] = Solution.h.get(char, 0) + 1 if Solution.h[char] == 1: Solution.r.append(char) \u4f5c\u8005\uff1aapplezjm \u94fe\u63a5\uff1ahttps://www.acwing.com/activity/content/code/content/19320/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \uff08\u672c\u8282\u5b8c\uff09","title":"41 50"},{"location":"41-50/#offer-2-python-41-50","text":"","title":"\u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09 \u9898\u89e3\uff08Python \u8bed\u8a00\u5b9e\u73b0\uff09\u7b2c 41-50 \u9898"},{"location":"41-50/#41","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570 \u3002 \u5982\u4f55\u5f97\u5230\u4e00\u4e2a\u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570\uff1f \u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5947\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4f4d\u4e8e\u4e2d\u95f4\u7684\u6570\u503c\u3002 \u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5076\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u3002 \u6837\u4f8b \u8f93\u5165\uff1a1, 2, 3, 4 \u8f93\u51fa\uff1a1,1.5,2,2.5 \u89e3\u91ca\uff1a\u6bcf\u5f53\u6570\u636e\u6d41\u8bfb\u5165\u4e00\u4e2a\u6570\u636e\uff0c\u5c31\u8fdb\u884c\u4e00\u6b21\u5224\u65ad\u5e76\u8f93\u51fa\u5f53\u524d\u7684\u4e2d\u4f4d\u6570\u3002 \u53c2\u8003\u8d44\u6599\uff1a LeetCode \u7b2c 295 \u9898\uff1a\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570 \u3002 \u95ee\u9898\uff1a1\u3001\u4e0a\u9762\u7684\u601d\u8def\u662f\u5f88\u7b80\u5355\u7684\uff0c\u60f3\u60f3\u7528 Python \u5982\u4f55\u5b9e\u73b0\u3002 2\u3001LeetCode \u4e0a\u9762\u7b2c 4 \u9898\uff1a\u6392\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\u5982\u4f55\u6c42\uff1f \u53e6\u4e00\u79cd\u4f7f\u7528\u5806\u7684\u89e3\u6cd5\uff1a\u8fd9\u9053\u9898\u662f\u5806\u89e3\u51b3\u7684\u95ee\u9898\u3002 \u7528\u4e24\u4e2a\u5806\uff1amax heap \u548c min heap\uff0c\u518d\u4e00\u4e2amedian\u503c\uff0c \u7ef4\u6301\u4e24\u4e2a\u5806\u7684\u5927\u5c0f\u76f8\u7b49(max\u5806\u53ef\u4ee5\u6bd4min\u5806\u591a\u4e00\u4e2a). \u5bf9\u4e8e\u65b0\u6765\u7684\u5143\u7d20\uff0c\u6bd4\u8f83\u65b0\u5143\u7d20\u548cmedian\u7684\u5927\u5c0f\uff0c\u5982\u679c\u5927\u4e8emedian\u5c31\u653e\u5165\u6700\u5c0f\u5806\u91cc\u9762\uff0c\u5982\u679c\u5c0f\u4e8emedian\u5c31\u653e\u5165\u6700\u5927\u5806\u91cc\u9762\uff0c\u5982\u679cmax heap,\u548cmin heap\u4e0d\u5e73\u8861\u4e86\uff0c\u5c31\u8c03\u6574\u4e00\u4e0b\u3002 \u7136\u540e\u8c03\u6574\u8fc7\u540emedian \u91cc\u9762\u7684\u503c\u5c31\u662f\u6211\u4eec\u8981\u6c42\u7684\u4e2d\u4f4d\u6570\u3002 C++ \u4ee3\u7801\uff1a","title":"\u7b2c 41 \u9898\uff1a\u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570"},{"location":"41-50/#42","text":"\u4f20\u9001\u95e8\uff1a \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a \u975e\u7a7a \u6574\u578b\u6570\u7ec4\uff0c\u6570\u7ec4\u91cc\u7684\u6570\u53ef\u80fd\u4e3a\u6b63\uff0c\u4e5f\u53ef\u80fd\u4e3a\u8d1f\u3002 \u6570\u7ec4\u4e2d\u4e00\u4e2a\u6216\u8fde\u7eed\u7684\u591a\u4e2a\u6574\u6570\u7ec4\u6210\u4e00\u4e2a\u5b50\u6570\u7ec4\u3002 \u6c42\u6240\u6709\u5b50\u6570\u7ec4\u7684\u548c\u7684\u6700\u5927\u503c\u3002 \u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1, -2, 3, 10, -4, 7, 2, -5] \u8f93\u51fa\uff1a18 \u540c LeetCode \u7b2c 53 \u9898\uff0c\u9898\u89e3\u4f20\u9001\u95e8\uff1a LeetCode \u7b2c 53 \u9898\uff1a\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u3002 \u201c\u5927\u96ea\u83dc\u201d\u7684\u505a\u6cd5\uff1a\u72b6\u6001\uff1a\u4ee5\u524d\u4e00\u4e2a\u6570\u7ed3\u5c3e\u7684\u201c\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\u201d\u4e3a\u72b6\u6001\u3002 C++ \u4ee3\u7801\uff1a \u5206\u6790\uff1a \u6839\u636e\u201c\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u201d\u95ee\u9898\u7684\u601d\u8def\uff0c\u6211\u4eec\u5728\u8003\u8651\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u5b9a\u4e49\u4ee5\u5f53\u524d\u6570\u7ec4\u5143\u7d20\u4e3a\u7ed3\u5c3e\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u5f80\u5f80\u4f1a\u4f7f\u7528\u60c5\u51b5\u53d8\u5f97\u7b80\u5355\u4e00\u4e9b\u3002 \u8bbe\u7f6e\u72b6\u6001\uff1a dp[i] \u4ee5 i \u7ed3\u5c3e\u7684\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\u3002 \u8003\u8651\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \u5982\u679c nums[i] < 0\uff0cdp[i] = max(dp[i-1] + nums[i],nums[i]) ; \u5982\u679c nums[i] >= 0\uff0cdp[i] = dp[i-1] + nums[i] ; \u7efc\u4e0a\u6240\u8ff0\uff0c\u4e0d\u8bba\u5f53\u524d\u8003\u8651\u7684\u6570\u7ec4\u5143\u7d20\u662f\u5927\u4e8e\u7b49\u4e8e 0 \u8fd8\u662f\u5c0f\u4e8e 0\uff0c\u53ea\u8981\u6ee1\u8db3 dp[i] = max(dp[i-1] + nums[i], nums[i]) \u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u5c31\u662f\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u3002 Java \u4ee3\u7801\uff1a public class Solution { public int FindGreatestSumOfSubArray(int[] array) { int n = array.length; if (n == 0) { return 0; } int[] dp = new int[n]; dp[0] = array[0]; int res = array[0]; for (int i = 1; i < n; i++) { dp[i] = Integer.max(dp[i - 1] + array[i], array[i]); res = Integer.max(res, dp[i]); } return res; } public static void main(String[] args) { int[] nums = new int[]{6, -3, -2, 7, -15, 1, 2, 2}; Solution solution = new Solution(); int findGreatestSumOfSubArray = solution.FindGreatestSumOfSubArray(nums); System.out.println(findGreatestSumOfSubArray); } }","title":"\u7b2c 42 \u9898\uff1a\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c"},{"location":"41-50/#43-1-1-n-1","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u4ece 1 \u5230 n \u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570 \u3002 \u8f93\u5165\u4e00\u4e2a\u6574\u6570 $n$\uff0c\u6c42\u4ece $1$ \u5230 $n$ \u8fd9 $n$ \u4e2a\u6574\u6570\u7684\u5341\u8fdb\u5236\u8868\u793a\u4e2d $1$ \u51fa\u73b0\u7684\u6b21\u6570\u3002 \u4f8b\u5982\u8f93\u5165 $12$\uff0c\u4ece $1$ \u5230 $12$ \u8fd9\u4e9b\u6574\u6570\u4e2d\u5305\u542b $1$ \u7684\u6570\u5b57\u6709 $1$\uff0c$10$\uff0c$11$ \u548c $12$\uff0c\u201c$1$\u201d \u4e00\u5171\u51fa\u73b0\u4e86 $5$ \u6b21\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a 12 \u8f93\u51fa\uff1a 5 \u540c LeetCode \u7b2c 233 \u9898\uff1a\u6570\u5b57 $1$ \u7684\u4e2a\u6570\u3002 \u5927\u96ea\u83dc\u7684\u89e3\u6cd5\uff1a C++ \u4ee3\u7801\uff1a \u601d\u8def\uff1a Python \u4ee3\u7801\uff1a # 56. \u4ece1\u5230n\u6574\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570 # # \u8f93\u5165\u4e00\u4e2a\u6574\u6570n\uff0c\u6c42\u4ece1\u5230n\u8fd9n\u4e2a\u6574\u6570\u7684\u5341\u8fdb\u5236\u8868\u793a\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570\u3002 # # \u4f8b\u5982\u8f93\u516512\uff0c\u4ece1\u523012\u8fd9\u4e9b\u6574\u6570\u4e2d\u5305\u542b\u201c1\u201d\u7684\u6570\u5b57\u67091\uff0c10\uff0c11\u548c12\uff0c\u5176\u4e2d\u201c1\u201d\u4e00\u5171\u51fa\u73b0\u4e865\u6b21\u3002 # # \u6837\u4f8b # \u8f93\u5165\uff1a 12 # \u8f93\u51fa\uff1a 5 class Solution(object): def numberOf1Between1AndN_Solution(self, n): \"\"\" :type n: int :rtype: int \"\"\" if n <= 0: return 0 number = [] while n: number.append(n % 10) n //= 10 res = 0 for i in range(len(number) - 1, -1, -1): left = 0 right = 0 # \u60f3\u6e05\u695a\u8fd9\u91cc t \u4e3a\u4ec0\u4e48\u4ece 1 \u5f00\u59cb t = 1 for j in range(len(number) - 1, i, -1): left = left * 10 + number[j] for j in range(i - 1, -1, -1): right = right * 10 + number[j] t *= 10 # print(left, right) # \u81f3\u5c11\u6709\u5de6\u8fb9\u7684\u6570\u8fd9\u4e48\u591a res += left * t # print(number[i], left, right, t, left * t) if number[i] == 1: res += right + 1 elif number[i] > 1: res += t return res if __name__ == '__main__': solution = Solution() n = 45032 result = solution.numberOf1Between1AndN_Solution(n) print('result', result) \u89e3\u6cd51\uff1a\u4ece $1$ \u5230 $n$ \u904d\u5386\uff0c\u6bcf\u4e2a\u6570\u901a\u8fc7\u5bf9 $10$ \u6c42\u4f59\u6570\u5224\u65ad\u6574\u6570\u7684\u4e2a\u4f4d\u6570\u5b57\u662f\u4e0d\u662f $1$\uff0c\u5927\u4e8e $10$ \u7684\u9664\u4ee5 $10$ \u4e4b\u540e\u518d\u5224\u65ad\u3002\u6211\u4eec\u5bf9\u6bcf\u4e2a\u6570\u5b57\u90fd\u8981\u505a\u9664\u6cd5\u548c\u6c42\u4f59\u8fd0\u7b97\u4ee5\u6c42\u51fa\u8be5\u6570\u5b57\u4e2d $1$ \u51fa\u73b0\u7684\u6b21\u6570\u3002\u5982\u679c\u8f93\u5165\u6570\u5b57 $n$\uff0c$n$ \u6709 $O(\\log n)$ \u4f4d\uff0c\u6211\u4eec\u9700\u8981\u5224\u65ad\u6bcf\u4e00\u4f4d\u662f\u4e0d\u662f $1$\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n* \\log n)$\u3002\u8fd9\u6837\u505a\uff0c\u8ba1\u7b97\u91cf\u5927\uff0c\u6548\u7387\u4e0d\u9ad8\u3002 \u672c\u6587\u91c7\u7528\u300a\u6570\u5b66\u4e4b\u7f8e\u300b\u4e0a\u9762\u63d0\u51fa\u7684\u65b9\u6cd5\uff0c\u8bbe\u5b9a\u6574\u6570\u70b9\uff08\u5982 $1$\u3001$10$\u3001$100$\u7b49\u7b49\uff09\u4f5c\u4e3a\u4f4d\u7f6e\u70b9$i$\uff08\u5bf9\u5e94 $n$\u7684\u4e2a\u4f4d\u3001\u5341\u4f4d\u3001\u767e\u4f4d\u7b49\u7b49\uff09\uff0c\u5206\u522b\u5bf9\u6bcf\u4e2a\u6570\u4f4d\u4e0a\u6709\u591a\u5c11\u5305\u542b $1$ \u7684\u70b9\u8fdb\u884c\u5206\u6790\u3002 \u6839\u636e\u8bbe\u5b9a\u7684\u6574\u6570\u4f4d\u7f6e\uff0c\u5bf9 $n$ \u8fdb\u884c\u5206\u5272\uff0c\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u9ad8\u4f4d $n/i$\uff0c\u4f4e\u4f4d $n \\% i$\uff1b 1\u3001\u5f53 $i$ \u8868\u793a\u767e\u4f4d\uff0c\u4e14\u767e\u4f4d\u5bf9\u5e94\u7684\u6570 $\\ge2$\uff0c \u4f8b\u5982 $n=31456$\uff0c\u6b64\u65f6\u8003\u8651 $i=100$\uff0c\u5219 $a=314$\uff0c$b=56$\u3002 \u6b64\u65f6\u767e\u4f4d\u4e3a $1$ \u7684\u6b21\u6570\u6709 $a/10+1=32$ \u6279\u6b21\uff0c\u5177\u4f53\u5982\u4e0b\uff1a \u8bf4\u660e\uff1a\u7b2c 1 \u6279\u6b21\uff1a$00100-00199$\uff0c\u4e00\u5171 $100$ \u4e2a\u6570\uff1b \u7b2c 2 \u6279\u6b21\uff1a$01100-01199$\uff0c\u4e00\u5171 $100$ \u4e2a\u6570\uff1b \u2026\u2026 \u7b2c 32 \u6279\u6b21\uff1a$31100-31199$\uff0c\u4e00\u5171 $100$ \u4e2a\u6570\uff1b \u6700\u9ad8\u4e24\u4f4d $0-31$\uff0c\u6bcf\u4e00\u6279\u6b21\u90fd\u5305\u542b $100$ \u4e2a\u8fde\u7eed\u7684\u70b9\uff0c\u5373\u5171\u6709 $(a/10+1)\\times100$ \u4e2a\u70b9\u7684\u767e\u4f4d\u4e3a $1$\uff1b 2\u3001\u5f53 $i$ \u8868\u793a\u767e\u4f4d\uff0c\u4e14\u767e\u4f4d\u5bf9\u5e94\u7684\u6570\u4e3a $1$\uff0c \u4f8b\u5982 $n=31156$\uff0c$i=100$\uff0c\u5219 $a=311$\uff0c$b=56$\uff0c\u6b64\u65f6\u767e\u4f4d\u5bf9\u5e94\u7684\u5c31\u662f $1$\u3002 \u7b2c 1 \u6279\u6b21\uff1a$00100-00199$\uff0c\u4e00\u5171 $100$ \u4e2a\u6570\uff1b \u7b2c 2 \u6279\u6b21\uff1a$01100-01199$\uff0c\u4e00\u5171 $100$ \u4e2a\u6570\uff1b \u2026\u2026 \u7b2c 31 \u6279\u6b21\uff1a$30100-30199$\uff0c\u4e00\u5171 $100$ \u4e2a\u6570\uff1b \u7b2c 32 \u6279\u6b21\uff1a$31100-311569$\uff0c\u4e00\u5171 $57$ \u4e2a\u6570\uff1b \u5219\u5171\u6709 $a/10$ \u6b21\u662f\u5305\u542b $100$ \u4e2a\u8fde\u7eed\u70b9\uff0c\u6700\u9ad8\u4e24\u4f4d $0-30$\u3002 \u5f53\u6700\u9ad8\u4e24\u4f4d\u4e3a $31$\uff08\u5373 $a=311$\uff09\uff0c\u672c\u6b21\u53ea\u5bf9\u5e94\u5c40\u90e8\u70b9 $00-56$\uff0c\u5171 $b+1$\u6b21\uff0c\u6240\u6709\u70b9\u52a0\u8d77\u6765\u5171\u6709 $\uff08a/10\\times100\uff09+(b+1)$\uff0c\u8fd9\u4e9b\u70b9\u767e\u4f4d\u5bf9\u5e94\u4e3a $1$; 3\u3001\u5f53 $i$ \u8868\u793a\u767e\u4f4d\uff0c\u4e14\u767e\u4f4d\u5bf9\u5e94\u7684\u6570\u4e3a $0$\uff0c\u5982 $n=31056$\uff0c$i=100$\uff0c\u5219 $a=310$\uff0c$b=56$\u3002 \u7b2c 1 \u6279\u6b21\uff1a$00100-00199$\uff0c\u4e00\u5171 $100$ \u4e2a\u6570\uff1b \u7b2c 2 \u6279\u6b21\uff1a$01100-01199$\uff0c\u4e00\u5171 $100$ \u4e2a\u6570\uff1b \u2026\u2026 \u7b2c 31 \u6279\u6b21\uff1a$30100-30199$\uff0c\u4e00\u5171 $100$ \u4e2a\u6570\uff1b \u7b2c 32 \u6279\u6b21\uff1a$31000-31056$\uff0c\u4e00\u5171 $0$ \u4e2a\u6570\uff1b \u6b64\u65f6\u767e\u4f4d\u4e3a $1$ \u7684\u6b21\u6570\u6709 $a/10=31$\uff0c\u6700\u9ad8\u4e24\u4f4d $0-30$\uff1b \u7efc\u5408\u4ee5\u4e0a $3$ \u79cd\u60c5\u51b5\uff0c\u5f53\u767e\u4f4d\u5bf9\u5e94 $0$ \u6216 $\\ge2$ \u65f6\uff0c\u6709 $(a+8)/10$ \u6b21\u5305\u542b\u6240\u6709 $100$ \u4e2a\u70b9\uff0c\u8fd8\u6709\u5f53\u767e\u4f4d\u4e3a $1$ \uff08$a\\%10==1$\uff09\uff0c\u9700\u8981\u589e\u52a0\u5c40\u90e8\u70b9 $b+1$\u3002 \u4e4b\u6240\u4ee5\u8865 $8$\uff0c\u662f\u56e0\u4e3a\u5f53\u767e\u4f4d\u4e3a $0$\uff0c\u5219 $a/10==(a+8)/10$\uff0c\u5f53\u767e\u4f4d $\\ge2$\uff0c\u8865 $8$ \u4f1a\u4ea7\u751f\u8fdb\u4f4d\uff0c\u6548\u679c\u7b49\u540c\u4e8e $(a/10+1)$\u3002 Python \u4ee3\u7801\uff1a class Solution: def NumberOf1Between1AndN_Solution(self, n): # write code here count = 0 i = 1 while i <= n: a = n / i b = n % i count += (a+8) / 10 * i + (a % 10 == 1)*(b + 1) i *= 10 return count \u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_38211852/article/details/80863364 https://cuijiahua.com/blog/2017/12/basis_31.html","title":"\u7b2c 43 \u9898\uff1a\u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff08\u4ece 1 \u5230 n \u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff09"},{"location":"41-50/#44","text":"\u4f20\u9001\u95e8\uff1a \u6570\u5b57\u5e8f\u5217\u4e2d\u67d0\u4e00\u4f4d\u7684\u6570\u5b57 \u3002 \u6570\u5b57\u4ee5 0123456789101112131415\u2026 \u7684\u683c\u5f0f\u5e8f\u5217\u5316\u5230\u4e00\u4e2a\u5b57\u7b26\u5e8f\u5217\u4e2d\u3002 \u5728\u8fd9\u4e2a\u5e8f\u5217\u4e2d\uff0c\u7b2c 5 \u4f4d\uff08\u4ece 0 \u5f00\u59cb\u8ba1\u6570\uff09\u662f 5 \uff0c\u7b2c 13 \u4f4d\u662f 1 \uff0c\u7b2c 19 \u4f4d\u662f 4 \uff0c\u7b49\u7b49\u3002 \u8bf7\u5199\u4e00\u4e2a\u51fd\u6570\u6c42\u4efb\u610f\u4f4d\u5bf9\u5e94\u7684\u6570\u5b57\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a13 \u8f93\u51fa\uff1a1 Python \u4ee3\u7801\uff1a\u53c2\u8003\u4e86 LeetCode \u7b2c 400 \u9898\u8ba8\u8bba\u533a\u4ee3\u7801 class Solution(object): def digitAtIndex(self, n): \"\"\" :type n: int :rtype: int \"\"\" # \u5982\u679c n \u5c0f\u4e8e 10 \uff0c\u76f4\u63a5\u8fd4\u56de\u5c31\u53ef\u4ee5\u4e86 if n < 10: return n # \u8ba1\u7b97\u524d\u7f00\u90e8\u5206 base = 9 digits = 1 # 2 \u4f4d\u6570\uff0c\u4ece 10 \u5230 99 \u4e00\u5171 ( 99 - 10 + 1) * 2 = 90 * 2 = 180 \u4f4d # 3 \u4f4d\u6570\uff0c\u4ece 100 \u5230 999 \u4e00\u5171 ( 999 - 100 + 1) * 2 = 900 * 3 = 2700 \u4f4d # 4 \u4f4d\u6570\uff0c\u4ece 1000 \u5230 9999 \u4e00\u5171 ( 9999 - 1000 + 1) * 2 = 9000 * 4 = 3600 \u4f4d while n - base * digits > 0: n -= base * digits base *= 10 digits += 1 index = n % digits if index == 0: # \u8ba1\u7b97\u51fa num \u662f\u591a\u5c11 # \u4f8b\u5982\uff1a192\uff0c\u6709 1 \u4e2a\u4f4d\u79fb\u7684\u504f\u5dee num = 10 ** (digits - 1) + n // digits - 1 # \u8fd4\u56de\u4e2a\u4f4d\u5c31\u53ef\u4ee5\u4e86 return num % 10 else: # \u4e0d\u80fd\u6574\u9664\uff0c\u90a3\u4e2a\u504f\u79fb\u5c31\u4e0d\u7528\u7b97\u4e86 # \u4f8b\u5982 194 = 189 + 5 # 100 + 2 = 102 num = 10 ** (digits - 1) + n // digits # \u4ece\u5de6\u8fb9\u5411\u53f3\u8fb9\u6570\uff0c\u7b2c 2 \u4f4d for i in range(index, digits): num //= 10 return num % 10 \u53c2\u8003\u8d44\u6599\uff1a 1\u3001https://www.acwing.com/activity/content/code/content/20758/ 2\u3001https://blog.csdn.net/Koala_Tree/article/details/79536284 [\u7ad9\u5916\u56fe\u7247\u4e0a\u4f20\u4e2d...(image-a760ae-1558582697894)] \u601d\u8def\uff1a\u8df3\u8fc7\u4e0d\u540c\u4f4d\u6570\u7684\u6570\u5b57\uff0c\u5728\u76f8\u5e94\u4f4d\u6570\u4e2d\u5bfb\u627e\u3002 \u4ee5\u5e8f\u5217\u4e2d\u7b2c $1001$ \u4f4d\u4e3a\u4f8b\uff1a 1\u3001\u5e8f\u5217\u524d $10$ \u4f4d\u4e3a $0$ \u5230 $9$\uff0c\u8df3\u8fc7\uff0c\u518d\u4ece\u540e\u9762\u627e $991$ \u4f4d\uff1b 2\u3001\u540e\u9762 $180$ \u4f4d\u4e3a $10$ \u5230 $99$\uff0c\u56e0\u4e3a\u4e00\u5171 $99-10+1=90$ \u4e2a\u6570\uff0c\u6bcf\u4e2a\u6570 $2$ \u4f4d\uff0c\u6240\u4ee5 $180$ \u4f4d\uff1b \u8df3\u8fc7\uff0c\u518d\u4ece\u540e\u9762\u627e $811$ \u4f4d\uff08$1001-10-180=811$\uff09\uff1b \u540e\u9762 $2700$ \u4f4d\u4e3a $100$ \u5230 $999$\uff0c\u56e0\u4e3a $811<2700$\uff0c\u6240\u4ee5 $811$ \u4f4d\u662f\u67d0\u4e2a\u4e09\u4f4d\u6570\u4e2d\u7684\u4e00\u4f4d\uff1b \u7531\u4e8e811=270*3+1\uff0c\u8fd9\u5c31\u662f\u8bf4811\u4f4d\u662f\u4ece100\u5f00\u59cb\u7684\u7b2c270\u4e2a\u6570\u5b57\u5373370\u7684\u4e2d\u95f4\u4e00\u4f4d\uff0c\u53737\u3002(\u6ce8\u610f\uff0c\u8fd9\u91cc\u90fd\u662f\u4ece\u7b2c0\u4f4d\u5f00\u59cb\u8ba1\u6570\u7684) \u4f5c\u8005\uff1aKoala_Tree \u6765\u6e90\uff1aCSDN \u539f\u6587\uff1ahttps://blog.csdn.net/Koala_Tree/article/details/79536284 \u7248\u6743\u58f0\u660e\uff1a\u672c\u6587\u4e3a\u535a\u4e3b\u539f\u521b\u6587\u7ae0\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u535a\u6587\u94fe\u63a5\uff01 Java \u4ee3\u7801\uff1a class Solution { // 9*1 9*10*2 9*10*10*3 public int digitAtIndex(int n) { int len = 1; long count = 9; int start = 1; while (n > len * count) { //13 n=n-9=4 len=2 count=90 start=10 n -= len * count; //start=10+3/2=11 \u7b54\u6848\u662f11\u7684\u7b2c\u4e8c\u4e2a1 len += 1; count *= 10; start *= 10; } // start \u8bb0\u5f55\u5f53\u524d\u5faa\u73af\u533a\u95f4\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\uff0c\u5f53 n \u843d\u5230\u67d0\u4e00\u4e2a\u786e\u5b9a\u7684\u533a\u95f4\u91cc\u4e86, // \u90a3\u4e48 (n-1)/len \u5c31\u662f\u76ee\u6807\u6570\u5b57\u5728\u8be5\u533a\u95f4\u91cc\u7684\u5750\u6807\uff0c\u52a0\u4e0a start \u5c31\u662f\u5f97\u5230\u4e86\u76ee\u6807\u6570\u5b57 start += (n - 1) / len; String s = Integer.toString(start); return Character.getNumericValue(s.charAt((n - 1) % len)); } } \u53c2\u8003\u8d44\u6599\uff1a\u8fd9\u7bc7\u7b80\u4e66\u4e0a\u7684\u6587\u7ae0\u6709\u8be6\u7ec6\u6b65\u9aa4\u3002https://www.jianshu.com/p/0bbf1fcbe070\u3002","title":"\u7b2c 44 \u9898\uff1a\u6570\u5b57\u5e8f\u5217\u4e2d\u67d0\u4e00\u4f4d\u7684\u6570\u5b57"},{"location":"41-50/#leetcode-400-400-n","text":"\u8bf4\u660e\uff1a\u53ea\u4e0d\u8fc7 LeetCode \u7b2c 400 \u9898\u4ece 1 \u5f00\u59cb\uff0c\u4f20\u9001\u95e8\uff1a 400. \u7b2c N \u4e2a\u6570\u5b57 \u3002 \u5728\u65e0\u9650\u7684\u6574\u6570\u5e8f\u5217 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...\u4e2d\u627e\u5230\u7b2c n \u4e2a\u6570\u5b57\u3002 \u6ce8\u610f: n \u662f\u6b63\u6570\u4e14\u572832\u4e3a\u6574\u5f62\u8303\u56f4\u5185 ( n < 231)\u3002 \u793a\u4f8b 1: ``` \u8f93\u5165: 3 \u8f93\u51fa: 3 ``` \u793a\u4f8b 2: ``` \u8f93\u5165: 11 \u8f93\u51fa: 0 \u8bf4\u660e: \u7b2c11\u4e2a\u6570\u5b57\u5728\u5e8f\u5217 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... \u91cc\u662f0\uff0c\u5b83\u662f10\u7684\u4e00\u90e8\u5206\u3002 ``` Python \u4ee3\u7801\uff1a class Solution: def findNthDigit(self, n): \"\"\" :type n: int :rtype: int \"\"\" # \u7279\u5224\uff1a\u5982\u679c n \u5c0f\u4e8e 10 \uff0c\u76f4\u63a5\u8fd4\u56de\u5c31\u53ef\u4ee5\u4e86 if n < 10: return n # \u8868\u793a\u51e0\u4f4d\u6570 # 2 \u4f4d\u6570\uff0c\u4ece 10 \u5230 99 \u4e00\u5171 ( 99 - 10 + 1) * 2 = 90 * 2 = 180 \u4f4d # 3 \u4f4d\u6570\uff0c\u4ece 100 \u5230 999 \u4e00\u5171 ( 999 - 100 + 1) * 2 = 900 * 3 = 2700 \u4f4d # 4 \u4f4d\u6570\uff0c\u4ece 1000 \u5230 9999 \u4e00\u5171 ( 9999 - 1000 + 1) * 2 = 9000 * 4 = 3600 \u4f4d # \u6b65\u9aa41\uff1acalculate how many digits the number has # \u8ba1\u7b97\u524d\u7f00\u90e8\u5206 length = 0 base = 9 digits = 1 # n = 1001 \u65f6\uff0c9 \u8fc7\uff0c180 \u8fc7\uff0c\u5269\u4e0b 812 # \u4e0d\u8d8a\u754c\u624d\u52a0\uff0c\u8981\u6e05\u695a\u8fd9\u4e00\u70b9 while length + base * digits < n: length += base * digits base *= 10 digits += 1 n -= length # step 2. calculate what the number is # \u5230\u8fd9\u91cc\uff0cnum \u662f \"digits \u4f4d\u6570\" \u4e2d\u7684\u67d0\u4e00\u4e2a\u6570\u5b57 # \u4ee5 digits = 3 \u4e3a\u4f8b\uff0cn \u662f 100 - 999 \u4e2d\u7684\u4e00\u4f4d\uff0cnum \u8868\u793a\u662f\u54ea\u4e2a\u6570\u5b57 index = n % digits if index == 0: # \u5982\u679c\u6574\u9664\uff0c\u5c31\u662f\u90a3\u4e2a\u6570\u5b57\u7684\u6700\u540e\u4e00\u4f4d num = 10 ** (digits - 1) + n // digits - 1 return num % 10 else: num = 10 ** (digits - 1) + n // digits for i in range(index, digits): num //= 10 return num % 10 if __name__ == '__main__': solution = Solution() n = 190 result1 = solution.findNthDigit(n) print(result1)","title":"\u540c LeetCode \u7b2c 400 \u9898\uff1a400. \u7b2c N \u4e2a\u6570\u5b57"},{"location":"41-50/#45","text":"\u4f20\u9001\u95e8\uff1a \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4\uff0c\u628a\u6570\u7ec4\u91cc\u6240\u6709\u6570\u5b57\u62fc\u63a5\u8d77\u6765\u6392\u6210\u4e00\u4e2a\u6570\uff0c\u6253\u5370\u80fd\u62fc\u63a5\u51fa\u7684\u6240\u6709\u6570\u5b57\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u3002 \u4f8b\u5982\u8f93\u5165\u6570\u7ec4 [3, 32, 321] \uff0c\u5219\u6253\u5370\u51fa\u8fd9 3 \u4e2a\u6570\u5b57\u80fd\u6392\u6210\u7684\u6700\u5c0f\u6570\u5b57 321323 \u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [3, 32, 321] \u8f93\u51fa\uff1a 321323 \u6ce8\u610f \uff1a\u8f93\u51fa\u6570\u5b57\u7684\u683c\u5f0f\u4e3a\u5b57\u7b26\u4e32\u3002 \u540c LeetCode \u7b2c 179 \u9898\uff0c \u6700\u5927\u6570 \u3002 Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { public String PrintMinNumber(int[] numbers) { int len = numbers.length; if (len == 0) { return \"\"; } String[] numsStr = new String[len]; for (int i = 0; i < len; i++) { numsStr[i] = numbers[i] + \"\"; } Arrays.sort(numsStr, (a, b) -> (a + b).compareTo(b + a)); StringBuilder builder = new StringBuilder(); for (int i = 0; i < len; i++) { builder.append(numsStr[i]); } return builder.toString(); } public static void main(String[] args) { int[] nums = new int[]{3, 32, 321}; Solution solution = new Solution(); String printMinNumber = solution.PrintMinNumber(nums); System.out.println(printMinNumber); } } \u8bf4\u660e\uff1a\u5176\u5b9e\u5c31\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219\u3002Python3 \u60f3\u7528 cmp \u800c\u4e0d\u662f key \u7684\u8bdd\uff0c\u9700\u8981 from functools import cmp_to_key \uff0c\u7136\u540e sort \u6216\u8005 sorted \u7684\u65f6\u5019 key = cmp_to_key(your_comparator) \u3002 Python \u4ee3\u7801\uff1a class Solution(object): def printMinNumber(self, nums): \"\"\" :type nums: List[int] :rtype: str \"\"\" if len(nums) == 0: return '' # \u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219 from functools import cmp_to_key key_func = cmp_to_key(lambda a, b: int(a + b) - int(b + a)) result = sorted(map(str, nums), key=key_func) return ''.join(result) if __name__ == '__main__': list1 = [7, -8, 5, 4, 0, -2, -5] # \u8981\u6c42\uff1a1\u3001\u6b63\u6570\u5728\u524d\u8d1f\u6570\u5728\u540e # 2\u3001\u6b63\u6570\u4ece\u5c0f\u5230\u5927 # 3\u3001\u8d1f\u6570\u4ece\u5927\u5230\u5c0f result = sorted(list1, key=lambda x: (x < 0, abs(x))) print(result) s = 'asdf234GDSdsf23' # \u6392\u5e8f:\u5c0f\u5199-\u5927\u5199-\u5947\u6570-\u5076\u6570 print( \"\".join( sorted( s, key=lambda x: ( x.isdigit(), x.isdigit() and int(x) % 2 == 0, x.isupper(), x)))) \u53e6\u4e00\u79cd\u5199\u6cd5\uff1a Python \u4ee3\u7801\uff1a class NumCompare(str): # \u6ce8\u610f\uff1a\u8fd9\u91cc\u7ee7\u627f str \u7c7b def __lt__(self, other): return self + other < other + self class Solution(object): def printMinNumber(self, nums): \"\"\" :type nums: List[int] :rtype: str \"\"\" if len(nums) == 0: return '' # \u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219 result = sorted(map(str, nums), key=NumCompare) return ''.join(result)","title":"\u7b2c 45 \u9898\uff1a\u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570"},{"location":"41-50/#46","text":"\u4f20\u9001\u95e8\uff1a \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u89c4\u5219\u628a\u5b83\u7ffb\u8bd1\u4e3a\u5b57\u7b26\u4e32\uff1a 0 \u7ffb\u8bd1\u6210 \u201ca\u201d\uff0c1 \u7ffb\u8bd1\u6210 \u201cb\u201d\uff0c\u2026\u2026\uff0c11 \u7ffb\u8bd1\u6210\u201cl\u201d\uff0c\u2026\u2026\uff0c25 \u7ffb\u8bd1\u6210 \u201cz\u201d\u3002 \u4e00\u4e2a\u6570\u5b57\u53ef\u80fd\u6709\u591a\u4e2a\u7ffb\u8bd1\u3002\u4f8b\u5982 12258 \u6709 5 \u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\uff0c\u5b83\u4eec\u5206\u522b\u662f \u201cbccfi\u201d\u3001\u201cbwfi\u201d\u3001\u201cbczi\u201d\u3001\u201cmcfi\u201d \u548c \u201cmzi\u201d\u3002 \u8bf7\u7f16\u7a0b\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u8ba1\u7b97\u4e00\u4e2a\u6570\u5b57\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\u65b9\u6cd5\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\"12258\" \u8f93\u51fa\uff1a5 \u601d\u8def\uff1a\u540c LeetCode \u7b2c 91 \u9898 Decode Ways\uff0c\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u3002 \u72b6\u6001\u5b9a\u4e49\uff1a dp[i] \u8868\u793a s[0, i] \uff08\u5305\u62ec i \uff09\uff0c\u4e00\u5171\u6709\u591a\u5c11\u79cd\u7ffb\u8bd1\u7684\u65b9\u6cd5\u3002 \u5206\u7c7b\u8ba8\u8bba\uff1a 1\u3001\u5f53\u524d\u5b57\u7b26\u53ef\u4ee5\u5355\u72ec\u7ffb\u8bd1\uff1b 2\u3001\u5f53\u524d\u5b57\u7b26\u53ef\u4ee5\u548c\u524d\u9762\u4e00\u4e2a\u5b57\u7b26\u4e00\u8d77\u7ffb\u8bd1\u3002 dp[i] \u5c31\u662f\u4ee5\u4e0a\u4e8c\u8005\u4e4b\u548c\u3002 Python \u4ee3\u7801\uff1a class Solution: def getTranslationCount(self, s): \"\"\" :type s: str :rtype: int \"\"\" s = str(s) l = len(s) if l == 0: return 0 dp = [None for _ in range(l)] # dp[i] \u8868\u793a s[0, i] \uff0c\u5305\u62ec i \uff0c\u4e00\u5171\u6709\u591a\u5c11\u79cd\u7ffb\u8bd1\u7684\u65b9\u6cd5 dp[0] = 1 for i in range(1, l): # \u5f53\u524d\u503c\u81f3\u5c11\u662f dp[i - 1]\uff0c\u56e0\u4e3a s[i] \u4e00\u5b9a\u53ef\u4ee5\u5355\u72ec\u7ffb\u8bd1 cur = dp[i - 1] # \u770b\u4e00\u770b s[i-1,i] \u662f\u4e0d\u662f\u53ef\u4ee5\u7ffb\u8bd1 if 9 < int(s[i - 1:i + 1]) < 26: if i - 2 < 0: # 12 cur += 1 else: # \u8981\u8003\u8651\u5230\u6570\u7ec4\u4e0b\u6807\u8d8a\u754c\u95ee\u9898 cur += dp[i - 2] dp[i] = cur return dp[l - 1]","title":"\u7b2c 46 \u9898\uff1a\u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32"},{"location":"41-50/#leetcode-91","text":"\u4f20\u9001\u95e8\uff1a 91. \u89e3\u7801\u65b9\u6cd5 \u3002 \u4e00\u6761\u5305\u542b\u5b57\u6bcd A-Z \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a 'A' -> 1 'B' -> 2 ... 'Z' -> 26 \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684 \u975e\u7a7a \u5b57\u7b26\u4e32\uff0c\u8bf7\u8ba1\u7b97\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"12\" \u8f93\u51fa: 2 \u89e3\u91ca: \u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"AB\"\uff081 2\uff09\u6216\u8005 \"L\"\uff0812\uff09\u3002 \u793a\u4f8b 2: \u8f93\u5165: \"226\" \u8f93\u51fa: 3 \u89e3\u91ca: \u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"BZ\" (2 26), \"VF\" (22 6), \u6216\u8005 \"BBF\" (2 2 6) \u3002 Python \u4ee3\u7801\uff1a # 91\u3001\u89e3\u7801\u65b9\u6cd5 # \u4e00\u6761\u5305\u542b\u5b57\u6bcd A-Z \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a # # 'A' -> 1 # 'B' -> 2 # ... # 'Z' -> 26 # \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684\u975e\u7a7a\u5b57\u7b26\u4e32\uff0c\u8bf7\u8ba1\u7b97\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002 class Solution: def numDecodings(self, s): \"\"\" :type s: str :rtype: int \"\"\" l = len(s) if l == 0: return 0 if l == 1: return 1 if s[0] != '0' else 0 dp = [0 for _ in range(l)] dp[0] = 1 if s[0] != '0' else 0 for i in range(1, l): if s[i] != '0': # \u5982\u679c\u4e0d\u662f '0' \uff0c\u90a3\u4e48 s[i] \u5c31\u53ef\u4ee5\u7f16\u7801\uff0c\u6240\u4ee5 cur \u5c31\u81f3\u5c11\u662f dp[i - 1] dp[i] += dp[i - 1] if 9 < int(s[i - 1:i + 1]) < 27: # \u53ef\u4ee5\u548c\u524d\u9762\u7684\u6570\u5b57\u7ec4\u6210\u4e00\u4e2a\u7f16\u7801 if i - 2 < 0: # 12 dp[i] += 1 else: dp[i] += dp[i - 2] return dp[l - 1] if __name__ == '__main__': test_str = '12' s = Solution() res = s.numDecodings(test_str) print(res)","title":"LeetCode \u7b2c 91 \u9898\uff1a\u89e3\u7801\u65b9\u6cd5"},{"location":"41-50/#47","text":"\u4f20\u9001\u95e8\uff1a \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5728\u4e00\u4e2a m\u00d7n \u7684\u68cb\u76d8\u7684\u6bcf\u4e00\u683c\u90fd\u653e\u6709\u4e00\u4e2a\u793c\u7269\uff0c\u6bcf\u4e2a\u793c\u7269\u90fd\u6709\u4e00\u5b9a\u7684\u4ef7\u503c\uff08\u4ef7\u503c\u5927\u4e8e0\uff09\u3002 \u4f60\u53ef\u4ee5\u4ece\u68cb\u76d8\u7684\u5de6\u4e0a\u89d2\u5f00\u59cb\u62ff\u683c\u5b50\u91cc\u7684\u793c\u7269\uff0c\u5e76\u6bcf\u6b21\u5411\u53f3\u6216\u8005\u5411\u4e0b\u79fb\u52a8\u4e00\u683c\u76f4\u5230\u5230\u8fbe\u68cb\u76d8\u7684\u53f3\u4e0b\u89d2\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u68cb\u76d8\u53ca\u5176\u4e0a\u9762\u7684\u793c\u7269\uff0c\u8bf7\u8ba1\u7b97\u4f60\u6700\u591a\u80fd\u62ff\u5230\u591a\u5c11\u4ef7\u503c\u7684\u793c\u7269\uff1f \u6ce8\u610f\uff1a m,n>0 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [ [2,3,1], [1,7,1], [4,6,1] ] \u8f93\u51fa\uff1a19 \u89e3\u91ca\uff1a\u6cbf\u7740\u8def\u5f84 2\u21923\u21927\u21926\u21921 \u53ef\u4ee5\u5f97\u5230\u62ff\u5230\u6700\u5927\u4ef7\u503c\u793c\u7269\u3002 \u601d\u8def\uff1a\u52a8\u6001\u89c4\u5212\u3002\u793c\u7269\u8981\u4e48\u6765\u81ea\u5de6\u8fb9\u4e00\u683c\uff0c\u8981\u4e48\u6765\u81ea\u4e0a\u9762\u4e00\u683c\uff0c\u4e24\u8005\u53d6\u6700\u5927\u3002\u8981\u7279\u6b8a\u5224\u65ad\u7684\u5c31\u662f\u8fb9\u754c\u60c5\u51b5\u3002\u53e6\u5916\u53ef\u4ee5\u4f7f\u7528\u4e00\u7ef4\u6570\u7ec4\u5b8c\u6210\u52a8\u6001\u89c4\u5212\u3002\u5982\u679c\u53ef\u4ee5\u4fee\u6539 grid\uff0c\u76f4\u63a5\u5728 grid \u4e0a\u4fee\u6539\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u7528\u8f85\u52a9\u7a7a\u95f4\u3002 \u52a8\u6001\u89c4\u5212\u3002 \u53ef\u4ee5\u5c3d\u91cf\u51cf\u5c11\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getMaxValue(self, grid): \"\"\" :type grid: List[List[int]] :rtype: int \"\"\" m = len(grid) if m == 0: return 0 n = len(grid[0]) dp = [None for _ in range(n)] dp[0] = grid[0][0] for i in range(1, n): dp[i] = dp[i - 1] + grid[0][i] for i in range(1, m): for j in range(n): if j == 0: dp[j] += grid[i][0] else: dp[j] = grid[i][j] + max(dp[j - 1], dp[j]) return dp[n - 1] Java \u4ee3\u7801\uff1a public class Solution { public int getMaxValue(int[][] matrix) { int row = matrix.length; if (row == 0) { return 0; } int col = matrix[0].length; int[][] dp = new int[row][col]; dp[0][0] = matrix[0][0]; for (int j = 1; j < col; j++) { dp[0][j] = dp[0][j - 1] + matrix[0][j]; } for (int i = 1; i < row; i++) { dp[i][0] = dp[i - 1][0] + matrix[i][0]; for (int j = 1; j < col; j++) { dp[i][j] = Integer.max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]; } } return dp[row - 1][col - 1]; } public static void main(String[] args) { int[][] matrix = new int[][]{ {1, 10, 3, 8}, {12, 2, 9, 6}, {5, 7, 4, 11}, {3, 7, 16, 5} }; Solution solution = new Solution(); int maxValue = solution.getMaxValue(matrix); System.out.println(maxValue); } } Java \u4ee3\u7801\uff1a public class Solution2 { public int getMaxValue(int[][] matrix) { int row = matrix.length; if (row == 0) { return 0; } int col = matrix[0].length; int[] dp = new int[col]; dp[0] = matrix[0][0]; for (int j = 1; j < col; j++) { dp[j] = dp[j - 1] + matrix[0][j]; } for (int i = 1; i < row; i++) { dp[0] = dp[0] + matrix[i][0]; for (int j = 1; j < col; j++) { dp[j] = Integer.max(dp[j], dp[j - 1]) + matrix[i][j]; } } return dp[col - 1]; } public static void main(String[] args) { int[][] matrix = new int[][]{ {1, 10, 3, 8}, {12, 2, 9, 6}, {5, 7, 4, 11}, {3, 7, 16, 5} }; Solution2 solution2 = new Solution2(); int maxValue = solution2.getMaxValue(matrix); System.out.println(maxValue); } } Java \u4ee3\u7801\uff1a public class Solution3 { public int getMaxValue(int[][] matrix) { int row = matrix.length; if (row == 0) { return 0; } int col = matrix[0].length; int[] dp = new int[col]; for (int i = 0; i < row; i++) { for (int j = 0; j < col; j++) { dp[j] = Integer.max(dp[j], j - 1 < 0 ? 0 : dp[j - 1]) + matrix[i][j]; } } return dp[col - 1]; } public static void main(String[] args) { int[][] matrix = new int[][]{ {1, 10, 3, 8}, {12, 2, 9, 6}, {5, 7, 4, 11}, {3, 7, 16, 5} }; Solution3 solution3 = new Solution3(); int maxValue = solution3.getMaxValue(matrix); System.out.println(maxValue); } }","title":"\u7b2c 47 \u9898\uff1a\u793c\u7269\u7684\u6700\u5927\u4ef7\u503c"},{"location":"41-50/#48","text":"\u4f20\u9001\u95e8\uff1a \u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32 \u3002 \u8bf7\u4ece\u5b57\u7b26\u4e32\u4e2d\u627e\u51fa\u4e00\u4e2a\u6700\u957f\u7684\u4e0d\u5305\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32\uff0c\u8ba1\u7b97\u8be5\u6700\u957f\u5b50\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002 \u5047\u8bbe\u5b57\u7b26\u4e32\u4e2d\u53ea\u5305\u542b\u4ece\u2019a\u2019\u5230\u2019z\u2019\u7684\u5b57\u7b26\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\"abcabc\" \u8f93\u51fa\uff1a3 \u601d\u8def1\uff1a\u6ed1\u52a8\u7a97\u53e3\uff1a Python \u4ee3\u7801\uff1a class Solution: def lengthOfLongestSubstring(self, s): \"\"\" :type s: str :rtype: int \"\"\" # \u7279\u5224 size = len(s) if size < 2: return size l = 0 r = -1 counter = [0 for _ in range(256)] res = 1 while l < size: # \u9996\u5148\"\u53f3\u6307\u9488\"\u4e0d\u65ad\u5411\u53f3\u8fb9\u5c1d\u8bd5\uff0c\u8d70\u5230\u51fa\u73b0\u91cd\u590d\u7684\u6700\u53f3\u8fb9 while r + 1 < size and counter[ord(s[r + 1])] == 0: # \u8868\u793a\u6ca1\u6709\u91cd\u590d\u5143\u7d20\uff0cr \u53ef\u4ee5\u52a0 1 counter[ord(s[r + 1])] += 1 r += 1 # \u6b64\u65f6\uff0c\u8bb0\u5f55\u4e0d\u91cd\u590d\u5b50\u4e32\u662f\"\u5de6\u6307\u9488\"\u56fa\u5b9a\u65f6\u5019\u6700\u957f res = max(res, r - l + 1) # \u8003\u8651\u79fb\u52a8\"\u5de6\u6307\u9488\" # \u6b64\u65f6 s[r+1] \u5c31\u662f\u5df2\u7ecf\u626b\u8fc7\u7684\u533a\u95f4\u91cc\u91cd\u590d\u7684\u5143\u7d20\uff0c\u8981\u628a\u5b83\u5254\u9664\u51fa\u53bb while r + 1 < size and s[l] != s[r + 1]: # \u6709\u91cd\u590d\u5143\u7d20\uff0c\u5de6\u8fb9\u5c31\u8981\u51cf 1 counter[ord(s[l])] -= 1 l += 1 # \u51fa\u4e86\u4e0a\u4e00\u4e2a\u5faa\u73af\u4ee5\u540e\uff0c\u8fd8\u8981\u518d\u628a\u5de6\u6307\u9488\u5411\u53f3\u79fb\u52a8\u4e00\u683c\uff0c\u5426\u5219\u53f3\u6307\u9488\u4e0d\u80fd\u5411\u53f3\u79fb\u52a8 counter[ord(s[l])] -= 1 l += 1 return res \u601d\u8def2\uff1a\u52a8\u6001\u89c4\u5212 Python \u4ee3\u7801\uff1a class Solution: def lengthOfLongestSubstring(self, s): \"\"\" :type s: str :rtype: int \"\"\" # \u7279\u5224 l = len(s) if l < 2: return l # dp[i] \u8868\u793a\u4ee5 s[i] \u7ed3\u5c3e\u7684\u6700\u957f\u4e0d\u91cd\u590d\u5b50\u4e32\u7684\u957f\u5ea6 # \u56e0\u4e3a\u81ea\u5df1\u80af\u5b9a\u662f\u4e0d\u91cd\u590d\u5b50\u4e32\uff0c\u6240\u4ee5\u521d\u59cb\u503c\u8bbe\u7f6e\u4e3a 1 dp = [1 for _ in range(l)] map = dict() map[s[0]] = 0 for i in range(1, l): if s[i] in map: if i - map[s[i]] > dp[i - 1]: dp[i] = dp[i - 1] + 1 else: dp[i] = i - map[s[i]] else: dp[i] = dp[i - 1] + 1 # \u8bbe\u7f6e\u5b57\u7b26\u4e0e\u7d22\u5f15\u952e\u503c\u5bf9 map[s[i]] = i # \u6700\u540e\u62c9\u901a\u770b\u4e00\u904d\u6700\u5927\u503c return max(dp) \u601d\u8def3\uff1a\u9694\u677f\u6cd5 Python \u4ee3\u7801\uff1a class Solution: def lengthOfLongestSubstring(self, s): # \u7279\u5224 l = len(s) if l < 2: return l # \u9694\u677f\u6cd5 # key:\u5b57\u7b26\uff0cval \u51fa\u73b0\u7684\u7d22\u5f15 map = dict() point = 0 res = 1 for i in range(l): # \u5173\u952e1\uff1amap[s[i]] >= point\uff0c\u7b49\u4e8e\u662f\u53ef\u4ee5\u7684 if s[i] in map and map[s[i]] >= point: # \u5148\u628a\u9694\u677f\u5411\u540e\u79fb\u52a8\u4e00\u4f4d point = map[s[i]] + 1 # \u7136\u540e\u8bb0\u5f55\u6700\u957f\u4e0d\u91cd\u590d\u5b50\u4e32\u7684\u957f\u5ea6 res = max(res, i - point + 1) # \u5173\u952e2\uff1a\u65e0\u8bba\u5982\u4f55\u90fd\u66f4\u65b0\u4f4d\u7f6e map[s[i]] = i return res \u53c2\u8003\u8d44\u6599\uff1a LeetCode \u7b2c 3 \u9898\uff1a\u6700\u957f\u4e0d\u91cd\u590d\u5b57\u7b26\u4e32 \u3002","title":"\u7b2c 48 \u9898\uff1a\u6700\u957f\u4e0d\u91cd\u590d\u5b57\u7b26\u4e32\u7684\u5b50\u5b57\u7b26\u4e32"},{"location":"41-50/#49","text":"\u4f20\u9001\u95e8\uff1a \u4e11\u6570 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u628a\u53ea\u5305\u542b\u56e0\u5b50 $2$\u3001$3$ \u548c $5$ \u7684\u6570\u79f0\u4f5c \u4e11\u6570 \uff08Ugly Number\uff09\u3002 \u4f8b\u5982 $6$\u3001$8$ \u90fd\u662f \u4e11\u6570 \uff0c\u4f46 $14$ \u4e0d\u662f\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u56e0\u5b50 $7$\u3002 \u6c42\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u7684\u7b2c $N$ \u4e2a\u4e11\u6570\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a5 \u8f93\u51fa\uff1a5 \u6ce8\u610f \uff1a\u4e60\u60ef\u4e0a\u6211\u4eec\u628a $1$ \u5f53\u505a\u662f\u7b2c\u4e00\u4e2a\u4e11\u6570\u3002 \u540c LeetCode \u7b2c 264 \u9898\uff0c\u9898\u89e3\u4f20\u9001\u95e8\uff1a LeetCode \u4e0a\u7684\u4e11\u6570\u95ee\u9898 \u3002 \u601d\u8def\uff1a\u6240\u8c13\u7684\u4e00\u4e2a\u6570 $m$ \u662f\u53e6\u4e00\u4e2a\u6570 $n$ \u7684\u56e0\u5b50\uff0c\u662f\u6307 $n$ \u80fd\u88ab $m$ \u6574\u9664\uff0c\u4e5f\u5c31\u662f $n\\%m==0$ \u6210\u7acb\u3002\u6839\u636e\u4e11\u6570\u7684\u5b9a\u4e49\uff0c\u4e11\u6570\u53ea\u80fd\u88ab $2$\u3001$3$ \u548c $5$ \u6574\u9664\u3002\u6839\u636e\u4e11\u6570\u7684\u5b9a\u4e49\uff0c\u4e11\u6570\u5e94\u8be5\u662f\u53e6\u4e00\u4e2a\u4e11\u6570\u4e58\u4ee5 $2$\u3001$3$ \u6216\u8005 $5$ \u7684\u7ed3\u679c\uff08$1$\u9664\u5916\uff09\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6570\u7ec4\uff0c\u91cc\u9762\u7684\u6570\u5b57\u662f\u6392\u597d\u5e8f\u7684\u4e11\u6570\uff0c\u6bcf\u4e00\u4e2a\u4e11\u6570\u90fd\u662f\u524d\u9762\u7684\u4e11\u6570\u4e58\u4ee5 $2$\u3001$3$ \u6216\u8005 $5$ \u5f97\u5230\u7684\u3002 \u8fd9\u4e2a\u601d\u8def\u7684\u5173\u952e\u95ee\u9898\u5728\u4e8e\u600e\u6837\u4fdd\u8bc1\u6570\u7ec4\u91cc\u9762\u7684\u4e11\u6570\u662f\u6392\u597d\u5e8f\u7684\u3002\u5bf9\u4e58\u4ee5 $2$ \u800c\u8a00\uff0c\u80af\u5b9a\u5b58\u5728\u67d0\u4e00\u4e2a\u4e11\u6570 $T2$\uff0c\u6392\u5728\u5b83\u4e4b\u524d\u7684\u6bcf\u4e00\u4e2a\u4e11\u6570\u4e58\u4ee5 $2$ \u5f97\u5230\u7684\u7ed3\u679c\u90fd\u4f1a\u5c0f\u4e8e\u5df2\u6709\u6700\u5927\u7684\u4e11\u6570\uff0c\u5728\u5b83\u4e4b\u540e\u7684\u6bcf\u4e00\u4e2a\u4e11\u6570\u4e58\u4ee5\u4e58\u4ee5 $2$ \u5f97\u5230\u7684\u7ed3\u679c\u90fd\u4f1a\u592a\u5927\u3002\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u4e0b\u8fd9\u4e2a\u4e11\u6570\u7684\u4f4d\u7f6e\uff0c\u540c\u65f6\u6bcf\u6b21\u751f\u6210\u65b0\u7684\u4e11\u6570\u7684\u65f6\u5019\uff0c\u53bb\u66f4\u65b0\u8fd9\u4e2a $T2$\u3002\u5bf9\u4e58\u4ee5 $3$ \u548c $5$ \u800c\u8a00\uff0c\u4e5f\u5b58\u5728\u7740\u540c\u6837\u7684 $T3$ \u548c $T5$\u3002 Python \u4ee3\u7801\uff1a class Solution: def GetUglyNumber_Solution(self, index): # write code here if index < 7: return index res = [1, 2, 3, 4, 5, 6] t2, t3, t5 = 3, 2, 1 for i in range(6, index): res.append(min(res[t2] * 2, min(res[t3] * 3, res[t5] * 5))) while res[t2] * 2 <= res[i]: t2 += 1 while res[t3] * 3 <= res[i]: t3 += 1 while res[t5] * 5 <= res[i]: t5 += 1 return res[index - 1] Java \u4ee3\u7801\uff1a public class Solution2 { // 1\u30012\u30013\u30014\u30015\u30016 \u90fd\u662f\u4e11\u6570 public int GetUglyNumber_Solution(int index) { if (index < 7) { return index; } // \u72b6\u6001\u7684\u5b9a\u4e49\uff1a\u7b2c i \u4e2a\u4e11\u6570\u7684\u6700\u5c0f\u503c\uff0c\u4ece 0 \u5f00\u59cb\u8ba1\u7b97 int[] dp = new int[index]; dp[0] = 1; int t2 = 0; int t3 = 0; int t5 = 0; // \u6ce8\u610f\uff1a i \u4ece 1 \u5f00\u59cb for (int i = 1; i < index; i++) { dp[i] = min3(dp[t2] * 2, dp[t3] * 3, dp[t5] * 5); if (dp[i] == dp[t2] * 2) { t2++; } if (dp[i] == dp[t3] * 3) { t3++; } if (dp[i] == dp[t5] * 5) { t5++; } } // System.out.println(Arrays.toString(dp)); return dp[index - 1]; } private int min3(int n1, int n2, int n3) { return Integer.min(Integer.min(n1, n2), n3); } public static void main(String[] args) { Solution2 solution2 = new Solution2(); // 1 2 3 4 5 6 8 9 10 12 15 16 18 20 24 // [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24] int getUglyNumberSolution = solution2.GetUglyNumber_Solution(15); } }","title":"\u7b2c 49 \u9898\uff1a\u4e11\u6570"},{"location":"41-50/#50-1","text":"\u4f20\u9001\u95e8\uff1a \u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26 \u3002 \u5728\u5b57\u7b26\u4e32\u4e2d\u627e\u51fa\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u3002 \u5982\u8f93\u5165 \"abaccdeff\" \uff0c\u5219\u8f93\u51fa b \u3002 \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u4e0d\u5b58\u5728\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\uff0c\u8fd4\u56de#\u5b57\u7b26\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a \"abaccdeff\" \u8f93\u51fa\uff1a 'b' \u540c LeetCode \u7b2c 387 \u9898\uff0c\u4f20\u9001\u95e8\uff1a \u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u552f\u4e00\u5b57\u7b26 \u3002 \u601d\u8def\uff1a\u7279\u522b\u5bb9\u6613\u60f3\u5230\u7684\u601d\u8def\uff0c\u5c31\u662f\u7edf\u8ba1\u8bcd\u9891\uff0c\u7edf\u8ba1\u8bcd\u9891\u53ef\u4ee5\u7528\u54c8\u5e0c\u8868\uff0c\u4e5f\u53ef\u4ee5\u7528\u6570\u7ec4\u3002 Python \u4ee3\u7801\uff1a class Solution: def firstNotRepeatingChar(self, s): \"\"\" :type s: str :rtype: str \"\"\" if len(s) < 1: return '#' counter = [0 for _ in range(256)] for alpha in s: counter[ord(alpha)] += 1 for alpha in s: if counter[ord(alpha)] == 1: return alpha # \u8981\u6ce8\u610f\uff1a\u5982\u679c\u662f \"aabbcc\" \u8fd9\u79cd\u6240\u6709\u7684\u5b57\u7b26\u90fd\u51fa\u73b0\u4e0d\u6b62 1 \u6b21\uff0c # \u5c31\u6309\u7167\u9898\u610f\uff0c\u8fd4\u56de '#' return '#'","title":"\u7b2c 50-1 \u9898\uff1a\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26"},{"location":"41-50/#50-2","text":"\u4f20\u9001\u95e8\uff1a \u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u627e\u51fa\u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u3002 \u4f8b\u5982\uff0c\u5f53\u4ece\u5b57\u7b26\u6d41\u4e2d\u53ea\u8bfb\u51fa\u524d\u4e24\u4e2a\u5b57\u7b26\u201dgo\u201d\u65f6\uff0c\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u662f\u2019g\u2019\u3002 \u5f53\u4ece\u8be5\u5b57\u7b26\u6d41\u4e2d\u8bfb\u51fa\u524d\u516d\u4e2a\u5b57\u7b26\u201dgoogle\u201d\u65f6\uff0c\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u662f\u2019l\u2019\u3002 \u5982\u679c\u5f53\u524d\u5b57\u7b26\u6d41\u6ca1\u6709\u5b58\u5728\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\uff0c\u8fd4\u56de#\u5b57\u7b26\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a \"google\" \u8f93\u51fa\uff1a \"ggg#ll\" \u89e3\u91ca\uff1a\u6bcf\u5f53\u5b57\u7b26\u6d41\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\uff0c\u5c31\u8fdb\u884c\u4e00\u6b21\u5224\u65ad\u5e76\u8f93\u51fa\u5f53\u524d\u7684\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u3002 Python \u4ee3\u7801\uff1a\u4f7f\u7528\u8f85\u52a9\u6570\u7ec4\uff0c\u505a\u5b57\u6bcd\u9891\u6570\u7edf\u8ba1 class Solution: def __init__(self): self.chars = [0 for _ in range(256)] self.strs = [] def firstAppearingOnce(self): \"\"\" :rtype: str \"\"\" for char in self.strs: if self.chars[ord(char)] == 1: return char return '#' def insert(self, char): \"\"\" :type char: str :rtype: void \"\"\" self.chars[ord(char)] += 1 self.strs.append(char) Java \u4ee3\u7801\uff1a Python \u4ee3\u7801\uff1a Python \u4ee3\u7801\uff1a class Solution: h = {} r = [] def firstAppearingOnce(self): while len(Solution.r): if Solution.h[Solution.r[0]] == 1: return Solution.r[0] Solution.r = Solution.r[1:] return '#' def insert(self, char): Solution.h[char] = Solution.h.get(char, 0) + 1 if Solution.h[char] == 1: Solution.r.append(char) \u4f5c\u8005\uff1aapplezjm \u94fe\u63a5\uff1ahttps://www.acwing.com/activity/content/code/content/19320/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \uff08\u672c\u8282\u5b8c\uff09","title":"\u7b2c 50-2 \u9898\uff1a\u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26"},{"location":"41/","text":"\u5251\u6307 Offer 41. \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570 \u5251\u6307 Offer 41. \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570 \uff1b \u6211\u4eec\u8fd9\u91cc\u4f7f\u7528 AcWing \u4e0a\u9762\u7684\u5728\u7ebf\u6d4b\u8bc4\u7cfb\u7edf\uff0c\u4f20\u9001\u95e8\uff1a \u300a\u5251\u6307 Offer \u300b\uff08\u7b2c 2 \u7248\uff09\u7b2c 41 \u9898\uff1a\u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570 \u3002 \u4f20\u9001\u95e8\uff1a \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u9898\u76ee\u63cf\u8ff0 \u5982\u4f55\u5f97\u5230\u4e00\u4e2a\u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570\uff1f \u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5947\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4f4d\u4e8e\u4e2d\u95f4\u7684\u6570\u503c\u3002 \u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5076\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u3002 \u6837\u4f8b \u8f93\u5165\uff1a1, 2, 3, 4 \u8f93\u51fa\uff1a1,1.5,2,2.5 \u89e3\u91ca\uff1a\u6bcf\u5f53\u6570\u636e\u6d41\u8bfb\u5165\u4e00\u4e2a\u6570\u636e\uff0c\u5c31\u8fdb\u884c\u4e00\u6b21\u5224\u65ad\u5e76\u8f93\u51fa\u5f53\u524d\u7684\u4e2d\u4f4d\u6570\u3002 \u6c42\u89e3\u601d\u8def\u4e0e\u5173\u952e \u540c LeetCode \u7b2c 295 \u9898\uff0c\u4f20\u9001\u95e8\uff1a \u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570 \u3002 \u601d\u8def\uff1a\u501f\u52a9\u4e24\u4e2a\u5806\uff0c\u4e00\u4e2a\u5c0f\u9876\u5806\uff0c\u4e00\u4e2a\u5927\u9876\u5806\u3002 \u4efb\u4f55\u65f6\u523b\uff0c\u4e24\u4e2a\u5806\u4e2d\u5e94\u8be5\u59cb\u7ec8\u4fdd\u6301\u7684\u6027\u8d28 \uff1a 1\u3001\u5c0f\u9876\u5806\u4e2d\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u90fd\u4e0d\u4f1a\u5c0f\u4e8e\u5927\u9876\u5806\u4e2d\u7684\u5143\u7d20\uff1b 2\u3001\u5c0f\u9876\u5806\u7684\u5143\u7d20\u6570\u76ee\u6216\u8005\u4e0e\u5927\u9876\u5806\u7684\u5143\u7d20\u6570\u7ec4\u76f8\u7b49\uff0c\u6216\u8005\u591a 1 \u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u9488\u5bf9\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\uff1a 1\u3001\u5f53\u524d\u5143\u7d20\u4e2a\u6570\u4e3a\u5076\u6570\u7684\u65f6\u5019\uff0c\u6bd4\u5982\u4e00\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u8bfb\u5165\u4e00\u4e2a\u5143\u7d20\uff08\u6700\u7ec8\u5e94\u8be5\u662f\u5c0f\u9876\u5806\u4e2d\u591a\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u6b64\u65f6\u5143\u7d20\u4e2a\u6570\u662f\u5947\u6570\uff0c\u6211\u4eec\u5e94\u8be5\u8fd4\u56de\u5c0f\u9876\u5806\u4e2d\u7684\u5806\u9876\u5143\u7d20\uff1b \u5982\u4f55\u4fdd\u6301\u6027\u8d28 \uff1a\u56e0\u4e3a\u6700\u7ec8\u5e94\u8be5\u662f\u5c0f\u9876\u5806\u4e2d\u591a\u4e00\u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u5148\u7ecf\u8fc7\u5927\u9876\u5806\uff0c\u7136\u540e\u518d\u5230\u5c0f\u9876\u5806\u3002 2\u3001\u5f53\u524d\u5143\u7d20\u4e2a\u6570\u4e3a\u5947\u6570\u7684\u65f6\u5019\uff0c\u6b64\u65f6\u518d\u8bfb\u5165\u4e00\u4e2a\u5143\u7d20\uff08\u6700\u7ec8\u5e94\u8be5\u662f\u5927\u9876\u5806\u4e2d\u591a\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u5143\u7d20\u4e2a\u6570\u662f\u5076\u6570\uff0c\u6211\u4eec\u5e94\u8be5\u8fd4\u56de\u5927\u9876\u5806\u4e2d\u7684\u5806\u9876\u5143\u7d20\u548c\u5c0f\u9876\u5806\u4e2d\u7684\u5806\u9876\u5143\u7d20\u7684\u5e73\u5747\u6570\u3002 \u5982\u4f55\u4fdd\u6301\u6027\u8d28 \uff1a\u56e0\u4e3a\u6700\u7ec8\u5e94\u8be5\u662f\u5927\u9876\u5806\u4e2d\u591a\u4e00\u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u5148\u7ecf\u8fc7\u5c0f\u9876\u5806\uff0c\u7136\u540e\u518d\u5230\u5927\u9876\u5806\u3002 \u6ce8\u610f\uff1aPython \u4e2d\u7684 heap \u53ea\u6709\u5c0f\u9876\u5806\uff0c\u5728\u6784\u9020\u5927\u9876\u5806\u7684\u65f6\u5019\uff0c\u8981\u7ed5\u4e00\u4e2a\u5f2f\u5b50\uff0c\u628a\u76f8\u53cd\u6570 push \u8fdb\u53bb\uff0cpop \u51fa\u6765\u7684\u65f6\u5019\u4e5f\u8981\u53d6\u76f8\u53cd\u6570\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 Python \u4ee3\u7801\uff1a import heapq class Solution: def __init__(self): self.min_heap = [] self.max_heap = [] self.count = 0 def insert(self, num): \"\"\" :type num: int :rtype: void \"\"\" self.count += 1 if self.count % 2 == 1: heapq.heappush(self.max_heap, -num) temp = -heapq.heappop(self.max_heap) heapq.heappush(self.min_heap, temp) else: heapq.heappush(self.min_heap, num) temp = heapq.heappop(self.min_heap) heapq.heappush(self.max_heap, -temp) # print(self.min_heap) # print(self.max_heap) def getMedian(self): \"\"\" :rtype: float \"\"\" if self.count % 2 == 1: return self.min_heap[0] else: return (self.min_heap[0] + (-self.max_heap[0])) / 2 if __name__ == '__main__': solution = Solution() solution.insert(1) result = solution.getMedian() print(result) solution.insert(2) result = solution.getMedian() print(result) solution.insert(3) result = solution.getMedian() print(result) solution.insert(4) result = solution.getMedian() print(result) \u8bf4\u660e\uff1a1\u3001\u5947\u6570\u5076\u6570\u7684\u5224\u65ad\u53ef\u4ee5\u4f7f\u7528\u4f4d\u8fd0\u7b97\uff1a count & 1 == 1 \u53ef\u4ee5\u5224\u65ad count \u662f\u4e0d\u662f\u5947\u6570\uff1b 2\u3001\u4e0a\u9762\u7684\u4ee3\u7801\u5199\u5f97\u6709\u4e00\u4e9b\u70e6\u7410\uff0c\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u53cd\u6b63\u5c0f\u9876\u5806\u4e2d\u7684\u5143\u7d20\u4e00\u5b9a >= \u5927\u9876\u5806\u4e2d\u7684\u5143\u7d20\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u987a\u5e8f\u7edf\u4e00\u4e00\u4e0b\uff0c\u5982\u679c\u5f53\u524d\u662f\u5947\u6570\u7684\u8bdd\uff0c\u65b0\u6765\u7684\u4e00\u4e2a\u6570\uff0c\u5148\u8fdb\u5165\u5c0f\u9876\u5806\uff0c\u7136\u540e\u5c0f\u9876\u5806\u4e2d\u51fa\u4e00\u4e2a\u6570\u518d\u8fdb\u5165\u5927\u9876\u5806\uff0c\u8fd9\u6837\u5c0f\u9876\u5806\u548c\u5927\u9876\u5806\u5143\u7d20\u6570\u76ee\u5c31\u4e00\u6837\u4e86\u3002\u90a3\u5982\u679c\u5f53\u524d\u662f\u5076\u6570\uff0c\u6700\u7ec8\u6548\u679c\u662f\u5c0f\u9876\u5806\u591a\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd8\u6309\u7167\u521a\u521a\u90a3\u4e2a\u6d41\u7a0b\uff0c\u6211\u4eec\u4ece\u5927\u9876\u5806\u518d\u62ff\u4e00\u4e2a\u5143\u7d20\u653e\u56de\u5c0f\u9876\u5806\u5c31\u53ef\u4ee5\u4e86\u3002 \u6211\u4eec\u7edf\u4e00\u5199\u5728\u53c2\u8003\u89e3\u7b542\u91cc\u3002 \u53c2\u8003\u89e3\u7b542\uff1a Python \u4ee3\u7801 import heapq class Solution: def __init__(self): self.min_heap = [] self.max_heap = [] self.count = 0 def insert(self, num): \"\"\" :type num: int :rtype: void \"\"\" # \u5f53\u524d\u662f\u5947\u6570\u7684\u65f6\u5019\uff0c\u76f4\u63a5\"\u6700\u5c0f\u5806\" -> \"\u6700\u5927\u5806\"\uff0c\u5c31\u53ef\u4ee5\u4e86 # \u6b64\u65f6\"\u6700\u5c0f\u5806\" \u4e0e \"\u6700\u5927\u5806\" \u7684\u5143\u7d20\u6570\u7ec4\u662f\u76f8\u7b49\u7684 # \u5f53\u524d\u662f\u5076\u6570\u7684\u65f6\u5019\uff0c\"\u6700\u5c0f\u5806\" -> \"\u6700\u5927\u5806\"\u4ee5\u540e\uff0c\u6700\u7ec8\u6211\u4eec\u8981\u8ba9\"\u6700\u5c0f\u5806\"\u591a\u4e00\u4e2a\u5143\u7d20 # \u6240\u4ee5\u5e94\u8be5\u8ba9 \"\u6700\u5927\u5806\" \u62ff\u51fa\u4e00\u4e2a\u5143\u7d20\u7ed9 \"\u6700\u5c0f\u5806\" heapq.heappush(self.min_heap, num) temp = heapq.heappop(self.min_heap) heapq.heappush(self.max_heap, -temp) if self.count & 1 == 0: temp = -heapq.heappop(self.max_heap) heapq.heappush(self.min_heap, temp) self.count += 1 # print(self.min_heap) # print(self.max_heap) def getMedian(self): \"\"\" :rtype: float \"\"\" if self.count & 1 == 1: return self.min_heap[0] else: return (self.min_heap[0] + (-self.max_heap[0])) / 2 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 41. \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570"},{"location":"41/#offer-41","text":"\u5251\u6307 Offer 41. \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570 \uff1b \u6211\u4eec\u8fd9\u91cc\u4f7f\u7528 AcWing \u4e0a\u9762\u7684\u5728\u7ebf\u6d4b\u8bc4\u7cfb\u7edf\uff0c\u4f20\u9001\u95e8\uff1a \u300a\u5251\u6307 Offer \u300b\uff08\u7b2c 2 \u7248\uff09\u7b2c 41 \u9898\uff1a\u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570 \u3002 \u4f20\u9001\u95e8\uff1a \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002","title":"\u5251\u6307 Offer 41. \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570"},{"location":"41/#_1","text":"\u5982\u4f55\u5f97\u5230\u4e00\u4e2a\u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570\uff1f \u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5947\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4f4d\u4e8e\u4e2d\u95f4\u7684\u6570\u503c\u3002 \u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5076\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"41/#_2","text":"\u8f93\u5165\uff1a1, 2, 3, 4 \u8f93\u51fa\uff1a1,1.5,2,2.5 \u89e3\u91ca\uff1a\u6bcf\u5f53\u6570\u636e\u6d41\u8bfb\u5165\u4e00\u4e2a\u6570\u636e\uff0c\u5c31\u8fdb\u884c\u4e00\u6b21\u5224\u65ad\u5e76\u8f93\u51fa\u5f53\u524d\u7684\u4e2d\u4f4d\u6570\u3002","title":"\u6837\u4f8b"},{"location":"41/#_3","text":"\u540c LeetCode \u7b2c 295 \u9898\uff0c\u4f20\u9001\u95e8\uff1a \u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570 \u3002 \u601d\u8def\uff1a\u501f\u52a9\u4e24\u4e2a\u5806\uff0c\u4e00\u4e2a\u5c0f\u9876\u5806\uff0c\u4e00\u4e2a\u5927\u9876\u5806\u3002 \u4efb\u4f55\u65f6\u523b\uff0c\u4e24\u4e2a\u5806\u4e2d\u5e94\u8be5\u59cb\u7ec8\u4fdd\u6301\u7684\u6027\u8d28 \uff1a 1\u3001\u5c0f\u9876\u5806\u4e2d\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u90fd\u4e0d\u4f1a\u5c0f\u4e8e\u5927\u9876\u5806\u4e2d\u7684\u5143\u7d20\uff1b 2\u3001\u5c0f\u9876\u5806\u7684\u5143\u7d20\u6570\u76ee\u6216\u8005\u4e0e\u5927\u9876\u5806\u7684\u5143\u7d20\u6570\u7ec4\u76f8\u7b49\uff0c\u6216\u8005\u591a 1 \u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u9488\u5bf9\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\uff1a 1\u3001\u5f53\u524d\u5143\u7d20\u4e2a\u6570\u4e3a\u5076\u6570\u7684\u65f6\u5019\uff0c\u6bd4\u5982\u4e00\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u8bfb\u5165\u4e00\u4e2a\u5143\u7d20\uff08\u6700\u7ec8\u5e94\u8be5\u662f\u5c0f\u9876\u5806\u4e2d\u591a\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u6b64\u65f6\u5143\u7d20\u4e2a\u6570\u662f\u5947\u6570\uff0c\u6211\u4eec\u5e94\u8be5\u8fd4\u56de\u5c0f\u9876\u5806\u4e2d\u7684\u5806\u9876\u5143\u7d20\uff1b \u5982\u4f55\u4fdd\u6301\u6027\u8d28 \uff1a\u56e0\u4e3a\u6700\u7ec8\u5e94\u8be5\u662f\u5c0f\u9876\u5806\u4e2d\u591a\u4e00\u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u5148\u7ecf\u8fc7\u5927\u9876\u5806\uff0c\u7136\u540e\u518d\u5230\u5c0f\u9876\u5806\u3002 2\u3001\u5f53\u524d\u5143\u7d20\u4e2a\u6570\u4e3a\u5947\u6570\u7684\u65f6\u5019\uff0c\u6b64\u65f6\u518d\u8bfb\u5165\u4e00\u4e2a\u5143\u7d20\uff08\u6700\u7ec8\u5e94\u8be5\u662f\u5927\u9876\u5806\u4e2d\u591a\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u5143\u7d20\u4e2a\u6570\u662f\u5076\u6570\uff0c\u6211\u4eec\u5e94\u8be5\u8fd4\u56de\u5927\u9876\u5806\u4e2d\u7684\u5806\u9876\u5143\u7d20\u548c\u5c0f\u9876\u5806\u4e2d\u7684\u5806\u9876\u5143\u7d20\u7684\u5e73\u5747\u6570\u3002 \u5982\u4f55\u4fdd\u6301\u6027\u8d28 \uff1a\u56e0\u4e3a\u6700\u7ec8\u5e94\u8be5\u662f\u5927\u9876\u5806\u4e2d\u591a\u4e00\u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u5148\u7ecf\u8fc7\u5c0f\u9876\u5806\uff0c\u7136\u540e\u518d\u5230\u5927\u9876\u5806\u3002 \u6ce8\u610f\uff1aPython \u4e2d\u7684 heap \u53ea\u6709\u5c0f\u9876\u5806\uff0c\u5728\u6784\u9020\u5927\u9876\u5806\u7684\u65f6\u5019\uff0c\u8981\u7ed5\u4e00\u4e2a\u5f2f\u5b50\uff0c\u628a\u76f8\u53cd\u6570 push \u8fdb\u53bb\uff0cpop \u51fa\u6765\u7684\u65f6\u5019\u4e5f\u8981\u53d6\u76f8\u53cd\u6570\u3002","title":"\u6c42\u89e3\u601d\u8def\u4e0e\u5173\u952e"},{"location":"41/#_4","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"41/#1","text":"Python \u4ee3\u7801\uff1a import heapq class Solution: def __init__(self): self.min_heap = [] self.max_heap = [] self.count = 0 def insert(self, num): \"\"\" :type num: int :rtype: void \"\"\" self.count += 1 if self.count % 2 == 1: heapq.heappush(self.max_heap, -num) temp = -heapq.heappop(self.max_heap) heapq.heappush(self.min_heap, temp) else: heapq.heappush(self.min_heap, num) temp = heapq.heappop(self.min_heap) heapq.heappush(self.max_heap, -temp) # print(self.min_heap) # print(self.max_heap) def getMedian(self): \"\"\" :rtype: float \"\"\" if self.count % 2 == 1: return self.min_heap[0] else: return (self.min_heap[0] + (-self.max_heap[0])) / 2 if __name__ == '__main__': solution = Solution() solution.insert(1) result = solution.getMedian() print(result) solution.insert(2) result = solution.getMedian() print(result) solution.insert(3) result = solution.getMedian() print(result) solution.insert(4) result = solution.getMedian() print(result) \u8bf4\u660e\uff1a1\u3001\u5947\u6570\u5076\u6570\u7684\u5224\u65ad\u53ef\u4ee5\u4f7f\u7528\u4f4d\u8fd0\u7b97\uff1a count & 1 == 1 \u53ef\u4ee5\u5224\u65ad count \u662f\u4e0d\u662f\u5947\u6570\uff1b 2\u3001\u4e0a\u9762\u7684\u4ee3\u7801\u5199\u5f97\u6709\u4e00\u4e9b\u70e6\u7410\uff0c\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u53cd\u6b63\u5c0f\u9876\u5806\u4e2d\u7684\u5143\u7d20\u4e00\u5b9a >= \u5927\u9876\u5806\u4e2d\u7684\u5143\u7d20\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u987a\u5e8f\u7edf\u4e00\u4e00\u4e0b\uff0c\u5982\u679c\u5f53\u524d\u662f\u5947\u6570\u7684\u8bdd\uff0c\u65b0\u6765\u7684\u4e00\u4e2a\u6570\uff0c\u5148\u8fdb\u5165\u5c0f\u9876\u5806\uff0c\u7136\u540e\u5c0f\u9876\u5806\u4e2d\u51fa\u4e00\u4e2a\u6570\u518d\u8fdb\u5165\u5927\u9876\u5806\uff0c\u8fd9\u6837\u5c0f\u9876\u5806\u548c\u5927\u9876\u5806\u5143\u7d20\u6570\u76ee\u5c31\u4e00\u6837\u4e86\u3002\u90a3\u5982\u679c\u5f53\u524d\u662f\u5076\u6570\uff0c\u6700\u7ec8\u6548\u679c\u662f\u5c0f\u9876\u5806\u591a\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd8\u6309\u7167\u521a\u521a\u90a3\u4e2a\u6d41\u7a0b\uff0c\u6211\u4eec\u4ece\u5927\u9876\u5806\u518d\u62ff\u4e00\u4e2a\u5143\u7d20\u653e\u56de\u5c0f\u9876\u5806\u5c31\u53ef\u4ee5\u4e86\u3002 \u6211\u4eec\u7edf\u4e00\u5199\u5728\u53c2\u8003\u89e3\u7b542\u91cc\u3002","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"41/#2","text":"Python \u4ee3\u7801 import heapq class Solution: def __init__(self): self.min_heap = [] self.max_heap = [] self.count = 0 def insert(self, num): \"\"\" :type num: int :rtype: void \"\"\" # \u5f53\u524d\u662f\u5947\u6570\u7684\u65f6\u5019\uff0c\u76f4\u63a5\"\u6700\u5c0f\u5806\" -> \"\u6700\u5927\u5806\"\uff0c\u5c31\u53ef\u4ee5\u4e86 # \u6b64\u65f6\"\u6700\u5c0f\u5806\" \u4e0e \"\u6700\u5927\u5806\" \u7684\u5143\u7d20\u6570\u7ec4\u662f\u76f8\u7b49\u7684 # \u5f53\u524d\u662f\u5076\u6570\u7684\u65f6\u5019\uff0c\"\u6700\u5c0f\u5806\" -> \"\u6700\u5927\u5806\"\u4ee5\u540e\uff0c\u6700\u7ec8\u6211\u4eec\u8981\u8ba9\"\u6700\u5c0f\u5806\"\u591a\u4e00\u4e2a\u5143\u7d20 # \u6240\u4ee5\u5e94\u8be5\u8ba9 \"\u6700\u5927\u5806\" \u62ff\u51fa\u4e00\u4e2a\u5143\u7d20\u7ed9 \"\u6700\u5c0f\u5806\" heapq.heappush(self.min_heap, num) temp = heapq.heappop(self.min_heap) heapq.heappush(self.max_heap, -temp) if self.count & 1 == 0: temp = -heapq.heappop(self.max_heap) heapq.heappush(self.min_heap, temp) self.count += 1 # print(self.min_heap) # print(self.max_heap) def getMedian(self): \"\"\" :rtype: float \"\"\" if self.count & 1 == 1: return self.min_heap[0] else: return (self.min_heap[0] + (-self.max_heap[0])) / 2 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u53c2\u8003\u89e3\u7b542\uff1a"},{"location":"42/","text":"\u5251\u6307 Offer 42. \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u5251\u6307 Offer 42. \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \uff1b \u4f20\u9001\u95e8\uff1a \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7b2c 42 \u9898\uff1a\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u8f93\u5165\u4e00\u4e2a \u975e\u7a7a \u6574\u578b\u6570\u7ec4\uff0c\u6570\u7ec4\u91cc\u7684\u6570\u53ef\u80fd\u4e3a\u6b63\uff0c\u4e5f\u53ef\u80fd\u4e3a\u8d1f\u3002 \u6570\u7ec4\u4e2d\u4e00\u4e2a\u6216\u8fde\u7eed\u7684\u591a\u4e2a\u6574\u6570\u7ec4\u6210\u4e00\u4e2a\u5b50\u6570\u7ec4\u3002 \u6c42\u6240\u6709\u5b50\u6570\u7ec4\u7684\u548c\u7684\u6700\u5927\u503c\u3002 \u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1, -2, 3, 10, -4, 7, 2, -5] \u8f93\u51fa\uff1a18 \u540c LeetCode \u7b2c 53 \u9898\uff0c\u9898\u89e3\u4f20\u9001\u95e8\uff1a LeetCode \u7b2c 53 \u9898\uff1a\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u3002 \u201c\u5927\u96ea\u83dc\u201d\u7684\u505a\u6cd5\uff1a\u72b6\u6001\uff1a\u4ee5\u524d\u4e00\u4e2a\u6570\u7ed3\u5c3e\u7684\u201c\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\u201d\u4e3a\u72b6\u6001\u3002 C++ \u4ee3\u7801\uff1a \u5206\u6790\uff1a \u6839\u636e\u201c\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u201d\u95ee\u9898\u7684\u601d\u8def\uff0c\u6211\u4eec\u5728\u8003\u8651\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u5b9a\u4e49\u4ee5\u5f53\u524d\u6570\u7ec4\u5143\u7d20\u4e3a\u7ed3\u5c3e\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u5f80\u5f80\u4f1a\u4f7f\u7528\u60c5\u51b5\u53d8\u5f97\u7b80\u5355\u4e00\u4e9b\u3002 \u8bbe\u7f6e\u72b6\u6001\uff1a dp[i] \u4ee5 i \u7ed3\u5c3e\u7684\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\u3002 \u8003\u8651\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \u5982\u679c nums[i] < 0\uff0cdp[i] = max(dp[i-1] + nums[i],nums[i]) ; \u5982\u679c nums[i] >= 0\uff0cdp[i] = dp[i-1] + nums[i] ; \u7efc\u4e0a\u6240\u8ff0\uff0c\u4e0d\u8bba\u5f53\u524d\u8003\u8651\u7684\u6570\u7ec4\u5143\u7d20\u662f\u5927\u4e8e\u7b49\u4e8e 0 \u8fd8\u662f\u5c0f\u4e8e 0\uff0c\u53ea\u8981\u6ee1\u8db3 dp[i] = max(dp[i-1] + nums[i], nums[i]) \u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u5c31\u662f\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u3002 Java \u4ee3\u7801\uff1a public class Solution { public int FindGreatestSumOfSubArray(int[] array) { int n = array.length; if (n == 0) { return 0; } int[] dp = new int[n]; dp[0] = array[0]; int res = array[0]; for (int i = 1; i < n; i++) { dp[i] = Integer.max(dp[i - 1] + array[i], array[i]); res = Integer.max(res, dp[i]); } return res; } public static void main(String[] args) { int[] nums = new int[]{6, -3, -2, 7, -15, 1, 2, 2}; Solution solution = new Solution(); int findGreatestSumOfSubArray = solution.FindGreatestSumOfSubArray(nums); System.out.println(findGreatestSumOfSubArray); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 42. \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c"},{"location":"42/#offer-42","text":"\u5251\u6307 Offer 42. \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \uff1b \u4f20\u9001\u95e8\uff1a \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002","title":"\u5251\u6307 Offer 42. \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c"},{"location":"42/#42","text":"\u8f93\u5165\u4e00\u4e2a \u975e\u7a7a \u6574\u578b\u6570\u7ec4\uff0c\u6570\u7ec4\u91cc\u7684\u6570\u53ef\u80fd\u4e3a\u6b63\uff0c\u4e5f\u53ef\u80fd\u4e3a\u8d1f\u3002 \u6570\u7ec4\u4e2d\u4e00\u4e2a\u6216\u8fde\u7eed\u7684\u591a\u4e2a\u6574\u6570\u7ec4\u6210\u4e00\u4e2a\u5b50\u6570\u7ec4\u3002 \u6c42\u6240\u6709\u5b50\u6570\u7ec4\u7684\u548c\u7684\u6700\u5927\u503c\u3002 \u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1, -2, 3, 10, -4, 7, 2, -5] \u8f93\u51fa\uff1a18 \u540c LeetCode \u7b2c 53 \u9898\uff0c\u9898\u89e3\u4f20\u9001\u95e8\uff1a LeetCode \u7b2c 53 \u9898\uff1a\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u3002 \u201c\u5927\u96ea\u83dc\u201d\u7684\u505a\u6cd5\uff1a\u72b6\u6001\uff1a\u4ee5\u524d\u4e00\u4e2a\u6570\u7ed3\u5c3e\u7684\u201c\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\u201d\u4e3a\u72b6\u6001\u3002 C++ \u4ee3\u7801\uff1a \u5206\u6790\uff1a \u6839\u636e\u201c\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u201d\u95ee\u9898\u7684\u601d\u8def\uff0c\u6211\u4eec\u5728\u8003\u8651\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u5b9a\u4e49\u4ee5\u5f53\u524d\u6570\u7ec4\u5143\u7d20\u4e3a\u7ed3\u5c3e\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u5f80\u5f80\u4f1a\u4f7f\u7528\u60c5\u51b5\u53d8\u5f97\u7b80\u5355\u4e00\u4e9b\u3002 \u8bbe\u7f6e\u72b6\u6001\uff1a dp[i] \u4ee5 i \u7ed3\u5c3e\u7684\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\u3002 \u8003\u8651\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \u5982\u679c nums[i] < 0\uff0cdp[i] = max(dp[i-1] + nums[i],nums[i]) ; \u5982\u679c nums[i] >= 0\uff0cdp[i] = dp[i-1] + nums[i] ; \u7efc\u4e0a\u6240\u8ff0\uff0c\u4e0d\u8bba\u5f53\u524d\u8003\u8651\u7684\u6570\u7ec4\u5143\u7d20\u662f\u5927\u4e8e\u7b49\u4e8e 0 \u8fd8\u662f\u5c0f\u4e8e 0\uff0c\u53ea\u8981\u6ee1\u8db3 dp[i] = max(dp[i-1] + nums[i], nums[i]) \u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u5c31\u662f\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u3002 Java \u4ee3\u7801\uff1a public class Solution { public int FindGreatestSumOfSubArray(int[] array) { int n = array.length; if (n == 0) { return 0; } int[] dp = new int[n]; dp[0] = array[0]; int res = array[0]; for (int i = 1; i < n; i++) { dp[i] = Integer.max(dp[i - 1] + array[i], array[i]); res = Integer.max(res, dp[i]); } return res; } public static void main(String[] args) { int[] nums = new int[]{6, -3, -2, 7, -15, 1, 2, 2}; Solution solution = new Solution(); int findGreatestSumOfSubArray = solution.FindGreatestSumOfSubArray(nums); System.out.println(findGreatestSumOfSubArray); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 42 \u9898\uff1a\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c"},{"location":"43/","text":"\u5251\u6307 Offer 43. 1\uff5en \u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570 \u5251\u6307 Offer 43. 1\uff5en \u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570","title":"\u5251\u6307 Offer 43. 1\uff5en \u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570"},{"location":"43/#offer-43-1n-1","text":"\u5251\u6307 Offer 43. 1\uff5en \u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570","title":"\u5251\u6307 Offer 43. 1\uff5en \u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570"},{"location":"44/","text":"\u5251\u6307 Offer 44. \u6570\u5b57\u5e8f\u5217\u4e2d\u67d0\u4e00\u4f4d\u7684\u6570\u5b57 \u5251\u6307 Offer 44. \u6570\u5b57\u5e8f\u5217\u4e2d\u67d0\u4e00\u4f4d\u7684\u6570\u5b57 \u4f20\u9001\u95e8\uff1a \u6570\u5b57\u5e8f\u5217\u4e2d\u67d0\u4e00\u4f4d\u7684\u6570\u5b57 \u3002 \u6570\u5b57\u4ee5 0123456789101112131415\u2026 \u7684\u683c\u5f0f\u5e8f\u5217\u5316\u5230\u4e00\u4e2a\u5b57\u7b26\u5e8f\u5217\u4e2d\u3002 \u5728\u8fd9\u4e2a\u5e8f\u5217\u4e2d\uff0c\u7b2c 5 \u4f4d\uff08\u4ece 0 \u5f00\u59cb\u8ba1\u6570\uff09\u662f 5 \uff0c\u7b2c 13 \u4f4d\u662f 1 \uff0c\u7b2c 19 \u4f4d\u662f 4 \uff0c\u7b49\u7b49\u3002 \u8bf7\u5199\u4e00\u4e2a\u51fd\u6570\u6c42\u4efb\u610f\u4f4d\u5bf9\u5e94\u7684\u6570\u5b57\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a13 \u8f93\u51fa\uff1a1 Python \u4ee3\u7801\uff1a\u53c2\u8003\u4e86 LeetCode \u7b2c 400 \u9898\u8ba8\u8bba\u533a\u4ee3\u7801 class Solution(object): def digitAtIndex(self, n): \"\"\" :type n: int :rtype: int \"\"\" # \u5982\u679c n \u5c0f\u4e8e 10 \uff0c\u76f4\u63a5\u8fd4\u56de\u5c31\u53ef\u4ee5\u4e86 if n < 10: return n # \u8ba1\u7b97\u524d\u7f00\u90e8\u5206 base = 9 digits = 1 # 2 \u4f4d\u6570\uff0c\u4ece 10 \u5230 99 \u4e00\u5171 ( 99 - 10 + 1) * 2 = 90 * 2 = 180 \u4f4d # 3 \u4f4d\u6570\uff0c\u4ece 100 \u5230 999 \u4e00\u5171 ( 999 - 100 + 1) * 2 = 900 * 3 = 2700 \u4f4d # 4 \u4f4d\u6570\uff0c\u4ece 1000 \u5230 9999 \u4e00\u5171 ( 9999 - 1000 + 1) * 2 = 9000 * 4 = 3600 \u4f4d while n - base * digits > 0: n -= base * digits base *= 10 digits += 1 index = n % digits if index == 0: # \u8ba1\u7b97\u51fa num \u662f\u591a\u5c11 # \u4f8b\u5982\uff1a192\uff0c\u6709 1 \u4e2a\u4f4d\u79fb\u7684\u504f\u5dee num = 10 ** (digits - 1) + n // digits - 1 # \u8fd4\u56de\u4e2a\u4f4d\u5c31\u53ef\u4ee5\u4e86 return num % 10 else: # \u4e0d\u80fd\u6574\u9664\uff0c\u90a3\u4e2a\u504f\u79fb\u5c31\u4e0d\u7528\u7b97\u4e86 # \u4f8b\u5982 194 = 189 + 5 # 100 + 2 = 102 num = 10 ** (digits - 1) + n // digits # \u4ece\u5de6\u8fb9\u5411\u53f3\u8fb9\u6570\uff0c\u7b2c 2 \u4f4d for i in range(index, digits): num //= 10 return num % 10 \u53c2\u8003\u8d44\u6599\uff1a 1\u3001https://www.acwing.com/activity/content/code/content/20758/ 2\u3001https://blog.csdn.net/Koala_Tree/article/details/79536284 [\u7ad9\u5916\u56fe\u7247\u4e0a\u4f20\u4e2d...(image-a760ae-1558582697894)] \u601d\u8def\uff1a\u8df3\u8fc7\u4e0d\u540c\u4f4d\u6570\u7684\u6570\u5b57\uff0c\u5728\u76f8\u5e94\u4f4d\u6570\u4e2d\u5bfb\u627e\u3002 \u4ee5\u5e8f\u5217\u4e2d\u7b2c $1001$ \u4f4d\u4e3a\u4f8b\uff1a 1\u3001\u5e8f\u5217\u524d $10$ \u4f4d\u4e3a $0$ \u5230 $9$\uff0c\u8df3\u8fc7\uff0c\u518d\u4ece\u540e\u9762\u627e $991$ \u4f4d\uff1b 2\u3001\u540e\u9762 $180$ \u4f4d\u4e3a $10$ \u5230 $99$\uff0c\u56e0\u4e3a\u4e00\u5171 $99-10+1=90$ \u4e2a\u6570\uff0c\u6bcf\u4e2a\u6570 $2$ \u4f4d\uff0c\u6240\u4ee5 $180$ \u4f4d\uff1b \u8df3\u8fc7\uff0c\u518d\u4ece\u540e\u9762\u627e $811$ \u4f4d\uff08$1001-10-180=811$\uff09\uff1b \u540e\u9762 $2700$ \u4f4d\u4e3a $100$ \u5230 $999$\uff0c\u56e0\u4e3a $811<2700$\uff0c\u6240\u4ee5 $811$ \u4f4d\u662f\u67d0\u4e2a\u4e09\u4f4d\u6570\u4e2d\u7684\u4e00\u4f4d\uff1b \u7531\u4e8e811=270*3+1\uff0c\u8fd9\u5c31\u662f\u8bf4811\u4f4d\u662f\u4ece100\u5f00\u59cb\u7684\u7b2c270\u4e2a\u6570\u5b57\u5373370\u7684\u4e2d\u95f4\u4e00\u4f4d\uff0c\u53737\u3002(\u6ce8\u610f\uff0c\u8fd9\u91cc\u90fd\u662f\u4ece\u7b2c0\u4f4d\u5f00\u59cb\u8ba1\u6570\u7684) \u4f5c\u8005\uff1aKoala_Tree \u6765\u6e90\uff1aCSDN \u539f\u6587\uff1ahttps://blog.csdn.net/Koala_Tree/article/details/79536284 \u7248\u6743\u58f0\u660e\uff1a\u672c\u6587\u4e3a\u535a\u4e3b\u539f\u521b\u6587\u7ae0\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u535a\u6587\u94fe\u63a5\uff01 Java \u4ee3\u7801\uff1a class Solution { // 9*1 9*10*2 9*10*10*3 public int digitAtIndex(int n) { int len = 1; long count = 9; int start = 1; while (n > len * count) { //13 n=n-9=4 len=2 count=90 start=10 n -= len * count; //start=10+3/2=11 \u7b54\u6848\u662f11\u7684\u7b2c\u4e8c\u4e2a1 len += 1; count *= 10; start *= 10; } // start \u8bb0\u5f55\u5f53\u524d\u5faa\u73af\u533a\u95f4\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\uff0c\u5f53 n \u843d\u5230\u67d0\u4e00\u4e2a\u786e\u5b9a\u7684\u533a\u95f4\u91cc\u4e86, // \u90a3\u4e48 (n-1)/len \u5c31\u662f\u76ee\u6807\u6570\u5b57\u5728\u8be5\u533a\u95f4\u91cc\u7684\u5750\u6807\uff0c\u52a0\u4e0a start \u5c31\u662f\u5f97\u5230\u4e86\u76ee\u6807\u6570\u5b57 start += (n - 1) / len; String s = Integer.toString(start); return Character.getNumericValue(s.charAt((n - 1) % len)); } } \u53c2\u8003\u8d44\u6599\uff1a\u8fd9\u7bc7\u7b80\u4e66\u4e0a\u7684\u6587\u7ae0\u6709\u8be6\u7ec6\u6b65\u9aa4\u3002https://www.jianshu.com/p/0bbf1fcbe070\u3002 \u540c LeetCode \u7b2c 400 \u9898\uff1a 400. \u7b2c N \u4e2a\u6570\u5b57 \u8bf4\u660e\uff1a\u53ea\u4e0d\u8fc7 LeetCode \u7b2c 400 \u9898\u4ece 1 \u5f00\u59cb\uff0c\u4f20\u9001\u95e8\uff1a 400. \u7b2c N \u4e2a\u6570\u5b57 \u3002 \u5728\u65e0\u9650\u7684\u6574\u6570\u5e8f\u5217 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...\u4e2d\u627e\u5230\u7b2c n \u4e2a\u6570\u5b57\u3002 \u6ce8\u610f: n \u662f\u6b63\u6570\u4e14\u572832\u4e3a\u6574\u5f62\u8303\u56f4\u5185 ( n < 231)\u3002 \u793a\u4f8b 1: ``` \u8f93\u5165: 3 \u8f93\u51fa: 3 ``` \u793a\u4f8b 2: ``` \u8f93\u5165: 11 \u8f93\u51fa: 0 \u8bf4\u660e: \u7b2c11\u4e2a\u6570\u5b57\u5728\u5e8f\u5217 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... \u91cc\u662f0\uff0c\u5b83\u662f10\u7684\u4e00\u90e8\u5206\u3002 ``` Python \u4ee3\u7801\uff1a class Solution: def findNthDigit(self, n): \"\"\" :type n: int :rtype: int \"\"\" # \u7279\u5224\uff1a\u5982\u679c n \u5c0f\u4e8e 10 \uff0c\u76f4\u63a5\u8fd4\u56de\u5c31\u53ef\u4ee5\u4e86 if n < 10: return n # \u8868\u793a\u51e0\u4f4d\u6570 # 2 \u4f4d\u6570\uff0c\u4ece 10 \u5230 99 \u4e00\u5171 ( 99 - 10 + 1) * 2 = 90 * 2 = 180 \u4f4d # 3 \u4f4d\u6570\uff0c\u4ece 100 \u5230 999 \u4e00\u5171 ( 999 - 100 + 1) * 2 = 900 * 3 = 2700 \u4f4d # 4 \u4f4d\u6570\uff0c\u4ece 1000 \u5230 9999 \u4e00\u5171 ( 9999 - 1000 + 1) * 2 = 9000 * 4 = 3600 \u4f4d # \u6b65\u9aa41\uff1acalculate how many digits the number has # \u8ba1\u7b97\u524d\u7f00\u90e8\u5206 length = 0 base = 9 digits = 1 # n = 1001 \u65f6\uff0c9 \u8fc7\uff0c180 \u8fc7\uff0c\u5269\u4e0b 812 # \u4e0d\u8d8a\u754c\u624d\u52a0\uff0c\u8981\u6e05\u695a\u8fd9\u4e00\u70b9 while length + base * digits < n: length += base * digits base *= 10 digits += 1 n -= length # step 2. calculate what the number is # \u5230\u8fd9\u91cc\uff0cnum \u662f \"digits \u4f4d\u6570\" \u4e2d\u7684\u67d0\u4e00\u4e2a\u6570\u5b57 # \u4ee5 digits = 3 \u4e3a\u4f8b\uff0cn \u662f 100 - 999 \u4e2d\u7684\u4e00\u4f4d\uff0cnum \u8868\u793a\u662f\u54ea\u4e2a\u6570\u5b57 index = n % digits if index == 0: # \u5982\u679c\u6574\u9664\uff0c\u5c31\u662f\u90a3\u4e2a\u6570\u5b57\u7684\u6700\u540e\u4e00\u4f4d num = 10 ** (digits - 1) + n // digits - 1 return num % 10 else: num = 10 ** (digits - 1) + n // digits for i in range(index, digits): num //= 10 return num % 10 if __name__ == '__main__': solution = Solution() n = 190 result1 = solution.findNthDigit(n) print(result1) MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 44. \u6570\u5b57\u5e8f\u5217\u4e2d\u67d0\u4e00\u4f4d\u7684\u6570\u5b57"},{"location":"44/#offer-44","text":"\u5251\u6307 Offer 44. \u6570\u5b57\u5e8f\u5217\u4e2d\u67d0\u4e00\u4f4d\u7684\u6570\u5b57 \u4f20\u9001\u95e8\uff1a \u6570\u5b57\u5e8f\u5217\u4e2d\u67d0\u4e00\u4f4d\u7684\u6570\u5b57 \u3002 \u6570\u5b57\u4ee5 0123456789101112131415\u2026 \u7684\u683c\u5f0f\u5e8f\u5217\u5316\u5230\u4e00\u4e2a\u5b57\u7b26\u5e8f\u5217\u4e2d\u3002 \u5728\u8fd9\u4e2a\u5e8f\u5217\u4e2d\uff0c\u7b2c 5 \u4f4d\uff08\u4ece 0 \u5f00\u59cb\u8ba1\u6570\uff09\u662f 5 \uff0c\u7b2c 13 \u4f4d\u662f 1 \uff0c\u7b2c 19 \u4f4d\u662f 4 \uff0c\u7b49\u7b49\u3002 \u8bf7\u5199\u4e00\u4e2a\u51fd\u6570\u6c42\u4efb\u610f\u4f4d\u5bf9\u5e94\u7684\u6570\u5b57\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a13 \u8f93\u51fa\uff1a1 Python \u4ee3\u7801\uff1a\u53c2\u8003\u4e86 LeetCode \u7b2c 400 \u9898\u8ba8\u8bba\u533a\u4ee3\u7801 class Solution(object): def digitAtIndex(self, n): \"\"\" :type n: int :rtype: int \"\"\" # \u5982\u679c n \u5c0f\u4e8e 10 \uff0c\u76f4\u63a5\u8fd4\u56de\u5c31\u53ef\u4ee5\u4e86 if n < 10: return n # \u8ba1\u7b97\u524d\u7f00\u90e8\u5206 base = 9 digits = 1 # 2 \u4f4d\u6570\uff0c\u4ece 10 \u5230 99 \u4e00\u5171 ( 99 - 10 + 1) * 2 = 90 * 2 = 180 \u4f4d # 3 \u4f4d\u6570\uff0c\u4ece 100 \u5230 999 \u4e00\u5171 ( 999 - 100 + 1) * 2 = 900 * 3 = 2700 \u4f4d # 4 \u4f4d\u6570\uff0c\u4ece 1000 \u5230 9999 \u4e00\u5171 ( 9999 - 1000 + 1) * 2 = 9000 * 4 = 3600 \u4f4d while n - base * digits > 0: n -= base * digits base *= 10 digits += 1 index = n % digits if index == 0: # \u8ba1\u7b97\u51fa num \u662f\u591a\u5c11 # \u4f8b\u5982\uff1a192\uff0c\u6709 1 \u4e2a\u4f4d\u79fb\u7684\u504f\u5dee num = 10 ** (digits - 1) + n // digits - 1 # \u8fd4\u56de\u4e2a\u4f4d\u5c31\u53ef\u4ee5\u4e86 return num % 10 else: # \u4e0d\u80fd\u6574\u9664\uff0c\u90a3\u4e2a\u504f\u79fb\u5c31\u4e0d\u7528\u7b97\u4e86 # \u4f8b\u5982 194 = 189 + 5 # 100 + 2 = 102 num = 10 ** (digits - 1) + n // digits # \u4ece\u5de6\u8fb9\u5411\u53f3\u8fb9\u6570\uff0c\u7b2c 2 \u4f4d for i in range(index, digits): num //= 10 return num % 10 \u53c2\u8003\u8d44\u6599\uff1a 1\u3001https://www.acwing.com/activity/content/code/content/20758/ 2\u3001https://blog.csdn.net/Koala_Tree/article/details/79536284 [\u7ad9\u5916\u56fe\u7247\u4e0a\u4f20\u4e2d...(image-a760ae-1558582697894)] \u601d\u8def\uff1a\u8df3\u8fc7\u4e0d\u540c\u4f4d\u6570\u7684\u6570\u5b57\uff0c\u5728\u76f8\u5e94\u4f4d\u6570\u4e2d\u5bfb\u627e\u3002 \u4ee5\u5e8f\u5217\u4e2d\u7b2c $1001$ \u4f4d\u4e3a\u4f8b\uff1a 1\u3001\u5e8f\u5217\u524d $10$ \u4f4d\u4e3a $0$ \u5230 $9$\uff0c\u8df3\u8fc7\uff0c\u518d\u4ece\u540e\u9762\u627e $991$ \u4f4d\uff1b 2\u3001\u540e\u9762 $180$ \u4f4d\u4e3a $10$ \u5230 $99$\uff0c\u56e0\u4e3a\u4e00\u5171 $99-10+1=90$ \u4e2a\u6570\uff0c\u6bcf\u4e2a\u6570 $2$ \u4f4d\uff0c\u6240\u4ee5 $180$ \u4f4d\uff1b \u8df3\u8fc7\uff0c\u518d\u4ece\u540e\u9762\u627e $811$ \u4f4d\uff08$1001-10-180=811$\uff09\uff1b \u540e\u9762 $2700$ \u4f4d\u4e3a $100$ \u5230 $999$\uff0c\u56e0\u4e3a $811<2700$\uff0c\u6240\u4ee5 $811$ \u4f4d\u662f\u67d0\u4e2a\u4e09\u4f4d\u6570\u4e2d\u7684\u4e00\u4f4d\uff1b \u7531\u4e8e811=270*3+1\uff0c\u8fd9\u5c31\u662f\u8bf4811\u4f4d\u662f\u4ece100\u5f00\u59cb\u7684\u7b2c270\u4e2a\u6570\u5b57\u5373370\u7684\u4e2d\u95f4\u4e00\u4f4d\uff0c\u53737\u3002(\u6ce8\u610f\uff0c\u8fd9\u91cc\u90fd\u662f\u4ece\u7b2c0\u4f4d\u5f00\u59cb\u8ba1\u6570\u7684) \u4f5c\u8005\uff1aKoala_Tree \u6765\u6e90\uff1aCSDN \u539f\u6587\uff1ahttps://blog.csdn.net/Koala_Tree/article/details/79536284 \u7248\u6743\u58f0\u660e\uff1a\u672c\u6587\u4e3a\u535a\u4e3b\u539f\u521b\u6587\u7ae0\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u535a\u6587\u94fe\u63a5\uff01 Java \u4ee3\u7801\uff1a class Solution { // 9*1 9*10*2 9*10*10*3 public int digitAtIndex(int n) { int len = 1; long count = 9; int start = 1; while (n > len * count) { //13 n=n-9=4 len=2 count=90 start=10 n -= len * count; //start=10+3/2=11 \u7b54\u6848\u662f11\u7684\u7b2c\u4e8c\u4e2a1 len += 1; count *= 10; start *= 10; } // start \u8bb0\u5f55\u5f53\u524d\u5faa\u73af\u533a\u95f4\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\uff0c\u5f53 n \u843d\u5230\u67d0\u4e00\u4e2a\u786e\u5b9a\u7684\u533a\u95f4\u91cc\u4e86, // \u90a3\u4e48 (n-1)/len \u5c31\u662f\u76ee\u6807\u6570\u5b57\u5728\u8be5\u533a\u95f4\u91cc\u7684\u5750\u6807\uff0c\u52a0\u4e0a start \u5c31\u662f\u5f97\u5230\u4e86\u76ee\u6807\u6570\u5b57 start += (n - 1) / len; String s = Integer.toString(start); return Character.getNumericValue(s.charAt((n - 1) % len)); } } \u53c2\u8003\u8d44\u6599\uff1a\u8fd9\u7bc7\u7b80\u4e66\u4e0a\u7684\u6587\u7ae0\u6709\u8be6\u7ec6\u6b65\u9aa4\u3002https://www.jianshu.com/p/0bbf1fcbe070\u3002","title":"\u5251\u6307 Offer 44. \u6570\u5b57\u5e8f\u5217\u4e2d\u67d0\u4e00\u4f4d\u7684\u6570\u5b57"},{"location":"44/#leetcode-400-400-n","text":"\u8bf4\u660e\uff1a\u53ea\u4e0d\u8fc7 LeetCode \u7b2c 400 \u9898\u4ece 1 \u5f00\u59cb\uff0c\u4f20\u9001\u95e8\uff1a 400. \u7b2c N \u4e2a\u6570\u5b57 \u3002 \u5728\u65e0\u9650\u7684\u6574\u6570\u5e8f\u5217 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...\u4e2d\u627e\u5230\u7b2c n \u4e2a\u6570\u5b57\u3002 \u6ce8\u610f: n \u662f\u6b63\u6570\u4e14\u572832\u4e3a\u6574\u5f62\u8303\u56f4\u5185 ( n < 231)\u3002 \u793a\u4f8b 1: ``` \u8f93\u5165: 3 \u8f93\u51fa: 3 ``` \u793a\u4f8b 2: ``` \u8f93\u5165: 11 \u8f93\u51fa: 0 \u8bf4\u660e: \u7b2c11\u4e2a\u6570\u5b57\u5728\u5e8f\u5217 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... \u91cc\u662f0\uff0c\u5b83\u662f10\u7684\u4e00\u90e8\u5206\u3002 ``` Python \u4ee3\u7801\uff1a class Solution: def findNthDigit(self, n): \"\"\" :type n: int :rtype: int \"\"\" # \u7279\u5224\uff1a\u5982\u679c n \u5c0f\u4e8e 10 \uff0c\u76f4\u63a5\u8fd4\u56de\u5c31\u53ef\u4ee5\u4e86 if n < 10: return n # \u8868\u793a\u51e0\u4f4d\u6570 # 2 \u4f4d\u6570\uff0c\u4ece 10 \u5230 99 \u4e00\u5171 ( 99 - 10 + 1) * 2 = 90 * 2 = 180 \u4f4d # 3 \u4f4d\u6570\uff0c\u4ece 100 \u5230 999 \u4e00\u5171 ( 999 - 100 + 1) * 2 = 900 * 3 = 2700 \u4f4d # 4 \u4f4d\u6570\uff0c\u4ece 1000 \u5230 9999 \u4e00\u5171 ( 9999 - 1000 + 1) * 2 = 9000 * 4 = 3600 \u4f4d # \u6b65\u9aa41\uff1acalculate how many digits the number has # \u8ba1\u7b97\u524d\u7f00\u90e8\u5206 length = 0 base = 9 digits = 1 # n = 1001 \u65f6\uff0c9 \u8fc7\uff0c180 \u8fc7\uff0c\u5269\u4e0b 812 # \u4e0d\u8d8a\u754c\u624d\u52a0\uff0c\u8981\u6e05\u695a\u8fd9\u4e00\u70b9 while length + base * digits < n: length += base * digits base *= 10 digits += 1 n -= length # step 2. calculate what the number is # \u5230\u8fd9\u91cc\uff0cnum \u662f \"digits \u4f4d\u6570\" \u4e2d\u7684\u67d0\u4e00\u4e2a\u6570\u5b57 # \u4ee5 digits = 3 \u4e3a\u4f8b\uff0cn \u662f 100 - 999 \u4e2d\u7684\u4e00\u4f4d\uff0cnum \u8868\u793a\u662f\u54ea\u4e2a\u6570\u5b57 index = n % digits if index == 0: # \u5982\u679c\u6574\u9664\uff0c\u5c31\u662f\u90a3\u4e2a\u6570\u5b57\u7684\u6700\u540e\u4e00\u4f4d num = 10 ** (digits - 1) + n // digits - 1 return num % 10 else: num = 10 ** (digits - 1) + n // digits for i in range(index, digits): num //= 10 return num % 10 if __name__ == '__main__': solution = Solution() n = 190 result1 = solution.findNthDigit(n) print(result1) MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u540c LeetCode \u7b2c 400 \u9898\uff1a400. \u7b2c N \u4e2a\u6570\u5b57"},{"location":"45/","text":"\u5251\u6307 Offer 45. \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 \u5251\u6307 Offer 45. \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 \uff1b \u4f20\u9001\u95e8\uff1a \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4\uff0c\u628a\u6570\u7ec4\u91cc\u6240\u6709\u6570\u5b57\u62fc\u63a5\u8d77\u6765\u6392\u6210\u4e00\u4e2a\u6570\uff0c\u6253\u5370\u80fd\u62fc\u63a5\u51fa\u7684\u6240\u6709\u6570\u5b57\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u3002 \u4f8b\u5982\u8f93\u5165\u6570\u7ec4 [3, 32, 321] \uff0c\u5219\u6253\u5370\u51fa\u8fd9 3 \u4e2a\u6570\u5b57\u80fd\u6392\u6210\u7684\u6700\u5c0f\u6570\u5b57 321323 \u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [3, 32, 321] \u8f93\u51fa\uff1a 321323 \u6ce8\u610f \uff1a\u8f93\u51fa\u6570\u5b57\u7684\u683c\u5f0f\u4e3a\u5b57\u7b26\u4e32\u3002 \u540c LeetCode \u7b2c 179 \u9898\uff0c \u6700\u5927\u6570 \u3002 Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { public String PrintMinNumber(int[] numbers) { int len = numbers.length; if (len == 0) { return \"\"; } String[] numsStr = new String[len]; for (int i = 0; i < len; i++) { numsStr[i] = numbers[i] + \"\"; } Arrays.sort(numsStr, (a, b) -> (a + b).compareTo(b + a)); StringBuilder builder = new StringBuilder(); for (int i = 0; i < len; i++) { builder.append(numsStr[i]); } return builder.toString(); } public static void main(String[] args) { int[] nums = new int[]{3, 32, 321}; Solution solution = new Solution(); String printMinNumber = solution.PrintMinNumber(nums); System.out.println(printMinNumber); } } \u8bf4\u660e\uff1a\u5176\u5b9e\u5c31\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219\u3002Python3 \u60f3\u7528 cmp \u800c\u4e0d\u662f key \u7684\u8bdd\uff0c\u9700\u8981 from functools import cmp_to_key \uff0c\u7136\u540e sort \u6216\u8005 sorted \u7684\u65f6\u5019 key = cmp_to_key(your_comparator) \u3002 Python \u4ee3\u7801\uff1a class Solution(object): def printMinNumber(self, nums): \"\"\" :type nums: List[int] :rtype: str \"\"\" if len(nums) == 0: return '' # \u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219 from functools import cmp_to_key key_func = cmp_to_key(lambda a, b: int(a + b) - int(b + a)) result = sorted(map(str, nums), key=key_func) return ''.join(result) if __name__ == '__main__': list1 = [7, -8, 5, 4, 0, -2, -5] # \u8981\u6c42\uff1a1\u3001\u6b63\u6570\u5728\u524d\u8d1f\u6570\u5728\u540e # 2\u3001\u6b63\u6570\u4ece\u5c0f\u5230\u5927 # 3\u3001\u8d1f\u6570\u4ece\u5927\u5230\u5c0f result = sorted(list1, key=lambda x: (x < 0, abs(x))) print(result) s = 'asdf234GDSdsf23' # \u6392\u5e8f:\u5c0f\u5199-\u5927\u5199-\u5947\u6570-\u5076\u6570 print( \"\".join( sorted( s, key=lambda x: ( x.isdigit(), x.isdigit() and int(x) % 2 == 0, x.isupper(), x)))) \u53e6\u4e00\u79cd\u5199\u6cd5\uff1a Python \u4ee3\u7801\uff1a class NumCompare(str): # \u6ce8\u610f\uff1a\u8fd9\u91cc\u7ee7\u627f str \u7c7b def __lt__(self, other): return self + other < other + self class Solution(object): def printMinNumber(self, nums): \"\"\" :type nums: List[int] :rtype: str \"\"\" if len(nums) == 0: return '' # \u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219 result = sorted(map(str, nums), key=NumCompare) return ''.join(result) MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 45. \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570"},{"location":"45/#offer-45","text":"\u5251\u6307 Offer 45. \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 \uff1b \u4f20\u9001\u95e8\uff1a \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4\uff0c\u628a\u6570\u7ec4\u91cc\u6240\u6709\u6570\u5b57\u62fc\u63a5\u8d77\u6765\u6392\u6210\u4e00\u4e2a\u6570\uff0c\u6253\u5370\u80fd\u62fc\u63a5\u51fa\u7684\u6240\u6709\u6570\u5b57\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u3002 \u4f8b\u5982\u8f93\u5165\u6570\u7ec4 [3, 32, 321] \uff0c\u5219\u6253\u5370\u51fa\u8fd9 3 \u4e2a\u6570\u5b57\u80fd\u6392\u6210\u7684\u6700\u5c0f\u6570\u5b57 321323 \u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [3, 32, 321] \u8f93\u51fa\uff1a 321323 \u6ce8\u610f \uff1a\u8f93\u51fa\u6570\u5b57\u7684\u683c\u5f0f\u4e3a\u5b57\u7b26\u4e32\u3002 \u540c LeetCode \u7b2c 179 \u9898\uff0c \u6700\u5927\u6570 \u3002 Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { public String PrintMinNumber(int[] numbers) { int len = numbers.length; if (len == 0) { return \"\"; } String[] numsStr = new String[len]; for (int i = 0; i < len; i++) { numsStr[i] = numbers[i] + \"\"; } Arrays.sort(numsStr, (a, b) -> (a + b).compareTo(b + a)); StringBuilder builder = new StringBuilder(); for (int i = 0; i < len; i++) { builder.append(numsStr[i]); } return builder.toString(); } public static void main(String[] args) { int[] nums = new int[]{3, 32, 321}; Solution solution = new Solution(); String printMinNumber = solution.PrintMinNumber(nums); System.out.println(printMinNumber); } } \u8bf4\u660e\uff1a\u5176\u5b9e\u5c31\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219\u3002Python3 \u60f3\u7528 cmp \u800c\u4e0d\u662f key \u7684\u8bdd\uff0c\u9700\u8981 from functools import cmp_to_key \uff0c\u7136\u540e sort \u6216\u8005 sorted \u7684\u65f6\u5019 key = cmp_to_key(your_comparator) \u3002 Python \u4ee3\u7801\uff1a class Solution(object): def printMinNumber(self, nums): \"\"\" :type nums: List[int] :rtype: str \"\"\" if len(nums) == 0: return '' # \u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219 from functools import cmp_to_key key_func = cmp_to_key(lambda a, b: int(a + b) - int(b + a)) result = sorted(map(str, nums), key=key_func) return ''.join(result) if __name__ == '__main__': list1 = [7, -8, 5, 4, 0, -2, -5] # \u8981\u6c42\uff1a1\u3001\u6b63\u6570\u5728\u524d\u8d1f\u6570\u5728\u540e # 2\u3001\u6b63\u6570\u4ece\u5c0f\u5230\u5927 # 3\u3001\u8d1f\u6570\u4ece\u5927\u5230\u5c0f result = sorted(list1, key=lambda x: (x < 0, abs(x))) print(result) s = 'asdf234GDSdsf23' # \u6392\u5e8f:\u5c0f\u5199-\u5927\u5199-\u5947\u6570-\u5076\u6570 print( \"\".join( sorted( s, key=lambda x: ( x.isdigit(), x.isdigit() and int(x) % 2 == 0, x.isupper(), x)))) \u53e6\u4e00\u79cd\u5199\u6cd5\uff1a Python \u4ee3\u7801\uff1a class NumCompare(str): # \u6ce8\u610f\uff1a\u8fd9\u91cc\u7ee7\u627f str \u7c7b def __lt__(self, other): return self + other < other + self class Solution(object): def printMinNumber(self, nums): \"\"\" :type nums: List[int] :rtype: str \"\"\" if len(nums) == 0: return '' # \u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219 result = sorted(map(str, nums), key=NumCompare) return ''.join(result) MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 45. \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570"},{"location":"46/","text":"\u5251\u6307 Offer 46. \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32 \u5251\u6307 Offer 46. \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32 \uff1b \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u89c4\u5219\u628a\u5b83\u7ffb\u8bd1\u4e3a\u5b57\u7b26\u4e32\uff1a 0 \u7ffb\u8bd1\u6210 \u201ca\u201d\uff0c1 \u7ffb\u8bd1\u6210 \u201cb\u201d\uff0c\u2026\u2026\uff0c11 \u7ffb\u8bd1\u6210\u201cl\u201d\uff0c\u2026\u2026\uff0c25 \u7ffb\u8bd1\u6210 \u201cz\u201d\u3002 \u4e00\u4e2a\u6570\u5b57\u53ef\u80fd\u6709\u591a\u4e2a\u7ffb\u8bd1\u3002\u4f8b\u5982 12258 \u6709 5 \u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\uff0c\u5b83\u4eec\u5206\u522b\u662f \u201cbccfi\u201d\u3001\u201cbwfi\u201d\u3001\u201cbczi\u201d\u3001\u201cmcfi\u201d \u548c \u201cmzi\u201d\u3002 \u8bf7\u7f16\u7a0b\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u8ba1\u7b97\u4e00\u4e2a\u6570\u5b57\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\u65b9\u6cd5\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\"12258\" \u8f93\u51fa\uff1a5 \u601d\u8def\uff1a\u540c LeetCode \u7b2c 91 \u9898 Decode Ways\u3002\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u3002\u72b6\u6001\uff1a dp[i] \u8868\u793a s[0,i] \uff08\u5305\u62ec i \uff09\uff0c\u4e00\u5171\u6709\u591a\u5c11\u79cd\u7ffb\u8bd1\u7684\u65b9\u6cd5\u3002\u5206\u7c7b\u8ba8\u8bba\uff1a1\u3001\u5f53\u524d\u5b57\u7b26\u53ef\u4ee5\u5355\u72ec\u7ffb\u8bd1\uff1b2\u3001\u5f53\u524d\u5b57\u7b26\u53ef\u4ee5\u548c\u524d\u9762\u4e00\u4e2a\u5b57\u7b26\u4e00\u8d77\u7ffb\u8bd1\u3002 dp[i] \u5c31\u662f\u4ee5\u4e0a\u4e8c\u8005\u4e4b\u548c\u3002 Python \u4ee3\u7801\uff1a class Solution: def getTranslationCount(self, s): \"\"\" :type s: str :rtype: int \"\"\" s = str(s) l = len(s) if l == 0: return 0 dp = [None for _ in range(l)] # dp[i] \u8868\u793a s[0,i] \uff0c\u5305\u62ec i \uff0c\u4e00\u5171\u6709\u591a\u5c11\u79cd\u7ffb\u8bd1\u7684\u65b9\u6cd5 dp[0] = 1 for i in range(1, l): # \u5f53\u524d\u503c\u81f3\u5c11\u662f dp[i-1]\uff0c\u56e0\u4e3a s[i] \u4e00\u5b9a\u53ef\u4ee5\u5355\u72ec\u7ffb\u8bd1 cur = dp[i - 1] # \u770b\u4e00\u770b s[i-1,i] \u662f\u4e0d\u662f\u53ef\u4ee5\u7ffb\u8bd1 if 9 < int(s[i - 1:i + 1]) < 26: if i - 2 < 0: # 12 cur += 1 else: # \u8981\u8003\u8651\u5230\u6570\u7ec4\u4e0b\u6807\u8d8a\u754c\u95ee\u9898 cur += dp[i - 2] dp[i] = cur return dp[l - 1] LeetCode \u7b2c 91 \u9898\uff1a\u89e3\u7801\u65b9\u6cd5 \u4f20\u9001\u95e8\uff1a 91. \u89e3\u7801\u65b9\u6cd5 \u3002 \u4e00\u6761\u5305\u542b\u5b57\u6bcd A-Z \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a 'A' -> 1 'B' -> 2 ... 'Z' -> 26 \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684 \u975e\u7a7a \u5b57\u7b26\u4e32\uff0c\u8bf7\u8ba1\u7b97\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"12\" \u8f93\u51fa: 2 \u89e3\u91ca: \u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"AB\"\uff081 2\uff09\u6216\u8005 \"L\"\uff0812\uff09\u3002 \u793a\u4f8b 2: \u8f93\u5165: \"226\" \u8f93\u51fa: 3 \u89e3\u91ca: \u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"BZ\" (2 26), \"VF\" (22 6), \u6216\u8005 \"BBF\" (2 2 6) \u3002 Python \u4ee3\u7801\uff1a # 91\u3001\u89e3\u7801\u65b9\u6cd5 # \u4e00\u6761\u5305\u542b\u5b57\u6bcd A-Z \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a # # 'A' -> 1 # 'B' -> 2 # ... # 'Z' -> 26 # \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684\u975e\u7a7a\u5b57\u7b26\u4e32\uff0c\u8bf7\u8ba1\u7b97\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002 class Solution: def numDecodings(self, s): \"\"\" :type s: str :rtype: int \"\"\" l = len(s) if l == 0: return 0 if l == 1: return 1 if s[0] != '0' else 0 dp = [0 for _ in range(l)] dp[0] = 1 if s[0] != '0' else 0 for i in range(1, l): if s[i] != '0': # \u5982\u679c\u4e0d\u662f '0' \uff0c\u90a3\u4e48 s[i] \u5c31\u53ef\u4ee5\u7f16\u7801\uff0c\u6240\u4ee5 cur \u5c31\u81f3\u5c11\u662f dp[i-1] dp[i] += dp[i - 1] if 9 < int(s[i - 1:i + 1]) < 27: # \u53ef\u4ee5\u548c\u524d\u9762\u7684\u6570\u5b57\u7ec4\u6210\u4e00\u4e2a\u7f16\u7801 if i - 2 < 0: # 12 dp[i] += 1 else: dp[i] += dp[i - 2] return dp[l - 1] if __name__ == '__main__': test_str = '12' s = Solution() res = s.numDecodings(test_str) print(res) MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 46. \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32"},{"location":"46/#offer-46","text":"\u5251\u6307 Offer 46. \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32 \uff1b \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u89c4\u5219\u628a\u5b83\u7ffb\u8bd1\u4e3a\u5b57\u7b26\u4e32\uff1a 0 \u7ffb\u8bd1\u6210 \u201ca\u201d\uff0c1 \u7ffb\u8bd1\u6210 \u201cb\u201d\uff0c\u2026\u2026\uff0c11 \u7ffb\u8bd1\u6210\u201cl\u201d\uff0c\u2026\u2026\uff0c25 \u7ffb\u8bd1\u6210 \u201cz\u201d\u3002 \u4e00\u4e2a\u6570\u5b57\u53ef\u80fd\u6709\u591a\u4e2a\u7ffb\u8bd1\u3002\u4f8b\u5982 12258 \u6709 5 \u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\uff0c\u5b83\u4eec\u5206\u522b\u662f \u201cbccfi\u201d\u3001\u201cbwfi\u201d\u3001\u201cbczi\u201d\u3001\u201cmcfi\u201d \u548c \u201cmzi\u201d\u3002 \u8bf7\u7f16\u7a0b\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u8ba1\u7b97\u4e00\u4e2a\u6570\u5b57\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\u65b9\u6cd5\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\"12258\" \u8f93\u51fa\uff1a5 \u601d\u8def\uff1a\u540c LeetCode \u7b2c 91 \u9898 Decode Ways\u3002\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u3002\u72b6\u6001\uff1a dp[i] \u8868\u793a s[0,i] \uff08\u5305\u62ec i \uff09\uff0c\u4e00\u5171\u6709\u591a\u5c11\u79cd\u7ffb\u8bd1\u7684\u65b9\u6cd5\u3002\u5206\u7c7b\u8ba8\u8bba\uff1a1\u3001\u5f53\u524d\u5b57\u7b26\u53ef\u4ee5\u5355\u72ec\u7ffb\u8bd1\uff1b2\u3001\u5f53\u524d\u5b57\u7b26\u53ef\u4ee5\u548c\u524d\u9762\u4e00\u4e2a\u5b57\u7b26\u4e00\u8d77\u7ffb\u8bd1\u3002 dp[i] \u5c31\u662f\u4ee5\u4e0a\u4e8c\u8005\u4e4b\u548c\u3002 Python \u4ee3\u7801\uff1a class Solution: def getTranslationCount(self, s): \"\"\" :type s: str :rtype: int \"\"\" s = str(s) l = len(s) if l == 0: return 0 dp = [None for _ in range(l)] # dp[i] \u8868\u793a s[0,i] \uff0c\u5305\u62ec i \uff0c\u4e00\u5171\u6709\u591a\u5c11\u79cd\u7ffb\u8bd1\u7684\u65b9\u6cd5 dp[0] = 1 for i in range(1, l): # \u5f53\u524d\u503c\u81f3\u5c11\u662f dp[i-1]\uff0c\u56e0\u4e3a s[i] \u4e00\u5b9a\u53ef\u4ee5\u5355\u72ec\u7ffb\u8bd1 cur = dp[i - 1] # \u770b\u4e00\u770b s[i-1,i] \u662f\u4e0d\u662f\u53ef\u4ee5\u7ffb\u8bd1 if 9 < int(s[i - 1:i + 1]) < 26: if i - 2 < 0: # 12 cur += 1 else: # \u8981\u8003\u8651\u5230\u6570\u7ec4\u4e0b\u6807\u8d8a\u754c\u95ee\u9898 cur += dp[i - 2] dp[i] = cur return dp[l - 1]","title":"\u5251\u6307 Offer 46. \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32"},{"location":"46/#leetcode-91","text":"\u4f20\u9001\u95e8\uff1a 91. \u89e3\u7801\u65b9\u6cd5 \u3002 \u4e00\u6761\u5305\u542b\u5b57\u6bcd A-Z \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a 'A' -> 1 'B' -> 2 ... 'Z' -> 26 \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684 \u975e\u7a7a \u5b57\u7b26\u4e32\uff0c\u8bf7\u8ba1\u7b97\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"12\" \u8f93\u51fa: 2 \u89e3\u91ca: \u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"AB\"\uff081 2\uff09\u6216\u8005 \"L\"\uff0812\uff09\u3002 \u793a\u4f8b 2: \u8f93\u5165: \"226\" \u8f93\u51fa: 3 \u89e3\u91ca: \u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"BZ\" (2 26), \"VF\" (22 6), \u6216\u8005 \"BBF\" (2 2 6) \u3002 Python \u4ee3\u7801\uff1a # 91\u3001\u89e3\u7801\u65b9\u6cd5 # \u4e00\u6761\u5305\u542b\u5b57\u6bcd A-Z \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a # # 'A' -> 1 # 'B' -> 2 # ... # 'Z' -> 26 # \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684\u975e\u7a7a\u5b57\u7b26\u4e32\uff0c\u8bf7\u8ba1\u7b97\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002 class Solution: def numDecodings(self, s): \"\"\" :type s: str :rtype: int \"\"\" l = len(s) if l == 0: return 0 if l == 1: return 1 if s[0] != '0' else 0 dp = [0 for _ in range(l)] dp[0] = 1 if s[0] != '0' else 0 for i in range(1, l): if s[i] != '0': # \u5982\u679c\u4e0d\u662f '0' \uff0c\u90a3\u4e48 s[i] \u5c31\u53ef\u4ee5\u7f16\u7801\uff0c\u6240\u4ee5 cur \u5c31\u81f3\u5c11\u662f dp[i-1] dp[i] += dp[i - 1] if 9 < int(s[i - 1:i + 1]) < 27: # \u53ef\u4ee5\u548c\u524d\u9762\u7684\u6570\u5b57\u7ec4\u6210\u4e00\u4e2a\u7f16\u7801 if i - 2 < 0: # 12 dp[i] += 1 else: dp[i] += dp[i - 2] return dp[l - 1] if __name__ == '__main__': test_str = '12' s = Solution() res = s.numDecodings(test_str) print(res) MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"LeetCode \u7b2c 91 \u9898\uff1a\u89e3\u7801\u65b9\u6cd5"},{"location":"47/","text":"\u5251\u6307 Offer 47. \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c \u5251\u6307 Offer 47. \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c \uff1b \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5728\u4e00\u4e2a m\u00d7n \u7684\u68cb\u76d8\u7684\u6bcf\u4e00\u683c\u90fd\u653e\u6709\u4e00\u4e2a\u793c\u7269\uff0c\u6bcf\u4e2a\u793c\u7269\u90fd\u6709\u4e00\u5b9a\u7684\u4ef7\u503c\uff08\u4ef7\u503c\u5927\u4e8e0\uff09\u3002 \u4f60\u53ef\u4ee5\u4ece\u68cb\u76d8\u7684\u5de6\u4e0a\u89d2\u5f00\u59cb\u62ff\u683c\u5b50\u91cc\u7684\u793c\u7269\uff0c\u5e76\u6bcf\u6b21\u5411\u53f3\u6216\u8005\u5411\u4e0b\u79fb\u52a8\u4e00\u683c\u76f4\u5230\u5230\u8fbe\u68cb\u76d8\u7684\u53f3\u4e0b\u89d2\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u68cb\u76d8\u53ca\u5176\u4e0a\u9762\u7684\u793c\u7269\uff0c\u8bf7\u8ba1\u7b97\u4f60\u6700\u591a\u80fd\u62ff\u5230\u591a\u5c11\u4ef7\u503c\u7684\u793c\u7269\uff1f \u6ce8\u610f\uff1a m,n>0 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [ [2,3,1], [1,7,1], [4,6,1] ] \u8f93\u51fa\uff1a19 \u89e3\u91ca\uff1a\u6cbf\u7740\u8def\u5f84 2\u21923\u21927\u21926\u21921 \u53ef\u4ee5\u5f97\u5230\u62ff\u5230\u6700\u5927\u4ef7\u503c\u793c\u7269\u3002 \u601d\u8def\uff1a\u52a8\u6001\u89c4\u5212\u3002\u793c\u7269\u8981\u4e48\u6765\u81ea\u5de6\u8fb9\u4e00\u683c\uff0c\u8981\u4e48\u6765\u81ea\u4e0a\u9762\u4e00\u683c\uff0c\u4e24\u8005\u53d6\u6700\u5927\u3002\u8981\u7279\u6b8a\u5224\u65ad\u7684\u5c31\u662f\u8fb9\u754c\u60c5\u51b5\u3002\u53e6\u5916\u53ef\u4ee5\u4f7f\u7528\u4e00\u7ef4\u6570\u7ec4\u5b8c\u6210\u52a8\u6001\u89c4\u5212\u3002\u5982\u679c\u53ef\u4ee5\u4fee\u6539 grid\uff0c\u76f4\u63a5\u5728 grid \u4e0a\u4fee\u6539\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u7528\u8f85\u52a9\u7a7a\u95f4\u3002 \u52a8\u6001\u89c4\u5212\u3002 \u53ef\u4ee5\u5c3d\u91cf\u51cf\u5c11\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getMaxValue(self, grid): \"\"\" :type grid: List[List[int]] :rtype: int \"\"\" m = len(grid) if m == 0: return 0 n = len(grid[0]) dp = [None for _ in range(n)] dp[0] = grid[0][0] for i in range(1, n): dp[i] = dp[i - 1] + grid[0][i] for i in range(1, m): for j in range(n): if j == 0: dp[j] += grid[i][0] else: dp[j] = grid[i][j] + max(dp[j - 1], dp[j]) return dp[n - 1] Java \u4ee3\u7801\uff1a public class Solution { public int getMaxValue(int[][] matrix) { int row = matrix.length; if (row == 0) { return 0; } int col = matrix[0].length; int[][] dp = new int[row][col]; dp[0][0] = matrix[0][0]; for (int j = 1; j < col; j++) { dp[0][j] = dp[0][j - 1] + matrix[0][j]; } for (int i = 1; i < row; i++) { dp[i][0] = dp[i - 1][0] + matrix[i][0]; for (int j = 1; j < col; j++) { dp[i][j] = Integer.max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]; } } return dp[row - 1][col - 1]; } public static void main(String[] args) { int[][] matrix = new int[][]{ {1, 10, 3, 8}, {12, 2, 9, 6}, {5, 7, 4, 11}, {3, 7, 16, 5} }; Solution solution = new Solution(); int maxValue = solution.getMaxValue(matrix); System.out.println(maxValue); } } Java \u4ee3\u7801\uff1a public class Solution2 { public int getMaxValue(int[][] matrix) { int row = matrix.length; if (row == 0) { return 0; } int col = matrix[0].length; int[] dp = new int[col]; dp[0] = matrix[0][0]; for (int j = 1; j < col; j++) { dp[j] = dp[j - 1] + matrix[0][j]; } for (int i = 1; i < row; i++) { dp[0] = dp[0] + matrix[i][0]; for (int j = 1; j < col; j++) { dp[j] = Integer.max(dp[j], dp[j - 1]) + matrix[i][j]; } } return dp[col - 1]; } public static void main(String[] args) { int[][] matrix = new int[][]{ {1, 10, 3, 8}, {12, 2, 9, 6}, {5, 7, 4, 11}, {3, 7, 16, 5} }; Solution2 solution2 = new Solution2(); int maxValue = solution2.getMaxValue(matrix); System.out.println(maxValue); } } Java \u4ee3\u7801\uff1a public class Solution3 { public int getMaxValue(int[][] matrix) { int row = matrix.length; if (row == 0) { return 0; } int col = matrix[0].length; int[] dp = new int[col]; for (int i = 0; i < row; i++) { for (int j = 0; j < col; j++) { dp[j] = Integer.max(dp[j], j - 1 < 0 ? 0 : dp[j - 1]) + matrix[i][j]; } } return dp[col - 1]; } public static void main(String[] args) { int[][] matrix = new int[][]{ {1, 10, 3, 8}, {12, 2, 9, 6}, {5, 7, 4, 11}, {3, 7, 16, 5} }; Solution3 solution3 = new Solution3(); int maxValue = solution3.getMaxValue(matrix); System.out.println(maxValue); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 47. \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c"},{"location":"47/#offer-47","text":"\u5251\u6307 Offer 47. \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c \uff1b \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5728\u4e00\u4e2a m\u00d7n \u7684\u68cb\u76d8\u7684\u6bcf\u4e00\u683c\u90fd\u653e\u6709\u4e00\u4e2a\u793c\u7269\uff0c\u6bcf\u4e2a\u793c\u7269\u90fd\u6709\u4e00\u5b9a\u7684\u4ef7\u503c\uff08\u4ef7\u503c\u5927\u4e8e0\uff09\u3002 \u4f60\u53ef\u4ee5\u4ece\u68cb\u76d8\u7684\u5de6\u4e0a\u89d2\u5f00\u59cb\u62ff\u683c\u5b50\u91cc\u7684\u793c\u7269\uff0c\u5e76\u6bcf\u6b21\u5411\u53f3\u6216\u8005\u5411\u4e0b\u79fb\u52a8\u4e00\u683c\u76f4\u5230\u5230\u8fbe\u68cb\u76d8\u7684\u53f3\u4e0b\u89d2\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u68cb\u76d8\u53ca\u5176\u4e0a\u9762\u7684\u793c\u7269\uff0c\u8bf7\u8ba1\u7b97\u4f60\u6700\u591a\u80fd\u62ff\u5230\u591a\u5c11\u4ef7\u503c\u7684\u793c\u7269\uff1f \u6ce8\u610f\uff1a m,n>0 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [ [2,3,1], [1,7,1], [4,6,1] ] \u8f93\u51fa\uff1a19 \u89e3\u91ca\uff1a\u6cbf\u7740\u8def\u5f84 2\u21923\u21927\u21926\u21921 \u53ef\u4ee5\u5f97\u5230\u62ff\u5230\u6700\u5927\u4ef7\u503c\u793c\u7269\u3002 \u601d\u8def\uff1a\u52a8\u6001\u89c4\u5212\u3002\u793c\u7269\u8981\u4e48\u6765\u81ea\u5de6\u8fb9\u4e00\u683c\uff0c\u8981\u4e48\u6765\u81ea\u4e0a\u9762\u4e00\u683c\uff0c\u4e24\u8005\u53d6\u6700\u5927\u3002\u8981\u7279\u6b8a\u5224\u65ad\u7684\u5c31\u662f\u8fb9\u754c\u60c5\u51b5\u3002\u53e6\u5916\u53ef\u4ee5\u4f7f\u7528\u4e00\u7ef4\u6570\u7ec4\u5b8c\u6210\u52a8\u6001\u89c4\u5212\u3002\u5982\u679c\u53ef\u4ee5\u4fee\u6539 grid\uff0c\u76f4\u63a5\u5728 grid \u4e0a\u4fee\u6539\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u7528\u8f85\u52a9\u7a7a\u95f4\u3002 \u52a8\u6001\u89c4\u5212\u3002 \u53ef\u4ee5\u5c3d\u91cf\u51cf\u5c11\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getMaxValue(self, grid): \"\"\" :type grid: List[List[int]] :rtype: int \"\"\" m = len(grid) if m == 0: return 0 n = len(grid[0]) dp = [None for _ in range(n)] dp[0] = grid[0][0] for i in range(1, n): dp[i] = dp[i - 1] + grid[0][i] for i in range(1, m): for j in range(n): if j == 0: dp[j] += grid[i][0] else: dp[j] = grid[i][j] + max(dp[j - 1], dp[j]) return dp[n - 1] Java \u4ee3\u7801\uff1a public class Solution { public int getMaxValue(int[][] matrix) { int row = matrix.length; if (row == 0) { return 0; } int col = matrix[0].length; int[][] dp = new int[row][col]; dp[0][0] = matrix[0][0]; for (int j = 1; j < col; j++) { dp[0][j] = dp[0][j - 1] + matrix[0][j]; } for (int i = 1; i < row; i++) { dp[i][0] = dp[i - 1][0] + matrix[i][0]; for (int j = 1; j < col; j++) { dp[i][j] = Integer.max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]; } } return dp[row - 1][col - 1]; } public static void main(String[] args) { int[][] matrix = new int[][]{ {1, 10, 3, 8}, {12, 2, 9, 6}, {5, 7, 4, 11}, {3, 7, 16, 5} }; Solution solution = new Solution(); int maxValue = solution.getMaxValue(matrix); System.out.println(maxValue); } } Java \u4ee3\u7801\uff1a public class Solution2 { public int getMaxValue(int[][] matrix) { int row = matrix.length; if (row == 0) { return 0; } int col = matrix[0].length; int[] dp = new int[col]; dp[0] = matrix[0][0]; for (int j = 1; j < col; j++) { dp[j] = dp[j - 1] + matrix[0][j]; } for (int i = 1; i < row; i++) { dp[0] = dp[0] + matrix[i][0]; for (int j = 1; j < col; j++) { dp[j] = Integer.max(dp[j], dp[j - 1]) + matrix[i][j]; } } return dp[col - 1]; } public static void main(String[] args) { int[][] matrix = new int[][]{ {1, 10, 3, 8}, {12, 2, 9, 6}, {5, 7, 4, 11}, {3, 7, 16, 5} }; Solution2 solution2 = new Solution2(); int maxValue = solution2.getMaxValue(matrix); System.out.println(maxValue); } } Java \u4ee3\u7801\uff1a public class Solution3 { public int getMaxValue(int[][] matrix) { int row = matrix.length; if (row == 0) { return 0; } int col = matrix[0].length; int[] dp = new int[col]; for (int i = 0; i < row; i++) { for (int j = 0; j < col; j++) { dp[j] = Integer.max(dp[j], j - 1 < 0 ? 0 : dp[j - 1]) + matrix[i][j]; } } return dp[col - 1]; } public static void main(String[] args) { int[][] matrix = new int[][]{ {1, 10, 3, 8}, {12, 2, 9, 6}, {5, 7, 4, 11}, {3, 7, 16, 5} }; Solution3 solution3 = new Solution3(); int maxValue = solution3.getMaxValue(matrix); System.out.println(maxValue); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 47. \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c"},{"location":"48/","text":"\u5251\u6307 Offer 48. \u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32 \u5251\u6307 Offer 48. \u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32 \uff1b \u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32 \u3002 \u8bf7\u4ece\u5b57\u7b26\u4e32\u4e2d\u627e\u51fa\u4e00\u4e2a\u6700\u957f\u7684\u4e0d\u5305\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32\uff0c\u8ba1\u7b97\u8be5\u6700\u957f\u5b50\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002 \u5047\u8bbe\u5b57\u7b26\u4e32\u4e2d\u53ea\u5305\u542b\u4ece\u2019a\u2019\u5230\u2019z\u2019\u7684\u5b57\u7b26\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\"abcabc\" \u8f93\u51fa\uff1a3 \u601d\u8def1\uff1a\u6ed1\u52a8\u7a97\u53e3\uff1a Python \u4ee3\u7801\uff1a class Solution: def lengthOfLongestSubstring(self, s): \"\"\" :type s: str :rtype: int \"\"\" # \u7279\u5224 size = len(s) if size < 2: return size l = 0 r = -1 counter = [0 for _ in range(256)] res = 1 while l < size: # \u9996\u5148\"\u53f3\u6307\u9488\"\u4e0d\u65ad\u5411\u53f3\u8fb9\u5c1d\u8bd5\uff0c\u8d70\u5230\u51fa\u73b0\u91cd\u590d\u7684\u6700\u53f3\u8fb9 while r + 1 < size and counter[ord(s[r + 1])] == 0: # \u8868\u793a\u6ca1\u6709\u91cd\u590d\u5143\u7d20\uff0cr \u53ef\u4ee5\u52a0 1 counter[ord(s[r + 1])] += 1 r += 1 # \u6b64\u65f6\uff0c\u8bb0\u5f55\u4e0d\u91cd\u590d\u5b50\u4e32\u662f\"\u5de6\u6307\u9488\"\u56fa\u5b9a\u65f6\u5019\u6700\u957f res = max(res, r - l + 1) # \u8003\u8651\u79fb\u52a8\"\u5de6\u6307\u9488\" # \u6b64\u65f6 s[r+1] \u5c31\u662f\u5df2\u7ecf\u626b\u8fc7\u7684\u533a\u95f4\u91cc\u91cd\u590d\u7684\u5143\u7d20\uff0c\u8981\u628a\u5b83\u5254\u9664\u51fa\u53bb while r + 1 < size and s[l] != s[r + 1]: # \u6709\u91cd\u590d\u5143\u7d20\uff0c\u5de6\u8fb9\u5c31\u8981\u51cf 1 counter[ord(s[l])] -= 1 l += 1 # \u51fa\u4e86\u4e0a\u4e00\u4e2a\u5faa\u73af\u4ee5\u540e\uff0c\u8fd8\u8981\u518d\u628a\u5de6\u6307\u9488\u5411\u53f3\u79fb\u52a8\u4e00\u683c\uff0c\u5426\u5219\u53f3\u6307\u9488\u4e0d\u80fd\u5411\u53f3\u79fb\u52a8 counter[ord(s[l])] -= 1 l += 1 return res \u601d\u8def2\uff1a\u52a8\u6001\u89c4\u5212 Python \u4ee3\u7801\uff1a class Solution: def lengthOfLongestSubstring(self, s): \"\"\" :type s: str :rtype: int \"\"\" # \u7279\u5224 l = len(s) if l < 2: return l # dp[i] \u8868\u793a\u4ee5 s[i] \u7ed3\u5c3e\u7684\u6700\u957f\u4e0d\u91cd\u590d\u5b50\u4e32\u7684\u957f\u5ea6 # \u56e0\u4e3a\u81ea\u5df1\u80af\u5b9a\u662f\u4e0d\u91cd\u590d\u5b50\u4e32\uff0c\u6240\u4ee5\u521d\u59cb\u503c\u8bbe\u7f6e\u4e3a 1 dp = [1 for _ in range(l)] map = dict() map[s[0]] = 0 for i in range(1, l): if s[i] in map: if i - map[s[i]] > dp[i - 1]: dp[i] = dp[i - 1] + 1 else: dp[i] = i - map[s[i]] else: dp[i] = dp[i - 1] + 1 # \u8bbe\u7f6e\u5b57\u7b26\u4e0e\u7d22\u5f15\u952e\u503c\u5bf9 map[s[i]] = i # \u6700\u540e\u62c9\u901a\u770b\u4e00\u904d\u6700\u5927\u503c return max(dp) \u601d\u8def3\uff1a\u9694\u677f\u6cd5 Python \u4ee3\u7801\uff1a class Solution: def lengthOfLongestSubstring(self, s): # \u7279\u5224 l = len(s) if l < 2: return l # \u9694\u677f\u6cd5 # key:\u5b57\u7b26\uff0cval \u51fa\u73b0\u7684\u7d22\u5f15 map = dict() point = 0 res = 1 for i in range(l): # \u5173\u952e1\uff1amap[s[i]] >= point\uff0c\u7b49\u4e8e\u662f\u53ef\u4ee5\u7684 if s[i] in map and map[s[i]] >= point: # \u5148\u628a\u9694\u677f\u5411\u540e\u79fb\u52a8\u4e00\u4f4d point = map[s[i]] + 1 # \u7136\u540e\u8bb0\u5f55\u6700\u957f\u4e0d\u91cd\u590d\u5b50\u4e32\u7684\u957f\u5ea6 res = max(res, i - point + 1) # \u5173\u952e2\uff1a\u65e0\u8bba\u5982\u4f55\u90fd\u66f4\u65b0\u4f4d\u7f6e map[s[i]] = i return res \u53c2\u8003\u8d44\u6599\uff1a LeetCode \u7b2c 3 \u9898\uff1a\u6700\u957f\u4e0d\u91cd\u590d\u5b57\u7b26\u4e32 \u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 48. \u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32"},{"location":"48/#offer-48","text":"\u5251\u6307 Offer 48. \u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32 \uff1b \u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32 \u3002 \u8bf7\u4ece\u5b57\u7b26\u4e32\u4e2d\u627e\u51fa\u4e00\u4e2a\u6700\u957f\u7684\u4e0d\u5305\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32\uff0c\u8ba1\u7b97\u8be5\u6700\u957f\u5b50\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002 \u5047\u8bbe\u5b57\u7b26\u4e32\u4e2d\u53ea\u5305\u542b\u4ece\u2019a\u2019\u5230\u2019z\u2019\u7684\u5b57\u7b26\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\"abcabc\" \u8f93\u51fa\uff1a3 \u601d\u8def1\uff1a\u6ed1\u52a8\u7a97\u53e3\uff1a Python \u4ee3\u7801\uff1a class Solution: def lengthOfLongestSubstring(self, s): \"\"\" :type s: str :rtype: int \"\"\" # \u7279\u5224 size = len(s) if size < 2: return size l = 0 r = -1 counter = [0 for _ in range(256)] res = 1 while l < size: # \u9996\u5148\"\u53f3\u6307\u9488\"\u4e0d\u65ad\u5411\u53f3\u8fb9\u5c1d\u8bd5\uff0c\u8d70\u5230\u51fa\u73b0\u91cd\u590d\u7684\u6700\u53f3\u8fb9 while r + 1 < size and counter[ord(s[r + 1])] == 0: # \u8868\u793a\u6ca1\u6709\u91cd\u590d\u5143\u7d20\uff0cr \u53ef\u4ee5\u52a0 1 counter[ord(s[r + 1])] += 1 r += 1 # \u6b64\u65f6\uff0c\u8bb0\u5f55\u4e0d\u91cd\u590d\u5b50\u4e32\u662f\"\u5de6\u6307\u9488\"\u56fa\u5b9a\u65f6\u5019\u6700\u957f res = max(res, r - l + 1) # \u8003\u8651\u79fb\u52a8\"\u5de6\u6307\u9488\" # \u6b64\u65f6 s[r+1] \u5c31\u662f\u5df2\u7ecf\u626b\u8fc7\u7684\u533a\u95f4\u91cc\u91cd\u590d\u7684\u5143\u7d20\uff0c\u8981\u628a\u5b83\u5254\u9664\u51fa\u53bb while r + 1 < size and s[l] != s[r + 1]: # \u6709\u91cd\u590d\u5143\u7d20\uff0c\u5de6\u8fb9\u5c31\u8981\u51cf 1 counter[ord(s[l])] -= 1 l += 1 # \u51fa\u4e86\u4e0a\u4e00\u4e2a\u5faa\u73af\u4ee5\u540e\uff0c\u8fd8\u8981\u518d\u628a\u5de6\u6307\u9488\u5411\u53f3\u79fb\u52a8\u4e00\u683c\uff0c\u5426\u5219\u53f3\u6307\u9488\u4e0d\u80fd\u5411\u53f3\u79fb\u52a8 counter[ord(s[l])] -= 1 l += 1 return res \u601d\u8def2\uff1a\u52a8\u6001\u89c4\u5212 Python \u4ee3\u7801\uff1a class Solution: def lengthOfLongestSubstring(self, s): \"\"\" :type s: str :rtype: int \"\"\" # \u7279\u5224 l = len(s) if l < 2: return l # dp[i] \u8868\u793a\u4ee5 s[i] \u7ed3\u5c3e\u7684\u6700\u957f\u4e0d\u91cd\u590d\u5b50\u4e32\u7684\u957f\u5ea6 # \u56e0\u4e3a\u81ea\u5df1\u80af\u5b9a\u662f\u4e0d\u91cd\u590d\u5b50\u4e32\uff0c\u6240\u4ee5\u521d\u59cb\u503c\u8bbe\u7f6e\u4e3a 1 dp = [1 for _ in range(l)] map = dict() map[s[0]] = 0 for i in range(1, l): if s[i] in map: if i - map[s[i]] > dp[i - 1]: dp[i] = dp[i - 1] + 1 else: dp[i] = i - map[s[i]] else: dp[i] = dp[i - 1] + 1 # \u8bbe\u7f6e\u5b57\u7b26\u4e0e\u7d22\u5f15\u952e\u503c\u5bf9 map[s[i]] = i # \u6700\u540e\u62c9\u901a\u770b\u4e00\u904d\u6700\u5927\u503c return max(dp) \u601d\u8def3\uff1a\u9694\u677f\u6cd5 Python \u4ee3\u7801\uff1a class Solution: def lengthOfLongestSubstring(self, s): # \u7279\u5224 l = len(s) if l < 2: return l # \u9694\u677f\u6cd5 # key:\u5b57\u7b26\uff0cval \u51fa\u73b0\u7684\u7d22\u5f15 map = dict() point = 0 res = 1 for i in range(l): # \u5173\u952e1\uff1amap[s[i]] >= point\uff0c\u7b49\u4e8e\u662f\u53ef\u4ee5\u7684 if s[i] in map and map[s[i]] >= point: # \u5148\u628a\u9694\u677f\u5411\u540e\u79fb\u52a8\u4e00\u4f4d point = map[s[i]] + 1 # \u7136\u540e\u8bb0\u5f55\u6700\u957f\u4e0d\u91cd\u590d\u5b50\u4e32\u7684\u957f\u5ea6 res = max(res, i - point + 1) # \u5173\u952e2\uff1a\u65e0\u8bba\u5982\u4f55\u90fd\u66f4\u65b0\u4f4d\u7f6e map[s[i]] = i return res \u53c2\u8003\u8d44\u6599\uff1a LeetCode \u7b2c 3 \u9898\uff1a\u6700\u957f\u4e0d\u91cd\u590d\u5b57\u7b26\u4e32 \u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 48. \u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32"},{"location":"49/","text":"\u5251\u6307 Offer 49. \u4e11\u6570 \u5251\u6307 Offer 49. \u4e11\u6570 \uff1b \u4e11\u6570 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u628a\u53ea\u5305\u542b\u56e0\u5b50 $2$\u3001$3$ \u548c $5$ \u7684\u6570\u79f0\u4f5c \u4e11\u6570 \uff08Ugly Number\uff09\u3002 \u4f8b\u5982 $6$\u3001$8$ \u90fd\u662f \u4e11\u6570 \uff0c\u4f46 $14$ \u4e0d\u662f\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u56e0\u5b50 $7$\u3002 \u6c42\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u7684\u7b2c $N$ \u4e2a\u4e11\u6570\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a5 \u8f93\u51fa\uff1a5 \u6ce8\u610f \uff1a\u4e60\u60ef\u4e0a\u6211\u4eec\u628a $1$ \u5f53\u505a\u662f\u7b2c\u4e00\u4e2a\u4e11\u6570\u3002 \u540c LeetCode \u7b2c 264 \u9898\uff0c\u9898\u89e3\u4f20\u9001\u95e8\uff1a LeetCode \u4e0a\u7684\u4e11\u6570\u95ee\u9898 \u3002 \u601d\u8def\uff1a\u6240\u8c13\u7684\u4e00\u4e2a\u6570 $m$ \u662f\u53e6\u4e00\u4e2a\u6570 $n$ \u7684\u56e0\u5b50\uff0c\u662f\u6307 $n$ \u80fd\u88ab $m$ \u6574\u9664\uff0c\u4e5f\u5c31\u662f $n\\%m==0$ \u6210\u7acb\u3002\u6839\u636e\u4e11\u6570\u7684\u5b9a\u4e49\uff0c\u4e11\u6570\u53ea\u80fd\u88ab $2$\u3001$3$ \u548c $5$ \u6574\u9664\u3002\u6839\u636e\u4e11\u6570\u7684\u5b9a\u4e49\uff0c\u4e11\u6570\u5e94\u8be5\u662f\u53e6\u4e00\u4e2a\u4e11\u6570\u4e58\u4ee5 $2$\u3001$3$ \u6216\u8005 $5$ \u7684\u7ed3\u679c\uff08$1$\u9664\u5916\uff09\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6570\u7ec4\uff0c\u91cc\u9762\u7684\u6570\u5b57\u662f\u6392\u597d\u5e8f\u7684\u4e11\u6570\uff0c\u6bcf\u4e00\u4e2a\u4e11\u6570\u90fd\u662f\u524d\u9762\u7684\u4e11\u6570\u4e58\u4ee5 $2$\u3001$3$ \u6216\u8005 $5$ \u5f97\u5230\u7684\u3002 \u8fd9\u4e2a\u601d\u8def\u7684\u5173\u952e\u95ee\u9898\u5728\u4e8e\u600e\u6837\u4fdd\u8bc1\u6570\u7ec4\u91cc\u9762\u7684\u4e11\u6570\u662f\u6392\u597d\u5e8f\u7684\u3002\u5bf9\u4e58\u4ee5 $2$ \u800c\u8a00\uff0c\u80af\u5b9a\u5b58\u5728\u67d0\u4e00\u4e2a\u4e11\u6570 $T2$\uff0c\u6392\u5728\u5b83\u4e4b\u524d\u7684\u6bcf\u4e00\u4e2a\u4e11\u6570\u4e58\u4ee5 $2$ \u5f97\u5230\u7684\u7ed3\u679c\u90fd\u4f1a\u5c0f\u4e8e\u5df2\u6709\u6700\u5927\u7684\u4e11\u6570\uff0c\u5728\u5b83\u4e4b\u540e\u7684\u6bcf\u4e00\u4e2a\u4e11\u6570\u4e58\u4ee5\u4e58\u4ee5 $2$ \u5f97\u5230\u7684\u7ed3\u679c\u90fd\u4f1a\u592a\u5927\u3002\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u4e0b\u8fd9\u4e2a\u4e11\u6570\u7684\u4f4d\u7f6e\uff0c\u540c\u65f6\u6bcf\u6b21\u751f\u6210\u65b0\u7684\u4e11\u6570\u7684\u65f6\u5019\uff0c\u53bb\u66f4\u65b0\u8fd9\u4e2a $T2$\u3002\u5bf9\u4e58\u4ee5 $3$ \u548c $5$ \u800c\u8a00\uff0c\u4e5f\u5b58\u5728\u7740\u540c\u6837\u7684 $T3$ \u548c $T5$\u3002 Python \u4ee3\u7801\uff1a class Solution: def GetUglyNumber_Solution(self, index): # write code here if index < 7: return index res = [1, 2, 3, 4, 5, 6] t2, t3, t5 = 3, 2, 1 for i in range(6, index): res.append(min(res[t2] * 2, min(res[t3] * 3, res[t5] * 5))) while res[t2] * 2 <= res[i]: t2 += 1 while res[t3] * 3 <= res[i]: t3 += 1 while res[t5] * 5 <= res[i]: t5 += 1 return res[index - 1] Java \u4ee3\u7801\uff1a public class Solution2 { // 1\u30012\u30013\u30014\u30015\u30016 \u90fd\u662f\u4e11\u6570 public int GetUglyNumber_Solution(int index) { if (index < 7) { return index; } // \u72b6\u6001\u7684\u5b9a\u4e49\uff1a\u7b2c i \u4e2a\u4e11\u6570\u7684\u6700\u5c0f\u503c\uff0c\u4ece 0 \u5f00\u59cb\u8ba1\u7b97 int[] dp = new int[index]; dp[0] = 1; int t2 = 0; int t3 = 0; int t5 = 0; // \u6ce8\u610f\uff1a i \u4ece 1 \u5f00\u59cb for (int i = 1; i < index; i++) { dp[i] = min3(dp[t2] * 2, dp[t3] * 3, dp[t5] * 5); if (dp[i] == dp[t2] * 2) { t2++; } if (dp[i] == dp[t3] * 3) { t3++; } if (dp[i] == dp[t5] * 5) { t5++; } } // System.out.println(Arrays.toString(dp)); return dp[index - 1]; } private int min3(int n1, int n2, int n3) { return Integer.min(Integer.min(n1, n2), n3); } public static void main(String[] args) { Solution2 solution2 = new Solution2(); // 1 2 3 4 5 6 8 9 10 12 15 16 18 20 24 // [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24] int getUglyNumberSolution = solution2.GetUglyNumber_Solution(15); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 49. \u4e11\u6570"},{"location":"49/#offer-49","text":"\u5251\u6307 Offer 49. \u4e11\u6570 \uff1b \u4e11\u6570 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u628a\u53ea\u5305\u542b\u56e0\u5b50 $2$\u3001$3$ \u548c $5$ \u7684\u6570\u79f0\u4f5c \u4e11\u6570 \uff08Ugly Number\uff09\u3002 \u4f8b\u5982 $6$\u3001$8$ \u90fd\u662f \u4e11\u6570 \uff0c\u4f46 $14$ \u4e0d\u662f\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u56e0\u5b50 $7$\u3002 \u6c42\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u7684\u7b2c $N$ \u4e2a\u4e11\u6570\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a5 \u8f93\u51fa\uff1a5 \u6ce8\u610f \uff1a\u4e60\u60ef\u4e0a\u6211\u4eec\u628a $1$ \u5f53\u505a\u662f\u7b2c\u4e00\u4e2a\u4e11\u6570\u3002 \u540c LeetCode \u7b2c 264 \u9898\uff0c\u9898\u89e3\u4f20\u9001\u95e8\uff1a LeetCode \u4e0a\u7684\u4e11\u6570\u95ee\u9898 \u3002 \u601d\u8def\uff1a\u6240\u8c13\u7684\u4e00\u4e2a\u6570 $m$ \u662f\u53e6\u4e00\u4e2a\u6570 $n$ \u7684\u56e0\u5b50\uff0c\u662f\u6307 $n$ \u80fd\u88ab $m$ \u6574\u9664\uff0c\u4e5f\u5c31\u662f $n\\%m==0$ \u6210\u7acb\u3002\u6839\u636e\u4e11\u6570\u7684\u5b9a\u4e49\uff0c\u4e11\u6570\u53ea\u80fd\u88ab $2$\u3001$3$ \u548c $5$ \u6574\u9664\u3002\u6839\u636e\u4e11\u6570\u7684\u5b9a\u4e49\uff0c\u4e11\u6570\u5e94\u8be5\u662f\u53e6\u4e00\u4e2a\u4e11\u6570\u4e58\u4ee5 $2$\u3001$3$ \u6216\u8005 $5$ \u7684\u7ed3\u679c\uff08$1$\u9664\u5916\uff09\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6570\u7ec4\uff0c\u91cc\u9762\u7684\u6570\u5b57\u662f\u6392\u597d\u5e8f\u7684\u4e11\u6570\uff0c\u6bcf\u4e00\u4e2a\u4e11\u6570\u90fd\u662f\u524d\u9762\u7684\u4e11\u6570\u4e58\u4ee5 $2$\u3001$3$ \u6216\u8005 $5$ \u5f97\u5230\u7684\u3002 \u8fd9\u4e2a\u601d\u8def\u7684\u5173\u952e\u95ee\u9898\u5728\u4e8e\u600e\u6837\u4fdd\u8bc1\u6570\u7ec4\u91cc\u9762\u7684\u4e11\u6570\u662f\u6392\u597d\u5e8f\u7684\u3002\u5bf9\u4e58\u4ee5 $2$ \u800c\u8a00\uff0c\u80af\u5b9a\u5b58\u5728\u67d0\u4e00\u4e2a\u4e11\u6570 $T2$\uff0c\u6392\u5728\u5b83\u4e4b\u524d\u7684\u6bcf\u4e00\u4e2a\u4e11\u6570\u4e58\u4ee5 $2$ \u5f97\u5230\u7684\u7ed3\u679c\u90fd\u4f1a\u5c0f\u4e8e\u5df2\u6709\u6700\u5927\u7684\u4e11\u6570\uff0c\u5728\u5b83\u4e4b\u540e\u7684\u6bcf\u4e00\u4e2a\u4e11\u6570\u4e58\u4ee5\u4e58\u4ee5 $2$ \u5f97\u5230\u7684\u7ed3\u679c\u90fd\u4f1a\u592a\u5927\u3002\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u4e0b\u8fd9\u4e2a\u4e11\u6570\u7684\u4f4d\u7f6e\uff0c\u540c\u65f6\u6bcf\u6b21\u751f\u6210\u65b0\u7684\u4e11\u6570\u7684\u65f6\u5019\uff0c\u53bb\u66f4\u65b0\u8fd9\u4e2a $T2$\u3002\u5bf9\u4e58\u4ee5 $3$ \u548c $5$ \u800c\u8a00\uff0c\u4e5f\u5b58\u5728\u7740\u540c\u6837\u7684 $T3$ \u548c $T5$\u3002 Python \u4ee3\u7801\uff1a class Solution: def GetUglyNumber_Solution(self, index): # write code here if index < 7: return index res = [1, 2, 3, 4, 5, 6] t2, t3, t5 = 3, 2, 1 for i in range(6, index): res.append(min(res[t2] * 2, min(res[t3] * 3, res[t5] * 5))) while res[t2] * 2 <= res[i]: t2 += 1 while res[t3] * 3 <= res[i]: t3 += 1 while res[t5] * 5 <= res[i]: t5 += 1 return res[index - 1] Java \u4ee3\u7801\uff1a public class Solution2 { // 1\u30012\u30013\u30014\u30015\u30016 \u90fd\u662f\u4e11\u6570 public int GetUglyNumber_Solution(int index) { if (index < 7) { return index; } // \u72b6\u6001\u7684\u5b9a\u4e49\uff1a\u7b2c i \u4e2a\u4e11\u6570\u7684\u6700\u5c0f\u503c\uff0c\u4ece 0 \u5f00\u59cb\u8ba1\u7b97 int[] dp = new int[index]; dp[0] = 1; int t2 = 0; int t3 = 0; int t5 = 0; // \u6ce8\u610f\uff1a i \u4ece 1 \u5f00\u59cb for (int i = 1; i < index; i++) { dp[i] = min3(dp[t2] * 2, dp[t3] * 3, dp[t5] * 5); if (dp[i] == dp[t2] * 2) { t2++; } if (dp[i] == dp[t3] * 3) { t3++; } if (dp[i] == dp[t5] * 5) { t5++; } } // System.out.println(Arrays.toString(dp)); return dp[index - 1]; } private int min3(int n1, int n2, int n3) { return Integer.min(Integer.min(n1, n2), n3); } public static void main(String[] args) { Solution2 solution2 = new Solution2(); // 1 2 3 4 5 6 8 9 10 12 15 16 18 20 24 // [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24] int getUglyNumberSolution = solution2.GetUglyNumber_Solution(15); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 49. \u4e11\u6570"},{"location":"50-2/","text":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 50_2 \u9898] \u201c\u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\u201d\u505a\u9898\u8bb0\u5f55 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 50_2 \u9898] \u201c\u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\u201d\u505a\u9898\u8bb0\u5f55"},{"location":"50-2/#offer-2-50_2","text":"MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 50_2 \u9898] \u201c\u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\u201d\u505a\u9898\u8bb0\u5f55"},{"location":"50/","text":"\u5251\u6307 Offer 50. \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26 \u5251\u6307 Offer 50. \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26","title":"\u5251\u6307 Offer 50. \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26"},{"location":"50/#offer-50","text":"\u5251\u6307 Offer 50. \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26","title":"\u5251\u6307 Offer 50. \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26"},{"location":"51-60/","text":"\u7b2c 12.5 \u8282 N \u7687\u540e\u95ee\u9898 \u300c\u56de\u6eaf\u7b97\u6cd5\u300d\u662f\u904d\u5386\uff08\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff09\u7b97\u6cd5\uff0c\u914d\u5408\u9002\u5f53\u7684\u300c\u526a\u679d\u300d\u6280\u5de7\uff0c\u53ef\u4ee5\u7528\u4e8e \u641c\u7d22 \u7b26\u5408\u8981\u6c42\u7684\u6240\u6709\u7684\u89e3\u3002 \u4e4b\u6240\u4ee5\u8fd9\u4e2a\u7b97\u6cd5\u4e2d\u6709\u300c\u56de\u6eaf\u300d\u8fd9\u4e2a\u8bcd\uff0c\u662f\u7531\u4e8e\u300c\u56de\u6eaf\u7b97\u6cd5\u300d\u4f7f\u7528\u4e00\u4efd\u72b6\u6001\u53d8\u91cf\u53bb\u641c\u7d22\u6574\u4e2a\u300c\u72b6\u6001\u7a7a\u95f4\u300d\uff0c\u5728\u641c\u7d22\uff08\u6216\u8005\u8bf4\u904d\u5386\uff09\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e00\u6b65\u7684 \u5c1d\u8bd5 \u548c \u56de\u9000 \u4ee3\u4ef7\u8f83\u5c0f\u3002\u56e0\u6b64\u300c\u56de\u6eaf\u7b97\u6cd5\u300d\u5f88\u591a\u65f6\u5019\u80fd\u591f\u5e2e\u52a9\u6211\u4eec\u89e3\u51b3\u4e00\u4e9b\u6e38\u620f\u7c7b\u7684\u95ee\u9898\uff0c\u8fd9\u662f\u56e0\u4e3a\u6709\u4e9b\u6e38\u620f\u7c7b\u95ee\u9898\u5728\u4eba\u8111\u770b\u6765\u300c\u72b6\u6001\u7a7a\u95f4\u300d\u5f88\u5927\uff0c\u4f46\u662f\u5bf9\u4e8e\u8ba1\u7b97\u673a\u6765\u8bf4\uff0c\u8ba1\u7b97\u673a\u662f\u64c5\u957f\u8ba1\u7b97\u7684\uff0c\u53ef\u4ee5\u7528\u4e8e\u5b8c\u6210\u4e00\u4e9b \u9002\u5f53\u89c4\u6a21 \u7684\u95ee\u9898\u3002 \u53ef\u4ee5\u8ba4\u4e3a\u300c\u56de\u6eaf\u7b97\u6cd5\u300d\u662f\u65e9\u671f\u7684\u4eba\u5de5\u667a\u80fd\u7b97\u6cd5\uff0c\u6709\u4e00\u4e9b\u6559\u7a0b\u4e0a\u79f0\u300c\u56de\u6eaf\u7b97\u6cd5\u300d\u4e3a\u300c\u66b4\u529b\u641c\u7d22\u300d\u4e5f\u6b63\u662f\u57fa\u4e8e\u300c\u56de\u6eaf\u7b97\u6cd5\u300d \u56e0\u4e3a\u4eba\u8111\u662f\u5f88\u96be\u7a77\u4e3e\u5b8c\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7f16\u7a0b\uff0c\u5e2e\u52a9\u6211\u4eec\u73a9\u597d\u4e00\u4e9b\u6e38\u620f\u3002\u56e0\u6b64\u5728\u4e00\u4e9b\u4eba\u5de5\u667a\u80fd\u7684\u4e66\u7c4d\u4e0a\uff0c\u5f88\u591a\u65f6\u5019\u4f1a\u5148\u4ecb\u7ecd\u56de\u6eaf\u7b97\u6cd5\uff0c\u56de\u6eaf\u7b97\u6cd5\u662f\u65e9\u671f\u7684\u4eba\u5de5\u667a\u80fd\u3002 n \u7687\u540e\u95ee\u9898\u7814\u7a76\u7684\u662f\u5982\u4f55\u5c06 n \u4e2a\u7687\u540e\u653e\u7f6e\u5728 n \u00d7 n \u7684\u68cb\u76d8\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7687\u540e\u5f7c\u6b64\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u3002 \u4e0a\u56fe\u4e3a 8 \u7687\u540e\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u6cd5\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n\uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u540c\u7684 n \u7687\u540e\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u6bcf\u4e00\u79cd\u89e3\u6cd5\u5305\u542b\u4e00\u4e2a\u660e\u786e\u7684 n \u7687\u540e\u95ee\u9898\u7684\u68cb\u5b50\u653e\u7f6e\u65b9\u6848\uff0c\u8be5\u65b9\u6848\u4e2d 'Q' \u548c '.' \u5206\u522b\u4ee3\u8868\u4e86\u7687\u540e\u548c\u7a7a\u4f4d\u3002 \u8f93\u5165: 4 \u8f93\u51fa: [ [\".Q..\", // \u89e3\u6cd5 1 \"...Q\", \"Q...\", \"..Q.\"], [\"..Q.\", // \u89e3\u6cd5 2 \"Q...\", \"...Q\", \".Q..\"] ] \u89e3\u91ca: 4 \u7687\u540e\u95ee\u9898\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u89e3\u6cd5\u3002 \u5206\u6790 \uff1a\u4ee5 4 \u7687\u540e\u95ee\u9898\u4e3a\u4f8b\uff0c\u5b83\u7684\u300c\u641c\u7d22\u300d\u8fc7\u7a0b\u5982\u4e0b\uff0c\u5927\u5bb6\u5b8c\u5168\u53ef\u4ee5\u5728\u7eb8\u4e0a\u6a21\u62df\u4e0b\u9762\u8fd9\u4e2a\u8fc7\u7a0b\uff1a {:width=500} \u641c\u7d22\u95ee\u9898\u7684\u89e3\u51b3\u7b56\u7565\u662f\u753b\u9012\u5f52\u6811\u3002\u8fd8\u4ee5 4 \u7687\u540e\u95ee\u9898\u4e3a\u4f8b\uff0c\u753b\u51fa\u7684\u9012\u5f52\u6811\u5982\u4e0b\u3002 \u4ee5\u4e0b\u5047\u5b9a\u7ed9\u68cb\u76d8\u7684\u6bcf\u4e00\u884c\u4ece\u5de6\u5230\u53f3\u6807\u8bb0\u4e3a $1$\u3001$2$\u3001$3$\u3001$4$\uff1a {:align=center} \u90a3\u4e48\uff0c\u9012\u5f52\u641c\u7d22\u7684\u8fc7\u7a0b\u53ef\u4ee5\u8868\u793a\u6210\u5982\u4e0b\u9012\u5f52\u6811\uff08\u53ea\u753b\u4e86 2 \u5c42\uff09\uff1a {:width=600} \u8fd9\u5176\u5b9e\u5c31\u662f\u300c\u5168\u6392\u5217\u300d\u95ee\u9898 + \u300c\u526a\u679d\u300d \u3002 \u300c\u526a\u679d\u300d\u7684\u4f9d\u636e\u5c31\u662f\u9898\u76ee\u4e2d\u63cf\u8ff0\u7684\u300cN \u7687\u540e\u300d\u95ee\u9898\u7684\u89c4\u5219\uff0c\u6709\u4e86\u4f7f\u7528\u6570\u7ec4 used \uff08\u54c8\u5e0c\u8868\u3001\u4f4d\u56fe\uff09\u7684\u7ecf\u9a8c\uff0c\u6211\u4eec\u53ef\u4ee5\u591a\u8bbe\u7f6e\u4e00\u4e9b\u300c\u72b6\u6001\u300d\uff0c\u4e0b\u9762\u4f9d\u6b21\u8fdb\u884c\u5206\u6790\uff1a \u7531\u4e8e\u662f\u4e00\u884c\u4e00\u884c\u6446\u653e\uff0c\u56e0\u6b64\u8fd9\u4e9b\u300c\u7687\u540e\u300d\u4e00\u5b9a\u4e0d\u5728\u540c\u4e00\u884c\uff0c\u65e0\u9700\u989d\u5916\u8bbe\u7f6e\u72b6\u6001\uff1b \u4e3a\u4e86\u4fdd\u8bc1\u4e0d\u518d\u540c\u4e00\u5217\uff0c\u5373\u4e0d\u80fd\u51fa\u73b0 [2, 2, 1, 3] \u8fd9\u79cd\u60c5\u51b5\uff0c\u7b2c 46 \u7684\u6570\u7ec4 used \uff08\u54c8\u5e0c\u8868\u3001\u4f4d\u56fe\uff09\u5c31\u662f\u8fd9\u6837\u7684\u300c\u72b6\u6001\u300d \u53d8\u91cf\uff1b \u4e3a\u4e86\u4fdd\u8bc1\u81f3\u5c11\u4e24\u4e2a\u7687\u540e\u4e0d\u540c\u65f6\u51fa\u73b0\u5728\u4e3b\u5bf9\u89d2\u7ebf\u6216\u8005\u526f\u5bf9\u89d2\u7ebf\uff0c\u6211\u4eec\u7684\u7b56\u7565\u662f\uff0c\u53ea\u8981\u300c\u68c0\u6d4b\u300d\u5230\u65b0\u6446\u653e\u7684\u300c\u7687\u540e\u300d\u4e0e\u5df2\u7ecf\u6446\u653e\u597d\u7684\u300c\u7687\u540e\u300d\u51b2\u7a81\uff0c\u5c31\u5c1d\u8bd5\u6446\u653e\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5728\u300c\u65e0\u5904\u5b89\u653e\u300d\u7684\u65f6\u5019\u300c\u526a\u679d\u300d\u3002 \u4e0b\u9762\u6211\u4eec\u7814\u7a76\u4e00\u4e0b\u4e3b\u5bf9\u89d2\u7ebf\u6216\u8005\u526f\u5bf9\u89d2\u7ebf\u4e0a\u7684\u5143\u7d20\u6709\u4ec0\u4e48\u7279\u6027\u3002\u6211\u4eec\u6b64\u65f6\u80fd\u638c\u63e1\u7684\u4fe1\u606f\u53ea\u6709\u884c\u548c\u5217\u7684\u7d22\u5f15\uff0c\u4e0d\u59a8\u5c06\u5b83\u6807\u6ce8\u5728\u68cb\u76d8\u4e0a\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u6570\u7ec4 used \u90a3\u6837\uff0c\u518d\u4e3a\u300c\u4e3b\u5bf9\u89d2\u7ebf\u300d\u548c\u300c\u526f\u5bf9\u89d2\u7ebf\u300d\u8bbe\u7f6e\u76f8\u5e94\u7684\u6570\u7ec4\u53d8\u91cf\uff0c\u53ea\u8981\u6392\u5b9a\u4e00\u4e2a\u300c\u7687\u540e\u300d\u7684\u4f4d\u7f6e\uff0c\u5c31\u76f8\u5e94\u4f4e\u5360\u4f4f\u76f8\u5e94\u7684\u4f4d\u7f6e\uff1b \u56e0\u4e3a\u4f4d\u7f6e\u6709\u9650\uff0c\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\uff0c\u4e0d\u8fc7\u6211\u4e2a\u4eba\u5148\u4f7f\u7528\u7684\u54c8\u5e0c\u8868\uff0c\u539f\u56e0\u662f\u526f\u5bf9\u89d2\u90a3\u91cc\u4f7f\u7528\u6570\u7ec4\u7684\u8bdd\u8fd8\u8981\u8ba1\u7b97\u4e00\u4e2a\u504f\u5dee\uff0c\u53e6\u5916\uff0c\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570\u4e5f\u8981\u5f52\u7eb3\u5f97\u5230\uff0c\u56e0\u6b64\uff0c\u4f7f\u7528\u54c8\u5e0c\u8868\u8868\u793a\u300c\u72b6\u6001\u300d\uff0c\u6211\u8ba4\u4e3a\u5728\u7f16\u7801\u4e0a\u662f\u6bd4\u8f83\u7b80\u6d01\u7684\uff1b \u5199\u5bf9\u4e86\u300c\u54c8\u5e0c\u8868\u300d\u4ee5\u540e\uff0c\u8bf4\u660e\u6211\u4eec\u7684\u601d\u8def\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c\u7136\u540e\u518d\u5199\u300c\u6570\u7ec4\u300d\u4f5c\u4e3a\u72b6\u6001\uff0c\u6700\u540e\u5199\u300c\u4f4d\u56fe\u300d\u4f5c\u4e3a\u300c\u72b6\u6001\u300d \u3002 \u5f97\u5230\u4e00\u4e2a\u7b26\u5408\u8981\u6c42\u7684 \u300c\u5168\u6392\u5217\u300d\u4ee5\u540e\uff0c\u751f\u6210\u68cb\u76d8\u7684\u4ee3\u7801\u5c31\u5f88\u7b80\u5355\u4e86\u3002 \u53c2\u8003\u4ee3\u7801 \uff1a\u4f7f\u7528\u54c8\u5e0c\u8868\u5206\u522b\u8bb0\u5f55\u300c\u5217\u5360\u7528\u60c5\u51b5\u300d \u3001 \u300c\u4e3b\u5bf9\u89d2\u7ebf\u5360\u7528\u60c5\u51b5\u300d \u3001 \u300c\u526f\u5bf9\u89d2\u7ebf\u5360\u7528\u60c5\u51b5\u300d\u3002 Java \u4ee3\u7801\uff1a import java.util.ArrayDeque; import java.util.ArrayList; import java.util.Deque; import java.util.List; public class Solution { private int n; private boolean[] col; private boolean[] main; private boolean[] sub; private List<List<String>> res; public List<List<String>> solveNQueens(int n) { res = new ArrayList<>(); if (n == 0) { return res; } this.n = n; col = new boolean[n]; main = new boolean[2 * n - 1]; sub = new boolean[2 * n - 1]; Deque<Integer> path = new ArrayDeque<>(); dfs(0, path); return res; } private void dfs(int row, Deque<Integer> path) { // \u6df1\u5ea6\u4f18\u5148\u904d\u5386\u5230\u4e0b\u6807\u4e3a n\uff0c\u8868\u793a [0.. n - 1] \u5df2\u7ecf\u586b\u5b8c\uff0c\u5f97\u5230\u4e86\u4e00\u4e2a\u7ed3\u679c\u96c6 if (row == n) { List<String> board = convert2board(path); res.add(board); return; } // \u9488\u5bf9\u4e0b\u6807\u4e3a row \u7684\u6bcf\u4e00\u5217\uff0c\u5c1d\u8bd5\u662f\u5426\u53ef\u4ee5\u653e\u7f6e for (int i = 0; i < n; i++) { if (!col[i] && !main[row + i] && !sub[row - i + n - 1]) { path.addLast(i); col[i] = true; main[row + i] = true; sub[row - i + n - 1] = true; dfs(row + 1, path); sub[row - i + n - 1] = false; main[row + i] = false; col[i] = false; path.removeLast(); } } } private List<String> convert2board(Deque<Integer> path) { List<String> board = new ArrayList<>(); for (Integer num : path) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append(\".\".repeat(Math.max(0, n))); stringBuilder.replace(num, num + 1, \"Q\"); board.add(stringBuilder.toString()); } return board; } } \u300c\u56de\u6eaf\u95ee\u9898\u300d\u5e94\u7528\u4e8e\u6e38\u620f\uff0c\u4e00\u822c\u90fd\u6bd4\u8f83\u96be\uff0c\u5927\u5bb6\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u5b9e\u9645\u60c5\u51b5\u914c\u60c5\u9009\u62e9\u76f8\u5173\u7684\u7ec3\u4e60\u6765\u505a\u3002 \u7ec3\u4e60 \u5b8c\u6210\u300c\u529b\u6263\u300d\u7b2c 52 \u9898\uff1a N\u7687\u540e II \uff1b \u5b8c\u6210\u300c\u529b\u6263\u300d\u7b2c 1307 \u9898\uff1a \u53e3\u7b97\u96be\u9898 \uff1b \u5b8c\u6210\u300c\u529b\u6263\u300d24 \u70b9 51-60 \u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09 \u9898\u89e3\uff08Python \u8bed\u8a00\u5b9e\u73b0\uff09\u7b2c 51-60 \u9898 \u7b2c 51 \u9898\uff1a\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9 \u4f20\u9001\u95e8\uff1a \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5728\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6570\u5b57\u5982\u679c\u524d\u9762\u4e00\u4e2a\u6570\u5b57\u5927\u4e8e\u540e\u9762\u7684\u6570\u5b57\uff0c\u5219\u8fd9\u4e24\u4e2a\u6570\u5b57\u7ec4\u6210\u4e00\u4e2a\u9006\u5e8f\u5bf9\u3002 \u8f93\u5165\u4e00\u4e2a\u6570\u7ec4\uff0c\u6c42\u51fa\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9\u7684\u603b\u6570\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,3,4,5,6,0] \u8f93\u51fa\uff1a6 \u4e13\u95e8\u6574\u7406\u6210\u6587\u7ae0\u30021\u3001\u7528\u5f52\u5e76\u6392\u5e8f\uff1b2\u3001\u7528 BST\u3002\u5982\u4f55\u8bb0\u5f55\u5de6\u5b50\u6811\u4e2d\u7ed3\u70b9\u7684\u4e2a\u6570\u3002 \u601d\u8def1\uff1a\u9996\u5148\u6211\u4eec\u5e94\u8be5\u60f3\u5230\uff0c\u4f7f\u7528\u5b9a\u4e49\u8ba1\u7b97\u9006\u5e8f\u6570\u3002\u4e0d\u8fc7\u65f6\u95f4\u590d\u6742\u5ea6\u662f\uff1a$O(n^2)$\u3002 class Solution(object): def inversePairs(self, nums): l = len(nums) if l < 2: return 0 res = 0 for i in range(0, l - 1): for j in range(i + 1, l): if nums[i] > nums[j]: res += 1 return res \u8fd9\u79cd\u601d\u8def\u867d\u7136\u5f88\u76f4\u63a5\uff0c\u4f46\u7f16\u5199\u51fa\u9519\u7684\u6982\u7387\u5c31\u5f88\u4f4e\u4e86\uff0c\u5728\u6ca1\u6709\u5728\u7ebf\u8bc4\u6d4b\u7cfb\u7edf\u7684\u65f6\u5019\uff0c\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u201c\u6b63\u786e\u7684\u201d\u53c2\u8003\u7b54\u6848\uff0c\u7528\u4ee5\u68c0\u9a8c\u6211\u4eec\u81ea\u5df1\u7f16\u5199\u7684\u7b97\u6cd5\u662f\u5426\u6b63\u786e\u3002 \u601d\u8def2\uff1a\u501f\u52a9\u5f52\u5e76\u6392\u5e8f\u7684\u5206\u6cbb\u601d\u60f3\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\log n)$\u3002 \u5206\u6790\uff1a\u4f8b\u5982\uff1a\u524d\u6709\u5e8f\u6570\u7ec4\uff1a$[2,3,5,8]$\uff0c\u540e\u6709\u5e8f\u6570\u7ec4\uff1a$[4,6,7,12]$\u3002 \u505a\u5f52\u5e76\u7684\u65f6\u5019\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a \u7b2c 1 \u6b65\uff0c$2$ \u5148\u51fa\u5217\uff0c$2$ \u6bd4\u201c\u540e\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u7684\u5143\u7d20\u90fd\u5c0f\uff0c\u6784\u6210\u201c\u987a\u5e8f\u5bf9\u201d\uff1b \u7b2c 2 \u6b65\uff0c$3$ \u51fa\u5217\uff0c$3$ \u6bd4\u201c\u540e\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u7684\u5143\u7d20\u90fd\u5c0f\uff0c\u6784\u6210\u201c\u987a\u5e8f\u5bf9\u201d\uff1b \u7b2c 3 \u6b65\uff0c$4$ \u51fa\u5217\uff0c\u5173\u952e\u7684\u5730\u65b9\u5728\u8fd9\u91cc\uff0c \u201c\u524d\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u5269\u4e0b\u7684\u5143\u7d20 $[5,8]$ \u6bd4 $4$ \u90fd\u5927\uff0c\u6784\u6210 $2$ \u4e2a \u201c\u9006\u5e8f\u5bf9\u201d \uff1b \u7b2c 4 \u6b65\uff0c$5$ \u51fa\u5217\uff0c$5$ \u6bd4\u201c\u540e\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u5269\u4e0b\u7684\u5143\u7d20\u90fd\u5c0f\uff0c\u6784\u6210\u201c\u987a\u5e8f\u5bf9\u201d\uff1b \u7b2c 5 \u6b65\uff0c$6$ \u51fa\u5217\uff0c \u201c\u524d\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u5269\u4e0b\u7684\u5143\u7d20 $[8]$ \u6bd4 $6$ \u90fd\u5927\uff0c\u6784\u6210 $1$ \u4e2a\u201c\u9006\u5e8f\u5bf9\u201d \uff1b \u7b2c 6 \u6b65\uff0c$7$ \u51fa\u5217\uff0c \u201c\u524d\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u5269\u4e0b\u7684\u5143\u7d20 $[8]$ \u6bd4 $7$ \u90fd\u5927\uff0c\u6784\u6210 $1$ \u4e2a\u201c\u9006\u5e8f\u5bf9\u201d \uff1b \u7b2c 7 \u6b65\uff0c$8$ \u51fa\u5217\uff0c$8$ \u6bd4\u201c\u540e\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u5269\u4e0b\u7684\u5143\u7d20 $[8]$ \u90fd\u5c0f\uff0c\u6784\u6210 $1$ \u4e2a\u201c\u987a\u5e8f\u5bf9\u201d\uff1b \u7b2c 8 \u6b65\uff0c$12$ \u51fa\u5217\uff0c\u6b64\u65f6\u201c\u524d\u6709\u5e8f\u6570\u7ec4\u201d\u4e3a\u7a7a\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u201c\u524d\u6709\u5e8f\u6570\u7ec4\u201d\u975e\u7a7a\uff0c\u4e14\u201c\u540e\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6709\u5143\u7d20\u51fa\u5217\u7684\u65f6\u5019\uff0c\u5373\u4e0a\u9762\u7684\u7b2c 3\u30015\u30016 \u6b65\u8ba1\u7b97\u201c\u9006\u5e8f\u5bf9\u201d\u5c31\u53ef\u4ee5\u4e86\u3002 \u53c2\u8003\u4ee3\u7801\uff1a Python \u4ee3\u7801\uff1a class Solution(object): def inversePairs1(self, nums): l = len(nums) if l < 2: return 0 res = 0 for i in range(0, l - 1): for j in range(i + 1, l): if nums[i] > nums[j]: res += 1 return res def inversePairs(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" l = len(nums) if l < 2: return 0 temp = [0 for _ in range(l)] return self.count_inversion_pairs(nums, 0, l - 1, temp) def count_inversion_pairs(self, nums, l, r, temp): \"\"\" \u5728\u6570\u7ec4 nums \u7684\u533a\u95f4 [l,r] \u7edf\u8ba1\u9006\u5e8f\u5bf9 :param nums: :param l: \u5f85\u7edf\u8ba1\u6570\u7ec4\u7684\u5de6\u8fb9\u754c\uff0c\u53ef\u4ee5\u53d6\u5230 :param r: \u5f85\u7edf\u8ba1\u6570\u7ec4\u7684\u53f3\u8fb9\u754c\uff0c\u53ef\u4ee5\u53d6\u5230 :param temp: :return: \"\"\" # \u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u5c31\u662f\u53ea\u6709 1 \u4e2a\u5143\u7d20\u7684\u65f6\u5019 if l == r: return 0 mid = l + (r - l) // 2 left_pairs = self.count_inversion_pairs(nums, l, mid, temp) right_pairs = self.count_inversion_pairs(nums, mid + 1, r, temp) merge_pairs = 0 # \u4ee3\u7801\u8d70\u5230\u8fd9\u91cc\u7684\u65f6\u5019\uff0c # [l, mid] \u5df2\u7ecf\u5b8c\u6210\u4e86\u6392\u5e8f\u5e76\u4e14\u8ba1\u7b97\u597d\u9006\u5e8f\u5bf9 # [mid + 1, r] \u5df2\u7ecf\u5b8c\u6210\u4e86\u6392\u5e8f\u5e76\u4e14\u8ba1\u7b97\u597d\u9006\u5e8f\u5bf9 # \u5982\u679c nums[mid] <= nums[mid + 1]\uff0c\u6b64\u65f6\u5c31\u4e0d\u5b58\u5728\u9006\u5e8f\u5bf9 # \u5f53 nums[mid] > nums[mid + 1] \u7684\u65f6\u5019\uff0c\u5c31\u8981\u7ee7\u7eed\u8ba1\u7b97\u9006\u5e8f\u5bf9 if nums[mid] > nums[mid + 1]: # \u5728\u5f52\u5e76\u7684\u8fc7\u7a0b\u4e2d\u8ba1\u7b97\u9006\u5e8f\u5bf9 merge_pairs = self.merge_and_count(nums, l, mid, r, temp) # \u8d70\u5230\u8fd9\u91cc\u6709 nums[mid] <= nums[mid + 1] \u6210\u7acb\uff0c\u5df2\u7ecf\u662f\u987a\u5e8f\u7ed3\u6784 return left_pairs + right_pairs + merge_pairs def merge_and_count(self, nums, l, mid, r, temp): \"\"\" \u524d\uff1a[2,3,5,8]\uff0c\u540e\uff1a[4,6,7,12] \u6211\u4eec\u53ea\u9700\u8981\u5728\u540e\u9762\u6570\u7ec4\u5143\u7d20\u51fa\u5217\u7684\u65f6\u5019\uff0c\u6570\u4e00\u6570\u524d\u9762\u8fd9\u4e2a\u6570\u7ec4\u8fd8\u5269\u4e0b\u591a\u5c11\u4e2a\u6570\u5b57\uff0c \u56e0\u4e3a\"\u524d\"\u6570\u7ec4\u548c\"\u540e\"\u6570\u7ec4\u90fd\u6709\u5e8f\uff0c \u56e0\u6b64\uff0c\"\u524d\"\u6570\u7ec4\u5269\u4e0b\u7684\u5143\u7d20\u4e2a\u6570 mid - i + 1 \u5c31\u662f\u4e0e\"\u540e\"\u6570\u7ec4\u5143\u7d20\u51fa\u5217\u7684\u8fd9\u4e2a\u5143\u7d20\u6784\u6210\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570 \"\"\" for i in range(l, r + 1): temp[i] = nums[i] i = l j = mid + 1 res = 0 for k in range(l, r + 1): if i > mid: nums[k] = temp[j] j += 1 elif j > r: nums[k] = temp[i] i += 1 elif temp[i] <= temp[j]: # \u4e0d\u7edf\u8ba1\u9006\u5e8f\u5bf9\uff0c\u53ea\u505a\u6392\u5e8f nums[k] = temp[i] i += 1 else: assert temp[i] > temp[j] nums[k] = temp[j] j += 1 # \u5feb\u5c31\u5feb\u5728\u8fd9\u91cc\uff0c\u4e00\u6b21\u53ef\u4ee5\u6570\u51fa\u4e00\u4e2a\u533a\u95f4\u7684\u4e2a\u6570\u7684\u9006\u5e8f\u5bf9 # \u4f8b\uff1a[7,8,9][4,6,9]\uff0c4 \u4e0e 7 \u4ee5\u53ca 7 \u524d\u9762\u6240\u6709\u7684\u6570\u90fd\u6784\u6210\u9006\u5e8f\u5bf9 res += (mid - i + 1) return res \u8bf4\u660e\uff1a\u5f52\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8981\u501f\u52a9\u989d\u5916\u7684\u8f85\u52a9\u7a7a\u95f4\uff0c\u4e3a\u6b64\u53ef\u4ee5\u5168\u5c40\u4f7f\u7528\u4e00\u4e2a\u548c\u539f\u59cb\u6570\u7ec4\u7b49\u957f\u7684\u8f85\u52a9\u6570\u7ec4\uff0c\u5426\u5219\u6bcf\u4e00\u6b21\u8fdb\u5165 merge \u51fd\u6570\u90fd\u8981 new \u65b0\u6570\u7ec4\uff0c\u5f00\u9500\u5f88\u5927\u3002 \u4e0a\u8ff0\u89e3\u6cd5\u7684\u7f3a\u70b9\u662f\u4fee\u6539\u4e86\u539f\u59cb\u6570\u7ec4\uff0c\u6392\u5e8f\u5b8c\u6210\u4ee5\u540e\uff0c\u9006\u5e8f\u6570\u5c31\u8ba1\u7b97\u51fa\u6765\u4e86\u3002\u4e3a\u6b64\uff1a\uff081\uff09\u6211\u4eec\u53ef\u4ee5\u5f15\u5165\u4e00\u4e2a\u7d22\u5f15\u6570\u7ec4\uff1b\uff082\uff09\u6216\u8005\u76f4\u63a5\u62f7\u8d1d\u4e00\u4e2a\u539f\u59cb\u6570\u7ec4\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u4fee\u6539\u539f\u59cb\u6570\u7ec4\u4e86\u3002 \u7b2c 52 \u9898\uff1a\u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9 \u4f20\u9001\u95e8\uff1a \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e24\u4e2a\u94fe\u8868\uff0c\u627e\u51fa\u5b83\u4eec\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9\u3002 \u6837\u4f8b\uff1a \u7ed9\u51fa\u4e24\u4e2a\u94fe\u8868\u5982\u4e0b\u6240\u793a\uff1a A\uff1a a1 \u2192 a2 \u2198 c1 \u2192 c2 \u2192 c3 \u2197 B\uff1ab1 \u2192 b2 \u2192 b3 \u8f93\u51fa\u7b2c\u4e00\u4e2a\u516c\u5171\u8282\u70b9 c1\u3002 \u601d\u8def1\uff1a\u4e24\u4e2a\u94fe\u8868\u5982\u679c\u6709\u76f8\u540c\u8d77\u70b9\u7684\u8bdd\u5c31\u597d\u529e\u4e86\uff0c\u6240\u4ee5\u9996\u5148\u8981\u8ba1\u7b97\u51fa\u4e24\u4e2a\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u8fdb\u800c\u8ba1\u7b97\u5b83\u4eec\u7684\u5dee\u503c\u3002 Python \u4ee3\u7801\uff1a class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution(object): def __get_list_node_size(self, root): node = root size = 0 while node: size += 1 node = node.next return size def findFirstCommonNode(self, headA, headB): \"\"\" :type headA, headB: ListNode :rtype: ListNode \"\"\" if headA is None or headB is None: return None s1 = self.__get_list_node_size(headA) s2 = self.__get_list_node_size(headB) # \u6211\u4eec\u9ed8\u8ba4 l1 >= l2 h1 = headA h2 = headB if s2 > s1: # \u5982\u679c B \u957f\u5ea6\u66f4\u957f\uff0c\u628a\u4e8c\u8005\u4ea4\u6362 h1 = headB h2 = headA # \u73b0\u5728 h1 \u4e0a\u8d70 (s1 - s2) \u8fd9\u4e48\u591a\u957f\u5ea6 for _ in range(abs(s1 - s2)): h1 = h1.next # \u7136\u540e\u9f50\u5934\u5e76\u8fdb while h1 and h2 and h1.val != h2.val: h1 = h1.next h2 = h2.next # \u8d70\u5230\u8fd9\u91cc\uff0c\u5982\u679c\u662f\u56e0\u4e3a h1 \u548c h2 \u90fd\u7a7a\u4e86\uff0c\u8fd4\u56de Node if h1 is None and h2 is None: return None else: return h1 Java \u4ee3\u7801\uff1a class ListNode { int val; ListNode next; public ListNode(int val) { this.val = val; } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } // \u7b2c 52 \u9898\uff1a\u4e24\u4e2a\u94fe\u8868\u7684\u7b2c 1 \u4e2a\u516c\u5171\u8282\u70b9 P253 // \u53c2\u8003\u8d44\u6599\uff1a // 1\u3001https://blog.csdn.net/derrantcm/article/details/46761093 public class Solution { public static ListNode findFirstCommonNode(ListNode pHead1, ListNode pHead2) { ListNode p1 = pHead1; ListNode p2 = pHead2; while (p1 != p2) { p1 = (p1 != null ? p1.next : pHead2); p2 = (p2 != null ? p2.next : pHead1); } return p1; } } \u601d\u8def2\uff1a\u7528\u4e24\u4e2a\u6808\u3002 Python \u4ee3\u7801\uff1a\u5199\u6cd5\u4e0a\u8981\u6ce8\u610f\uff0c\u4e0d\u8981\u60f3\u5f53\u7136 class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution(object): def findFirstCommonNode(self, headA, headB): \"\"\" :type headA, headB: ListNode :rtype: ListNode \"\"\" if headA is None or headB is None: return None stack1 = [] stack2 = [] node1 = headA while node1: stack1.append(node1) node1 = node1.next node2 = headB while node2: stack2.append(node2) node2 = node2.next # \u6ce8\u610f\uff1a\u8fd9\u91cc\u6709\u9677\u9631\uff0c\u4e00\u5b9a\u8981\u5148\u8bbe\u7f6e\u4e00\u4e2a result \u7ed3\u70b9 # \u5982\u679c\u4e24\u4e2a\u94fe\u8868\u6ca1\u6709\u516c\u5171\u5143\u7d20\uff0cres \u4e0d\u4f1a\u88ab\u8d4b\u503c res = None while stack1 and stack2: node1 = stack1.pop() node2 = stack2.pop() if node1.val == node2.val: # \u8fd9\u91cc\u6682\u5b58\u4e00\u4e0b\uff0c\u6700\u540e\u4e00\u4e2a\u76f8\u7b49\u7684\u7ed3\u70b9\u624d\u662f\u6211\u4eec\u6c42\u7684 res = node1 continue if stack1 is None or stack2 is None: return None return res \u601d\u8def3\uff1a\u62fc\u6210\u4e00\u6837\u957f\uff0c\u8fd9\u4e2a\u5199\u6cd5\u8bb0\u4f4f\u5c31\u53ef\u4ee5\u4e86\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def findFirstCommonNode(self, headA, headB): \"\"\" :type headA, headB: ListNode :rtype: ListNode \"\"\" if headA is None or headB is None: return None p1 = headA p2 = headB while p1 != p2: if p1 is None: p1 = headB else: p1 = p1.next if p2 is None: p2 = headA else: p2 = p2.next return p1 LeetCode \u7b2c 160 \u9898\uff1a\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9 \u628a\u4e0d\u6574\u9f50\u7684\u5730\u65b9\u8865\u6574\u7406\uff0c\u7b54\u6848\u4e5f\u662f\u56fa\u5b9a\u5199\u6cd5\uff0c\u591a\u5199\u51e0\u904d\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None # \u601d\u8def\uff1a\u4e24\u4e2a\u94fe\u8868\u4e0d\u4e00\u6837\u957f\uff0c\u5c31\u60f3\u529e\u6cd5\u8ba9\u5b83\u4eec\u4e00\u6837\u957f\u3002 class Solution(object): def getIntersectionNode(self, headA, headB): \"\"\" :type head1, head1: ListNode :rtype: ListNode \"\"\" if headA is None or headB is None: return None node1 = headA node2 = headB while node1 != node2: if node1: node1 = node1.next else: node1 = headB if node2: node2 = node2.next else: node2 = headA return node1 \u7b2c 53 \u9898\uff1a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \uff08\u4e8c\u5206\u6cd5\u5178\u578b\u95ee\u9898\uff09 \u4f20\u9001\u95e8\uff1a \u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u3002 \u7edf\u8ba1\u4e00\u4e2a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u4f8b\u5982\u8f93\u5165\u6392\u5e8f\u6570\u7ec4 [1, 2, 3, 3, 3, 3, 4, 5] \u548c\u6570\u5b57 3 \uff0c\u7531\u4e8e 3 \u5728\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u4e86 4 \u6b21\uff0c\u56e0\u6b64\u8f93\u51fa4\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1, 2, 3, 3, 3, 3, 4, 5] , 3 \u8f93\u51fa\uff1a4 \u53c2\u8003\u8d44\u6599\uff1a \u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09\u7b2c 53 \u9898\uff1a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u3002 \u601d\u8def1\uff1a\u5199\u4e00\u4e2a\u4e8c\u5206\u6cd5\uff0c\u4f7f\u7528\u4e8c\u5206\u6cd5\u627e\u5230\u5927\u4e8e\u7b49\u4e8e $k$ \u7684\u7b2c $1$ \u4e2a\u6570\u7684\u4e0b\u6807\uff0c\u518d\u4f7f\u7528\u4e8c\u5206\u6cd5\u627e\u5230\u5927\u4e8e\u7b49\u4e8e $k+1$ \u7684\u7b2c $1$ \u4e2a\u6570\u7684\u4e0b\u6807\uff0c\u4e8c\u8005\u4e4b\u5dee\u5373\u4e3a\u6240\u6c42\u3002\u7279\u522b\u6ce8\u610f\uff0c\u8fd9\u91cc\u662f\u5982\u4f55\u4f7f\u7528\u4e8c\u5206\u6cd5\u7684\u3002 Python \u4ee3\u7801\uff1a class Solution(object): # \u8fd4\u56de\u5927\u4e8e\u7b49\u4e8e target \u7684\u7b2c 1 \u4e2a\u6570 def get_left(self, nums, target): # [2,3,4,5,5,5,5,5,5,5] # [1,1,1,1,1,1,1,1,1,2,3,4,5,5,5,5,5,5,5] if nums[0] == target: return 0 l = 1 r = len(nums) while l < r: mid = l + (r - l) // 2 if nums[mid] < target: l = mid + 1 else: assert nums[mid] >= target # \u4e0d\u80fd\u6392\u9664 mid r = mid return l def getNumberOfK(self, nums, k): \"\"\" :type nums: list[int] :type k: int :rtype: int \"\"\" size = len(nums) if size == 0: return 0 return self.get_left(nums, k + 1) - self.get_left(nums, k) \u4e25\u683c\u6309\u7167\u4e8c\u5206\u6cd5\u6a21\u677f\u7684\u8bdd\uff0c\u4ee3\u7801\u8981\u8fd9\u6837\u5199\uff1a Python \u4ee3\u7801\uff1a class Solution(object): def getNumberOfK(self, nums, k): \"\"\" :type nums: list[int] :type k: int :rtype: int \"\"\" size = len(nums) if size == 0: return 0 # \u8bbe\u7f6e\u8f85\u52a9\u51fd\u6570\uff0c\u7ed9\u4e00\u4e2a nums\uff0c\u4e00\u4e2a k\uff0c\u8fd4\u56de\u5927\u4e8e\u7b49\u4e8e k \u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u7d22\u5f15 return self.__helper(nums, k + 1) - self.__helper(nums, k) def __helper(self, nums, k): \"\"\" \u8fd4\u56de\u5927\u4e8e\u7b49\u4e8e k \u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u7d22\u5f15 :param nums: :param k: :return: \"\"\" size = len(nums) if size == 0: return 0 l = 0 # \u6ce8\u610f\uff1a\u8fd9\u91cc\u4e00\u5b9a\u8981\u5199 size r = size - 1 while l < r: mid = l + (r - l) // 2 if nums[mid] >= k: r = mid else: assert nums[mid] < k # [1,2,3,4,5] l = mid + 1 # \u56e0\u4e3a k \u6709\u53ef\u80fd\u4e0d\u5b58\u5728\uff0c\u6240\u4ee5\u4e0d\u4e00\u5b9a\u7b26\u5408\u8981\u6c42\uff0c\u6240\u4ee5\u4e00\u5b9a\u8981\u5355\u72ec\u5224\u65ad\u4e00\u4e0b if nums[l] != k: if nums[size - 1] < k: return size elif nums[0] > k: return 0 return l C++ \u4ee3\u7801\uff1a class Solution { public: int getNumberOfK(vector<int>& nums , int k) { if (nums.empty()) return 0; return helper(nums, k + 1) - helper(nums, k); } int helper(vector<int>& nums, int k){ int l = 0, r = nums.size(); while (l < r){ int m = l + (r - l) / 2; if (nums[m] < k) l = m + 1; else r = m; } return l; } }; \u601d\u8def2\uff1a\u5199\u4e24\u4e2a\u4e8c\u5206\u6cd5\uff0c\u4e00\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4e00\u4e2a\u6570\u6700\u53f3\u8fb9\u7684\u7d22\u5f15 - \u4e00\u4e2a\u6570\u6700\u5de6\u8fb9\u7684\u7d22\u5f15 + 1\u3002 # # 56\u3001\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 # \u7edf\u8ba1\u4e00\u4e2a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002 # # \u4f8b\u5982\u8f93\u5165\u6392\u5e8f\u6570\u7ec4[1, 2, 3, 3, 3, 3, 4, 5]\u548c\u6570\u5b573\uff0c\u7531\u4e8e3\u5728\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u4e864\u6b21\uff0c\u56e0\u6b64\u8f93\u51fa4\u3002 class Solution(object): def getNumberOfK(self, nums, k): \"\"\" :type nums: list[int] :type k: int :rtype: int \"\"\" size = len(nums) if size == 0: return 0 # \u8bbe\u7f6e\u8f85\u52a9\u51fd\u6570\uff0c\u7ed9\u4e00\u4e2a nums\uff0c\u4e00\u4e2a k\uff0c\u8fd4\u56de\u5927\u4e8e\u7b49\u4e8e k \u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u7d22\u5f15 k_right = self.__get_right_k(nums, k) k_left = self.__get_left_k(nums, k) if k_right == -1 or k_left == -1: return 0 return k_right - k_left + 1 def __get_right_k(self, nums, k): # \u627e\u5230\u6700\u53f3\u8fb9\u7684 index \uff0c\u4f7f\u5f97 nums[index] = k size = len(nums) if size == 0: return -1 l = 0 r = size - 1 while l < r: mid = l + (r - l + 1) // 2 if nums[mid] <= k: # [1,2,5,5,5,7] l = mid elif nums[mid] > k: r = mid - 1 if nums[l] != k: return -1 return l def __get_left_k(self, nums, k): # \u627e\u5230\u6700\u5de6\u8fb9\u7684 index \uff0c\u4f7f\u5f97 nums[index] = k size = len(nums) if size == 0: return -1 l = 0 r = size - 1 while l < r: mid = l + (r - l) // 2 if nums[mid] >= k: r = mid else: assert nums[mid] < k l = mid + 1 if nums[l] != k: return -1 return l if __name__ == '__main__': nums = [2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 6, 7, 8, 9, 10] k = 5 solution = Solution() # result = solution.get_left(nums, 5, ) # print(result) result = solution.getNumberOfK(nums, k) print(result) \u7b2c 54 \u9898\uff1a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2c $k$ \u5927\u7ed3\u70b9 \u4f20\u9001\u95e8\uff1a \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2c k \u5927\u7ed3\u70b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u627e\u51fa\u5176\u4e2d\u7684\u7b2c $k$ \u5c0f\u7684\u7ed3\u70b9\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u548c $k$ \u90fd\u5b58\u5728\uff0c\u5e76\u4e14 1\u2264 k \u2264 \u6811\u7684\u603b\u7ed3\u70b9\u6570\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a root = [2, 1, 3, null, null, null, null] \uff0c k = 3 2 / \\ 1 3 \u8f93\u51fa\uff1a3 \u601d\u8def\uff1a\u4f7f\u7528\u6808\u6a21\u62df BST \u7684\u4e2d\u5e8f\u904d\u5386\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def kthNode(self, root, k): \"\"\" :type root: TreeNode :type k: int :rtype: TreeNode \"\"\" if root is None: return None # 1 \u8868\u793a\u9012\u5f52\u5904\u7406\uff0c0 \u8868\u793a\u5f53\u524d\u6211\u5c31\u8981\u5904\u7406\u8fd9\u4e2a\u7ed3\u70b9 stack = [(1, root)] while stack: type, node = stack.pop() if type == 0: k -= 1 if k == 0: return node else: if node.right: stack.append((1, node.right)) stack.append((0, node)) if node.left: stack.append((1, node.left)) \u7b2c 55-1 \u9898\uff1a\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 \u4f20\u9001\u95e8\uff1a \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002\u3002 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u6c42\u8be5\u6811\u7684\u6df1\u5ea6\u3002 \u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u4f9d\u6b21\u7ecf\u8fc7\u7684\u7ed3\u70b9\uff08\u542b\u6839\u3001\u53f6\u7ed3\u70b9\uff09\u5f62\u6210\u6811\u7684\u4e00\u6761\u8def\u5f84\uff0c\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u4e3a\u6811\u7684\u6df1\u5ea6\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\u4e8c\u53c9\u6811 [8, 12, 2, null, null, 6, 4, null, null, null, null] \u5982\u4e0b\u56fe\u6240\u793a\uff1a 8 / \\ 12 2 / \\ 6 4 \u8f93\u51fa\uff1a3 \u601d\u8def\uff1a\u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u3002 Python \u4ee3\u7801\uff1a class Solution: def treeDepth(self, root): \"\"\" :type root: TreeNode :rtype: int \"\"\" if root is None: return 0 queue = [(1, root)] res = 0 while queue: top = queue.pop(0) cur_depth, node = top[0], top[1] res = max(res, cur_depth) if node.left: queue.append((cur_depth + 1, node.left)) if node.right: queue.append((cur_depth + 1, node.right)) return res \u7b2c 55-2 \u9898\uff1a\u5e73\u8861\u4e8c\u53c9\u6811 \u4f20\u9001\u95e8\uff1a \u5e73\u8861\u4e8c\u53c9\u6811 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u5224\u65ad\u8be5\u6811\u662f\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811\u3002 \u5982\u679c\u67d0\u4e8c\u53c9\u6811\u4e2d\u4efb\u610f\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u7684\u6df1\u5ea6\u76f8\u5dee\u4e0d\u8d85\u8fc7 $1$\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811\u3002 \u6ce8\u610f\uff1a \u89c4\u5b9a\u7a7a\u6811\u4e5f\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\u4e8c\u53c9\u6811 [5,7,11,null,null,12,9,null,null,null,null] \u5982\u4e0b\u6240\u793a\uff0c 5 / \\ 7 11 / \\ 12 9 \u8f93\u51fa\uff1atrue \u601d\u8def\uff1a\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08 \u540e\u5e8f\u904d\u5386 \uff09\u3002 Python \u4ee3\u7801\uff1a # Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution(object): # \u5168\u5c40\u53d8\u91cf flag = 1 def isBalanced(self, root): \"\"\" :type root: TreeNode :rtype: bool \"\"\" if root is None: return True self.__dfs(root) return self.flag def __dfs(self, node): \"\"\" \u8fd4\u56de\u4ee5 root \u4e3a\u6839\u7684\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\uff0c\u5982\u679c\u5de6\u53f3\u5b50\u6811\u5176\u4e2d\u4e4b\u4e00\u4e0d\u662f AVL \uff0c\u5219\u8fd4\u56de -1 :param node: :return: \"\"\" if node is None: return 0 left = self.__dfs(node.left) right = self.__dfs(node.right) if abs(left - right) > 1: self.flag = 0 # \u8fd9\u91cc\u4e0d\u80fd\u5199 return return max(left, right) + 1 Java \u4ee3\u7801\uff1a class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } // \u7b2c 55 \u9898\uff1a\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\uff08\u5224\u65ad\u662f\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff09 // \u53ef\u4ee5\u63d0\u4ea4\u5230 LeetCode \u7b2c 110 \u9898\u7684\u6d4b\u8bd5\u7528\u4f8b // \u53c2\u8003\u8d44\u65991\uff1a // https://blog.csdn.net/derrantcm/article/details/46771529 public class Solution { public boolean isBalanced(TreeNode root) { if (root == null) { return true; } int[] depth = new int[1]; depth[0] = 0; return postOrder(root, depth); } // \u540e\u5e8f\u904d\u5386 private boolean postOrder(TreeNode node, int[] depth) { if (node == null) { depth[0] = 0; return true; } int[] left = new int[1]; int[] right = new int[1]; // \u5982\u679c\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u90fd\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u76f4\u63a5\u5c31\u8d70\u5230\u6700\u540e\uff0c\u8fd4\u56de false if (postOrder(node.left, left) && postOrder(node.right, right)) { int diff = left[0] - right[0]; if (diff <= 1 && diff >= -1) { depth[0] = Integer.max(left[0], right[0]) + 1; return true; } } return false; } } \u7b2c 56-1 \u9898\uff1a\u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u4e24\u4e2a\u6570\u5b57 \u4f20\u9001\u95e8\uff1a \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u4e24\u4e2a\u6570\u5b57 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u4e00\u4e2a\u6574\u578b\u6570\u7ec4\u91cc\u9664\u4e86\u4e24\u4e2a\u6570\u5b57\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e24\u6b21\u3002 \u8bf7\u5199\u7a0b\u5e8f\u627e\u51fa\u8fd9\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u8fd9\u4e24\u4e2a\u6570\u5b57\u4e00\u5b9a\u5b58\u5728\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a$[1,2,3,3,4,4]$ \u8f93\u51fa\uff1a$[1,2]$ \u601d\u8def\uff1a \u6309\u4f4d\u5206\u7ec4 \u3002 Python \u4ee3\u7801\uff1a class Solution(object): def findNumsAppearOnce(self, nums): \"\"\" :type nums: List[int] :rtype: List[int] \"\"\" l = len(nums) if l < 2: raise Exception('\u7a0b\u5e8f\u51fa\u9519') if l == 2: return nums # \u5168\u90e8\u76f8\u4e0e\u4e00\u904d xor = 0 for num in nums: xor ^= num # \u6700\u672b\u5c3e\u7684 1 \u4ece\u53f3\u5411\u5de6\u8fb9\u6570\u5728\u7b2c\u51e0\u4f4d counter = 0 while xor & 1 == 0: xor >>= 1 counter += 1 res = [0, 0] for num in nums: if (num >> counter) & 1 == 1: res[1] ^= num else: res[0] ^= num return res Java \u4ee3\u7801\uff1a import java.util.Arrays; // \u7b2c 56 \u9898\uff1a\u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 P275 // \u53c2\u8003\u8d44\u6599\uff1a // 1\u3001https://blog.csdn.net/derrantcm/article/details/46771717 public class Solution { // \u8003\u5bdf\u4f4d\u8fd0\u7b97\uff1a\u6216\u3001\u4e0e\u3001\u5f02\u6216\u3001\u975e\uff0c\u4ee5\u53ca\u65e0\u7b26\u53f7\u5de6\u79fb >>> public int[] findNumbersAppearanceOnce(int[] nums) { int len = nums.length; int[] res = new int[2]; assert len >= 2; if (len == 2) { return nums; } // \u90a3\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u7684\u5f02\u6216\u8fd0\u7b97\u7684\u7ed3\u679c int xor = xor(nums); // \u5173\u952e\u5728\u8fd9\u91cc // \u627e\u5230\u8fd9\u4e2a xor \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7b2c 1 \u4e2a\u662f 1 \u7684\u6570\u4f4d\u662f\u7b2c\u51e0\u4f4d int binaryFirstNotZero = binaryFirstNotZero(xor); // \u63a5\u4e0b\u6765\u5206\u522b\u5bf9\u4e24\u7ec4\u8fdb\u884c\u5f02\u6216 for (int i = 0; i < len; i++) { // \u5982\u679c\u8fd9\u4e2a\u6570\u53f3\u79fb\u8fd9\u4e48\u591a\u4f4d\u662f 1 \u7684\u5206\u5728\u4e00\u7ec4\uff0c\u662f 0 \u7684\u5206\u5728\u53e6\u5916\u4e00\u7ec4\uff0c\u904d\u5386\u7684\u65f6\u5019\uff0c\u5c31\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97 if ((nums[i] >>> binaryFirstNotZero & 1) == 1) { res[0] ^= nums[i]; } else { res[1] ^= nums[i]; } } return res; } // \u5f97\u5230\u4e00\u4e2a\u6570\u7ec4\u7ecf\u8fc7\u5f02\u6216\u8fd0\u7b97\u7684\u7ed3\u679c xor // \u5f02\u6216 \u7684\u82f1\u6587\u7ffb\u8bd1\u5c31\u662f xor private int xor(int[] nums) { int xor = 0; for (int i = 0; i < nums.length; i++) { xor ^= nums[i]; } return xor; } // \u5f97\u5230\u4e00\u4e2a\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4ece\u53f3\u5230\u5de6\u7b2c 1 \u4e2a\u975e\u96f6\u7684\u4f4d\u6570\u662f\u7b2c\u51e0\u4f4d private int binaryFirstNotZero(int num) { int index = 0; // \u8fd9\u91cc\u7684 1 \u628a\u5b83\u770b\u6210\u4e8c\u8fdb\u5236\u7684 1\uff0c\u5373 00000001 while ((num & 1) == 0 && index < 32) { num >>>= 1; index++; } // \u8d70\u5230\u8fd9\u91cc\u6ee1\u8db3 (num & 1) == 1 return index; } public static void main(String[] args) { int[] nums = {2, 4, 3, 6, 3, 2, 5, 5}; Solution solution = new Solution(); int[] res = solution.findNumbersAppearanceOnce(nums); System.out.println(Arrays.toString(res)); int[] nums2 = {2, 4, 3, 6, 3, 2, 5, 5}; int[] res2 = solution.findNumbersAppearanceOnce(nums2); System.out.println(Arrays.toString(res2)); int[] nums3 = {4, 6}; int[] res3 = solution.findNumbersAppearanceOnce(nums3); System.out.println(Arrays.toString(res3)); int[] nums4 = {4, 6, 1, 1, 1, 1}; int[] res4 = solution.findNumbersAppearanceOnce(nums4); System.out.println(Arrays.toString(res4)); } } 0 \u5230 n-1 \u4e2d\u7f3a\u5931\u7684\u6570\u5b57 \u4f20\u9001\u95e8\uff1a 0 \u5230 n-1 \u4e2d\u7f3a\u5931\u7684\u6570\u5b57 \u3002 \u4e00\u4e2a\u957f\u5ea6\u4e3a n-1 \u7684\u9012\u589e\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u6570\u5b57\u90fd\u662f\u552f\u4e00\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u6570\u5b57\u90fd\u5728\u8303\u56f4 0 \u5230 n-1 \u4e4b\u5185\u3002 \u5728\u8303\u56f4 0 \u5230 n-1 \u7684 n \u4e2a\u6570\u5b57\u4e2d\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u4e0d\u5728\u8be5\u6570\u7ec4\u4e2d\uff0c\u8bf7\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\u3002 \u6837\u4f8b ``` \u8f93\u5165\uff1a[0,1,2,4] \u8f93\u51fa\uff1a3 ``` \u601d\u8def\uff1a\u5178\u578b\u7684\u4f7f\u7528\u201c\u4e8c\u5206\u6cd5\u201d\u89e3\u51b3\u7684\u95ee\u9898\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getMissingNumber(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" size = len(nums) l = 0 r = size while l < r: mid = l + (r - l) // 2 if nums[mid] > mid: # [0,1,2,3,4,6] # mid \u6709\u53ef\u80fd\u662f\u8981\u6c42\u7684\u6570 r = mid else: assert nums[mid] <= mid l = mid + 1 return l if __name__ == '__main__': solution = Solution() nums = [0, 1, 2, 4] result = solution.getMissingNumber(nums) print(result) \u6570\u7ec4\u4e2d\u6570\u503c\u548c\u4e0b\u6807\u76f8\u7b49\u7684\u5143\u7d20 \u4f20\u9001\u95e8\uff1a \u6570\u7ec4\u4e2d\u6570\u503c\u548c\u4e0b\u6807\u76f8\u7b49\u7684\u5143\u7d20 \u3002 \u5047\u8bbe\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u7684\u6570\u7ec4\u91cc\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u6574\u6570\u5e76\u4e14\u662f\u552f\u4e00\u7684\u3002 \u8bf7\u7f16\u7a0b\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u6570\u503c\u7b49\u4e8e\u5176\u4e0b\u6807\u7684\u5143\u7d20\u3002 \u4f8b\u5982\uff0c\u5728\u6570\u7ec4 $[-3, -1, 1, 3, 5]$ \u4e2d\uff0c\u6570\u5b57 $3$ \u548c\u5b83\u7684\u4e0b\u6807\u76f8\u7b49\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a$[-3, -1, 1, 3, 5]$ \u8f93\u51fa\uff1a$3$ \u6ce8\u610f \uff1a\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de $-1$\u3002 \u601d\u8def\uff1a\u5178\u578b\u7684\u4f7f\u7528\u201c\u4e8c\u5206\u6cd5\u201d\u89e3\u51b3\u7684\u95ee\u9898\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getNumberSameAsIndex(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" # \u4f7f\u7528\u4e8c\u5206\u6cd5 size = len(nums) l = 0 r = size - 1 while l < r: mid = l + (r - l) // 2 if nums[mid] < mid: l = mid + 1 else: assert nums[mid] >= mid r = mid return l if nums[l] == l else -1 Python \u4ee3\u7801\uff1a class Solution(object): def getNumberSameAsIndex(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" size = len(nums) if size == 0: return -1 l = 0 r = size - 1 while l < r: mid = l + (r - l + 1) // 2 if nums[mid] > mid: r = mid - 1 else: l = mid return l if nums[l] == l else -1 Python \u4ee3\u7801\uff1a class Solution(object): def getNumberSameAsIndex(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" size = len(nums) if size == 0: return -1 l = 0 r = size - 1 while l < r: mid = l + (r - l + 1) // 2 if nums[mid] <= mid: l = mid else: r = mid - 1 return l if nums[l] == l else -1 \u7b2c 56-2 \u9898\uff1a\u6570\u7ec4\u4e2d\u552f\u4e00\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u4f20\u9001\u95e8\uff1a \u6570\u7ec4\u4e2d\u552f\u4e00\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u3002 \u5728\u4e00\u4e2a\u6570\u7ec4\u4e2d\u9664\u4e86\u4e00\u4e2a\u6570\u5b57\u53ea\u51fa\u73b0\u4e00\u6b21\u4e4b\u5916\uff0c\u5176\u4ed6\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e09\u6b21\u3002 \u8bf7\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5b57\u4e00\u5b9a\u5b58\u5728\u3002 \u601d\u8003\u9898\uff1a \u5982\u679c\u8981\u6c42\u53ea\u4f7f\u7528 $O(n)$ \u7684\u65f6\u95f4\u548c\u989d\u5916 $O(1)$ \u7684\u7a7a\u95f4\uff0c\u8be5\u600e\u4e48\u505a\u5462\uff1f \u6837\u4f8b\uff1a ``` \u8f93\u5165\uff1a[1,1,1,2,2,2,3,4,4,4] \u8f93\u51fa\uff1a3 ``` \u601d\u8def\uff1a\u9650\u5236\u5728 $O(1)$ \u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u90a3\u5c31\u53ea\u6709\u901a\u8fc7\u4e8c\u8fdb\u5236\uff0c\u4e00\u4f4d\u4e00\u4f4d\u53bb\u770b\u4e86\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def findNumberAppearingOnce(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" res = 0 for i in range(32): count = 0 for num in nums: # \u4e0d\u8981\u5fd8\u8bb0 & 1 if (num >> i) & 1: count += 1 if count % 3: res += 1 << i return res if __name__ == '__main__': nums = [1, 0, 0, 0, 2, 1, 1] solution = Solution() result = solution.findNumberAppearingOnce(nums) print(result) \u7b2c 57-1 \u9898\uff1a\u548c\u4e3a S \u7684\u4e24\u4e2a\u6570\u5b57 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u548c\u4e3a S \u7684\u4e24\u4e2a\u6570\u5b57 \u3002 \u8f93\u5165\u4e00\u4e2a\u6570\u7ec4\u548c\u4e00\u4e2a\u6570\u5b57 s \uff0c\u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u4e24\u4e2a\u6570\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u6b63\u597d\u662f s \u3002 \u5982\u679c\u6709\u591a\u5bf9\u6570\u5b57\u7684\u548c\u7b49\u4e8e s \uff0c\u8f93\u51fa\u4efb\u610f\u4e00\u5bf9\u5373\u53ef\u3002 \u4f60\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u7ec4\u8f93\u5165\u4e2d\u90fd\u81f3\u5c11\u542b\u6709\u4e00\u7ec4\u6ee1\u8db3\u6761\u4ef6\u7684\u8f93\u51fa\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,3,4] , sum=7 \u8f93\u51fa\uff1a [3,4] \u8bf4\u660e\uff1a\u540c LeetCode \u7b2c 1 \u9898\uff0c\u5fc5\u987b\u8981\u4f1a\u7684\u4e00\u9898\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def findNumbersWithSum(self, nums, target): \"\"\" :type nums: List[int] :type target: int :rtype: List[int] \"\"\" s = set() for num in nums: if target - num not in s: s.add(num) else: return [num, target - num] \u7b2c 57-2 \u9898\uff1a\u548c\u4e3a S \u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u548c\u4e3a S \u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217 \u3002 \u8f93\u5165\u4e00\u4e2a\u6b63\u6570 s \uff0c\u6253\u5370\u51fa\u6240\u6709\u548c\u4e3a s \u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217\uff08\u81f3\u5c11\u542b\u6709\u4e24\u4e2a\u6570\uff09\u3002 \u4f8b\u5982\u8f93\u5165$15$\uff0c\u7531\u4e8e $1+2+3+4+5=4+5+6=7+8=15$\uff0c\u6240\u4ee5\u7ed3\u679c\u6253\u5370\u51fa $3$ \u4e2a\u8fde\u7eed\u5e8f\u5217 $1\uff5e5$\u3001$4\uff5e6$ \u548c $7\uff5e8$\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a$15$ \u8f93\u51fa\uff1a$[[1,2,3,4,5],[4,5,6],[7,8]]$ \u601d\u8def\uff1a\u53cc\u6307\u9488\uff0c\u56e0\u4e3a\u662f\u6709\u5e8f\u6570\u7ec4\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u6cd5\u3002 \u8bbe\u5b9a\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u7b2c\u4e00\u4e2a\u6570\uff0c\u4e00\u4e2a\u6307\u5411\u6700\u540e\u4e00\u4e2a\u6570\uff0c\u5728\u6b64\u4e4b\u524d\u9700\u8981\u8bbe\u5b9a\u7b2c\u4e00\u4e2a\u6570\u548c\u6700\u540e\u4e00\u4e2a\u6570\u7684\u503c\uff0c\u7531\u4e8e\u662f\u6b63\u6570\u5e8f\u5217\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u7b2c\u4e00\u4e2a\u6570\u8bbe\u4e3a $1$\uff0c\u6700\u540e\u4e00\u4e2a\u6570\u4e3a $2$\uff0c\u56e0\u4e3a\u662f\u8981\u6c42\u662f\u8fde\u7eed\u6b63\u6570\u5e8f\u5217\uff0c\u6700\u540e\u4e0d\u53ef\u80fd\u548c\u7b2c\u4e00\u4e2a\u6570\u91cd\u5408\u3002\u4e0b\u4e00\u6b65\u5c31\u662f\u4e0d\u65ad\u6539\u53d8\u7b2c\u4e00\u4e2a\u6570\u548c\u6700\u540e\u4e00\u4e2a\u6570\u7684\u503c\uff0c\u5982\u679c\u4ece\u7b2c\u4e00\u4e2a\u6570\u5230\u6700\u540e\u4e00\u4e2a\u6570\u7684\u548c\u521a\u597d\u662f\u8981\u6c42\u7684\u548c\uff0c\u90a3\u4e48\u628a\u6240\u6709\u7684\u6570\u90fd\u6dfb\u52a0\u5230\u4e00\u4e2a\u5e8f\u5217\u4e2d\uff1b\u5982\u679c\u5927\u4e8e\u8981\u6c42\u7684\u548c\uff0c\u5219\u8bf4\u660e\u4ece\u7b2c\u4e00\u4e2a\u6570\u5230\u6700\u540e\u4e00\u4e2a\u6570\u4e4b\u95f4\u7684\u8303\u56f4\u592a\u5927\uff0c\u56e0\u6b64\u51cf\u5c0f\u8303\u56f4\uff0c\u9700\u8981\u628a\u7b2c\u4e00\u4e2a\u6570\u7684\u503c\u52a0 $1$\uff0c\u540c\u65f6\u628a\u5f53\u524d\u548c\u51cf\u53bb\u539f\u6765\u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u503c\uff1b\u5982\u679c\u5c0f\u4e8e\u8981\u6c42\u7684\u548c\uff0c\u8bf4\u660e\u8303\u56f4\u592a\u5c0f\uff0c\u56e0\u6b64\u628a\u6700\u540e\u4e00\u4e2a\u6570\u52a0 $1$\uff0c\u540c\u65f6\u628a\u5f53\u524d\u7684\u548c\u52a0\u4e0a\u6539\u53d8\u4e4b\u540e\u7684\u6700\u540e\u4e00\u4e2a\u6570\u7684\u503c\u3002\u8fd9\u6837\uff0c\u4e0d\u65ad\u4fee\u6539\u7b2c\u4e00\u4e2a\u6570\u548c\u6700\u540e\u4e00\u4e2a\u6570\u7684\u503c\uff0c\u5c31\u80fd\u786e\u5b9a\u6240\u6709\u8fde\u7eed\u6b63\u6570\u5e8f\u5217\u7684\u548c\u7b49\u4e8e $S$ \u7684\u5e8f\u5217\u4e86\u3002 \u7b49\u5dee\u6570\u5217\u6c42\u548c\u516c\u5f0f\uff0c\u9996\u9879\u52a0\u672b\u9879\u7684\u548c\u4e58\u4ee5\u4e2a\u6570\u9664\u4ee5 $2$\uff0c\u5373 ${\\rm sum} = \\cfrac {(a + b)\\times n }{2}$\u3002 \u6ce8\u610f\uff1a\u53f3\u8fb9\u754c\u95ee\u9898\uff0c\u4f7f\u7528\u4e00\u4e2a\u7279\u4f8b\uff0c\u4f8b\u5982 $3$ \u5c31\u53ef\u4ee5\u8003\u8651\u6e05\u695a\u4e86\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def findContinuousSequence(self, sum): \"\"\" :type sum: int :rtype: List[List[int]] \"\"\" res = [] left = 1 right = 2 # sum = 3 \u7684\u65f6\u5019\uff0c\u53f3\u8fb9\u754c\u6700\u591a\u5230 2 half = sum // 2 + 1 while left < right <= half: cur_sum = (left + right) * (right - left + 1) // 2 if cur_sum == sum: res.append([i for i in range(left, right + 1)]) right += 1 elif cur_sum < sum: right += 1 else: assert cur_sum > sum left += 1 return res if __name__ == '__main__': sum = 15 solution = Solution() result = solution.findContinuousSequence(sum) print(result) \u7b2c 58-1 \u9898\uff1a\u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f\u5217 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u82f1\u6587\u53e5\u5b50\uff0c\u7ffb\u8f6c\u53e5\u5b50\u4e2d\u5355\u8bcd\u7684\u987a\u5e8f\uff0c\u4f46\u5355\u8bcd\u5185\u5b57\u7b26\u7684\u987a\u5e8f\u4e0d\u53d8\u3002 \u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6807\u70b9\u7b26\u53f7\u548c\u666e\u901a\u5b57\u6bcd\u4e00\u6837\u5904\u7406\u3002 \u4f8b\u5982\u8f93\u5165\u5b57\u7b26\u4e32 \"I am a student.\" \uff0c\u5219\u8f93\u51fa \"student. a am I\" \u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a \"I am a student.\" \u8f93\u51fa\uff1a \"student. a am I\" \u601d\u8def\uff1a\u5b9e\u73b0\u4e00\u4e2a\u8f85\u52a9\u7684\u65b9\u6cd5\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u7684\u6307\u5b9a\u533a\u95f4\u8fdb\u884c\u7ffb\u8f6c\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def reverseWords(self, s): \"\"\" :type s: str :rtype: str \"\"\" size = len(s) arr = list(s) self.__reverse(arr, 0, size - 1) begin = 0 index = 0 while index < size: if arr[index] == ' ': self.__reverse(arr, begin, index - 1) begin = index + 1 index += 1 # \u6700\u540e\u8fd8\u8981\u53cd\u8f6c\u4e00\u4e0b self.__reverse(arr, begin, size - 1) return ''.join(arr) def __reverse(self, arr, left, right): if left >= right: return while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 Java \u4ee3\u7801\uff1a public class Solution { /** * \u8f85\u52a9\u51fd\u6570\uff1a\u7ffb\u8f6c\u5b57\u7b26\u6570\u7ec4\u6307\u5b9a\u533a\u95f4\u5185\u7684\u5b57\u7b26 * * @param str * @param start * @param end */ private void reverseString(char[] str, int start, int end) { int l = start; int r = end; while (l < r) { swap(str, l, r); l++; r--; } } /** * \u8f85\u52a9\u51fd\u6570\uff1a\u4ea4\u6362\u5b57\u7b26\u6570\u7ec4\u6307\u5b9a\u7d22\u5f15\u7684\u5b57\u7b26 * * @param str * @param index1 * @param index2 */ private void swap(char[] str, int index1, int index2) { if (index1 == index2) { return; } char temp = str[index1]; str[index1] = str[index2]; str[index2] = temp; } public String ReverseSentence(String str) { int len = str.length(); if (len == 0 || len == 1) { return str; } char[] charArr = str.toCharArray(); reverseString(charArr, 0, len - 1); int start = 0; for (int i = 0; i < len; i++) { if (charArr[i] == ' ') { reverseString(charArr, start, i - 1); start = i + 1; } } // \u6700\u540e\u8fd8\u8981\u8bb0\u5f97\u53cd\u8f6c\u4e00\u4e0b reverseString(charArr, start, len - 1); return String.valueOf(charArr); } public static void main(String[] args) { String str = \"write your code here\"; Solution solution = new Solution(); String reverseSentence = solution.ReverseSentence(str); System.out.println(reverseSentence); } } \u603b\u7ed3\uff1a\u522b\u628a\u95ee\u9898\u60f3\u590d\u6742\u4e86\uff0c\u6709\u70b9\u8010\u5fc3\uff0c\u8fd9\u4e9b\u95ee\u9898\u5176\u5b9e\u5e76\u6ca1\u6709\u90a3\u4e48\u96be\u3002 \u7b2c 58-2 \u9898\uff1a\u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 \u4f20\u9001\u95e8\uff1a \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5b57\u7b26\u4e32\u7684\u5de6\u65cb\u8f6c\u64cd\u4f5c\u662f\u628a\u5b57\u7b26\u4e32\u524d\u9762\u7684\u82e5\u5e72\u4e2a\u5b57\u7b26\u8f6c\u79fb\u5230\u5b57\u7b26\u4e32\u7684\u5c3e\u90e8\u3002 \u8bf7\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5b9e\u73b0\u5b57\u7b26\u4e32\u5de6\u65cb\u8f6c\u64cd\u4f5c\u7684\u529f\u80fd\u3002 \u6bd4\u5982\u8f93\u5165\u5b57\u7b26\u4e32 \"abcdefg\" \u548c\u6570\u5b572\uff0c\u8be5\u51fd\u6570\u5c06\u8fd4\u56de\u5de6\u65cb\u8f6c2\u4f4d\u5f97\u5230\u7684\u7ed3\u679c \"cdefgab\" \u3002 \u6ce8\u610f\uff1a \u6570\u636e\u4fdd\u8bc1n\u5c0f\u4e8e\u7b49\u4e8e\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002 \u6837\u4f8b ``` \u8f93\u5165\uff1a\"abcdefg\" , n=2 \u8f93\u51fa\uff1a\"cdefgab\" ``` \u601d\u8def\uff1a\u201cabcdefg\u201d \u65cb\u8f6c\u4ee5\u540e\uff0c\u201cgfedcba\u201d\uff0c\u5728\u5012\u6570\u7b2c 2 \u4f4d\u524d\u540e\uff0c\u518d\u7ffb\u8f6c\u4e00\u4e0b\uff0c\u5f97\u201ccdefgab\u201d\u3002\u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u8981\u5206\u6790\u6e05\u695a\uff0c\u6ce8\u610f\uff1a\u79fb\u52a8\u7684\u4f4d\u6570\u8981\u53d6\u4f59\u6570\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def leftRotateString(self, s, n): \"\"\" :type s: str :type n: int :rtype: str \"\"\" size = len(s) # \u7279\u5224 if size == 0 or n % size == 0: return s n = n % size arr = list(s) self.__reverse(arr, 0, size - 1) self.__reverse(arr, 0, size - 1 - n) self.__reverse(arr, size - n, size - 1) return ''.join(arr) def __reverse(self, arr, left, right): if left >= right: return while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 Java \u4ee3\u7801\uff1a public class Solution { private void reverseString(char[] charArr, int start, int end) { int l = start; int r = end; while (l < r) { swap(charArr, l, r); l++; r--; } } private void swap(char[] charArr, int index1, int index2) { if (index1 == index2) { return; } char temp = charArr[index1]; charArr[index1] = charArr[index2]; charArr[index2] = temp; } public String LeftRotateString(String str, int n) { int len = str.length(); if (len == 0 || n < 0) { return \"\"; } if (len == 1) { return str; } // \u8fd9\u91cc\u8981\u6ce8\u610f\u4e86 n = len - n % len; char[] charArr = str.toCharArray(); reverseString(charArr, 0, len - 1); reverseString(charArr, 0, n - 1); reverseString(charArr, n, len - 1); return String.valueOf(charArr); } public static void main(String[] args) { String str = \"abcXYZdef\"; Solution solution = new Solution(); String leftRotateString = solution.LeftRotateString(str, 3); System.out.println(leftRotateString); } } \u7b2c 59 \u9898\uff1a\u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c\uff08\u5178\u578b\u95ee\u9898\uff09 \u4f20\u9001\u95e8\uff1a \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\u548c\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\uff0c\u8bf7\u627e\u51fa\u6240\u6709\u6ed1\u52a8\u7a97\u53e3\u91cc\u7684\u6700\u5927\u503c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u6570\u7ec4 [2, 3, 4, 2, 6, 2, 5, 1] \u53ca\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f 3\uff0c\u90a3\u4e48\u4e00\u5171\u5b58\u5728 6 \u4e2a\u6ed1\u52a8\u7a97\u53e3\uff0c\u5b83\u4eec\u7684\u6700\u5927\u503c\u5206\u522b\u4e3a [4, 4, 6, 6, 6, 5] \u3002 \u6ce8\u610f\uff1a \u6570\u636e\u4fdd\u8bc1 $k$ \u5927\u4e8e $0$ \uff0c\u4e14 $k$ \u5c0f\u4e8e\u7b49\u4e8e\u6570\u7ec4\u957f\u5ea6\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [2, 3, 4, 2, 6, 2, 5, 1] , k=3 \u8f93\u51fa\uff1a [4, 4, 6, 6, 6, 5] \u540c LeetCode \u7b2c 239 \u9898\uff0c\u4f20\u9001\u95e8\uff1a LeetCode \u7b2c 239 \u9898\uff1a\u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c \u3002 Python \u4ee3\u7801\uff1a window[0] == i - k \u8fd9\u4e2a\u6761\u4ef6\u7279\u522b\u5bb9\u6613\u5ffd\u7565\uff0c\u8868\u793a\u786e\u5b9e\u8be5\u88ab\u79fb\u51fa\u6ed1\u52a8\u7a97\u53e3 class Solution: def maxSlidingWindow(self, nums, k): \"\"\" :type nums: List[int] :type k: int :rtype: List[int] \"\"\" # \u5173\u952e\uff1a\u5982\u679c\u540e\u8fdb\u6765\u4e00\u4e2a\u6570\uff0c\u524d\u9762\u7684\u5143\u7d20\u6bd4\u5b83\u5c0f # \u90a3\u4e48\u524d\u9762\u7684\u5143\u7d20\u5c31\u6c38\u8fdc\u4e0d\u53ef\u80fd\u662f\"\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\" l = len(nums) if l == 0 or k <= 0: return [] res = [] window = [] for i in range(l): # \u8003\u8651\u4ec0\u4e48\u65f6\u5019\uff0c\u8981\u628a\u6700\u5927\u79fb\u9664 # \u5de6\u8fb9\u754c\u5212\u51fa\u7684\u65f6\u5019\uff0c\u5e94\u8be5\u662f window.pop(0) # [0,1,2,3,4] # [ i] # window[0] == i - k \u8fd9\u4e2a\u6761\u4ef6\u7279\u522b\u5bb9\u6613\u5ffd\u7565 if i >= k and window[0] == i - k: window.pop(0) # \u8003\u8651\u628a\u4e0d\u53ef\u80fd\u662f\u6700\u5927\u7684\u5143\u7d20\u5168\u90e8 kill \u6389 while window and nums[i] >= nums[window[-1]]: window.pop() # \u4e0d\u7ba1\u600e\u4e48\u7740\u90fd\u52a0\u5f53\u524d\u7684\u7d22\u5f15 window.append(i) # \u4ec0\u4e48\u65f6\u5019\u6709\u6ed1\u52a8\u7a97\u53e3\u5462\uff1f if i >= k - 1: res.append(nums[window[0]]) return res if __name__ == '__main__': nums = [1, 3, -1, -3, 5, 3, 6, 7] k = 3 solution = Solution() result = solution.maxSlidingWindow(nums, k) print(result) \u7b2c 60 \u9898\uff1a$n$ \u4e2a\u9ab0\u5b50\u7684\u70b9\u6570\uff08\u5178\u578b\u52a8\u6001\u89c4\u5212\u95ee\u9898\uff09 \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u9ab0\u5b50\u7684\u70b9\u6570 \u3002 \u5c06\u4e00\u4e2a\u9ab0\u5b50\u6295\u63b7 $n$ \u6b21\uff0c\u83b7\u5f97\u7684\u603b\u70b9\u6570\u4e3a $s$ \uff0c$s$ \u7684\u53ef\u80fd\u8303\u56f4\u4e3a $n$ ~ $6n$\u3002 \u63b7\u51fa\u67d0\u4e00\u70b9\u6570\uff0c\u53ef\u80fd\u6709\u591a\u79cd\u63b7\u6cd5\uff0c\u4f8b\u5982\u6295\u63b7 $2$ \u6b21\uff0c\u63b7\u51fa $3$ \u70b9\uff0c\u5171\u6709 $[1,2]$\uff0c$[2,1]$ \u4e24\u79cd\u63b7\u6cd5\u3002 \u8bf7\u6c42\u51fa\u6295\u63b7 $n$ \u6b21\uff0c\u63b7\u51fa $n$ ~ $6n$ \u70b9\u5206\u522b\u6709\u591a\u5c11\u79cd\u63b7\u6cd5\u3002 \u6837\u4f8b1\uff1a \u8f93\u5165\uff1a n=1 \u8f93\u51fa\uff1a [1, 1, 1, 1, 1, 1] \u89e3\u91ca\uff1a\u6295\u63b7 1 \u6b21\uff0c\u53ef\u80fd\u51fa\u73b0\u7684\u70b9\u6570\u4e3a 1-6 \uff0c\u5171\u8ba1 6 \u79cd\u3002\u6bcf\u79cd\u70b9\u6570\u90fd\u53ea\u6709 1 \u79cd\u63b7\u6cd5\u3002\u6240\u4ee5\u8f93\u51fa [1, 1, 1, 1, 1, 1] \u3002 \u6837\u4f8b2\uff1a \u8f93\u5165\uff1an=2 \u8f93\u51fa\uff1a [1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1] \u89e3\u91ca\uff1a\u6295\u63b7 2 \u6b21\uff0c\u53ef\u80fd\u51fa\u73b0\u7684\u70b9\u6570\u4e3a 2-12\uff0c\u5171\u8ba1 11 \u79cd\u3002\u6bcf\u79cd\u70b9\u6570\u53ef\u80fd\u63b7\u6cd5\u6570\u76ee\u5206\u522b\u4e3a 1,2,3,4,5,6,5,4,3,2,1 \u3002\u6240\u4ee5\u8f93\u51fa [1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1] \u3002 \u601d\u8def\uff1a\u5178\u578b\u52a8\u6001\u89c4\u5212\u95ee\u9898\u3002\u5b9a\u4e49\u72b6\u6001 dp[i][j] \u8868\u793a\u7528 i \u4e2a\u9ab0\u5b50\u6254\u51fa\u548c\u4e3a j \u7684\u53ef\u80fd\u6570\uff0c\u56e0\u4e3a\u7b2c i \u4e2a\u9ab0\u5b50\u53ef\u80fd\u6254\u51fa 1-6 \u7684\u70b9\u6570\u3002\u6839\u636e\u6b64\u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a $$ dp[i][j]=dp[i-1][j-1]+dp[i-1][j-2]+dp[i-1][j-3]+dp[i-1][j-4]+dp[i-1][j-5]+dp[i-1][j-6] $$ \u7531\u4e8e\u6211\u4eec\u53ea\u9700\u8981\u7528\u5230\u6700\u540e\u4e00\u6b21\u7684\u7ed3\u679c\uff0c\u56e0\u6b64\u4e3a\u4e86\u8282\u7701\u7a7a\u95f4\u53ef\u4ee5\u4f7f\u7528\u6eda\u52a8\u6570\u7ec4\uff0c\u5c06\u4e8c\u7ef4 dp \u6570\u7ec4\u53d8\u4e3a\u4e00\u7ef4\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a$O(n^2)$\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def numberOfDice(self, n): \"\"\" :type n: int :rtype: List[int] \"\"\" dp = [0 for _ in range(6 * n + 1)] # \u52a8\u5f52\u6570\u7ec4\u521d\u59cb\u503c\uff0c\u8868\u793a 1 \u4e2a\u9ab0\u5b50\u6254\u51fa 1-6 \u7684\u53ef\u80fd\u6570\u90fd\u4e3a 1 for i in range(1, 7): dp[i] = 1 # \u8868\u793a\u4ecd\u7b2c 2 \u4e2a\u9ab0\u5b50\u5230\u7b2c n \u4e2a\u9ab0\u5b50 for i in range(2, n + 1): # \u4ece\u540e\u5411\u524d\u5199 for j in range(6 * i, -1, -1): dp[j] = 0 # \u6700\u540e\u4e00\u4e2a\u9ab0\u5b50\u53ef\u4ee5\u6254 1 - 6 \u70b9 for k in range(6, 0, -1): if j - k < 0: continue dp[j] += dp[j - k] # \u6254 n \u4e2a\u9ab0\u5b50\u7684\u548c\u4e3a [n, 6 * n] return dp[n:] \u4f5c\u8005\uff1acornerCao \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/acwing/content/852/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \uff08\u672c\u8282\u5b8c\uff09","title":"\u7b2c 12.5 \u8282 N \u7687\u540e\u95ee\u9898"},{"location":"51-60/#125-n","text":"\u300c\u56de\u6eaf\u7b97\u6cd5\u300d\u662f\u904d\u5386\uff08\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff09\u7b97\u6cd5\uff0c\u914d\u5408\u9002\u5f53\u7684\u300c\u526a\u679d\u300d\u6280\u5de7\uff0c\u53ef\u4ee5\u7528\u4e8e \u641c\u7d22 \u7b26\u5408\u8981\u6c42\u7684\u6240\u6709\u7684\u89e3\u3002 \u4e4b\u6240\u4ee5\u8fd9\u4e2a\u7b97\u6cd5\u4e2d\u6709\u300c\u56de\u6eaf\u300d\u8fd9\u4e2a\u8bcd\uff0c\u662f\u7531\u4e8e\u300c\u56de\u6eaf\u7b97\u6cd5\u300d\u4f7f\u7528\u4e00\u4efd\u72b6\u6001\u53d8\u91cf\u53bb\u641c\u7d22\u6574\u4e2a\u300c\u72b6\u6001\u7a7a\u95f4\u300d\uff0c\u5728\u641c\u7d22\uff08\u6216\u8005\u8bf4\u904d\u5386\uff09\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e00\u6b65\u7684 \u5c1d\u8bd5 \u548c \u56de\u9000 \u4ee3\u4ef7\u8f83\u5c0f\u3002\u56e0\u6b64\u300c\u56de\u6eaf\u7b97\u6cd5\u300d\u5f88\u591a\u65f6\u5019\u80fd\u591f\u5e2e\u52a9\u6211\u4eec\u89e3\u51b3\u4e00\u4e9b\u6e38\u620f\u7c7b\u7684\u95ee\u9898\uff0c\u8fd9\u662f\u56e0\u4e3a\u6709\u4e9b\u6e38\u620f\u7c7b\u95ee\u9898\u5728\u4eba\u8111\u770b\u6765\u300c\u72b6\u6001\u7a7a\u95f4\u300d\u5f88\u5927\uff0c\u4f46\u662f\u5bf9\u4e8e\u8ba1\u7b97\u673a\u6765\u8bf4\uff0c\u8ba1\u7b97\u673a\u662f\u64c5\u957f\u8ba1\u7b97\u7684\uff0c\u53ef\u4ee5\u7528\u4e8e\u5b8c\u6210\u4e00\u4e9b \u9002\u5f53\u89c4\u6a21 \u7684\u95ee\u9898\u3002 \u53ef\u4ee5\u8ba4\u4e3a\u300c\u56de\u6eaf\u7b97\u6cd5\u300d\u662f\u65e9\u671f\u7684\u4eba\u5de5\u667a\u80fd\u7b97\u6cd5\uff0c\u6709\u4e00\u4e9b\u6559\u7a0b\u4e0a\u79f0\u300c\u56de\u6eaf\u7b97\u6cd5\u300d\u4e3a\u300c\u66b4\u529b\u641c\u7d22\u300d\u4e5f\u6b63\u662f\u57fa\u4e8e\u300c\u56de\u6eaf\u7b97\u6cd5\u300d \u56e0\u4e3a\u4eba\u8111\u662f\u5f88\u96be\u7a77\u4e3e\u5b8c\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7f16\u7a0b\uff0c\u5e2e\u52a9\u6211\u4eec\u73a9\u597d\u4e00\u4e9b\u6e38\u620f\u3002\u56e0\u6b64\u5728\u4e00\u4e9b\u4eba\u5de5\u667a\u80fd\u7684\u4e66\u7c4d\u4e0a\uff0c\u5f88\u591a\u65f6\u5019\u4f1a\u5148\u4ecb\u7ecd\u56de\u6eaf\u7b97\u6cd5\uff0c\u56de\u6eaf\u7b97\u6cd5\u662f\u65e9\u671f\u7684\u4eba\u5de5\u667a\u80fd\u3002 n \u7687\u540e\u95ee\u9898\u7814\u7a76\u7684\u662f\u5982\u4f55\u5c06 n \u4e2a\u7687\u540e\u653e\u7f6e\u5728 n \u00d7 n \u7684\u68cb\u76d8\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7687\u540e\u5f7c\u6b64\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u3002 \u4e0a\u56fe\u4e3a 8 \u7687\u540e\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u6cd5\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n\uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u540c\u7684 n \u7687\u540e\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u6bcf\u4e00\u79cd\u89e3\u6cd5\u5305\u542b\u4e00\u4e2a\u660e\u786e\u7684 n \u7687\u540e\u95ee\u9898\u7684\u68cb\u5b50\u653e\u7f6e\u65b9\u6848\uff0c\u8be5\u65b9\u6848\u4e2d 'Q' \u548c '.' \u5206\u522b\u4ee3\u8868\u4e86\u7687\u540e\u548c\u7a7a\u4f4d\u3002 \u8f93\u5165: 4 \u8f93\u51fa: [ [\".Q..\", // \u89e3\u6cd5 1 \"...Q\", \"Q...\", \"..Q.\"], [\"..Q.\", // \u89e3\u6cd5 2 \"Q...\", \"...Q\", \".Q..\"] ] \u89e3\u91ca: 4 \u7687\u540e\u95ee\u9898\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u89e3\u6cd5\u3002 \u5206\u6790 \uff1a\u4ee5 4 \u7687\u540e\u95ee\u9898\u4e3a\u4f8b\uff0c\u5b83\u7684\u300c\u641c\u7d22\u300d\u8fc7\u7a0b\u5982\u4e0b\uff0c\u5927\u5bb6\u5b8c\u5168\u53ef\u4ee5\u5728\u7eb8\u4e0a\u6a21\u62df\u4e0b\u9762\u8fd9\u4e2a\u8fc7\u7a0b\uff1a {:width=500} \u641c\u7d22\u95ee\u9898\u7684\u89e3\u51b3\u7b56\u7565\u662f\u753b\u9012\u5f52\u6811\u3002\u8fd8\u4ee5 4 \u7687\u540e\u95ee\u9898\u4e3a\u4f8b\uff0c\u753b\u51fa\u7684\u9012\u5f52\u6811\u5982\u4e0b\u3002 \u4ee5\u4e0b\u5047\u5b9a\u7ed9\u68cb\u76d8\u7684\u6bcf\u4e00\u884c\u4ece\u5de6\u5230\u53f3\u6807\u8bb0\u4e3a $1$\u3001$2$\u3001$3$\u3001$4$\uff1a {:align=center} \u90a3\u4e48\uff0c\u9012\u5f52\u641c\u7d22\u7684\u8fc7\u7a0b\u53ef\u4ee5\u8868\u793a\u6210\u5982\u4e0b\u9012\u5f52\u6811\uff08\u53ea\u753b\u4e86 2 \u5c42\uff09\uff1a {:width=600} \u8fd9\u5176\u5b9e\u5c31\u662f\u300c\u5168\u6392\u5217\u300d\u95ee\u9898 + \u300c\u526a\u679d\u300d \u3002 \u300c\u526a\u679d\u300d\u7684\u4f9d\u636e\u5c31\u662f\u9898\u76ee\u4e2d\u63cf\u8ff0\u7684\u300cN \u7687\u540e\u300d\u95ee\u9898\u7684\u89c4\u5219\uff0c\u6709\u4e86\u4f7f\u7528\u6570\u7ec4 used \uff08\u54c8\u5e0c\u8868\u3001\u4f4d\u56fe\uff09\u7684\u7ecf\u9a8c\uff0c\u6211\u4eec\u53ef\u4ee5\u591a\u8bbe\u7f6e\u4e00\u4e9b\u300c\u72b6\u6001\u300d\uff0c\u4e0b\u9762\u4f9d\u6b21\u8fdb\u884c\u5206\u6790\uff1a \u7531\u4e8e\u662f\u4e00\u884c\u4e00\u884c\u6446\u653e\uff0c\u56e0\u6b64\u8fd9\u4e9b\u300c\u7687\u540e\u300d\u4e00\u5b9a\u4e0d\u5728\u540c\u4e00\u884c\uff0c\u65e0\u9700\u989d\u5916\u8bbe\u7f6e\u72b6\u6001\uff1b \u4e3a\u4e86\u4fdd\u8bc1\u4e0d\u518d\u540c\u4e00\u5217\uff0c\u5373\u4e0d\u80fd\u51fa\u73b0 [2, 2, 1, 3] \u8fd9\u79cd\u60c5\u51b5\uff0c\u7b2c 46 \u7684\u6570\u7ec4 used \uff08\u54c8\u5e0c\u8868\u3001\u4f4d\u56fe\uff09\u5c31\u662f\u8fd9\u6837\u7684\u300c\u72b6\u6001\u300d \u53d8\u91cf\uff1b \u4e3a\u4e86\u4fdd\u8bc1\u81f3\u5c11\u4e24\u4e2a\u7687\u540e\u4e0d\u540c\u65f6\u51fa\u73b0\u5728\u4e3b\u5bf9\u89d2\u7ebf\u6216\u8005\u526f\u5bf9\u89d2\u7ebf\uff0c\u6211\u4eec\u7684\u7b56\u7565\u662f\uff0c\u53ea\u8981\u300c\u68c0\u6d4b\u300d\u5230\u65b0\u6446\u653e\u7684\u300c\u7687\u540e\u300d\u4e0e\u5df2\u7ecf\u6446\u653e\u597d\u7684\u300c\u7687\u540e\u300d\u51b2\u7a81\uff0c\u5c31\u5c1d\u8bd5\u6446\u653e\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5728\u300c\u65e0\u5904\u5b89\u653e\u300d\u7684\u65f6\u5019\u300c\u526a\u679d\u300d\u3002 \u4e0b\u9762\u6211\u4eec\u7814\u7a76\u4e00\u4e0b\u4e3b\u5bf9\u89d2\u7ebf\u6216\u8005\u526f\u5bf9\u89d2\u7ebf\u4e0a\u7684\u5143\u7d20\u6709\u4ec0\u4e48\u7279\u6027\u3002\u6211\u4eec\u6b64\u65f6\u80fd\u638c\u63e1\u7684\u4fe1\u606f\u53ea\u6709\u884c\u548c\u5217\u7684\u7d22\u5f15\uff0c\u4e0d\u59a8\u5c06\u5b83\u6807\u6ce8\u5728\u68cb\u76d8\u4e0a\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u6570\u7ec4 used \u90a3\u6837\uff0c\u518d\u4e3a\u300c\u4e3b\u5bf9\u89d2\u7ebf\u300d\u548c\u300c\u526f\u5bf9\u89d2\u7ebf\u300d\u8bbe\u7f6e\u76f8\u5e94\u7684\u6570\u7ec4\u53d8\u91cf\uff0c\u53ea\u8981\u6392\u5b9a\u4e00\u4e2a\u300c\u7687\u540e\u300d\u7684\u4f4d\u7f6e\uff0c\u5c31\u76f8\u5e94\u4f4e\u5360\u4f4f\u76f8\u5e94\u7684\u4f4d\u7f6e\uff1b \u56e0\u4e3a\u4f4d\u7f6e\u6709\u9650\uff0c\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\uff0c\u4e0d\u8fc7\u6211\u4e2a\u4eba\u5148\u4f7f\u7528\u7684\u54c8\u5e0c\u8868\uff0c\u539f\u56e0\u662f\u526f\u5bf9\u89d2\u90a3\u91cc\u4f7f\u7528\u6570\u7ec4\u7684\u8bdd\u8fd8\u8981\u8ba1\u7b97\u4e00\u4e2a\u504f\u5dee\uff0c\u53e6\u5916\uff0c\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570\u4e5f\u8981\u5f52\u7eb3\u5f97\u5230\uff0c\u56e0\u6b64\uff0c\u4f7f\u7528\u54c8\u5e0c\u8868\u8868\u793a\u300c\u72b6\u6001\u300d\uff0c\u6211\u8ba4\u4e3a\u5728\u7f16\u7801\u4e0a\u662f\u6bd4\u8f83\u7b80\u6d01\u7684\uff1b \u5199\u5bf9\u4e86\u300c\u54c8\u5e0c\u8868\u300d\u4ee5\u540e\uff0c\u8bf4\u660e\u6211\u4eec\u7684\u601d\u8def\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c\u7136\u540e\u518d\u5199\u300c\u6570\u7ec4\u300d\u4f5c\u4e3a\u72b6\u6001\uff0c\u6700\u540e\u5199\u300c\u4f4d\u56fe\u300d\u4f5c\u4e3a\u300c\u72b6\u6001\u300d \u3002 \u5f97\u5230\u4e00\u4e2a\u7b26\u5408\u8981\u6c42\u7684 \u300c\u5168\u6392\u5217\u300d\u4ee5\u540e\uff0c\u751f\u6210\u68cb\u76d8\u7684\u4ee3\u7801\u5c31\u5f88\u7b80\u5355\u4e86\u3002 \u53c2\u8003\u4ee3\u7801 \uff1a\u4f7f\u7528\u54c8\u5e0c\u8868\u5206\u522b\u8bb0\u5f55\u300c\u5217\u5360\u7528\u60c5\u51b5\u300d \u3001 \u300c\u4e3b\u5bf9\u89d2\u7ebf\u5360\u7528\u60c5\u51b5\u300d \u3001 \u300c\u526f\u5bf9\u89d2\u7ebf\u5360\u7528\u60c5\u51b5\u300d\u3002 Java \u4ee3\u7801\uff1a import java.util.ArrayDeque; import java.util.ArrayList; import java.util.Deque; import java.util.List; public class Solution { private int n; private boolean[] col; private boolean[] main; private boolean[] sub; private List<List<String>> res; public List<List<String>> solveNQueens(int n) { res = new ArrayList<>(); if (n == 0) { return res; } this.n = n; col = new boolean[n]; main = new boolean[2 * n - 1]; sub = new boolean[2 * n - 1]; Deque<Integer> path = new ArrayDeque<>(); dfs(0, path); return res; } private void dfs(int row, Deque<Integer> path) { // \u6df1\u5ea6\u4f18\u5148\u904d\u5386\u5230\u4e0b\u6807\u4e3a n\uff0c\u8868\u793a [0.. n - 1] \u5df2\u7ecf\u586b\u5b8c\uff0c\u5f97\u5230\u4e86\u4e00\u4e2a\u7ed3\u679c\u96c6 if (row == n) { List<String> board = convert2board(path); res.add(board); return; } // \u9488\u5bf9\u4e0b\u6807\u4e3a row \u7684\u6bcf\u4e00\u5217\uff0c\u5c1d\u8bd5\u662f\u5426\u53ef\u4ee5\u653e\u7f6e for (int i = 0; i < n; i++) { if (!col[i] && !main[row + i] && !sub[row - i + n - 1]) { path.addLast(i); col[i] = true; main[row + i] = true; sub[row - i + n - 1] = true; dfs(row + 1, path); sub[row - i + n - 1] = false; main[row + i] = false; col[i] = false; path.removeLast(); } } } private List<String> convert2board(Deque<Integer> path) { List<String> board = new ArrayList<>(); for (Integer num : path) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append(\".\".repeat(Math.max(0, n))); stringBuilder.replace(num, num + 1, \"Q\"); board.add(stringBuilder.toString()); } return board; } } \u300c\u56de\u6eaf\u95ee\u9898\u300d\u5e94\u7528\u4e8e\u6e38\u620f\uff0c\u4e00\u822c\u90fd\u6bd4\u8f83\u96be\uff0c\u5927\u5bb6\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u5b9e\u9645\u60c5\u51b5\u914c\u60c5\u9009\u62e9\u76f8\u5173\u7684\u7ec3\u4e60\u6765\u505a\u3002","title":"\u7b2c 12.5 \u8282 N \u7687\u540e\u95ee\u9898"},{"location":"51-60/#_1","text":"\u5b8c\u6210\u300c\u529b\u6263\u300d\u7b2c 52 \u9898\uff1a N\u7687\u540e II \uff1b \u5b8c\u6210\u300c\u529b\u6263\u300d\u7b2c 1307 \u9898\uff1a \u53e3\u7b97\u96be\u9898 \uff1b \u5b8c\u6210\u300c\u529b\u6263\u300d24 \u70b9 51-60","title":"\u7ec3\u4e60"},{"location":"51-60/#offer-2-python-51-60","text":"","title":"\u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09 \u9898\u89e3\uff08Python \u8bed\u8a00\u5b9e\u73b0\uff09\u7b2c 51-60 \u9898"},{"location":"51-60/#51","text":"\u4f20\u9001\u95e8\uff1a \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5728\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6570\u5b57\u5982\u679c\u524d\u9762\u4e00\u4e2a\u6570\u5b57\u5927\u4e8e\u540e\u9762\u7684\u6570\u5b57\uff0c\u5219\u8fd9\u4e24\u4e2a\u6570\u5b57\u7ec4\u6210\u4e00\u4e2a\u9006\u5e8f\u5bf9\u3002 \u8f93\u5165\u4e00\u4e2a\u6570\u7ec4\uff0c\u6c42\u51fa\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9\u7684\u603b\u6570\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,3,4,5,6,0] \u8f93\u51fa\uff1a6 \u4e13\u95e8\u6574\u7406\u6210\u6587\u7ae0\u30021\u3001\u7528\u5f52\u5e76\u6392\u5e8f\uff1b2\u3001\u7528 BST\u3002\u5982\u4f55\u8bb0\u5f55\u5de6\u5b50\u6811\u4e2d\u7ed3\u70b9\u7684\u4e2a\u6570\u3002 \u601d\u8def1\uff1a\u9996\u5148\u6211\u4eec\u5e94\u8be5\u60f3\u5230\uff0c\u4f7f\u7528\u5b9a\u4e49\u8ba1\u7b97\u9006\u5e8f\u6570\u3002\u4e0d\u8fc7\u65f6\u95f4\u590d\u6742\u5ea6\u662f\uff1a$O(n^2)$\u3002 class Solution(object): def inversePairs(self, nums): l = len(nums) if l < 2: return 0 res = 0 for i in range(0, l - 1): for j in range(i + 1, l): if nums[i] > nums[j]: res += 1 return res \u8fd9\u79cd\u601d\u8def\u867d\u7136\u5f88\u76f4\u63a5\uff0c\u4f46\u7f16\u5199\u51fa\u9519\u7684\u6982\u7387\u5c31\u5f88\u4f4e\u4e86\uff0c\u5728\u6ca1\u6709\u5728\u7ebf\u8bc4\u6d4b\u7cfb\u7edf\u7684\u65f6\u5019\uff0c\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u201c\u6b63\u786e\u7684\u201d\u53c2\u8003\u7b54\u6848\uff0c\u7528\u4ee5\u68c0\u9a8c\u6211\u4eec\u81ea\u5df1\u7f16\u5199\u7684\u7b97\u6cd5\u662f\u5426\u6b63\u786e\u3002 \u601d\u8def2\uff1a\u501f\u52a9\u5f52\u5e76\u6392\u5e8f\u7684\u5206\u6cbb\u601d\u60f3\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\log n)$\u3002 \u5206\u6790\uff1a\u4f8b\u5982\uff1a\u524d\u6709\u5e8f\u6570\u7ec4\uff1a$[2,3,5,8]$\uff0c\u540e\u6709\u5e8f\u6570\u7ec4\uff1a$[4,6,7,12]$\u3002 \u505a\u5f52\u5e76\u7684\u65f6\u5019\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a \u7b2c 1 \u6b65\uff0c$2$ \u5148\u51fa\u5217\uff0c$2$ \u6bd4\u201c\u540e\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u7684\u5143\u7d20\u90fd\u5c0f\uff0c\u6784\u6210\u201c\u987a\u5e8f\u5bf9\u201d\uff1b \u7b2c 2 \u6b65\uff0c$3$ \u51fa\u5217\uff0c$3$ \u6bd4\u201c\u540e\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u7684\u5143\u7d20\u90fd\u5c0f\uff0c\u6784\u6210\u201c\u987a\u5e8f\u5bf9\u201d\uff1b \u7b2c 3 \u6b65\uff0c$4$ \u51fa\u5217\uff0c\u5173\u952e\u7684\u5730\u65b9\u5728\u8fd9\u91cc\uff0c \u201c\u524d\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u5269\u4e0b\u7684\u5143\u7d20 $[5,8]$ \u6bd4 $4$ \u90fd\u5927\uff0c\u6784\u6210 $2$ \u4e2a \u201c\u9006\u5e8f\u5bf9\u201d \uff1b \u7b2c 4 \u6b65\uff0c$5$ \u51fa\u5217\uff0c$5$ \u6bd4\u201c\u540e\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u5269\u4e0b\u7684\u5143\u7d20\u90fd\u5c0f\uff0c\u6784\u6210\u201c\u987a\u5e8f\u5bf9\u201d\uff1b \u7b2c 5 \u6b65\uff0c$6$ \u51fa\u5217\uff0c \u201c\u524d\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u5269\u4e0b\u7684\u5143\u7d20 $[8]$ \u6bd4 $6$ \u90fd\u5927\uff0c\u6784\u6210 $1$ \u4e2a\u201c\u9006\u5e8f\u5bf9\u201d \uff1b \u7b2c 6 \u6b65\uff0c$7$ \u51fa\u5217\uff0c \u201c\u524d\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u5269\u4e0b\u7684\u5143\u7d20 $[8]$ \u6bd4 $7$ \u90fd\u5927\uff0c\u6784\u6210 $1$ \u4e2a\u201c\u9006\u5e8f\u5bf9\u201d \uff1b \u7b2c 7 \u6b65\uff0c$8$ \u51fa\u5217\uff0c$8$ \u6bd4\u201c\u540e\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u5269\u4e0b\u7684\u5143\u7d20 $[8]$ \u90fd\u5c0f\uff0c\u6784\u6210 $1$ \u4e2a\u201c\u987a\u5e8f\u5bf9\u201d\uff1b \u7b2c 8 \u6b65\uff0c$12$ \u51fa\u5217\uff0c\u6b64\u65f6\u201c\u524d\u6709\u5e8f\u6570\u7ec4\u201d\u4e3a\u7a7a\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u201c\u524d\u6709\u5e8f\u6570\u7ec4\u201d\u975e\u7a7a\uff0c\u4e14\u201c\u540e\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6709\u5143\u7d20\u51fa\u5217\u7684\u65f6\u5019\uff0c\u5373\u4e0a\u9762\u7684\u7b2c 3\u30015\u30016 \u6b65\u8ba1\u7b97\u201c\u9006\u5e8f\u5bf9\u201d\u5c31\u53ef\u4ee5\u4e86\u3002 \u53c2\u8003\u4ee3\u7801\uff1a Python \u4ee3\u7801\uff1a class Solution(object): def inversePairs1(self, nums): l = len(nums) if l < 2: return 0 res = 0 for i in range(0, l - 1): for j in range(i + 1, l): if nums[i] > nums[j]: res += 1 return res def inversePairs(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" l = len(nums) if l < 2: return 0 temp = [0 for _ in range(l)] return self.count_inversion_pairs(nums, 0, l - 1, temp) def count_inversion_pairs(self, nums, l, r, temp): \"\"\" \u5728\u6570\u7ec4 nums \u7684\u533a\u95f4 [l,r] \u7edf\u8ba1\u9006\u5e8f\u5bf9 :param nums: :param l: \u5f85\u7edf\u8ba1\u6570\u7ec4\u7684\u5de6\u8fb9\u754c\uff0c\u53ef\u4ee5\u53d6\u5230 :param r: \u5f85\u7edf\u8ba1\u6570\u7ec4\u7684\u53f3\u8fb9\u754c\uff0c\u53ef\u4ee5\u53d6\u5230 :param temp: :return: \"\"\" # \u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u5c31\u662f\u53ea\u6709 1 \u4e2a\u5143\u7d20\u7684\u65f6\u5019 if l == r: return 0 mid = l + (r - l) // 2 left_pairs = self.count_inversion_pairs(nums, l, mid, temp) right_pairs = self.count_inversion_pairs(nums, mid + 1, r, temp) merge_pairs = 0 # \u4ee3\u7801\u8d70\u5230\u8fd9\u91cc\u7684\u65f6\u5019\uff0c # [l, mid] \u5df2\u7ecf\u5b8c\u6210\u4e86\u6392\u5e8f\u5e76\u4e14\u8ba1\u7b97\u597d\u9006\u5e8f\u5bf9 # [mid + 1, r] \u5df2\u7ecf\u5b8c\u6210\u4e86\u6392\u5e8f\u5e76\u4e14\u8ba1\u7b97\u597d\u9006\u5e8f\u5bf9 # \u5982\u679c nums[mid] <= nums[mid + 1]\uff0c\u6b64\u65f6\u5c31\u4e0d\u5b58\u5728\u9006\u5e8f\u5bf9 # \u5f53 nums[mid] > nums[mid + 1] \u7684\u65f6\u5019\uff0c\u5c31\u8981\u7ee7\u7eed\u8ba1\u7b97\u9006\u5e8f\u5bf9 if nums[mid] > nums[mid + 1]: # \u5728\u5f52\u5e76\u7684\u8fc7\u7a0b\u4e2d\u8ba1\u7b97\u9006\u5e8f\u5bf9 merge_pairs = self.merge_and_count(nums, l, mid, r, temp) # \u8d70\u5230\u8fd9\u91cc\u6709 nums[mid] <= nums[mid + 1] \u6210\u7acb\uff0c\u5df2\u7ecf\u662f\u987a\u5e8f\u7ed3\u6784 return left_pairs + right_pairs + merge_pairs def merge_and_count(self, nums, l, mid, r, temp): \"\"\" \u524d\uff1a[2,3,5,8]\uff0c\u540e\uff1a[4,6,7,12] \u6211\u4eec\u53ea\u9700\u8981\u5728\u540e\u9762\u6570\u7ec4\u5143\u7d20\u51fa\u5217\u7684\u65f6\u5019\uff0c\u6570\u4e00\u6570\u524d\u9762\u8fd9\u4e2a\u6570\u7ec4\u8fd8\u5269\u4e0b\u591a\u5c11\u4e2a\u6570\u5b57\uff0c \u56e0\u4e3a\"\u524d\"\u6570\u7ec4\u548c\"\u540e\"\u6570\u7ec4\u90fd\u6709\u5e8f\uff0c \u56e0\u6b64\uff0c\"\u524d\"\u6570\u7ec4\u5269\u4e0b\u7684\u5143\u7d20\u4e2a\u6570 mid - i + 1 \u5c31\u662f\u4e0e\"\u540e\"\u6570\u7ec4\u5143\u7d20\u51fa\u5217\u7684\u8fd9\u4e2a\u5143\u7d20\u6784\u6210\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570 \"\"\" for i in range(l, r + 1): temp[i] = nums[i] i = l j = mid + 1 res = 0 for k in range(l, r + 1): if i > mid: nums[k] = temp[j] j += 1 elif j > r: nums[k] = temp[i] i += 1 elif temp[i] <= temp[j]: # \u4e0d\u7edf\u8ba1\u9006\u5e8f\u5bf9\uff0c\u53ea\u505a\u6392\u5e8f nums[k] = temp[i] i += 1 else: assert temp[i] > temp[j] nums[k] = temp[j] j += 1 # \u5feb\u5c31\u5feb\u5728\u8fd9\u91cc\uff0c\u4e00\u6b21\u53ef\u4ee5\u6570\u51fa\u4e00\u4e2a\u533a\u95f4\u7684\u4e2a\u6570\u7684\u9006\u5e8f\u5bf9 # \u4f8b\uff1a[7,8,9][4,6,9]\uff0c4 \u4e0e 7 \u4ee5\u53ca 7 \u524d\u9762\u6240\u6709\u7684\u6570\u90fd\u6784\u6210\u9006\u5e8f\u5bf9 res += (mid - i + 1) return res \u8bf4\u660e\uff1a\u5f52\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8981\u501f\u52a9\u989d\u5916\u7684\u8f85\u52a9\u7a7a\u95f4\uff0c\u4e3a\u6b64\u53ef\u4ee5\u5168\u5c40\u4f7f\u7528\u4e00\u4e2a\u548c\u539f\u59cb\u6570\u7ec4\u7b49\u957f\u7684\u8f85\u52a9\u6570\u7ec4\uff0c\u5426\u5219\u6bcf\u4e00\u6b21\u8fdb\u5165 merge \u51fd\u6570\u90fd\u8981 new \u65b0\u6570\u7ec4\uff0c\u5f00\u9500\u5f88\u5927\u3002 \u4e0a\u8ff0\u89e3\u6cd5\u7684\u7f3a\u70b9\u662f\u4fee\u6539\u4e86\u539f\u59cb\u6570\u7ec4\uff0c\u6392\u5e8f\u5b8c\u6210\u4ee5\u540e\uff0c\u9006\u5e8f\u6570\u5c31\u8ba1\u7b97\u51fa\u6765\u4e86\u3002\u4e3a\u6b64\uff1a\uff081\uff09\u6211\u4eec\u53ef\u4ee5\u5f15\u5165\u4e00\u4e2a\u7d22\u5f15\u6570\u7ec4\uff1b\uff082\uff09\u6216\u8005\u76f4\u63a5\u62f7\u8d1d\u4e00\u4e2a\u539f\u59cb\u6570\u7ec4\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u4fee\u6539\u539f\u59cb\u6570\u7ec4\u4e86\u3002","title":"\u7b2c 51 \u9898\uff1a\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9"},{"location":"51-60/#52","text":"\u4f20\u9001\u95e8\uff1a \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e24\u4e2a\u94fe\u8868\uff0c\u627e\u51fa\u5b83\u4eec\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9\u3002 \u6837\u4f8b\uff1a \u7ed9\u51fa\u4e24\u4e2a\u94fe\u8868\u5982\u4e0b\u6240\u793a\uff1a A\uff1a a1 \u2192 a2 \u2198 c1 \u2192 c2 \u2192 c3 \u2197 B\uff1ab1 \u2192 b2 \u2192 b3 \u8f93\u51fa\u7b2c\u4e00\u4e2a\u516c\u5171\u8282\u70b9 c1\u3002 \u601d\u8def1\uff1a\u4e24\u4e2a\u94fe\u8868\u5982\u679c\u6709\u76f8\u540c\u8d77\u70b9\u7684\u8bdd\u5c31\u597d\u529e\u4e86\uff0c\u6240\u4ee5\u9996\u5148\u8981\u8ba1\u7b97\u51fa\u4e24\u4e2a\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u8fdb\u800c\u8ba1\u7b97\u5b83\u4eec\u7684\u5dee\u503c\u3002 Python \u4ee3\u7801\uff1a class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution(object): def __get_list_node_size(self, root): node = root size = 0 while node: size += 1 node = node.next return size def findFirstCommonNode(self, headA, headB): \"\"\" :type headA, headB: ListNode :rtype: ListNode \"\"\" if headA is None or headB is None: return None s1 = self.__get_list_node_size(headA) s2 = self.__get_list_node_size(headB) # \u6211\u4eec\u9ed8\u8ba4 l1 >= l2 h1 = headA h2 = headB if s2 > s1: # \u5982\u679c B \u957f\u5ea6\u66f4\u957f\uff0c\u628a\u4e8c\u8005\u4ea4\u6362 h1 = headB h2 = headA # \u73b0\u5728 h1 \u4e0a\u8d70 (s1 - s2) \u8fd9\u4e48\u591a\u957f\u5ea6 for _ in range(abs(s1 - s2)): h1 = h1.next # \u7136\u540e\u9f50\u5934\u5e76\u8fdb while h1 and h2 and h1.val != h2.val: h1 = h1.next h2 = h2.next # \u8d70\u5230\u8fd9\u91cc\uff0c\u5982\u679c\u662f\u56e0\u4e3a h1 \u548c h2 \u90fd\u7a7a\u4e86\uff0c\u8fd4\u56de Node if h1 is None and h2 is None: return None else: return h1 Java \u4ee3\u7801\uff1a class ListNode { int val; ListNode next; public ListNode(int val) { this.val = val; } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } // \u7b2c 52 \u9898\uff1a\u4e24\u4e2a\u94fe\u8868\u7684\u7b2c 1 \u4e2a\u516c\u5171\u8282\u70b9 P253 // \u53c2\u8003\u8d44\u6599\uff1a // 1\u3001https://blog.csdn.net/derrantcm/article/details/46761093 public class Solution { public static ListNode findFirstCommonNode(ListNode pHead1, ListNode pHead2) { ListNode p1 = pHead1; ListNode p2 = pHead2; while (p1 != p2) { p1 = (p1 != null ? p1.next : pHead2); p2 = (p2 != null ? p2.next : pHead1); } return p1; } } \u601d\u8def2\uff1a\u7528\u4e24\u4e2a\u6808\u3002 Python \u4ee3\u7801\uff1a\u5199\u6cd5\u4e0a\u8981\u6ce8\u610f\uff0c\u4e0d\u8981\u60f3\u5f53\u7136 class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution(object): def findFirstCommonNode(self, headA, headB): \"\"\" :type headA, headB: ListNode :rtype: ListNode \"\"\" if headA is None or headB is None: return None stack1 = [] stack2 = [] node1 = headA while node1: stack1.append(node1) node1 = node1.next node2 = headB while node2: stack2.append(node2) node2 = node2.next # \u6ce8\u610f\uff1a\u8fd9\u91cc\u6709\u9677\u9631\uff0c\u4e00\u5b9a\u8981\u5148\u8bbe\u7f6e\u4e00\u4e2a result \u7ed3\u70b9 # \u5982\u679c\u4e24\u4e2a\u94fe\u8868\u6ca1\u6709\u516c\u5171\u5143\u7d20\uff0cres \u4e0d\u4f1a\u88ab\u8d4b\u503c res = None while stack1 and stack2: node1 = stack1.pop() node2 = stack2.pop() if node1.val == node2.val: # \u8fd9\u91cc\u6682\u5b58\u4e00\u4e0b\uff0c\u6700\u540e\u4e00\u4e2a\u76f8\u7b49\u7684\u7ed3\u70b9\u624d\u662f\u6211\u4eec\u6c42\u7684 res = node1 continue if stack1 is None or stack2 is None: return None return res \u601d\u8def3\uff1a\u62fc\u6210\u4e00\u6837\u957f\uff0c\u8fd9\u4e2a\u5199\u6cd5\u8bb0\u4f4f\u5c31\u53ef\u4ee5\u4e86\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def findFirstCommonNode(self, headA, headB): \"\"\" :type headA, headB: ListNode :rtype: ListNode \"\"\" if headA is None or headB is None: return None p1 = headA p2 = headB while p1 != p2: if p1 is None: p1 = headB else: p1 = p1.next if p2 is None: p2 = headA else: p2 = p2.next return p1","title":"\u7b2c 52 \u9898\uff1a\u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9"},{"location":"51-60/#leetcode-160","text":"\u628a\u4e0d\u6574\u9f50\u7684\u5730\u65b9\u8865\u6574\u7406\uff0c\u7b54\u6848\u4e5f\u662f\u56fa\u5b9a\u5199\u6cd5\uff0c\u591a\u5199\u51e0\u904d\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None # \u601d\u8def\uff1a\u4e24\u4e2a\u94fe\u8868\u4e0d\u4e00\u6837\u957f\uff0c\u5c31\u60f3\u529e\u6cd5\u8ba9\u5b83\u4eec\u4e00\u6837\u957f\u3002 class Solution(object): def getIntersectionNode(self, headA, headB): \"\"\" :type head1, head1: ListNode :rtype: ListNode \"\"\" if headA is None or headB is None: return None node1 = headA node2 = headB while node1 != node2: if node1: node1 = node1.next else: node1 = headB if node2: node2 = node2.next else: node2 = headA return node1","title":"LeetCode \u7b2c 160 \u9898\uff1a\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9"},{"location":"51-60/#53","text":"\u4f20\u9001\u95e8\uff1a \u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u3002 \u7edf\u8ba1\u4e00\u4e2a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u4f8b\u5982\u8f93\u5165\u6392\u5e8f\u6570\u7ec4 [1, 2, 3, 3, 3, 3, 4, 5] \u548c\u6570\u5b57 3 \uff0c\u7531\u4e8e 3 \u5728\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u4e86 4 \u6b21\uff0c\u56e0\u6b64\u8f93\u51fa4\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1, 2, 3, 3, 3, 3, 4, 5] , 3 \u8f93\u51fa\uff1a4 \u53c2\u8003\u8d44\u6599\uff1a \u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09\u7b2c 53 \u9898\uff1a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u3002 \u601d\u8def1\uff1a\u5199\u4e00\u4e2a\u4e8c\u5206\u6cd5\uff0c\u4f7f\u7528\u4e8c\u5206\u6cd5\u627e\u5230\u5927\u4e8e\u7b49\u4e8e $k$ \u7684\u7b2c $1$ \u4e2a\u6570\u7684\u4e0b\u6807\uff0c\u518d\u4f7f\u7528\u4e8c\u5206\u6cd5\u627e\u5230\u5927\u4e8e\u7b49\u4e8e $k+1$ \u7684\u7b2c $1$ \u4e2a\u6570\u7684\u4e0b\u6807\uff0c\u4e8c\u8005\u4e4b\u5dee\u5373\u4e3a\u6240\u6c42\u3002\u7279\u522b\u6ce8\u610f\uff0c\u8fd9\u91cc\u662f\u5982\u4f55\u4f7f\u7528\u4e8c\u5206\u6cd5\u7684\u3002 Python \u4ee3\u7801\uff1a class Solution(object): # \u8fd4\u56de\u5927\u4e8e\u7b49\u4e8e target \u7684\u7b2c 1 \u4e2a\u6570 def get_left(self, nums, target): # [2,3,4,5,5,5,5,5,5,5] # [1,1,1,1,1,1,1,1,1,2,3,4,5,5,5,5,5,5,5] if nums[0] == target: return 0 l = 1 r = len(nums) while l < r: mid = l + (r - l) // 2 if nums[mid] < target: l = mid + 1 else: assert nums[mid] >= target # \u4e0d\u80fd\u6392\u9664 mid r = mid return l def getNumberOfK(self, nums, k): \"\"\" :type nums: list[int] :type k: int :rtype: int \"\"\" size = len(nums) if size == 0: return 0 return self.get_left(nums, k + 1) - self.get_left(nums, k) \u4e25\u683c\u6309\u7167\u4e8c\u5206\u6cd5\u6a21\u677f\u7684\u8bdd\uff0c\u4ee3\u7801\u8981\u8fd9\u6837\u5199\uff1a Python \u4ee3\u7801\uff1a class Solution(object): def getNumberOfK(self, nums, k): \"\"\" :type nums: list[int] :type k: int :rtype: int \"\"\" size = len(nums) if size == 0: return 0 # \u8bbe\u7f6e\u8f85\u52a9\u51fd\u6570\uff0c\u7ed9\u4e00\u4e2a nums\uff0c\u4e00\u4e2a k\uff0c\u8fd4\u56de\u5927\u4e8e\u7b49\u4e8e k \u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u7d22\u5f15 return self.__helper(nums, k + 1) - self.__helper(nums, k) def __helper(self, nums, k): \"\"\" \u8fd4\u56de\u5927\u4e8e\u7b49\u4e8e k \u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u7d22\u5f15 :param nums: :param k: :return: \"\"\" size = len(nums) if size == 0: return 0 l = 0 # \u6ce8\u610f\uff1a\u8fd9\u91cc\u4e00\u5b9a\u8981\u5199 size r = size - 1 while l < r: mid = l + (r - l) // 2 if nums[mid] >= k: r = mid else: assert nums[mid] < k # [1,2,3,4,5] l = mid + 1 # \u56e0\u4e3a k \u6709\u53ef\u80fd\u4e0d\u5b58\u5728\uff0c\u6240\u4ee5\u4e0d\u4e00\u5b9a\u7b26\u5408\u8981\u6c42\uff0c\u6240\u4ee5\u4e00\u5b9a\u8981\u5355\u72ec\u5224\u65ad\u4e00\u4e0b if nums[l] != k: if nums[size - 1] < k: return size elif nums[0] > k: return 0 return l C++ \u4ee3\u7801\uff1a class Solution { public: int getNumberOfK(vector<int>& nums , int k) { if (nums.empty()) return 0; return helper(nums, k + 1) - helper(nums, k); } int helper(vector<int>& nums, int k){ int l = 0, r = nums.size(); while (l < r){ int m = l + (r - l) / 2; if (nums[m] < k) l = m + 1; else r = m; } return l; } }; \u601d\u8def2\uff1a\u5199\u4e24\u4e2a\u4e8c\u5206\u6cd5\uff0c\u4e00\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4e00\u4e2a\u6570\u6700\u53f3\u8fb9\u7684\u7d22\u5f15 - \u4e00\u4e2a\u6570\u6700\u5de6\u8fb9\u7684\u7d22\u5f15 + 1\u3002 # # 56\u3001\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 # \u7edf\u8ba1\u4e00\u4e2a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002 # # \u4f8b\u5982\u8f93\u5165\u6392\u5e8f\u6570\u7ec4[1, 2, 3, 3, 3, 3, 4, 5]\u548c\u6570\u5b573\uff0c\u7531\u4e8e3\u5728\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u4e864\u6b21\uff0c\u56e0\u6b64\u8f93\u51fa4\u3002 class Solution(object): def getNumberOfK(self, nums, k): \"\"\" :type nums: list[int] :type k: int :rtype: int \"\"\" size = len(nums) if size == 0: return 0 # \u8bbe\u7f6e\u8f85\u52a9\u51fd\u6570\uff0c\u7ed9\u4e00\u4e2a nums\uff0c\u4e00\u4e2a k\uff0c\u8fd4\u56de\u5927\u4e8e\u7b49\u4e8e k \u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u7d22\u5f15 k_right = self.__get_right_k(nums, k) k_left = self.__get_left_k(nums, k) if k_right == -1 or k_left == -1: return 0 return k_right - k_left + 1 def __get_right_k(self, nums, k): # \u627e\u5230\u6700\u53f3\u8fb9\u7684 index \uff0c\u4f7f\u5f97 nums[index] = k size = len(nums) if size == 0: return -1 l = 0 r = size - 1 while l < r: mid = l + (r - l + 1) // 2 if nums[mid] <= k: # [1,2,5,5,5,7] l = mid elif nums[mid] > k: r = mid - 1 if nums[l] != k: return -1 return l def __get_left_k(self, nums, k): # \u627e\u5230\u6700\u5de6\u8fb9\u7684 index \uff0c\u4f7f\u5f97 nums[index] = k size = len(nums) if size == 0: return -1 l = 0 r = size - 1 while l < r: mid = l + (r - l) // 2 if nums[mid] >= k: r = mid else: assert nums[mid] < k l = mid + 1 if nums[l] != k: return -1 return l if __name__ == '__main__': nums = [2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 6, 7, 8, 9, 10] k = 5 solution = Solution() # result = solution.get_left(nums, 5, ) # print(result) result = solution.getNumberOfK(nums, k) print(result)","title":"\u7b2c 53 \u9898\uff1a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \uff08\u4e8c\u5206\u6cd5\u5178\u578b\u95ee\u9898\uff09"},{"location":"51-60/#54-k","text":"\u4f20\u9001\u95e8\uff1a \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2c k \u5927\u7ed3\u70b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u627e\u51fa\u5176\u4e2d\u7684\u7b2c $k$ \u5c0f\u7684\u7ed3\u70b9\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u548c $k$ \u90fd\u5b58\u5728\uff0c\u5e76\u4e14 1\u2264 k \u2264 \u6811\u7684\u603b\u7ed3\u70b9\u6570\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a root = [2, 1, 3, null, null, null, null] \uff0c k = 3 2 / \\ 1 3 \u8f93\u51fa\uff1a3 \u601d\u8def\uff1a\u4f7f\u7528\u6808\u6a21\u62df BST \u7684\u4e2d\u5e8f\u904d\u5386\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def kthNode(self, root, k): \"\"\" :type root: TreeNode :type k: int :rtype: TreeNode \"\"\" if root is None: return None # 1 \u8868\u793a\u9012\u5f52\u5904\u7406\uff0c0 \u8868\u793a\u5f53\u524d\u6211\u5c31\u8981\u5904\u7406\u8fd9\u4e2a\u7ed3\u70b9 stack = [(1, root)] while stack: type, node = stack.pop() if type == 0: k -= 1 if k == 0: return node else: if node.right: stack.append((1, node.right)) stack.append((0, node)) if node.left: stack.append((1, node.left))","title":"\u7b2c 54 \u9898\uff1a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2c $k$ \u5927\u7ed3\u70b9"},{"location":"51-60/#55-1","text":"\u4f20\u9001\u95e8\uff1a \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002\u3002 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u6c42\u8be5\u6811\u7684\u6df1\u5ea6\u3002 \u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u4f9d\u6b21\u7ecf\u8fc7\u7684\u7ed3\u70b9\uff08\u542b\u6839\u3001\u53f6\u7ed3\u70b9\uff09\u5f62\u6210\u6811\u7684\u4e00\u6761\u8def\u5f84\uff0c\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u4e3a\u6811\u7684\u6df1\u5ea6\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\u4e8c\u53c9\u6811 [8, 12, 2, null, null, 6, 4, null, null, null, null] \u5982\u4e0b\u56fe\u6240\u793a\uff1a 8 / \\ 12 2 / \\ 6 4 \u8f93\u51fa\uff1a3 \u601d\u8def\uff1a\u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u3002 Python \u4ee3\u7801\uff1a class Solution: def treeDepth(self, root): \"\"\" :type root: TreeNode :rtype: int \"\"\" if root is None: return 0 queue = [(1, root)] res = 0 while queue: top = queue.pop(0) cur_depth, node = top[0], top[1] res = max(res, cur_depth) if node.left: queue.append((cur_depth + 1, node.left)) if node.right: queue.append((cur_depth + 1, node.right)) return res","title":"\u7b2c 55-1 \u9898\uff1a\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6"},{"location":"51-60/#55-2","text":"\u4f20\u9001\u95e8\uff1a \u5e73\u8861\u4e8c\u53c9\u6811 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u5224\u65ad\u8be5\u6811\u662f\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811\u3002 \u5982\u679c\u67d0\u4e8c\u53c9\u6811\u4e2d\u4efb\u610f\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u7684\u6df1\u5ea6\u76f8\u5dee\u4e0d\u8d85\u8fc7 $1$\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811\u3002 \u6ce8\u610f\uff1a \u89c4\u5b9a\u7a7a\u6811\u4e5f\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\u4e8c\u53c9\u6811 [5,7,11,null,null,12,9,null,null,null,null] \u5982\u4e0b\u6240\u793a\uff0c 5 / \\ 7 11 / \\ 12 9 \u8f93\u51fa\uff1atrue \u601d\u8def\uff1a\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08 \u540e\u5e8f\u904d\u5386 \uff09\u3002 Python \u4ee3\u7801\uff1a # Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution(object): # \u5168\u5c40\u53d8\u91cf flag = 1 def isBalanced(self, root): \"\"\" :type root: TreeNode :rtype: bool \"\"\" if root is None: return True self.__dfs(root) return self.flag def __dfs(self, node): \"\"\" \u8fd4\u56de\u4ee5 root \u4e3a\u6839\u7684\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\uff0c\u5982\u679c\u5de6\u53f3\u5b50\u6811\u5176\u4e2d\u4e4b\u4e00\u4e0d\u662f AVL \uff0c\u5219\u8fd4\u56de -1 :param node: :return: \"\"\" if node is None: return 0 left = self.__dfs(node.left) right = self.__dfs(node.right) if abs(left - right) > 1: self.flag = 0 # \u8fd9\u91cc\u4e0d\u80fd\u5199 return return max(left, right) + 1 Java \u4ee3\u7801\uff1a class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } // \u7b2c 55 \u9898\uff1a\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\uff08\u5224\u65ad\u662f\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff09 // \u53ef\u4ee5\u63d0\u4ea4\u5230 LeetCode \u7b2c 110 \u9898\u7684\u6d4b\u8bd5\u7528\u4f8b // \u53c2\u8003\u8d44\u65991\uff1a // https://blog.csdn.net/derrantcm/article/details/46771529 public class Solution { public boolean isBalanced(TreeNode root) { if (root == null) { return true; } int[] depth = new int[1]; depth[0] = 0; return postOrder(root, depth); } // \u540e\u5e8f\u904d\u5386 private boolean postOrder(TreeNode node, int[] depth) { if (node == null) { depth[0] = 0; return true; } int[] left = new int[1]; int[] right = new int[1]; // \u5982\u679c\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u90fd\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u76f4\u63a5\u5c31\u8d70\u5230\u6700\u540e\uff0c\u8fd4\u56de false if (postOrder(node.left, left) && postOrder(node.right, right)) { int diff = left[0] - right[0]; if (diff <= 1 && diff >= -1) { depth[0] = Integer.max(left[0], right[0]) + 1; return true; } } return false; } }","title":"\u7b2c 55-2 \u9898\uff1a\u5e73\u8861\u4e8c\u53c9\u6811"},{"location":"51-60/#56-1","text":"\u4f20\u9001\u95e8\uff1a \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u4e24\u4e2a\u6570\u5b57 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u4e00\u4e2a\u6574\u578b\u6570\u7ec4\u91cc\u9664\u4e86\u4e24\u4e2a\u6570\u5b57\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e24\u6b21\u3002 \u8bf7\u5199\u7a0b\u5e8f\u627e\u51fa\u8fd9\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u8fd9\u4e24\u4e2a\u6570\u5b57\u4e00\u5b9a\u5b58\u5728\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a$[1,2,3,3,4,4]$ \u8f93\u51fa\uff1a$[1,2]$ \u601d\u8def\uff1a \u6309\u4f4d\u5206\u7ec4 \u3002 Python \u4ee3\u7801\uff1a class Solution(object): def findNumsAppearOnce(self, nums): \"\"\" :type nums: List[int] :rtype: List[int] \"\"\" l = len(nums) if l < 2: raise Exception('\u7a0b\u5e8f\u51fa\u9519') if l == 2: return nums # \u5168\u90e8\u76f8\u4e0e\u4e00\u904d xor = 0 for num in nums: xor ^= num # \u6700\u672b\u5c3e\u7684 1 \u4ece\u53f3\u5411\u5de6\u8fb9\u6570\u5728\u7b2c\u51e0\u4f4d counter = 0 while xor & 1 == 0: xor >>= 1 counter += 1 res = [0, 0] for num in nums: if (num >> counter) & 1 == 1: res[1] ^= num else: res[0] ^= num return res Java \u4ee3\u7801\uff1a import java.util.Arrays; // \u7b2c 56 \u9898\uff1a\u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 P275 // \u53c2\u8003\u8d44\u6599\uff1a // 1\u3001https://blog.csdn.net/derrantcm/article/details/46771717 public class Solution { // \u8003\u5bdf\u4f4d\u8fd0\u7b97\uff1a\u6216\u3001\u4e0e\u3001\u5f02\u6216\u3001\u975e\uff0c\u4ee5\u53ca\u65e0\u7b26\u53f7\u5de6\u79fb >>> public int[] findNumbersAppearanceOnce(int[] nums) { int len = nums.length; int[] res = new int[2]; assert len >= 2; if (len == 2) { return nums; } // \u90a3\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u7684\u5f02\u6216\u8fd0\u7b97\u7684\u7ed3\u679c int xor = xor(nums); // \u5173\u952e\u5728\u8fd9\u91cc // \u627e\u5230\u8fd9\u4e2a xor \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7b2c 1 \u4e2a\u662f 1 \u7684\u6570\u4f4d\u662f\u7b2c\u51e0\u4f4d int binaryFirstNotZero = binaryFirstNotZero(xor); // \u63a5\u4e0b\u6765\u5206\u522b\u5bf9\u4e24\u7ec4\u8fdb\u884c\u5f02\u6216 for (int i = 0; i < len; i++) { // \u5982\u679c\u8fd9\u4e2a\u6570\u53f3\u79fb\u8fd9\u4e48\u591a\u4f4d\u662f 1 \u7684\u5206\u5728\u4e00\u7ec4\uff0c\u662f 0 \u7684\u5206\u5728\u53e6\u5916\u4e00\u7ec4\uff0c\u904d\u5386\u7684\u65f6\u5019\uff0c\u5c31\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97 if ((nums[i] >>> binaryFirstNotZero & 1) == 1) { res[0] ^= nums[i]; } else { res[1] ^= nums[i]; } } return res; } // \u5f97\u5230\u4e00\u4e2a\u6570\u7ec4\u7ecf\u8fc7\u5f02\u6216\u8fd0\u7b97\u7684\u7ed3\u679c xor // \u5f02\u6216 \u7684\u82f1\u6587\u7ffb\u8bd1\u5c31\u662f xor private int xor(int[] nums) { int xor = 0; for (int i = 0; i < nums.length; i++) { xor ^= nums[i]; } return xor; } // \u5f97\u5230\u4e00\u4e2a\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4ece\u53f3\u5230\u5de6\u7b2c 1 \u4e2a\u975e\u96f6\u7684\u4f4d\u6570\u662f\u7b2c\u51e0\u4f4d private int binaryFirstNotZero(int num) { int index = 0; // \u8fd9\u91cc\u7684 1 \u628a\u5b83\u770b\u6210\u4e8c\u8fdb\u5236\u7684 1\uff0c\u5373 00000001 while ((num & 1) == 0 && index < 32) { num >>>= 1; index++; } // \u8d70\u5230\u8fd9\u91cc\u6ee1\u8db3 (num & 1) == 1 return index; } public static void main(String[] args) { int[] nums = {2, 4, 3, 6, 3, 2, 5, 5}; Solution solution = new Solution(); int[] res = solution.findNumbersAppearanceOnce(nums); System.out.println(Arrays.toString(res)); int[] nums2 = {2, 4, 3, 6, 3, 2, 5, 5}; int[] res2 = solution.findNumbersAppearanceOnce(nums2); System.out.println(Arrays.toString(res2)); int[] nums3 = {4, 6}; int[] res3 = solution.findNumbersAppearanceOnce(nums3); System.out.println(Arrays.toString(res3)); int[] nums4 = {4, 6, 1, 1, 1, 1}; int[] res4 = solution.findNumbersAppearanceOnce(nums4); System.out.println(Arrays.toString(res4)); } }","title":"\u7b2c 56-1 \u9898\uff1a\u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u4e24\u4e2a\u6570\u5b57"},{"location":"51-60/#0-n-1","text":"\u4f20\u9001\u95e8\uff1a 0 \u5230 n-1 \u4e2d\u7f3a\u5931\u7684\u6570\u5b57 \u3002 \u4e00\u4e2a\u957f\u5ea6\u4e3a n-1 \u7684\u9012\u589e\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u6570\u5b57\u90fd\u662f\u552f\u4e00\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u6570\u5b57\u90fd\u5728\u8303\u56f4 0 \u5230 n-1 \u4e4b\u5185\u3002 \u5728\u8303\u56f4 0 \u5230 n-1 \u7684 n \u4e2a\u6570\u5b57\u4e2d\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u4e0d\u5728\u8be5\u6570\u7ec4\u4e2d\uff0c\u8bf7\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\u3002 \u6837\u4f8b ``` \u8f93\u5165\uff1a[0,1,2,4] \u8f93\u51fa\uff1a3 ``` \u601d\u8def\uff1a\u5178\u578b\u7684\u4f7f\u7528\u201c\u4e8c\u5206\u6cd5\u201d\u89e3\u51b3\u7684\u95ee\u9898\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getMissingNumber(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" size = len(nums) l = 0 r = size while l < r: mid = l + (r - l) // 2 if nums[mid] > mid: # [0,1,2,3,4,6] # mid \u6709\u53ef\u80fd\u662f\u8981\u6c42\u7684\u6570 r = mid else: assert nums[mid] <= mid l = mid + 1 return l if __name__ == '__main__': solution = Solution() nums = [0, 1, 2, 4] result = solution.getMissingNumber(nums) print(result)","title":"0 \u5230 n-1 \u4e2d\u7f3a\u5931\u7684\u6570\u5b57"},{"location":"51-60/#_2","text":"\u4f20\u9001\u95e8\uff1a \u6570\u7ec4\u4e2d\u6570\u503c\u548c\u4e0b\u6807\u76f8\u7b49\u7684\u5143\u7d20 \u3002 \u5047\u8bbe\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u7684\u6570\u7ec4\u91cc\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u6574\u6570\u5e76\u4e14\u662f\u552f\u4e00\u7684\u3002 \u8bf7\u7f16\u7a0b\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u6570\u503c\u7b49\u4e8e\u5176\u4e0b\u6807\u7684\u5143\u7d20\u3002 \u4f8b\u5982\uff0c\u5728\u6570\u7ec4 $[-3, -1, 1, 3, 5]$ \u4e2d\uff0c\u6570\u5b57 $3$ \u548c\u5b83\u7684\u4e0b\u6807\u76f8\u7b49\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a$[-3, -1, 1, 3, 5]$ \u8f93\u51fa\uff1a$3$ \u6ce8\u610f \uff1a\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de $-1$\u3002 \u601d\u8def\uff1a\u5178\u578b\u7684\u4f7f\u7528\u201c\u4e8c\u5206\u6cd5\u201d\u89e3\u51b3\u7684\u95ee\u9898\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getNumberSameAsIndex(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" # \u4f7f\u7528\u4e8c\u5206\u6cd5 size = len(nums) l = 0 r = size - 1 while l < r: mid = l + (r - l) // 2 if nums[mid] < mid: l = mid + 1 else: assert nums[mid] >= mid r = mid return l if nums[l] == l else -1 Python \u4ee3\u7801\uff1a class Solution(object): def getNumberSameAsIndex(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" size = len(nums) if size == 0: return -1 l = 0 r = size - 1 while l < r: mid = l + (r - l + 1) // 2 if nums[mid] > mid: r = mid - 1 else: l = mid return l if nums[l] == l else -1 Python \u4ee3\u7801\uff1a class Solution(object): def getNumberSameAsIndex(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" size = len(nums) if size == 0: return -1 l = 0 r = size - 1 while l < r: mid = l + (r - l + 1) // 2 if nums[mid] <= mid: l = mid else: r = mid - 1 return l if nums[l] == l else -1","title":"\u6570\u7ec4\u4e2d\u6570\u503c\u548c\u4e0b\u6807\u76f8\u7b49\u7684\u5143\u7d20"},{"location":"51-60/#56-2","text":"\u4f20\u9001\u95e8\uff1a \u6570\u7ec4\u4e2d\u552f\u4e00\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u3002 \u5728\u4e00\u4e2a\u6570\u7ec4\u4e2d\u9664\u4e86\u4e00\u4e2a\u6570\u5b57\u53ea\u51fa\u73b0\u4e00\u6b21\u4e4b\u5916\uff0c\u5176\u4ed6\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e09\u6b21\u3002 \u8bf7\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5b57\u4e00\u5b9a\u5b58\u5728\u3002 \u601d\u8003\u9898\uff1a \u5982\u679c\u8981\u6c42\u53ea\u4f7f\u7528 $O(n)$ \u7684\u65f6\u95f4\u548c\u989d\u5916 $O(1)$ \u7684\u7a7a\u95f4\uff0c\u8be5\u600e\u4e48\u505a\u5462\uff1f \u6837\u4f8b\uff1a ``` \u8f93\u5165\uff1a[1,1,1,2,2,2,3,4,4,4] \u8f93\u51fa\uff1a3 ``` \u601d\u8def\uff1a\u9650\u5236\u5728 $O(1)$ \u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u90a3\u5c31\u53ea\u6709\u901a\u8fc7\u4e8c\u8fdb\u5236\uff0c\u4e00\u4f4d\u4e00\u4f4d\u53bb\u770b\u4e86\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def findNumberAppearingOnce(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" res = 0 for i in range(32): count = 0 for num in nums: # \u4e0d\u8981\u5fd8\u8bb0 & 1 if (num >> i) & 1: count += 1 if count % 3: res += 1 << i return res if __name__ == '__main__': nums = [1, 0, 0, 0, 2, 1, 1] solution = Solution() result = solution.findNumberAppearingOnce(nums) print(result)","title":"\u7b2c 56-2 \u9898\uff1a\u6570\u7ec4\u4e2d\u552f\u4e00\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57"},{"location":"51-60/#57-1-s","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u548c\u4e3a S \u7684\u4e24\u4e2a\u6570\u5b57 \u3002 \u8f93\u5165\u4e00\u4e2a\u6570\u7ec4\u548c\u4e00\u4e2a\u6570\u5b57 s \uff0c\u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u4e24\u4e2a\u6570\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u6b63\u597d\u662f s \u3002 \u5982\u679c\u6709\u591a\u5bf9\u6570\u5b57\u7684\u548c\u7b49\u4e8e s \uff0c\u8f93\u51fa\u4efb\u610f\u4e00\u5bf9\u5373\u53ef\u3002 \u4f60\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u7ec4\u8f93\u5165\u4e2d\u90fd\u81f3\u5c11\u542b\u6709\u4e00\u7ec4\u6ee1\u8db3\u6761\u4ef6\u7684\u8f93\u51fa\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,3,4] , sum=7 \u8f93\u51fa\uff1a [3,4] \u8bf4\u660e\uff1a\u540c LeetCode \u7b2c 1 \u9898\uff0c\u5fc5\u987b\u8981\u4f1a\u7684\u4e00\u9898\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def findNumbersWithSum(self, nums, target): \"\"\" :type nums: List[int] :type target: int :rtype: List[int] \"\"\" s = set() for num in nums: if target - num not in s: s.add(num) else: return [num, target - num]","title":"\u7b2c 57-1 \u9898\uff1a\u548c\u4e3a S \u7684\u4e24\u4e2a\u6570\u5b57"},{"location":"51-60/#57-2-s","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u548c\u4e3a S \u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217 \u3002 \u8f93\u5165\u4e00\u4e2a\u6b63\u6570 s \uff0c\u6253\u5370\u51fa\u6240\u6709\u548c\u4e3a s \u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217\uff08\u81f3\u5c11\u542b\u6709\u4e24\u4e2a\u6570\uff09\u3002 \u4f8b\u5982\u8f93\u5165$15$\uff0c\u7531\u4e8e $1+2+3+4+5=4+5+6=7+8=15$\uff0c\u6240\u4ee5\u7ed3\u679c\u6253\u5370\u51fa $3$ \u4e2a\u8fde\u7eed\u5e8f\u5217 $1\uff5e5$\u3001$4\uff5e6$ \u548c $7\uff5e8$\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a$15$ \u8f93\u51fa\uff1a$[[1,2,3,4,5],[4,5,6],[7,8]]$ \u601d\u8def\uff1a\u53cc\u6307\u9488\uff0c\u56e0\u4e3a\u662f\u6709\u5e8f\u6570\u7ec4\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u6cd5\u3002 \u8bbe\u5b9a\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u7b2c\u4e00\u4e2a\u6570\uff0c\u4e00\u4e2a\u6307\u5411\u6700\u540e\u4e00\u4e2a\u6570\uff0c\u5728\u6b64\u4e4b\u524d\u9700\u8981\u8bbe\u5b9a\u7b2c\u4e00\u4e2a\u6570\u548c\u6700\u540e\u4e00\u4e2a\u6570\u7684\u503c\uff0c\u7531\u4e8e\u662f\u6b63\u6570\u5e8f\u5217\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u7b2c\u4e00\u4e2a\u6570\u8bbe\u4e3a $1$\uff0c\u6700\u540e\u4e00\u4e2a\u6570\u4e3a $2$\uff0c\u56e0\u4e3a\u662f\u8981\u6c42\u662f\u8fde\u7eed\u6b63\u6570\u5e8f\u5217\uff0c\u6700\u540e\u4e0d\u53ef\u80fd\u548c\u7b2c\u4e00\u4e2a\u6570\u91cd\u5408\u3002\u4e0b\u4e00\u6b65\u5c31\u662f\u4e0d\u65ad\u6539\u53d8\u7b2c\u4e00\u4e2a\u6570\u548c\u6700\u540e\u4e00\u4e2a\u6570\u7684\u503c\uff0c\u5982\u679c\u4ece\u7b2c\u4e00\u4e2a\u6570\u5230\u6700\u540e\u4e00\u4e2a\u6570\u7684\u548c\u521a\u597d\u662f\u8981\u6c42\u7684\u548c\uff0c\u90a3\u4e48\u628a\u6240\u6709\u7684\u6570\u90fd\u6dfb\u52a0\u5230\u4e00\u4e2a\u5e8f\u5217\u4e2d\uff1b\u5982\u679c\u5927\u4e8e\u8981\u6c42\u7684\u548c\uff0c\u5219\u8bf4\u660e\u4ece\u7b2c\u4e00\u4e2a\u6570\u5230\u6700\u540e\u4e00\u4e2a\u6570\u4e4b\u95f4\u7684\u8303\u56f4\u592a\u5927\uff0c\u56e0\u6b64\u51cf\u5c0f\u8303\u56f4\uff0c\u9700\u8981\u628a\u7b2c\u4e00\u4e2a\u6570\u7684\u503c\u52a0 $1$\uff0c\u540c\u65f6\u628a\u5f53\u524d\u548c\u51cf\u53bb\u539f\u6765\u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u503c\uff1b\u5982\u679c\u5c0f\u4e8e\u8981\u6c42\u7684\u548c\uff0c\u8bf4\u660e\u8303\u56f4\u592a\u5c0f\uff0c\u56e0\u6b64\u628a\u6700\u540e\u4e00\u4e2a\u6570\u52a0 $1$\uff0c\u540c\u65f6\u628a\u5f53\u524d\u7684\u548c\u52a0\u4e0a\u6539\u53d8\u4e4b\u540e\u7684\u6700\u540e\u4e00\u4e2a\u6570\u7684\u503c\u3002\u8fd9\u6837\uff0c\u4e0d\u65ad\u4fee\u6539\u7b2c\u4e00\u4e2a\u6570\u548c\u6700\u540e\u4e00\u4e2a\u6570\u7684\u503c\uff0c\u5c31\u80fd\u786e\u5b9a\u6240\u6709\u8fde\u7eed\u6b63\u6570\u5e8f\u5217\u7684\u548c\u7b49\u4e8e $S$ \u7684\u5e8f\u5217\u4e86\u3002 \u7b49\u5dee\u6570\u5217\u6c42\u548c\u516c\u5f0f\uff0c\u9996\u9879\u52a0\u672b\u9879\u7684\u548c\u4e58\u4ee5\u4e2a\u6570\u9664\u4ee5 $2$\uff0c\u5373 ${\\rm sum} = \\cfrac {(a + b)\\times n }{2}$\u3002 \u6ce8\u610f\uff1a\u53f3\u8fb9\u754c\u95ee\u9898\uff0c\u4f7f\u7528\u4e00\u4e2a\u7279\u4f8b\uff0c\u4f8b\u5982 $3$ \u5c31\u53ef\u4ee5\u8003\u8651\u6e05\u695a\u4e86\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def findContinuousSequence(self, sum): \"\"\" :type sum: int :rtype: List[List[int]] \"\"\" res = [] left = 1 right = 2 # sum = 3 \u7684\u65f6\u5019\uff0c\u53f3\u8fb9\u754c\u6700\u591a\u5230 2 half = sum // 2 + 1 while left < right <= half: cur_sum = (left + right) * (right - left + 1) // 2 if cur_sum == sum: res.append([i for i in range(left, right + 1)]) right += 1 elif cur_sum < sum: right += 1 else: assert cur_sum > sum left += 1 return res if __name__ == '__main__': sum = 15 solution = Solution() result = solution.findContinuousSequence(sum) print(result)","title":"\u7b2c 57-2 \u9898\uff1a\u548c\u4e3a S \u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217"},{"location":"51-60/#58-1","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u4e2a\u82f1\u6587\u53e5\u5b50\uff0c\u7ffb\u8f6c\u53e5\u5b50\u4e2d\u5355\u8bcd\u7684\u987a\u5e8f\uff0c\u4f46\u5355\u8bcd\u5185\u5b57\u7b26\u7684\u987a\u5e8f\u4e0d\u53d8\u3002 \u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6807\u70b9\u7b26\u53f7\u548c\u666e\u901a\u5b57\u6bcd\u4e00\u6837\u5904\u7406\u3002 \u4f8b\u5982\u8f93\u5165\u5b57\u7b26\u4e32 \"I am a student.\" \uff0c\u5219\u8f93\u51fa \"student. a am I\" \u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a \"I am a student.\" \u8f93\u51fa\uff1a \"student. a am I\" \u601d\u8def\uff1a\u5b9e\u73b0\u4e00\u4e2a\u8f85\u52a9\u7684\u65b9\u6cd5\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u7684\u6307\u5b9a\u533a\u95f4\u8fdb\u884c\u7ffb\u8f6c\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def reverseWords(self, s): \"\"\" :type s: str :rtype: str \"\"\" size = len(s) arr = list(s) self.__reverse(arr, 0, size - 1) begin = 0 index = 0 while index < size: if arr[index] == ' ': self.__reverse(arr, begin, index - 1) begin = index + 1 index += 1 # \u6700\u540e\u8fd8\u8981\u53cd\u8f6c\u4e00\u4e0b self.__reverse(arr, begin, size - 1) return ''.join(arr) def __reverse(self, arr, left, right): if left >= right: return while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 Java \u4ee3\u7801\uff1a public class Solution { /** * \u8f85\u52a9\u51fd\u6570\uff1a\u7ffb\u8f6c\u5b57\u7b26\u6570\u7ec4\u6307\u5b9a\u533a\u95f4\u5185\u7684\u5b57\u7b26 * * @param str * @param start * @param end */ private void reverseString(char[] str, int start, int end) { int l = start; int r = end; while (l < r) { swap(str, l, r); l++; r--; } } /** * \u8f85\u52a9\u51fd\u6570\uff1a\u4ea4\u6362\u5b57\u7b26\u6570\u7ec4\u6307\u5b9a\u7d22\u5f15\u7684\u5b57\u7b26 * * @param str * @param index1 * @param index2 */ private void swap(char[] str, int index1, int index2) { if (index1 == index2) { return; } char temp = str[index1]; str[index1] = str[index2]; str[index2] = temp; } public String ReverseSentence(String str) { int len = str.length(); if (len == 0 || len == 1) { return str; } char[] charArr = str.toCharArray(); reverseString(charArr, 0, len - 1); int start = 0; for (int i = 0; i < len; i++) { if (charArr[i] == ' ') { reverseString(charArr, start, i - 1); start = i + 1; } } // \u6700\u540e\u8fd8\u8981\u8bb0\u5f97\u53cd\u8f6c\u4e00\u4e0b reverseString(charArr, start, len - 1); return String.valueOf(charArr); } public static void main(String[] args) { String str = \"write your code here\"; Solution solution = new Solution(); String reverseSentence = solution.ReverseSentence(str); System.out.println(reverseSentence); } } \u603b\u7ed3\uff1a\u522b\u628a\u95ee\u9898\u60f3\u590d\u6742\u4e86\uff0c\u6709\u70b9\u8010\u5fc3\uff0c\u8fd9\u4e9b\u95ee\u9898\u5176\u5b9e\u5e76\u6ca1\u6709\u90a3\u4e48\u96be\u3002","title":"\u7b2c 58-1 \u9898\uff1a\u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f\u5217"},{"location":"51-60/#58-2","text":"\u4f20\u9001\u95e8\uff1a \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5b57\u7b26\u4e32\u7684\u5de6\u65cb\u8f6c\u64cd\u4f5c\u662f\u628a\u5b57\u7b26\u4e32\u524d\u9762\u7684\u82e5\u5e72\u4e2a\u5b57\u7b26\u8f6c\u79fb\u5230\u5b57\u7b26\u4e32\u7684\u5c3e\u90e8\u3002 \u8bf7\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5b9e\u73b0\u5b57\u7b26\u4e32\u5de6\u65cb\u8f6c\u64cd\u4f5c\u7684\u529f\u80fd\u3002 \u6bd4\u5982\u8f93\u5165\u5b57\u7b26\u4e32 \"abcdefg\" \u548c\u6570\u5b572\uff0c\u8be5\u51fd\u6570\u5c06\u8fd4\u56de\u5de6\u65cb\u8f6c2\u4f4d\u5f97\u5230\u7684\u7ed3\u679c \"cdefgab\" \u3002 \u6ce8\u610f\uff1a \u6570\u636e\u4fdd\u8bc1n\u5c0f\u4e8e\u7b49\u4e8e\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002 \u6837\u4f8b ``` \u8f93\u5165\uff1a\"abcdefg\" , n=2 \u8f93\u51fa\uff1a\"cdefgab\" ``` \u601d\u8def\uff1a\u201cabcdefg\u201d \u65cb\u8f6c\u4ee5\u540e\uff0c\u201cgfedcba\u201d\uff0c\u5728\u5012\u6570\u7b2c 2 \u4f4d\u524d\u540e\uff0c\u518d\u7ffb\u8f6c\u4e00\u4e0b\uff0c\u5f97\u201ccdefgab\u201d\u3002\u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u8981\u5206\u6790\u6e05\u695a\uff0c\u6ce8\u610f\uff1a\u79fb\u52a8\u7684\u4f4d\u6570\u8981\u53d6\u4f59\u6570\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def leftRotateString(self, s, n): \"\"\" :type s: str :type n: int :rtype: str \"\"\" size = len(s) # \u7279\u5224 if size == 0 or n % size == 0: return s n = n % size arr = list(s) self.__reverse(arr, 0, size - 1) self.__reverse(arr, 0, size - 1 - n) self.__reverse(arr, size - n, size - 1) return ''.join(arr) def __reverse(self, arr, left, right): if left >= right: return while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 Java \u4ee3\u7801\uff1a public class Solution { private void reverseString(char[] charArr, int start, int end) { int l = start; int r = end; while (l < r) { swap(charArr, l, r); l++; r--; } } private void swap(char[] charArr, int index1, int index2) { if (index1 == index2) { return; } char temp = charArr[index1]; charArr[index1] = charArr[index2]; charArr[index2] = temp; } public String LeftRotateString(String str, int n) { int len = str.length(); if (len == 0 || n < 0) { return \"\"; } if (len == 1) { return str; } // \u8fd9\u91cc\u8981\u6ce8\u610f\u4e86 n = len - n % len; char[] charArr = str.toCharArray(); reverseString(charArr, 0, len - 1); reverseString(charArr, 0, n - 1); reverseString(charArr, n, len - 1); return String.valueOf(charArr); } public static void main(String[] args) { String str = \"abcXYZdef\"; Solution solution = new Solution(); String leftRotateString = solution.LeftRotateString(str, 3); System.out.println(leftRotateString); } }","title":"\u7b2c 58-2 \u9898\uff1a\u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32"},{"location":"51-60/#59","text":"\u4f20\u9001\u95e8\uff1a \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\u548c\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\uff0c\u8bf7\u627e\u51fa\u6240\u6709\u6ed1\u52a8\u7a97\u53e3\u91cc\u7684\u6700\u5927\u503c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u6570\u7ec4 [2, 3, 4, 2, 6, 2, 5, 1] \u53ca\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f 3\uff0c\u90a3\u4e48\u4e00\u5171\u5b58\u5728 6 \u4e2a\u6ed1\u52a8\u7a97\u53e3\uff0c\u5b83\u4eec\u7684\u6700\u5927\u503c\u5206\u522b\u4e3a [4, 4, 6, 6, 6, 5] \u3002 \u6ce8\u610f\uff1a \u6570\u636e\u4fdd\u8bc1 $k$ \u5927\u4e8e $0$ \uff0c\u4e14 $k$ \u5c0f\u4e8e\u7b49\u4e8e\u6570\u7ec4\u957f\u5ea6\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [2, 3, 4, 2, 6, 2, 5, 1] , k=3 \u8f93\u51fa\uff1a [4, 4, 6, 6, 6, 5] \u540c LeetCode \u7b2c 239 \u9898\uff0c\u4f20\u9001\u95e8\uff1a LeetCode \u7b2c 239 \u9898\uff1a\u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c \u3002 Python \u4ee3\u7801\uff1a window[0] == i - k \u8fd9\u4e2a\u6761\u4ef6\u7279\u522b\u5bb9\u6613\u5ffd\u7565\uff0c\u8868\u793a\u786e\u5b9e\u8be5\u88ab\u79fb\u51fa\u6ed1\u52a8\u7a97\u53e3 class Solution: def maxSlidingWindow(self, nums, k): \"\"\" :type nums: List[int] :type k: int :rtype: List[int] \"\"\" # \u5173\u952e\uff1a\u5982\u679c\u540e\u8fdb\u6765\u4e00\u4e2a\u6570\uff0c\u524d\u9762\u7684\u5143\u7d20\u6bd4\u5b83\u5c0f # \u90a3\u4e48\u524d\u9762\u7684\u5143\u7d20\u5c31\u6c38\u8fdc\u4e0d\u53ef\u80fd\u662f\"\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\" l = len(nums) if l == 0 or k <= 0: return [] res = [] window = [] for i in range(l): # \u8003\u8651\u4ec0\u4e48\u65f6\u5019\uff0c\u8981\u628a\u6700\u5927\u79fb\u9664 # \u5de6\u8fb9\u754c\u5212\u51fa\u7684\u65f6\u5019\uff0c\u5e94\u8be5\u662f window.pop(0) # [0,1,2,3,4] # [ i] # window[0] == i - k \u8fd9\u4e2a\u6761\u4ef6\u7279\u522b\u5bb9\u6613\u5ffd\u7565 if i >= k and window[0] == i - k: window.pop(0) # \u8003\u8651\u628a\u4e0d\u53ef\u80fd\u662f\u6700\u5927\u7684\u5143\u7d20\u5168\u90e8 kill \u6389 while window and nums[i] >= nums[window[-1]]: window.pop() # \u4e0d\u7ba1\u600e\u4e48\u7740\u90fd\u52a0\u5f53\u524d\u7684\u7d22\u5f15 window.append(i) # \u4ec0\u4e48\u65f6\u5019\u6709\u6ed1\u52a8\u7a97\u53e3\u5462\uff1f if i >= k - 1: res.append(nums[window[0]]) return res if __name__ == '__main__': nums = [1, 3, -1, -3, 5, 3, 6, 7] k = 3 solution = Solution() result = solution.maxSlidingWindow(nums, k) print(result)","title":"\u7b2c 59 \u9898\uff1a\u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c\uff08\u5178\u578b\u95ee\u9898\uff09"},{"location":"51-60/#60-n","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u9ab0\u5b50\u7684\u70b9\u6570 \u3002 \u5c06\u4e00\u4e2a\u9ab0\u5b50\u6295\u63b7 $n$ \u6b21\uff0c\u83b7\u5f97\u7684\u603b\u70b9\u6570\u4e3a $s$ \uff0c$s$ \u7684\u53ef\u80fd\u8303\u56f4\u4e3a $n$ ~ $6n$\u3002 \u63b7\u51fa\u67d0\u4e00\u70b9\u6570\uff0c\u53ef\u80fd\u6709\u591a\u79cd\u63b7\u6cd5\uff0c\u4f8b\u5982\u6295\u63b7 $2$ \u6b21\uff0c\u63b7\u51fa $3$ \u70b9\uff0c\u5171\u6709 $[1,2]$\uff0c$[2,1]$ \u4e24\u79cd\u63b7\u6cd5\u3002 \u8bf7\u6c42\u51fa\u6295\u63b7 $n$ \u6b21\uff0c\u63b7\u51fa $n$ ~ $6n$ \u70b9\u5206\u522b\u6709\u591a\u5c11\u79cd\u63b7\u6cd5\u3002 \u6837\u4f8b1\uff1a \u8f93\u5165\uff1a n=1 \u8f93\u51fa\uff1a [1, 1, 1, 1, 1, 1] \u89e3\u91ca\uff1a\u6295\u63b7 1 \u6b21\uff0c\u53ef\u80fd\u51fa\u73b0\u7684\u70b9\u6570\u4e3a 1-6 \uff0c\u5171\u8ba1 6 \u79cd\u3002\u6bcf\u79cd\u70b9\u6570\u90fd\u53ea\u6709 1 \u79cd\u63b7\u6cd5\u3002\u6240\u4ee5\u8f93\u51fa [1, 1, 1, 1, 1, 1] \u3002 \u6837\u4f8b2\uff1a \u8f93\u5165\uff1an=2 \u8f93\u51fa\uff1a [1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1] \u89e3\u91ca\uff1a\u6295\u63b7 2 \u6b21\uff0c\u53ef\u80fd\u51fa\u73b0\u7684\u70b9\u6570\u4e3a 2-12\uff0c\u5171\u8ba1 11 \u79cd\u3002\u6bcf\u79cd\u70b9\u6570\u53ef\u80fd\u63b7\u6cd5\u6570\u76ee\u5206\u522b\u4e3a 1,2,3,4,5,6,5,4,3,2,1 \u3002\u6240\u4ee5\u8f93\u51fa [1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1] \u3002 \u601d\u8def\uff1a\u5178\u578b\u52a8\u6001\u89c4\u5212\u95ee\u9898\u3002\u5b9a\u4e49\u72b6\u6001 dp[i][j] \u8868\u793a\u7528 i \u4e2a\u9ab0\u5b50\u6254\u51fa\u548c\u4e3a j \u7684\u53ef\u80fd\u6570\uff0c\u56e0\u4e3a\u7b2c i \u4e2a\u9ab0\u5b50\u53ef\u80fd\u6254\u51fa 1-6 \u7684\u70b9\u6570\u3002\u6839\u636e\u6b64\u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a $$ dp[i][j]=dp[i-1][j-1]+dp[i-1][j-2]+dp[i-1][j-3]+dp[i-1][j-4]+dp[i-1][j-5]+dp[i-1][j-6] $$ \u7531\u4e8e\u6211\u4eec\u53ea\u9700\u8981\u7528\u5230\u6700\u540e\u4e00\u6b21\u7684\u7ed3\u679c\uff0c\u56e0\u6b64\u4e3a\u4e86\u8282\u7701\u7a7a\u95f4\u53ef\u4ee5\u4f7f\u7528\u6eda\u52a8\u6570\u7ec4\uff0c\u5c06\u4e8c\u7ef4 dp \u6570\u7ec4\u53d8\u4e3a\u4e00\u7ef4\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a$O(n^2)$\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def numberOfDice(self, n): \"\"\" :type n: int :rtype: List[int] \"\"\" dp = [0 for _ in range(6 * n + 1)] # \u52a8\u5f52\u6570\u7ec4\u521d\u59cb\u503c\uff0c\u8868\u793a 1 \u4e2a\u9ab0\u5b50\u6254\u51fa 1-6 \u7684\u53ef\u80fd\u6570\u90fd\u4e3a 1 for i in range(1, 7): dp[i] = 1 # \u8868\u793a\u4ecd\u7b2c 2 \u4e2a\u9ab0\u5b50\u5230\u7b2c n \u4e2a\u9ab0\u5b50 for i in range(2, n + 1): # \u4ece\u540e\u5411\u524d\u5199 for j in range(6 * i, -1, -1): dp[j] = 0 # \u6700\u540e\u4e00\u4e2a\u9ab0\u5b50\u53ef\u4ee5\u6254 1 - 6 \u70b9 for k in range(6, 0, -1): if j - k < 0: continue dp[j] += dp[j - k] # \u6254 n \u4e2a\u9ab0\u5b50\u7684\u548c\u4e3a [n, 6 * n] return dp[n:] \u4f5c\u8005\uff1acornerCao \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/acwing/content/852/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \uff08\u672c\u8282\u5b8c\uff09","title":"\u7b2c 60 \u9898\uff1a$n$ \u4e2a\u9ab0\u5b50\u7684\u70b9\u6570\uff08\u5178\u578b\u52a8\u6001\u89c4\u5212\u95ee\u9898\uff09"},{"location":"51/","text":"\u5251\u6307 Offer 51. \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9 \u5251\u6307 Offer 51. \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9 \uff1b \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5728\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6570\u5b57\u5982\u679c\u524d\u9762\u4e00\u4e2a\u6570\u5b57\u5927\u4e8e\u540e\u9762\u7684\u6570\u5b57\uff0c\u5219\u8fd9\u4e24\u4e2a\u6570\u5b57\u7ec4\u6210\u4e00\u4e2a\u9006\u5e8f\u5bf9\u3002 \u8f93\u5165\u4e00\u4e2a\u6570\u7ec4\uff0c\u6c42\u51fa\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9\u7684\u603b\u6570\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,3,4,5,6,0] \u8f93\u51fa\uff1a6 \u4e13\u95e8\u6574\u7406\u6210\u6587\u7ae0\u30021\u3001\u7528\u5f52\u5e76\u6392\u5e8f\uff1b2\u3001\u7528 BST\u3002\u5982\u4f55\u8bb0\u5f55\u5de6\u5b50\u6811\u4e2d\u7ed3\u70b9\u7684\u4e2a\u6570\u3002 \u601d\u8def1\uff1a\u9996\u5148\u6211\u4eec\u5e94\u8be5\u60f3\u5230\uff0c\u4f7f\u7528\u5b9a\u4e49\u8ba1\u7b97\u9006\u5e8f\u6570\u3002\u4e0d\u8fc7\u65f6\u95f4\u590d\u6742\u5ea6\u662f\uff1a$O(n^2)$\u3002 class Solution(object): def inversePairs(self, nums): l = len(nums) if l < 2: return 0 res = 0 for i in range(0, l - 1): for j in range(i + 1, l): if nums[i] > nums[j]: res += 1 return res \u8fd9\u79cd\u601d\u8def\u867d\u7136\u5f88\u76f4\u63a5\uff0c\u4f46\u7f16\u5199\u51fa\u9519\u7684\u6982\u7387\u5c31\u5f88\u4f4e\u4e86\uff0c\u5728\u6ca1\u6709\u5728\u7ebf\u8bc4\u6d4b\u7cfb\u7edf\u7684\u65f6\u5019\uff0c\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u201c\u6b63\u786e\u7684\u201d\u53c2\u8003\u7b54\u6848\uff0c\u7528\u4ee5\u68c0\u9a8c\u6211\u4eec\u81ea\u5df1\u7f16\u5199\u7684\u7b97\u6cd5\u662f\u5426\u6b63\u786e\u3002 \u601d\u8def2\uff1a\u501f\u52a9\u5f52\u5e76\u6392\u5e8f\u7684\u5206\u6cbb\u601d\u60f3\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\log n)$\u3002 \u5206\u6790\uff1a\u4f8b\u5982\uff1a\u524d\u6709\u5e8f\u6570\u7ec4\uff1a$[2,3,5,8]$\uff0c\u540e\u6709\u5e8f\u6570\u7ec4\uff1a$[4,6,7,12]$\u3002 \u505a\u5f52\u5e76\u7684\u65f6\u5019\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a \u7b2c 1 \u6b65\uff0c$2$ \u5148\u51fa\u5217\uff0c$2$ \u6bd4\u201c\u540e\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u7684\u5143\u7d20\u90fd\u5c0f\uff0c\u6784\u6210\u201c\u987a\u5e8f\u5bf9\u201d\uff1b \u7b2c 2 \u6b65\uff0c$3$ \u51fa\u5217\uff0c$3$ \u6bd4\u201c\u540e\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u7684\u5143\u7d20\u90fd\u5c0f\uff0c\u6784\u6210\u201c\u987a\u5e8f\u5bf9\u201d\uff1b \u7b2c 3 \u6b65\uff0c$4$ \u51fa\u5217\uff0c\u5173\u952e\u7684\u5730\u65b9\u5728\u8fd9\u91cc\uff0c \u201c\u524d\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u5269\u4e0b\u7684\u5143\u7d20 $[5,8]$ \u6bd4 $4$ \u90fd\u5927\uff0c\u6784\u6210 $2$ \u4e2a \u201c\u9006\u5e8f\u5bf9\u201d \uff1b \u7b2c 4 \u6b65\uff0c$5$ \u51fa\u5217\uff0c$5$ \u6bd4\u201c\u540e\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u5269\u4e0b\u7684\u5143\u7d20\u90fd\u5c0f\uff0c\u6784\u6210\u201c\u987a\u5e8f\u5bf9\u201d\uff1b \u7b2c 5 \u6b65\uff0c$6$ \u51fa\u5217\uff0c \u201c\u524d\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u5269\u4e0b\u7684\u5143\u7d20 $[8]$ \u6bd4 $6$ \u90fd\u5927\uff0c\u6784\u6210 $1$ \u4e2a\u201c\u9006\u5e8f\u5bf9\u201d \uff1b \u7b2c 6 \u6b65\uff0c$7$ \u51fa\u5217\uff0c \u201c\u524d\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u5269\u4e0b\u7684\u5143\u7d20 $[8]$ \u6bd4 $7$ \u90fd\u5927\uff0c\u6784\u6210 $1$ \u4e2a\u201c\u9006\u5e8f\u5bf9\u201d \uff1b \u7b2c 7 \u6b65\uff0c$8$ \u51fa\u5217\uff0c$8$ \u6bd4\u201c\u540e\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u5269\u4e0b\u7684\u5143\u7d20 $[8]$ \u90fd\u5c0f\uff0c\u6784\u6210 $1$ \u4e2a\u201c\u987a\u5e8f\u5bf9\u201d\uff1b \u7b2c 8 \u6b65\uff0c$12$ \u51fa\u5217\uff0c\u6b64\u65f6\u201c\u524d\u6709\u5e8f\u6570\u7ec4\u201d\u4e3a\u7a7a\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u201c\u524d\u6709\u5e8f\u6570\u7ec4\u201d\u975e\u7a7a\uff0c\u4e14\u201c\u540e\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6709\u5143\u7d20\u51fa\u5217\u7684\u65f6\u5019\uff0c\u5373\u4e0a\u9762\u7684\u7b2c 3\u30015\u30016 \u6b65\u8ba1\u7b97\u201c\u9006\u5e8f\u5bf9\u201d\u5c31\u53ef\u4ee5\u4e86\u3002 \u53c2\u8003\u4ee3\u7801\uff1a class Solution(object): def inversePairs1(self, nums): l = len(nums) if l < 2: return 0 res = 0 for i in range(0, l - 1): for j in range(i + 1, l): if nums[i] > nums[j]: res += 1 return res def inversePairs(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" l = len(nums) if l < 2: return 0 temp = [0 for _ in range(l)] return self.count_inversion_pairs(nums, 0, l - 1, temp) def count_inversion_pairs(self, nums, l, r, temp): \"\"\" \u5728\u6570\u7ec4 nums \u7684\u533a\u95f4 [l,r] \u7edf\u8ba1\u9006\u5e8f\u5bf9 :param nums: :param l: \u5f85\u7edf\u8ba1\u6570\u7ec4\u7684\u5de6\u8fb9\u754c\uff0c\u53ef\u4ee5\u53d6\u5230 :param r: \u5f85\u7edf\u8ba1\u6570\u7ec4\u7684\u53f3\u8fb9\u754c\uff0c\u53ef\u4ee5\u53d6\u5230 :param temp: :return: \"\"\" # \u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u5c31\u662f\u53ea\u6709 1 \u4e2a\u5143\u7d20\u7684\u65f6\u5019 if l == r: return 0 mid = l + (r - l) // 2 left_pairs = self.count_inversion_pairs(nums, l, mid, temp) right_pairs = self.count_inversion_pairs(nums, mid + 1, r, temp) merge_pairs = 0 # \u4ee3\u7801\u8d70\u5230\u8fd9\u91cc\u7684\u65f6\u5019\uff0c # [l, mid] \u5df2\u7ecf\u5b8c\u6210\u4e86\u6392\u5e8f\u5e76\u4e14\u8ba1\u7b97\u597d\u9006\u5e8f\u5bf9 # [mid + 1, r] \u5df2\u7ecf\u5b8c\u6210\u4e86\u6392\u5e8f\u5e76\u4e14\u8ba1\u7b97\u597d\u9006\u5e8f\u5bf9 # \u5982\u679c nums[mid] <= nums[mid + 1]\uff0c\u6b64\u65f6\u5c31\u4e0d\u5b58\u5728\u9006\u5e8f\u5bf9 # \u5f53 nums[mid] > nums[mid + 1] \u7684\u65f6\u5019\uff0c\u5c31\u8981\u7ee7\u7eed\u8ba1\u7b97\u9006\u5e8f\u5bf9 if nums[mid] > nums[mid + 1]: # \u5728\u5f52\u5e76\u7684\u8fc7\u7a0b\u4e2d\u8ba1\u7b97\u9006\u5e8f\u5bf9 merge_pairs = self.merge_and_count(nums, l, mid, r, temp) # \u8d70\u5230\u8fd9\u91cc\u6709 nums[mid] <= nums[mid + 1] \u6210\u7acb\uff0c\u5df2\u7ecf\u662f\u987a\u5e8f\u7ed3\u6784 return left_pairs + right_pairs + merge_pairs def merge_and_count(self, nums, l, mid, r, temp): \"\"\" \u524d\uff1a[2,3,5,8]\uff0c\u540e\uff1a[4,6,7,12] \u6211\u4eec\u53ea\u9700\u8981\u5728\u540e\u9762\u6570\u7ec4\u5143\u7d20\u51fa\u5217\u7684\u65f6\u5019\uff0c\u6570\u4e00\u6570\u524d\u9762\u8fd9\u4e2a\u6570\u7ec4\u8fd8\u5269\u4e0b\u591a\u5c11\u4e2a\u6570\u5b57\uff0c \u56e0\u4e3a\"\u524d\"\u6570\u7ec4\u548c\"\u540e\"\u6570\u7ec4\u90fd\u6709\u5e8f\uff0c \u56e0\u6b64\uff0c\"\u524d\"\u6570\u7ec4\u5269\u4e0b\u7684\u5143\u7d20\u4e2a\u6570 mid - i + 1 \u5c31\u662f\u4e0e\"\u540e\"\u6570\u7ec4\u5143\u7d20\u51fa\u5217\u7684\u8fd9\u4e2a\u5143\u7d20\u6784\u6210\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570 \"\"\" for i in range(l, r + 1): temp[i] = nums[i] i = l j = mid + 1 res = 0 for k in range(l, r + 1): if i > mid: nums[k] = temp[j] j += 1 elif j > r: nums[k] = temp[i] i += 1 elif temp[i] <= temp[j]: # \u4e0d\u7edf\u8ba1\u9006\u5e8f\u5bf9\uff0c\u53ea\u505a\u6392\u5e8f nums[k] = temp[i] i += 1 else: assert temp[i] > temp[j] nums[k] = temp[j] j += 1 # \u5feb\u5c31\u5feb\u5728\u8fd9\u91cc\uff0c\u4e00\u6b21\u53ef\u4ee5\u6570\u51fa\u4e00\u4e2a\u533a\u95f4\u7684\u4e2a\u6570\u7684\u9006\u5e8f\u5bf9 # \u4f8b\uff1a[7,8,9][4,6,9]\uff0c4 \u4e0e 7 \u4ee5\u53ca 7 \u524d\u9762\u6240\u6709\u7684\u6570\u90fd\u6784\u6210\u9006\u5e8f\u5bf9 res += (mid - i + 1) return res \u8bf4\u660e\uff1a\u5f52\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8981\u501f\u52a9\u989d\u5916\u7684\u8f85\u52a9\u7a7a\u95f4\uff0c\u4e3a\u6b64\u53ef\u4ee5\u5168\u5c40\u4f7f\u7528\u4e00\u4e2a\u548c\u539f\u59cb\u6570\u7ec4\u7b49\u957f\u7684\u8f85\u52a9\u6570\u7ec4\uff0c\u5426\u5219\u6bcf\u4e00\u6b21\u8fdb\u5165 merge \u51fd\u6570\u90fd\u8981 new \u65b0\u6570\u7ec4\uff0c\u5f00\u9500\u5f88\u5927\u3002 \u4e0a\u8ff0\u89e3\u6cd5\u7684\u7f3a\u70b9\u662f\u4fee\u6539\u4e86\u539f\u59cb\u6570\u7ec4\uff0c\u6392\u5e8f\u5b8c\u6210\u4ee5\u540e\uff0c\u9006\u5e8f\u6570\u5c31\u8ba1\u7b97\u51fa\u6765\u4e86\u3002\u4e3a\u6b64\uff1a\uff081\uff09\u6211\u4eec\u53ef\u4ee5\u5f15\u5165\u4e00\u4e2a\u7d22\u5f15\u6570\u7ec4\uff1b\uff082\uff09\u6216\u8005\u76f4\u63a5\u62f7\u8d1d\u4e00\u4e2a\u539f\u59cb\u6570\u7ec4\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u4fee\u6539\u539f\u59cb\u6570\u7ec4\u4e86\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 51. \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9"},{"location":"51/#offer-51","text":"\u5251\u6307 Offer 51. \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9 \uff1b \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5728\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6570\u5b57\u5982\u679c\u524d\u9762\u4e00\u4e2a\u6570\u5b57\u5927\u4e8e\u540e\u9762\u7684\u6570\u5b57\uff0c\u5219\u8fd9\u4e24\u4e2a\u6570\u5b57\u7ec4\u6210\u4e00\u4e2a\u9006\u5e8f\u5bf9\u3002 \u8f93\u5165\u4e00\u4e2a\u6570\u7ec4\uff0c\u6c42\u51fa\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9\u7684\u603b\u6570\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1,2,3,4,5,6,0] \u8f93\u51fa\uff1a6 \u4e13\u95e8\u6574\u7406\u6210\u6587\u7ae0\u30021\u3001\u7528\u5f52\u5e76\u6392\u5e8f\uff1b2\u3001\u7528 BST\u3002\u5982\u4f55\u8bb0\u5f55\u5de6\u5b50\u6811\u4e2d\u7ed3\u70b9\u7684\u4e2a\u6570\u3002 \u601d\u8def1\uff1a\u9996\u5148\u6211\u4eec\u5e94\u8be5\u60f3\u5230\uff0c\u4f7f\u7528\u5b9a\u4e49\u8ba1\u7b97\u9006\u5e8f\u6570\u3002\u4e0d\u8fc7\u65f6\u95f4\u590d\u6742\u5ea6\u662f\uff1a$O(n^2)$\u3002 class Solution(object): def inversePairs(self, nums): l = len(nums) if l < 2: return 0 res = 0 for i in range(0, l - 1): for j in range(i + 1, l): if nums[i] > nums[j]: res += 1 return res \u8fd9\u79cd\u601d\u8def\u867d\u7136\u5f88\u76f4\u63a5\uff0c\u4f46\u7f16\u5199\u51fa\u9519\u7684\u6982\u7387\u5c31\u5f88\u4f4e\u4e86\uff0c\u5728\u6ca1\u6709\u5728\u7ebf\u8bc4\u6d4b\u7cfb\u7edf\u7684\u65f6\u5019\uff0c\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u201c\u6b63\u786e\u7684\u201d\u53c2\u8003\u7b54\u6848\uff0c\u7528\u4ee5\u68c0\u9a8c\u6211\u4eec\u81ea\u5df1\u7f16\u5199\u7684\u7b97\u6cd5\u662f\u5426\u6b63\u786e\u3002 \u601d\u8def2\uff1a\u501f\u52a9\u5f52\u5e76\u6392\u5e8f\u7684\u5206\u6cbb\u601d\u60f3\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\log n)$\u3002 \u5206\u6790\uff1a\u4f8b\u5982\uff1a\u524d\u6709\u5e8f\u6570\u7ec4\uff1a$[2,3,5,8]$\uff0c\u540e\u6709\u5e8f\u6570\u7ec4\uff1a$[4,6,7,12]$\u3002 \u505a\u5f52\u5e76\u7684\u65f6\u5019\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a \u7b2c 1 \u6b65\uff0c$2$ \u5148\u51fa\u5217\uff0c$2$ \u6bd4\u201c\u540e\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u7684\u5143\u7d20\u90fd\u5c0f\uff0c\u6784\u6210\u201c\u987a\u5e8f\u5bf9\u201d\uff1b \u7b2c 2 \u6b65\uff0c$3$ \u51fa\u5217\uff0c$3$ \u6bd4\u201c\u540e\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u7684\u5143\u7d20\u90fd\u5c0f\uff0c\u6784\u6210\u201c\u987a\u5e8f\u5bf9\u201d\uff1b \u7b2c 3 \u6b65\uff0c$4$ \u51fa\u5217\uff0c\u5173\u952e\u7684\u5730\u65b9\u5728\u8fd9\u91cc\uff0c \u201c\u524d\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u5269\u4e0b\u7684\u5143\u7d20 $[5,8]$ \u6bd4 $4$ \u90fd\u5927\uff0c\u6784\u6210 $2$ \u4e2a \u201c\u9006\u5e8f\u5bf9\u201d \uff1b \u7b2c 4 \u6b65\uff0c$5$ \u51fa\u5217\uff0c$5$ \u6bd4\u201c\u540e\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u5269\u4e0b\u7684\u5143\u7d20\u90fd\u5c0f\uff0c\u6784\u6210\u201c\u987a\u5e8f\u5bf9\u201d\uff1b \u7b2c 5 \u6b65\uff0c$6$ \u51fa\u5217\uff0c \u201c\u524d\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u5269\u4e0b\u7684\u5143\u7d20 $[8]$ \u6bd4 $6$ \u90fd\u5927\uff0c\u6784\u6210 $1$ \u4e2a\u201c\u9006\u5e8f\u5bf9\u201d \uff1b \u7b2c 6 \u6b65\uff0c$7$ \u51fa\u5217\uff0c \u201c\u524d\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u5269\u4e0b\u7684\u5143\u7d20 $[8]$ \u6bd4 $7$ \u90fd\u5927\uff0c\u6784\u6210 $1$ \u4e2a\u201c\u9006\u5e8f\u5bf9\u201d \uff1b \u7b2c 7 \u6b65\uff0c$8$ \u51fa\u5217\uff0c$8$ \u6bd4\u201c\u540e\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6240\u6709\u5269\u4e0b\u7684\u5143\u7d20 $[8]$ \u90fd\u5c0f\uff0c\u6784\u6210 $1$ \u4e2a\u201c\u987a\u5e8f\u5bf9\u201d\uff1b \u7b2c 8 \u6b65\uff0c$12$ \u51fa\u5217\uff0c\u6b64\u65f6\u201c\u524d\u6709\u5e8f\u6570\u7ec4\u201d\u4e3a\u7a7a\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u201c\u524d\u6709\u5e8f\u6570\u7ec4\u201d\u975e\u7a7a\uff0c\u4e14\u201c\u540e\u6709\u5e8f\u6570\u7ec4\u201d\u4e2d\u6709\u5143\u7d20\u51fa\u5217\u7684\u65f6\u5019\uff0c\u5373\u4e0a\u9762\u7684\u7b2c 3\u30015\u30016 \u6b65\u8ba1\u7b97\u201c\u9006\u5e8f\u5bf9\u201d\u5c31\u53ef\u4ee5\u4e86\u3002 \u53c2\u8003\u4ee3\u7801\uff1a class Solution(object): def inversePairs1(self, nums): l = len(nums) if l < 2: return 0 res = 0 for i in range(0, l - 1): for j in range(i + 1, l): if nums[i] > nums[j]: res += 1 return res def inversePairs(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" l = len(nums) if l < 2: return 0 temp = [0 for _ in range(l)] return self.count_inversion_pairs(nums, 0, l - 1, temp) def count_inversion_pairs(self, nums, l, r, temp): \"\"\" \u5728\u6570\u7ec4 nums \u7684\u533a\u95f4 [l,r] \u7edf\u8ba1\u9006\u5e8f\u5bf9 :param nums: :param l: \u5f85\u7edf\u8ba1\u6570\u7ec4\u7684\u5de6\u8fb9\u754c\uff0c\u53ef\u4ee5\u53d6\u5230 :param r: \u5f85\u7edf\u8ba1\u6570\u7ec4\u7684\u53f3\u8fb9\u754c\uff0c\u53ef\u4ee5\u53d6\u5230 :param temp: :return: \"\"\" # \u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u5c31\u662f\u53ea\u6709 1 \u4e2a\u5143\u7d20\u7684\u65f6\u5019 if l == r: return 0 mid = l + (r - l) // 2 left_pairs = self.count_inversion_pairs(nums, l, mid, temp) right_pairs = self.count_inversion_pairs(nums, mid + 1, r, temp) merge_pairs = 0 # \u4ee3\u7801\u8d70\u5230\u8fd9\u91cc\u7684\u65f6\u5019\uff0c # [l, mid] \u5df2\u7ecf\u5b8c\u6210\u4e86\u6392\u5e8f\u5e76\u4e14\u8ba1\u7b97\u597d\u9006\u5e8f\u5bf9 # [mid + 1, r] \u5df2\u7ecf\u5b8c\u6210\u4e86\u6392\u5e8f\u5e76\u4e14\u8ba1\u7b97\u597d\u9006\u5e8f\u5bf9 # \u5982\u679c nums[mid] <= nums[mid + 1]\uff0c\u6b64\u65f6\u5c31\u4e0d\u5b58\u5728\u9006\u5e8f\u5bf9 # \u5f53 nums[mid] > nums[mid + 1] \u7684\u65f6\u5019\uff0c\u5c31\u8981\u7ee7\u7eed\u8ba1\u7b97\u9006\u5e8f\u5bf9 if nums[mid] > nums[mid + 1]: # \u5728\u5f52\u5e76\u7684\u8fc7\u7a0b\u4e2d\u8ba1\u7b97\u9006\u5e8f\u5bf9 merge_pairs = self.merge_and_count(nums, l, mid, r, temp) # \u8d70\u5230\u8fd9\u91cc\u6709 nums[mid] <= nums[mid + 1] \u6210\u7acb\uff0c\u5df2\u7ecf\u662f\u987a\u5e8f\u7ed3\u6784 return left_pairs + right_pairs + merge_pairs def merge_and_count(self, nums, l, mid, r, temp): \"\"\" \u524d\uff1a[2,3,5,8]\uff0c\u540e\uff1a[4,6,7,12] \u6211\u4eec\u53ea\u9700\u8981\u5728\u540e\u9762\u6570\u7ec4\u5143\u7d20\u51fa\u5217\u7684\u65f6\u5019\uff0c\u6570\u4e00\u6570\u524d\u9762\u8fd9\u4e2a\u6570\u7ec4\u8fd8\u5269\u4e0b\u591a\u5c11\u4e2a\u6570\u5b57\uff0c \u56e0\u4e3a\"\u524d\"\u6570\u7ec4\u548c\"\u540e\"\u6570\u7ec4\u90fd\u6709\u5e8f\uff0c \u56e0\u6b64\uff0c\"\u524d\"\u6570\u7ec4\u5269\u4e0b\u7684\u5143\u7d20\u4e2a\u6570 mid - i + 1 \u5c31\u662f\u4e0e\"\u540e\"\u6570\u7ec4\u5143\u7d20\u51fa\u5217\u7684\u8fd9\u4e2a\u5143\u7d20\u6784\u6210\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570 \"\"\" for i in range(l, r + 1): temp[i] = nums[i] i = l j = mid + 1 res = 0 for k in range(l, r + 1): if i > mid: nums[k] = temp[j] j += 1 elif j > r: nums[k] = temp[i] i += 1 elif temp[i] <= temp[j]: # \u4e0d\u7edf\u8ba1\u9006\u5e8f\u5bf9\uff0c\u53ea\u505a\u6392\u5e8f nums[k] = temp[i] i += 1 else: assert temp[i] > temp[j] nums[k] = temp[j] j += 1 # \u5feb\u5c31\u5feb\u5728\u8fd9\u91cc\uff0c\u4e00\u6b21\u53ef\u4ee5\u6570\u51fa\u4e00\u4e2a\u533a\u95f4\u7684\u4e2a\u6570\u7684\u9006\u5e8f\u5bf9 # \u4f8b\uff1a[7,8,9][4,6,9]\uff0c4 \u4e0e 7 \u4ee5\u53ca 7 \u524d\u9762\u6240\u6709\u7684\u6570\u90fd\u6784\u6210\u9006\u5e8f\u5bf9 res += (mid - i + 1) return res \u8bf4\u660e\uff1a\u5f52\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8981\u501f\u52a9\u989d\u5916\u7684\u8f85\u52a9\u7a7a\u95f4\uff0c\u4e3a\u6b64\u53ef\u4ee5\u5168\u5c40\u4f7f\u7528\u4e00\u4e2a\u548c\u539f\u59cb\u6570\u7ec4\u7b49\u957f\u7684\u8f85\u52a9\u6570\u7ec4\uff0c\u5426\u5219\u6bcf\u4e00\u6b21\u8fdb\u5165 merge \u51fd\u6570\u90fd\u8981 new \u65b0\u6570\u7ec4\uff0c\u5f00\u9500\u5f88\u5927\u3002 \u4e0a\u8ff0\u89e3\u6cd5\u7684\u7f3a\u70b9\u662f\u4fee\u6539\u4e86\u539f\u59cb\u6570\u7ec4\uff0c\u6392\u5e8f\u5b8c\u6210\u4ee5\u540e\uff0c\u9006\u5e8f\u6570\u5c31\u8ba1\u7b97\u51fa\u6765\u4e86\u3002\u4e3a\u6b64\uff1a\uff081\uff09\u6211\u4eec\u53ef\u4ee5\u5f15\u5165\u4e00\u4e2a\u7d22\u5f15\u6570\u7ec4\uff1b\uff082\uff09\u6216\u8005\u76f4\u63a5\u62f7\u8d1d\u4e00\u4e2a\u539f\u59cb\u6570\u7ec4\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u4fee\u6539\u539f\u59cb\u6570\u7ec4\u4e86\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 51. \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9"},{"location":"52/","text":"\u5251\u6307 Offer 52. \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u8282\u70b9 \u5251\u6307 Offer 52. \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u8282\u70b9 \uff1b \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e24\u4e2a\u94fe\u8868\uff0c\u627e\u51fa\u5b83\u4eec\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9\u3002 \u6837\u4f8b\uff1a \u7ed9\u51fa\u4e24\u4e2a\u94fe\u8868\u5982\u4e0b\u6240\u793a\uff1a A\uff1a a1 \u2192 a2 \u2198 c1 \u2192 c2 \u2192 c3 \u2197 B\uff1ab1 \u2192 b2 \u2192 b3 \u8f93\u51fa\u7b2c\u4e00\u4e2a\u516c\u5171\u8282\u70b9 c1\u3002 \u601d\u8def1\uff1a\u4e24\u4e2a\u94fe\u8868\u5982\u679c\u6709\u76f8\u540c\u8d77\u70b9\u7684\u8bdd\u5c31\u597d\u529e\u4e86\uff0c\u6240\u4ee5\u9996\u5148\u8981\u8ba1\u7b97\u51fa\u4e24\u4e2a\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u8fdb\u800c\u8ba1\u7b97\u5b83\u4eec\u7684\u5dee\u503c\u3002 Python \u4ee3\u7801\uff1a class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution(object): def __get_list_node_size(self, root): node = root size = 0 while node: size += 1 node = node.next return size def findFirstCommonNode(self, headA, headB): \"\"\" :type headA, headB: ListNode :rtype: ListNode \"\"\" if headA is None or headB is None: return None s1 = self.__get_list_node_size(headA) s2 = self.__get_list_node_size(headB) # \u6211\u4eec\u9ed8\u8ba4 l1 >= l2 h1 = headA h2 = headB if s2 > s1: # \u5982\u679c B \u957f\u5ea6\u66f4\u957f\uff0c\u628a\u4e8c\u8005\u4ea4\u6362 h1 = headB h2 = headA # \u73b0\u5728 h1 \u4e0a\u8d70 (s1 - s2) \u8fd9\u4e48\u591a\u957f\u5ea6 for _ in range(abs(s1 - s2)): h1 = h1.next # \u7136\u540e\u9f50\u5934\u5e76\u8fdb while h1 and h2 and h1.val != h2.val: h1 = h1.next h2 = h2.next # \u8d70\u5230\u8fd9\u91cc\uff0c\u5982\u679c\u662f\u56e0\u4e3a h1 \u548c h2 \u90fd\u7a7a\u4e86\uff0c\u8fd4\u56de Node if h1 is None and h2 is None: return None else: return h1 Java \u4ee3\u7801\uff1a class ListNode { int val; ListNode next; public ListNode(int val) { this.val = val; } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } // \u7b2c 52 \u9898\uff1a\u4e24\u4e2a\u94fe\u8868\u7684\u7b2c 1 \u4e2a\u516c\u5171\u8282\u70b9 P253 // \u53c2\u8003\u8d44\u6599\uff1a // 1\u3001https://blog.csdn.net/derrantcm/article/details/46761093 public class Solution { public static ListNode findFirstCommonNode(ListNode pHead1, ListNode pHead2) { ListNode p1 = pHead1; ListNode p2 = pHead2; while (p1 != p2) { p1 = (p1 != null ? p1.next : pHead2); p2 = (p2 != null ? p2.next : pHead1); } return p1; } } \u601d\u8def2\uff1a\u7528\u4e24\u4e2a\u6808\u3002 Python \u4ee3\u7801\uff1a\u5199\u6cd5\u4e0a\u8981\u6ce8\u610f\uff0c\u4e0d\u8981\u60f3\u5f53\u7136 class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution(object): def findFirstCommonNode(self, headA, headB): \"\"\" :type headA, headB: ListNode :rtype: ListNode \"\"\" if headA is None or headB is None: return None stack1 = [] stack2 = [] node1 = headA while node1: stack1.append(node1) node1 = node1.next node2 = headB while node2: stack2.append(node2) node2 = node2.next # \u6ce8\u610f\uff1a\u8fd9\u91cc\u6709\u9677\u9631\uff0c\u4e00\u5b9a\u8981\u5148\u8bbe\u7f6e\u4e00\u4e2a result \u7ed3\u70b9 # \u5982\u679c\u4e24\u4e2a\u94fe\u8868\u6ca1\u6709\u516c\u5171\u5143\u7d20\uff0cres \u4e0d\u4f1a\u88ab\u8d4b\u503c res = None while stack1 and stack2: node1 = stack1.pop() node2 = stack2.pop() if node1.val == node2.val: # \u8fd9\u91cc\u6682\u5b58\u4e00\u4e0b\uff0c\u6700\u540e\u4e00\u4e2a\u76f8\u7b49\u7684\u7ed3\u70b9\u624d\u662f\u6211\u4eec\u6c42\u7684 res = node1 continue if stack1 is None or stack2 is None: return None return res \u601d\u8def3\uff1a\u62fc\u6210\u4e00\u6837\u957f\uff0c\u8fd9\u4e2a\u5199\u6cd5\u8bb0\u4f4f\u5c31\u53ef\u4ee5\u4e86\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def findFirstCommonNode(self, headA, headB): \"\"\" :type headA, headB: ListNode :rtype: ListNode \"\"\" if headA is None or headB is None: return None p1 = headA p2 = headB while p1 != p2: if p1 is None: p1 = headB else: p1 = p1.next if p2 is None: p2 = headA else: p2 = p2.next return p1 LeetCode \u7b2c 160 \u9898\uff1a\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9 \u628a\u4e0d\u6574\u9f50\u7684\u5730\u65b9\u8865\u6574\u7406\uff0c\u7b54\u6848\u4e5f\u662f\u56fa\u5b9a\u5199\u6cd5\uff0c\u591a\u5199\u51e0\u904d\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None # \u601d\u8def\uff1a\u4e24\u4e2a\u94fe\u8868\u4e0d\u4e00\u6837\u957f\uff0c\u5c31\u60f3\u529e\u6cd5\u8ba9\u5b83\u4eec\u4e00\u6837\u957f\u3002 class Solution(object): def getIntersectionNode(self, headA, headB): \"\"\" :type head1, head1: ListNode :rtype: ListNode \"\"\" if headA is None or headB is None: return None node1 = headA node2 = headB while node1 != node2: if node1: node1 = node1.next else: node1 = headB if node2: node2 = node2.next else: node2 = headA return node1 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 52. \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u8282\u70b9"},{"location":"52/#offer-52","text":"\u5251\u6307 Offer 52. \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u8282\u70b9 \uff1b \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e24\u4e2a\u94fe\u8868\uff0c\u627e\u51fa\u5b83\u4eec\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9\u3002 \u6837\u4f8b\uff1a \u7ed9\u51fa\u4e24\u4e2a\u94fe\u8868\u5982\u4e0b\u6240\u793a\uff1a A\uff1a a1 \u2192 a2 \u2198 c1 \u2192 c2 \u2192 c3 \u2197 B\uff1ab1 \u2192 b2 \u2192 b3 \u8f93\u51fa\u7b2c\u4e00\u4e2a\u516c\u5171\u8282\u70b9 c1\u3002 \u601d\u8def1\uff1a\u4e24\u4e2a\u94fe\u8868\u5982\u679c\u6709\u76f8\u540c\u8d77\u70b9\u7684\u8bdd\u5c31\u597d\u529e\u4e86\uff0c\u6240\u4ee5\u9996\u5148\u8981\u8ba1\u7b97\u51fa\u4e24\u4e2a\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u8fdb\u800c\u8ba1\u7b97\u5b83\u4eec\u7684\u5dee\u503c\u3002 Python \u4ee3\u7801\uff1a class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution(object): def __get_list_node_size(self, root): node = root size = 0 while node: size += 1 node = node.next return size def findFirstCommonNode(self, headA, headB): \"\"\" :type headA, headB: ListNode :rtype: ListNode \"\"\" if headA is None or headB is None: return None s1 = self.__get_list_node_size(headA) s2 = self.__get_list_node_size(headB) # \u6211\u4eec\u9ed8\u8ba4 l1 >= l2 h1 = headA h2 = headB if s2 > s1: # \u5982\u679c B \u957f\u5ea6\u66f4\u957f\uff0c\u628a\u4e8c\u8005\u4ea4\u6362 h1 = headB h2 = headA # \u73b0\u5728 h1 \u4e0a\u8d70 (s1 - s2) \u8fd9\u4e48\u591a\u957f\u5ea6 for _ in range(abs(s1 - s2)): h1 = h1.next # \u7136\u540e\u9f50\u5934\u5e76\u8fdb while h1 and h2 and h1.val != h2.val: h1 = h1.next h2 = h2.next # \u8d70\u5230\u8fd9\u91cc\uff0c\u5982\u679c\u662f\u56e0\u4e3a h1 \u548c h2 \u90fd\u7a7a\u4e86\uff0c\u8fd4\u56de Node if h1 is None and h2 is None: return None else: return h1 Java \u4ee3\u7801\uff1a class ListNode { int val; ListNode next; public ListNode(int val) { this.val = val; } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } // \u7b2c 52 \u9898\uff1a\u4e24\u4e2a\u94fe\u8868\u7684\u7b2c 1 \u4e2a\u516c\u5171\u8282\u70b9 P253 // \u53c2\u8003\u8d44\u6599\uff1a // 1\u3001https://blog.csdn.net/derrantcm/article/details/46761093 public class Solution { public static ListNode findFirstCommonNode(ListNode pHead1, ListNode pHead2) { ListNode p1 = pHead1; ListNode p2 = pHead2; while (p1 != p2) { p1 = (p1 != null ? p1.next : pHead2); p2 = (p2 != null ? p2.next : pHead1); } return p1; } } \u601d\u8def2\uff1a\u7528\u4e24\u4e2a\u6808\u3002 Python \u4ee3\u7801\uff1a\u5199\u6cd5\u4e0a\u8981\u6ce8\u610f\uff0c\u4e0d\u8981\u60f3\u5f53\u7136 class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution(object): def findFirstCommonNode(self, headA, headB): \"\"\" :type headA, headB: ListNode :rtype: ListNode \"\"\" if headA is None or headB is None: return None stack1 = [] stack2 = [] node1 = headA while node1: stack1.append(node1) node1 = node1.next node2 = headB while node2: stack2.append(node2) node2 = node2.next # \u6ce8\u610f\uff1a\u8fd9\u91cc\u6709\u9677\u9631\uff0c\u4e00\u5b9a\u8981\u5148\u8bbe\u7f6e\u4e00\u4e2a result \u7ed3\u70b9 # \u5982\u679c\u4e24\u4e2a\u94fe\u8868\u6ca1\u6709\u516c\u5171\u5143\u7d20\uff0cres \u4e0d\u4f1a\u88ab\u8d4b\u503c res = None while stack1 and stack2: node1 = stack1.pop() node2 = stack2.pop() if node1.val == node2.val: # \u8fd9\u91cc\u6682\u5b58\u4e00\u4e0b\uff0c\u6700\u540e\u4e00\u4e2a\u76f8\u7b49\u7684\u7ed3\u70b9\u624d\u662f\u6211\u4eec\u6c42\u7684 res = node1 continue if stack1 is None or stack2 is None: return None return res \u601d\u8def3\uff1a\u62fc\u6210\u4e00\u6837\u957f\uff0c\u8fd9\u4e2a\u5199\u6cd5\u8bb0\u4f4f\u5c31\u53ef\u4ee5\u4e86\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def findFirstCommonNode(self, headA, headB): \"\"\" :type headA, headB: ListNode :rtype: ListNode \"\"\" if headA is None or headB is None: return None p1 = headA p2 = headB while p1 != p2: if p1 is None: p1 = headB else: p1 = p1.next if p2 is None: p2 = headA else: p2 = p2.next return p1","title":"\u5251\u6307 Offer 52. \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u8282\u70b9"},{"location":"52/#leetcode-160","text":"\u628a\u4e0d\u6574\u9f50\u7684\u5730\u65b9\u8865\u6574\u7406\uff0c\u7b54\u6848\u4e5f\u662f\u56fa\u5b9a\u5199\u6cd5\uff0c\u591a\u5199\u51e0\u904d\u3002 Python \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None # \u601d\u8def\uff1a\u4e24\u4e2a\u94fe\u8868\u4e0d\u4e00\u6837\u957f\uff0c\u5c31\u60f3\u529e\u6cd5\u8ba9\u5b83\u4eec\u4e00\u6837\u957f\u3002 class Solution(object): def getIntersectionNode(self, headA, headB): \"\"\" :type head1, head1: ListNode :rtype: ListNode \"\"\" if headA is None or headB is None: return None node1 = headA node2 = headB while node1 != node2: if node1: node1 = node1.next else: node1 = headB if node2: node2 = node2.next else: node2 = headA return node1 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"LeetCode \u7b2c 160 \u9898\uff1a\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9"},{"location":"53-2/","text":"\u5251\u6307 Offer 53 - II. 0\uff5en-1\u4e2d\u7f3a\u5931\u7684\u6570\u5b57 \u5251\u6307 Offer 53 - II. 0\uff5en-1\u4e2d\u7f3a\u5931\u7684\u6570\u5b57","title":"\u5251\u6307 Offer 53 - II. 0\uff5en-1\u4e2d\u7f3a\u5931\u7684\u6570\u5b57"},{"location":"53-2/#offer-53-ii-0n-1","text":"\u5251\u6307 Offer 53 - II. 0\uff5en-1\u4e2d\u7f3a\u5931\u7684\u6570\u5b57","title":"\u5251\u6307 Offer 53 - II. 0\uff5en-1\u4e2d\u7f3a\u5931\u7684\u6570\u5b57"},{"location":"53/","text":"\u5251\u6307 Offer 53 - I. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u6570\u5b57 I \u5251\u6307 Offer 53 - I. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u6570\u5b57 I \uff1b \u4f20\u9001\u95e8\uff1a \u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u3002 \u7edf\u8ba1\u4e00\u4e2a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u4f8b\u5982\u8f93\u5165\u6392\u5e8f\u6570\u7ec4 [1, 2, 3, 3, 3, 3, 4, 5] \u548c\u6570\u5b57 3 \uff0c\u7531\u4e8e 3 \u5728\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u4e86 4 \u6b21\uff0c\u56e0\u6b64\u8f93\u51fa4\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1, 2, 3, 3, 3, 3, 4, 5] , 3 \u8f93\u51fa\uff1a4 \u53c2\u8003\u8d44\u6599\uff1a \u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09\u7b2c 53 \u9898\uff1a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u3002 \u601d\u8def1\uff1a\u5199\u4e00\u4e2a\u4e8c\u5206\u6cd5\uff0c\u4f7f\u7528\u4e8c\u5206\u6cd5\u627e\u5230\u5927\u4e8e\u7b49\u4e8e $k$ \u7684\u7b2c $1$ \u4e2a\u6570\u7684\u4e0b\u6807\uff0c\u518d\u4f7f\u7528\u4e8c\u5206\u6cd5\u627e\u5230\u5927\u4e8e\u7b49\u4e8e $k+1$ \u7684\u7b2c $1$ \u4e2a\u6570\u7684\u4e0b\u6807\uff0c\u4e8c\u8005\u4e4b\u5dee\u5373\u4e3a\u6240\u6c42\u3002\u7279\u522b\u6ce8\u610f\uff0c\u8fd9\u91cc\u662f\u5982\u4f55\u4f7f\u7528\u4e8c\u5206\u6cd5\u7684\u3002 Python \u4ee3\u7801\uff1a class Solution(object): # \u8fd4\u56de\u5927\u4e8e\u7b49\u4e8e target \u7684\u7b2c 1 \u4e2a\u6570 def get_left(self, nums, target): # [2,3,4,5,5,5,5,5,5,5] # [1,1,1,1,1,1,1,1,1,2,3,4,5,5,5,5,5,5,5] if nums[0] == target: return 0 l = 1 r = len(nums) while l < r: mid = l + (r - l) // 2 if nums[mid] < target: l = mid + 1 else: assert nums[mid] >= target # \u4e0d\u80fd\u6392\u9664 mid r = mid return l def getNumberOfK(self, nums, k): \"\"\" :type nums: list[int] :type k: int :rtype: int \"\"\" size = len(nums) if size == 0: return 0 return self.get_left(nums, k + 1) - self.get_left(nums, k) \u4e25\u683c\u6309\u7167\u4e8c\u5206\u6cd5\u6a21\u677f\u7684\u8bdd\uff0c\u4ee3\u7801\u8981\u8fd9\u6837\u5199\uff1a Python \u4ee3\u7801\uff1a class Solution(object): def getNumberOfK(self, nums, k): \"\"\" :type nums: list[int] :type k: int :rtype: int \"\"\" size = len(nums) if size == 0: return 0 # \u8bbe\u7f6e\u8f85\u52a9\u51fd\u6570\uff0c\u7ed9\u4e00\u4e2a nums\uff0c\u4e00\u4e2a k\uff0c\u8fd4\u56de\u5927\u4e8e\u7b49\u4e8e k \u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u7d22\u5f15 return self.__helper(nums, k + 1) - self.__helper(nums, k) def __helper(self, nums, k): \"\"\" \u8fd4\u56de\u5927\u4e8e\u7b49\u4e8e k \u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u7d22\u5f15 :param nums: :param k: :return: \"\"\" size = len(nums) if size == 0: return 0 l = 0 # \u6ce8\u610f\uff1a\u8fd9\u91cc\u4e00\u5b9a\u8981\u5199 size r = size - 1 while l < r: mid = l + (r - l) // 2 if nums[mid] >= k: r = mid else: assert nums[mid] < k # [1,2,3,4,5] l = mid + 1 # \u56e0\u4e3a k \u6709\u53ef\u80fd\u4e0d\u5b58\u5728\uff0c\u6240\u4ee5\u4e0d\u4e00\u5b9a\u7b26\u5408\u8981\u6c42\uff0c\u6240\u4ee5\u4e00\u5b9a\u8981\u5355\u72ec\u5224\u65ad\u4e00\u4e0b if nums[l] != k: if nums[size - 1] < k: return size elif nums[0] > k: return 0 return l C++ \u4ee3\u7801\uff1a class Solution { public: int getNumberOfK(vector<int>& nums , int k) { if (nums.empty()) return 0; return helper(nums, k + 1) - helper(nums, k); } int helper(vector<int>& nums, int k){ int l = 0, r = nums.size(); while (l < r){ int m = l + (r - l) / 2; if (nums[m] < k) l = m + 1; else r = m; } return l; } }; \u601d\u8def2\uff1a\u5199\u4e24\u4e2a\u4e8c\u5206\u6cd5\uff0c\u4e00\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4e00\u4e2a\u6570\u6700\u53f3\u8fb9\u7684\u7d22\u5f15 - \u4e00\u4e2a\u6570\u6700\u5de6\u8fb9\u7684\u7d22\u5f15 + 1\u3002 # # 56\u3001\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 # \u7edf\u8ba1\u4e00\u4e2a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002 # # \u4f8b\u5982\u8f93\u5165\u6392\u5e8f\u6570\u7ec4[1, 2, 3, 3, 3, 3, 4, 5]\u548c\u6570\u5b573\uff0c\u7531\u4e8e3\u5728\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u4e864\u6b21\uff0c\u56e0\u6b64\u8f93\u51fa4\u3002 class Solution(object): def getNumberOfK(self, nums, k): \"\"\" :type nums: list[int] :type k: int :rtype: int \"\"\" size = len(nums) if size == 0: return 0 # \u8bbe\u7f6e\u8f85\u52a9\u51fd\u6570\uff0c\u7ed9\u4e00\u4e2a nums\uff0c\u4e00\u4e2a k\uff0c\u8fd4\u56de\u5927\u4e8e\u7b49\u4e8e k \u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u7d22\u5f15 k_right = self.__get_right_k(nums, k) k_left = self.__get_left_k(nums, k) if k_right == -1 or k_left == -1: return 0 return k_right - k_left + 1 def __get_right_k(self, nums, k): # \u627e\u5230\u6700\u53f3\u8fb9\u7684 index \uff0c\u4f7f\u5f97 nums[index] = k size = len(nums) if size == 0: return -1 l = 0 r = size - 1 while l < r: mid = l + (r - l + 1) // 2 if nums[mid] <= k: # [1,2,5,5,5,7] l = mid elif nums[mid] > k: r = mid - 1 if nums[l] != k: return -1 return l def __get_left_k(self, nums, k): # \u627e\u5230\u6700\u5de6\u8fb9\u7684 index \uff0c\u4f7f\u5f97 nums[index] = k size = len(nums) if size == 0: return -1 l = 0 r = size - 1 while l < r: mid = l + (r - l) // 2 if nums[mid] >= k: r = mid else: assert nums[mid] < k l = mid + 1 if nums[l] != k: return -1 return l if __name__ == '__main__': nums = [2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 6, 7, 8, 9, 10] k = 5 solution = Solution() # result = solution.get_left(nums, 5, ) # print(result) result = solution.getNumberOfK(nums, k) print(result) MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 53 - I. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u6570\u5b57 I"},{"location":"53/#offer-53-i-i","text":"\u5251\u6307 Offer 53 - I. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u6570\u5b57 I \uff1b \u4f20\u9001\u95e8\uff1a \u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u3002 \u7edf\u8ba1\u4e00\u4e2a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u4f8b\u5982\u8f93\u5165\u6392\u5e8f\u6570\u7ec4 [1, 2, 3, 3, 3, 3, 4, 5] \u548c\u6570\u5b57 3 \uff0c\u7531\u4e8e 3 \u5728\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u4e86 4 \u6b21\uff0c\u56e0\u6b64\u8f93\u51fa4\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1, 2, 3, 3, 3, 3, 4, 5] , 3 \u8f93\u51fa\uff1a4 \u53c2\u8003\u8d44\u6599\uff1a \u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09\u7b2c 53 \u9898\uff1a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u3002 \u601d\u8def1\uff1a\u5199\u4e00\u4e2a\u4e8c\u5206\u6cd5\uff0c\u4f7f\u7528\u4e8c\u5206\u6cd5\u627e\u5230\u5927\u4e8e\u7b49\u4e8e $k$ \u7684\u7b2c $1$ \u4e2a\u6570\u7684\u4e0b\u6807\uff0c\u518d\u4f7f\u7528\u4e8c\u5206\u6cd5\u627e\u5230\u5927\u4e8e\u7b49\u4e8e $k+1$ \u7684\u7b2c $1$ \u4e2a\u6570\u7684\u4e0b\u6807\uff0c\u4e8c\u8005\u4e4b\u5dee\u5373\u4e3a\u6240\u6c42\u3002\u7279\u522b\u6ce8\u610f\uff0c\u8fd9\u91cc\u662f\u5982\u4f55\u4f7f\u7528\u4e8c\u5206\u6cd5\u7684\u3002 Python \u4ee3\u7801\uff1a class Solution(object): # \u8fd4\u56de\u5927\u4e8e\u7b49\u4e8e target \u7684\u7b2c 1 \u4e2a\u6570 def get_left(self, nums, target): # [2,3,4,5,5,5,5,5,5,5] # [1,1,1,1,1,1,1,1,1,2,3,4,5,5,5,5,5,5,5] if nums[0] == target: return 0 l = 1 r = len(nums) while l < r: mid = l + (r - l) // 2 if nums[mid] < target: l = mid + 1 else: assert nums[mid] >= target # \u4e0d\u80fd\u6392\u9664 mid r = mid return l def getNumberOfK(self, nums, k): \"\"\" :type nums: list[int] :type k: int :rtype: int \"\"\" size = len(nums) if size == 0: return 0 return self.get_left(nums, k + 1) - self.get_left(nums, k) \u4e25\u683c\u6309\u7167\u4e8c\u5206\u6cd5\u6a21\u677f\u7684\u8bdd\uff0c\u4ee3\u7801\u8981\u8fd9\u6837\u5199\uff1a Python \u4ee3\u7801\uff1a class Solution(object): def getNumberOfK(self, nums, k): \"\"\" :type nums: list[int] :type k: int :rtype: int \"\"\" size = len(nums) if size == 0: return 0 # \u8bbe\u7f6e\u8f85\u52a9\u51fd\u6570\uff0c\u7ed9\u4e00\u4e2a nums\uff0c\u4e00\u4e2a k\uff0c\u8fd4\u56de\u5927\u4e8e\u7b49\u4e8e k \u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u7d22\u5f15 return self.__helper(nums, k + 1) - self.__helper(nums, k) def __helper(self, nums, k): \"\"\" \u8fd4\u56de\u5927\u4e8e\u7b49\u4e8e k \u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u7d22\u5f15 :param nums: :param k: :return: \"\"\" size = len(nums) if size == 0: return 0 l = 0 # \u6ce8\u610f\uff1a\u8fd9\u91cc\u4e00\u5b9a\u8981\u5199 size r = size - 1 while l < r: mid = l + (r - l) // 2 if nums[mid] >= k: r = mid else: assert nums[mid] < k # [1,2,3,4,5] l = mid + 1 # \u56e0\u4e3a k \u6709\u53ef\u80fd\u4e0d\u5b58\u5728\uff0c\u6240\u4ee5\u4e0d\u4e00\u5b9a\u7b26\u5408\u8981\u6c42\uff0c\u6240\u4ee5\u4e00\u5b9a\u8981\u5355\u72ec\u5224\u65ad\u4e00\u4e0b if nums[l] != k: if nums[size - 1] < k: return size elif nums[0] > k: return 0 return l C++ \u4ee3\u7801\uff1a class Solution { public: int getNumberOfK(vector<int>& nums , int k) { if (nums.empty()) return 0; return helper(nums, k + 1) - helper(nums, k); } int helper(vector<int>& nums, int k){ int l = 0, r = nums.size(); while (l < r){ int m = l + (r - l) / 2; if (nums[m] < k) l = m + 1; else r = m; } return l; } }; \u601d\u8def2\uff1a\u5199\u4e24\u4e2a\u4e8c\u5206\u6cd5\uff0c\u4e00\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4e00\u4e2a\u6570\u6700\u53f3\u8fb9\u7684\u7d22\u5f15 - \u4e00\u4e2a\u6570\u6700\u5de6\u8fb9\u7684\u7d22\u5f15 + 1\u3002 # # 56\u3001\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 # \u7edf\u8ba1\u4e00\u4e2a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002 # # \u4f8b\u5982\u8f93\u5165\u6392\u5e8f\u6570\u7ec4[1, 2, 3, 3, 3, 3, 4, 5]\u548c\u6570\u5b573\uff0c\u7531\u4e8e3\u5728\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u4e864\u6b21\uff0c\u56e0\u6b64\u8f93\u51fa4\u3002 class Solution(object): def getNumberOfK(self, nums, k): \"\"\" :type nums: list[int] :type k: int :rtype: int \"\"\" size = len(nums) if size == 0: return 0 # \u8bbe\u7f6e\u8f85\u52a9\u51fd\u6570\uff0c\u7ed9\u4e00\u4e2a nums\uff0c\u4e00\u4e2a k\uff0c\u8fd4\u56de\u5927\u4e8e\u7b49\u4e8e k \u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u7d22\u5f15 k_right = self.__get_right_k(nums, k) k_left = self.__get_left_k(nums, k) if k_right == -1 or k_left == -1: return 0 return k_right - k_left + 1 def __get_right_k(self, nums, k): # \u627e\u5230\u6700\u53f3\u8fb9\u7684 index \uff0c\u4f7f\u5f97 nums[index] = k size = len(nums) if size == 0: return -1 l = 0 r = size - 1 while l < r: mid = l + (r - l + 1) // 2 if nums[mid] <= k: # [1,2,5,5,5,7] l = mid elif nums[mid] > k: r = mid - 1 if nums[l] != k: return -1 return l def __get_left_k(self, nums, k): # \u627e\u5230\u6700\u5de6\u8fb9\u7684 index \uff0c\u4f7f\u5f97 nums[index] = k size = len(nums) if size == 0: return -1 l = 0 r = size - 1 while l < r: mid = l + (r - l) // 2 if nums[mid] >= k: r = mid else: assert nums[mid] < k l = mid + 1 if nums[l] != k: return -1 return l if __name__ == '__main__': nums = [2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 6, 7, 8, 9, 10] k = 5 solution = Solution() # result = solution.get_left(nums, 5, ) # print(result) result = solution.getNumberOfK(nums, k) print(result) MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 53 - I. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u6570\u5b57 I"},{"location":"54/","text":"\u5251\u6307 Offer 54. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2ck\u5927\u8282\u70b9 \u5251\u6307 Offer 54. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2ck\u5927\u8282\u70b9 \uff1b \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2c k \u5927\u7ed3\u70b9 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u627e\u51fa\u5176\u4e2d\u7684\u7b2c $k$ \u5c0f\u7684\u7ed3\u70b9\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u548c $k$ \u90fd\u5b58\u5728\uff0c\u5e76\u4e14 1\u2264 k \u2264 \u6811\u7684\u603b\u7ed3\u70b9\u6570\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a root = [2, 1, 3, null, null, null, null] \uff0c k = 3 2 / \\ 1 3 \u8f93\u51fa\uff1a3 \u601d\u8def\uff1a\u4f7f\u7528\u6808\u6a21\u62df BST \u7684\u4e2d\u5e8f\u904d\u5386\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def kthNode(self, root, k): \"\"\" :type root: TreeNode :type k: int :rtype: TreeNode \"\"\" if root is None: return None # 1 \u8868\u793a\u9012\u5f52\u5904\u7406\uff0c0 \u8868\u793a\u5f53\u524d\u6211\u5c31\u8981\u5904\u7406\u8fd9\u4e2a\u7ed3\u70b9 stack = [(1, root)] while stack: type, node = stack.pop() if type == 0: k -= 1 if k == 0: return node else: if node.right: stack.append((1, node.right)) stack.append((0, node)) if node.left: stack.append((1, node.left)) MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 54. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2ck\u5927\u8282\u70b9"},{"location":"54/#offer-54-k","text":"\u5251\u6307 Offer 54. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2ck\u5927\u8282\u70b9 \uff1b \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2c k \u5927\u7ed3\u70b9 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u627e\u51fa\u5176\u4e2d\u7684\u7b2c $k$ \u5c0f\u7684\u7ed3\u70b9\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u548c $k$ \u90fd\u5b58\u5728\uff0c\u5e76\u4e14 1\u2264 k \u2264 \u6811\u7684\u603b\u7ed3\u70b9\u6570\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a root = [2, 1, 3, null, null, null, null] \uff0c k = 3 2 / \\ 1 3 \u8f93\u51fa\uff1a3 \u601d\u8def\uff1a\u4f7f\u7528\u6808\u6a21\u62df BST \u7684\u4e2d\u5e8f\u904d\u5386\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def kthNode(self, root, k): \"\"\" :type root: TreeNode :type k: int :rtype: TreeNode \"\"\" if root is None: return None # 1 \u8868\u793a\u9012\u5f52\u5904\u7406\uff0c0 \u8868\u793a\u5f53\u524d\u6211\u5c31\u8981\u5904\u7406\u8fd9\u4e2a\u7ed3\u70b9 stack = [(1, root)] while stack: type, node = stack.pop() if type == 0: k -= 1 if k == 0: return node else: if node.right: stack.append((1, node.right)) stack.append((0, node)) if node.left: stack.append((1, node.left)) MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 54. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2ck\u5927\u8282\u70b9"},{"location":"55-2/","text":"\u5251\u6307 Offer 55 - II. \u5e73\u8861\u4e8c\u53c9\u6811 \u5251\u6307 Offer 55 - II. \u5e73\u8861\u4e8c\u53c9\u6811 \uff1b \u5e73\u8861\u4e8c\u53c9\u6811 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u5224\u65ad\u8be5\u6811\u662f\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811\u3002 \u5982\u679c\u67d0\u4e8c\u53c9\u6811\u4e2d\u4efb\u610f\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u7684\u6df1\u5ea6\u76f8\u5dee\u4e0d\u8d85\u8fc7 $1$\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811\u3002 \u6ce8\u610f\uff1a \u89c4\u5b9a\u7a7a\u6811\u4e5f\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\u4e8c\u53c9\u6811 [5,7,11,null,null,12,9,null,null,null,null] \u5982\u4e0b\u6240\u793a\uff0c 5 / \\ 7 11 / \\ 12 9 \u8f93\u51fa\uff1atrue \u601d\u8def\uff1a\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08 \u540e\u5e8f\u904d\u5386 \uff09\u3002 Python \u4ee3\u7801\uff1a # Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution(object): # \u5168\u5c40\u53d8\u91cf flag = 1 def isBalanced(self, root): \"\"\" :type root: TreeNode :rtype: bool \"\"\" if root is None: return True self.__dfs(root) return self.flag def __dfs(self, node): \"\"\" \u8fd4\u56de\u4ee5 root \u4e3a\u6839\u7684\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\uff0c\u5982\u679c\u5de6\u53f3\u5b50\u6811\u5176\u4e2d\u4e4b\u4e00\u4e0d\u662f AVL \uff0c\u5219\u8fd4\u56de -1 :param node: :return: \"\"\" if node is None: return 0 left = self.__dfs(node.left) right = self.__dfs(node.right) if abs(left - right) > 1: self.flag = 0 # \u8fd9\u91cc\u4e0d\u80fd\u5199 return return max(left, right) + 1 Java \u4ee3\u7801\uff1a class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } // \u7b2c 55 \u9898\uff1a\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\uff08\u5224\u65ad\u662f\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff09 // \u53ef\u4ee5\u63d0\u4ea4\u5230 LeetCode \u7b2c 110 \u9898\u7684\u6d4b\u8bd5\u7528\u4f8b // \u53c2\u8003\u8d44\u65991\uff1a // https://blog.csdn.net/derrantcm/article/details/46771529 public class Solution { public boolean isBalanced(TreeNode root) { if (root == null) { return true; } int[] depth = new int[1]; depth[0] = 0; return postOrder(root, depth); } // \u540e\u5e8f\u904d\u5386 private boolean postOrder(TreeNode node, int[] depth) { if (node == null) { depth[0] = 0; return true; } int[] left = new int[1]; int[] right = new int[1]; // \u5982\u679c\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u90fd\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u76f4\u63a5\u5c31\u8d70\u5230\u6700\u540e\uff0c\u8fd4\u56de false if (postOrder(node.left, left) && postOrder(node.right, right)) { int diff = left[0] - right[0]; if (diff <= 1 && diff >= -1) { depth[0] = Integer.max(left[0], right[0]) + 1; return true; } } return false; } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 55 - II. \u5e73\u8861\u4e8c\u53c9\u6811"},{"location":"55-2/#offer-55-ii","text":"\u5251\u6307 Offer 55 - II. \u5e73\u8861\u4e8c\u53c9\u6811 \uff1b \u5e73\u8861\u4e8c\u53c9\u6811 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u5224\u65ad\u8be5\u6811\u662f\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811\u3002 \u5982\u679c\u67d0\u4e8c\u53c9\u6811\u4e2d\u4efb\u610f\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u7684\u6df1\u5ea6\u76f8\u5dee\u4e0d\u8d85\u8fc7 $1$\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811\u3002 \u6ce8\u610f\uff1a \u89c4\u5b9a\u7a7a\u6811\u4e5f\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\u4e8c\u53c9\u6811 [5,7,11,null,null,12,9,null,null,null,null] \u5982\u4e0b\u6240\u793a\uff0c 5 / \\ 7 11 / \\ 12 9 \u8f93\u51fa\uff1atrue \u601d\u8def\uff1a\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08 \u540e\u5e8f\u904d\u5386 \uff09\u3002 Python \u4ee3\u7801\uff1a # Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution(object): # \u5168\u5c40\u53d8\u91cf flag = 1 def isBalanced(self, root): \"\"\" :type root: TreeNode :rtype: bool \"\"\" if root is None: return True self.__dfs(root) return self.flag def __dfs(self, node): \"\"\" \u8fd4\u56de\u4ee5 root \u4e3a\u6839\u7684\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\uff0c\u5982\u679c\u5de6\u53f3\u5b50\u6811\u5176\u4e2d\u4e4b\u4e00\u4e0d\u662f AVL \uff0c\u5219\u8fd4\u56de -1 :param node: :return: \"\"\" if node is None: return 0 left = self.__dfs(node.left) right = self.__dfs(node.right) if abs(left - right) > 1: self.flag = 0 # \u8fd9\u91cc\u4e0d\u80fd\u5199 return return max(left, right) + 1 Java \u4ee3\u7801\uff1a class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } // \u7b2c 55 \u9898\uff1a\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\uff08\u5224\u65ad\u662f\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff09 // \u53ef\u4ee5\u63d0\u4ea4\u5230 LeetCode \u7b2c 110 \u9898\u7684\u6d4b\u8bd5\u7528\u4f8b // \u53c2\u8003\u8d44\u65991\uff1a // https://blog.csdn.net/derrantcm/article/details/46771529 public class Solution { public boolean isBalanced(TreeNode root) { if (root == null) { return true; } int[] depth = new int[1]; depth[0] = 0; return postOrder(root, depth); } // \u540e\u5e8f\u904d\u5386 private boolean postOrder(TreeNode node, int[] depth) { if (node == null) { depth[0] = 0; return true; } int[] left = new int[1]; int[] right = new int[1]; // \u5982\u679c\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u90fd\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u76f4\u63a5\u5c31\u8d70\u5230\u6700\u540e\uff0c\u8fd4\u56de false if (postOrder(node.left, left) && postOrder(node.right, right)) { int diff = left[0] - right[0]; if (diff <= 1 && diff >= -1) { depth[0] = Integer.max(left[0], right[0]) + 1; return true; } } return false; } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 55 - II. \u5e73\u8861\u4e8c\u53c9\u6811"},{"location":"55/","text":"\u5251\u6307 Offer 55 - I. \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 \u5251\u6307 Offer 55 - I. \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 \uff1b \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002\u3002 \u7b2c 55-1 \u9898\uff1a\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 \u4f20\u9001 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u6c42\u8be5\u6811\u7684\u6df1\u5ea6\u3002 \u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u4f9d\u6b21\u7ecf\u8fc7\u7684\u7ed3\u70b9\uff08\u542b\u6839\u3001\u53f6\u7ed3\u70b9\uff09\u5f62\u6210\u6811\u7684\u4e00\u6761\u8def\u5f84\uff0c\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u4e3a\u6811\u7684\u6df1\u5ea6\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\u4e8c\u53c9\u6811 [8, 12, 2, null, null, 6, 4, null, null, null, null] \u5982\u4e0b\u56fe\u6240\u793a\uff1a 8 / \\ 12 2 / \\ 6 4 \u8f93\u51fa\uff1a3 \u601d\u8def\uff1a\u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u3002 Python \u4ee3\u7801\uff1a class Solution: def treeDepth(self, root): \"\"\" :type root: TreeNode :rtype: int \"\"\" if root is None: return 0 queue = [(1, root)] res = 0 while queue: top = queue.pop(0) cur_depth, node = top[0], top[1] res = max(res, cur_depth) if node.left: queue.append((cur_depth + 1, node.left)) if node.right: queue.append((cur_depth + 1, node.right)) return res MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 55 - I. \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6"},{"location":"55/#offer-55-i","text":"\u5251\u6307 Offer 55 - I. \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 \uff1b \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002\u3002","title":"\u5251\u6307 Offer 55 - I. \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6"},{"location":"55/#55-1","text":"\u4f20\u9001 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u6c42\u8be5\u6811\u7684\u6df1\u5ea6\u3002 \u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u4f9d\u6b21\u7ecf\u8fc7\u7684\u7ed3\u70b9\uff08\u542b\u6839\u3001\u53f6\u7ed3\u70b9\uff09\u5f62\u6210\u6811\u7684\u4e00\u6761\u8def\u5f84\uff0c\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u4e3a\u6811\u7684\u6df1\u5ea6\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a\u4e8c\u53c9\u6811 [8, 12, 2, null, null, 6, 4, null, null, null, null] \u5982\u4e0b\u56fe\u6240\u793a\uff1a 8 / \\ 12 2 / \\ 6 4 \u8f93\u51fa\uff1a3 \u601d\u8def\uff1a\u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u3002 Python \u4ee3\u7801\uff1a class Solution: def treeDepth(self, root): \"\"\" :type root: TreeNode :rtype: int \"\"\" if root is None: return 0 queue = [(1, root)] res = 0 while queue: top = queue.pop(0) cur_depth, node = top[0], top[1] res = max(res, cur_depth) if node.left: queue.append((cur_depth + 1, node.left)) if node.right: queue.append((cur_depth + 1, node.right)) return res MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 55-1 \u9898\uff1a\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6"},{"location":"56-2/","text":"\u5251\u6307 Offer 56 - II. \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 II \u5251\u6307 Offer 56 - II. \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 II","title":"\u5251\u6307 Offer 56 - II. \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 II"},{"location":"56-2/#offer-56-ii-ii","text":"\u5251\u6307 Offer 56 - II. \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 II","title":"\u5251\u6307 Offer 56 - II. \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 II"},{"location":"56/","text":"\u5251\u6307 Offer 56 - I. \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 \u5251\u6307 Offer 56 - I. \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 \uff1b \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u4e24\u4e2a\u6570\u5b57 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7b2c 56-1 \u9898\uff1a\u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u4e24\u4e2a\u6570\u5b57 \u4f20\u9001\u95e8\uff1a \u4e00\u4e2a\u6574\u578b\u6570\u7ec4\u91cc\u9664\u4e86\u4e24\u4e2a\u6570\u5b57\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e24\u6b21\u3002 \u8bf7\u5199\u7a0b\u5e8f\u627e\u51fa\u8fd9\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u8fd9\u4e24\u4e2a\u6570\u5b57\u4e00\u5b9a\u5b58\u5728\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a$[1,2,3,3,4,4]$ \u8f93\u51fa\uff1a$[1,2]$ \u601d\u8def\uff1a==\u6309\u4f4d\u5206\u7ec4==\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def findNumsAppearOnce(self, nums): \"\"\" :type nums: List[int] :rtype: List[int] \"\"\" l = len(nums) if l < 2: raise Exception('\u7a0b\u5e8f\u51fa\u9519') if l == 2: return nums # \u5168\u90e8\u76f8\u4e0e\u4e00\u904d xor = 0 for num in nums: xor ^= num # \u6700\u672b\u5c3e\u7684 1 \u4ece\u53f3\u5411\u5de6\u8fb9\u6570\u5728\u7b2c\u51e0\u4f4d counter = 0 while xor & 1 == 0: xor >>= 1 counter += 1 res = [0, 0] for num in nums: if (num >> counter) & 1 == 1: res[1] ^= num else: res[0] ^= num return res Java \u4ee3\u7801\uff1a import java.util.Arrays; // \u7b2c 56 \u9898\uff1a\u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 P275 // \u53c2\u8003\u8d44\u6599\uff1a // 1\u3001https://blog.csdn.net/derrantcm/article/details/46771717 public class Solution { // \u8003\u5bdf\u4f4d\u8fd0\u7b97\uff1a\u6216\u3001\u4e0e\u3001\u5f02\u6216\u3001\u975e\uff0c\u4ee5\u53ca\u65e0\u7b26\u53f7\u5de6\u79fb >>> public int[] findNumbersAppearanceOnce(int[] nums) { int len = nums.length; int[] res = new int[2]; assert len >= 2; if (len == 2) { return nums; } // \u90a3\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u7684\u5f02\u6216\u8fd0\u7b97\u7684\u7ed3\u679c int xor = xor(nums); // \u5173\u952e\u5728\u8fd9\u91cc // \u627e\u5230\u8fd9\u4e2a xor \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7b2c 1 \u4e2a\u662f 1 \u7684\u6570\u4f4d\u662f\u7b2c\u51e0\u4f4d int binaryFirstNotZero = binaryFirstNotZero(xor); // \u63a5\u4e0b\u6765\u5206\u522b\u5bf9\u4e24\u7ec4\u8fdb\u884c\u5f02\u6216 for (int i = 0; i < len; i++) { // \u5982\u679c\u8fd9\u4e2a\u6570\u53f3\u79fb\u8fd9\u4e48\u591a\u4f4d\u662f 1 \u7684\u5206\u5728\u4e00\u7ec4\uff0c\u662f 0 \u7684\u5206\u5728\u53e6\u5916\u4e00\u7ec4\uff0c\u904d\u5386\u7684\u65f6\u5019\uff0c\u5c31\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97 if ((nums[i] >>> binaryFirstNotZero & 1) == 1) { res[0] ^= nums[i]; } else { res[1] ^= nums[i]; } } return res; } // \u5f97\u5230\u4e00\u4e2a\u6570\u7ec4\u7ecf\u8fc7\u5f02\u6216\u8fd0\u7b97\u7684\u7ed3\u679c xor // \u5f02\u6216 \u7684\u82f1\u6587\u7ffb\u8bd1\u5c31\u662f xor private int xor(int[] nums) { int xor = 0; for (int i = 0; i < nums.length; i++) { xor ^= nums[i]; } return xor; } // \u5f97\u5230\u4e00\u4e2a\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4ece\u53f3\u5230\u5de6\u7b2c 1 \u4e2a\u975e\u96f6\u7684\u4f4d\u6570\u662f\u7b2c\u51e0\u4f4d private int binaryFirstNotZero(int num) { int index = 0; // \u8fd9\u91cc\u7684 1 \u628a\u5b83\u770b\u6210\u4e8c\u8fdb\u5236\u7684 1\uff0c\u5373 00000001 while ((num & 1) == 0 && index < 32) { num >>>= 1; index++; } // \u8d70\u5230\u8fd9\u91cc\u6ee1\u8db3 (num & 1) == 1 return index; } public static void main(String[] args) { int[] nums = {2, 4, 3, 6, 3, 2, 5, 5}; Solution solution = new Solution(); int[] res = solution.findNumbersAppearanceOnce(nums); System.out.println(Arrays.toString(res)); int[] nums2 = {2, 4, 3, 6, 3, 2, 5, 5}; int[] res2 = solution.findNumbersAppearanceOnce(nums2); System.out.println(Arrays.toString(res2)); int[] nums3 = {4, 6}; int[] res3 = solution.findNumbersAppearanceOnce(nums3); System.out.println(Arrays.toString(res3)); int[] nums4 = {4, 6, 1, 1, 1, 1}; int[] res4 = solution.findNumbersAppearanceOnce(nums4); System.out.println(Arrays.toString(res4)); } } 0 \u5230 n-1 \u4e2d\u7f3a\u5931\u7684\u6570\u5b57 \u4f20\u9001\u95e8\uff1a 0 \u5230 n-1 \u4e2d\u7f3a\u5931\u7684\u6570\u5b57 \u3002 \u4e00\u4e2a\u957f\u5ea6\u4e3a n-1 \u7684\u9012\u589e\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u6570\u5b57\u90fd\u662f\u552f\u4e00\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u6570\u5b57\u90fd\u5728\u8303\u56f4 0 \u5230 n-1 \u4e4b\u5185\u3002 \u5728\u8303\u56f4 0 \u5230 n-1 \u7684 n \u4e2a\u6570\u5b57\u4e2d\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u4e0d\u5728\u8be5\u6570\u7ec4\u4e2d\uff0c\u8bf7\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\u3002 \u6837\u4f8b ``` \u8f93\u5165\uff1a[0,1,2,4] \u8f93\u51fa\uff1a3 ``` \u601d\u8def\uff1a\u5178\u578b\u7684\u4f7f\u7528\u201c\u4e8c\u5206\u6cd5\u201d\u89e3\u51b3\u7684\u95ee\u9898\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getMissingNumber(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" size = len(nums) l = 0 r = size while l < r: mid = l + (r - l) // 2 if nums[mid] > mid: # [0,1,2,3,4,6] # mid \u6709\u53ef\u80fd\u662f\u8981\u6c42\u7684\u6570 r = mid else: assert nums[mid] <= mid l = mid + 1 return l if __name__ == '__main__': solution = Solution() nums = [0, 1, 2, 4] result = solution.getMissingNumber(nums) print(result) \u6570\u7ec4\u4e2d\u6570\u503c\u548c\u4e0b\u6807\u76f8\u7b49\u7684\u5143\u7d20 \u4f20\u9001\u95e8\uff1a \u6570\u7ec4\u4e2d\u6570\u503c\u548c\u4e0b\u6807\u76f8\u7b49\u7684\u5143\u7d20 \u3002 \u5047\u8bbe\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u7684\u6570\u7ec4\u91cc\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u6574\u6570\u5e76\u4e14\u662f\u552f\u4e00\u7684\u3002 \u8bf7\u7f16\u7a0b\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u6570\u503c\u7b49\u4e8e\u5176\u4e0b\u6807\u7684\u5143\u7d20\u3002 \u4f8b\u5982\uff0c\u5728\u6570\u7ec4 $[-3, -1, 1, 3, 5]$ \u4e2d\uff0c\u6570\u5b57 $3$ \u548c\u5b83\u7684\u4e0b\u6807\u76f8\u7b49\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a$[-3, -1, 1, 3, 5]$ \u8f93\u51fa\uff1a$3$ \u6ce8\u610f \uff1a\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de $-1$\u3002 \u601d\u8def\uff1a\u5178\u578b\u7684\u4f7f\u7528\u201c\u4e8c\u5206\u6cd5\u201d\u89e3\u51b3\u7684\u95ee\u9898\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getNumberSameAsIndex(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" # \u4f7f\u7528\u4e8c\u5206\u6cd5 size = len(nums) l = 0 r = size - 1 while l < r: mid = l + (r - l) // 2 if nums[mid] < mid: l = mid + 1 else: assert nums[mid] >= mid r = mid return l if nums[l] == l else -1 \u7b2c 56-2 \u9898\uff1a\u6570\u7ec4\u4e2d\u552f\u4e00\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u4f20\u9001\u95e8\uff1a \u6570\u7ec4\u4e2d\u552f\u4e00\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u3002 \u5728\u4e00\u4e2a\u6570\u7ec4\u4e2d\u9664\u4e86\u4e00\u4e2a\u6570\u5b57\u53ea\u51fa\u73b0\u4e00\u6b21\u4e4b\u5916\uff0c\u5176\u4ed6\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e09\u6b21\u3002 \u8bf7\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5b57\u4e00\u5b9a\u5b58\u5728\u3002 \u601d\u8003\u9898\uff1a \u5982\u679c\u8981\u6c42\u53ea\u4f7f\u7528 $O(n)$ \u7684\u65f6\u95f4\u548c\u989d\u5916 $O(1)$ \u7684\u7a7a\u95f4\uff0c\u8be5\u600e\u4e48\u505a\u5462\uff1f \u6837\u4f8b\uff1a ``` \u8f93\u5165\uff1a[1,1,1,2,2,2,3,4,4,4] \u8f93\u51fa\uff1a3 ``` \u601d\u8def\uff1a\u9650\u5236\u5728 $O(1)$ \u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u90a3\u5c31\u53ea\u6709\u901a\u8fc7\u4e8c\u8fdb\u5236\uff0c\u4e00\u4f4d\u4e00\u4f4d\u53bb\u770b\u4e86\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def findNumberAppearingOnce(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" res = 0 for i in range(32): count = 0 for num in nums: # \u4e0d\u8981\u5fd8\u8bb0 & 1 if (num >> i) & 1: count += 1 if count % 3: res += 1 << i return res if __name__ == '__main__': nums = [1, 0, 0, 0, 2, 1, 1] solution = Solution() result = solution.findNumberAppearingOnce(nums) print(result) MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 56 - I. \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570"},{"location":"56/#offer-56-i","text":"\u5251\u6307 Offer 56 - I. \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 \uff1b \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u4e24\u4e2a\u6570\u5b57 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002","title":"\u5251\u6307 Offer 56 - I. \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570"},{"location":"56/#56-1","text":"\u4f20\u9001\u95e8\uff1a \u4e00\u4e2a\u6574\u578b\u6570\u7ec4\u91cc\u9664\u4e86\u4e24\u4e2a\u6570\u5b57\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e24\u6b21\u3002 \u8bf7\u5199\u7a0b\u5e8f\u627e\u51fa\u8fd9\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u8fd9\u4e24\u4e2a\u6570\u5b57\u4e00\u5b9a\u5b58\u5728\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a$[1,2,3,3,4,4]$ \u8f93\u51fa\uff1a$[1,2]$ \u601d\u8def\uff1a==\u6309\u4f4d\u5206\u7ec4==\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def findNumsAppearOnce(self, nums): \"\"\" :type nums: List[int] :rtype: List[int] \"\"\" l = len(nums) if l < 2: raise Exception('\u7a0b\u5e8f\u51fa\u9519') if l == 2: return nums # \u5168\u90e8\u76f8\u4e0e\u4e00\u904d xor = 0 for num in nums: xor ^= num # \u6700\u672b\u5c3e\u7684 1 \u4ece\u53f3\u5411\u5de6\u8fb9\u6570\u5728\u7b2c\u51e0\u4f4d counter = 0 while xor & 1 == 0: xor >>= 1 counter += 1 res = [0, 0] for num in nums: if (num >> counter) & 1 == 1: res[1] ^= num else: res[0] ^= num return res Java \u4ee3\u7801\uff1a import java.util.Arrays; // \u7b2c 56 \u9898\uff1a\u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 P275 // \u53c2\u8003\u8d44\u6599\uff1a // 1\u3001https://blog.csdn.net/derrantcm/article/details/46771717 public class Solution { // \u8003\u5bdf\u4f4d\u8fd0\u7b97\uff1a\u6216\u3001\u4e0e\u3001\u5f02\u6216\u3001\u975e\uff0c\u4ee5\u53ca\u65e0\u7b26\u53f7\u5de6\u79fb >>> public int[] findNumbersAppearanceOnce(int[] nums) { int len = nums.length; int[] res = new int[2]; assert len >= 2; if (len == 2) { return nums; } // \u90a3\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u7684\u5f02\u6216\u8fd0\u7b97\u7684\u7ed3\u679c int xor = xor(nums); // \u5173\u952e\u5728\u8fd9\u91cc // \u627e\u5230\u8fd9\u4e2a xor \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7b2c 1 \u4e2a\u662f 1 \u7684\u6570\u4f4d\u662f\u7b2c\u51e0\u4f4d int binaryFirstNotZero = binaryFirstNotZero(xor); // \u63a5\u4e0b\u6765\u5206\u522b\u5bf9\u4e24\u7ec4\u8fdb\u884c\u5f02\u6216 for (int i = 0; i < len; i++) { // \u5982\u679c\u8fd9\u4e2a\u6570\u53f3\u79fb\u8fd9\u4e48\u591a\u4f4d\u662f 1 \u7684\u5206\u5728\u4e00\u7ec4\uff0c\u662f 0 \u7684\u5206\u5728\u53e6\u5916\u4e00\u7ec4\uff0c\u904d\u5386\u7684\u65f6\u5019\uff0c\u5c31\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97 if ((nums[i] >>> binaryFirstNotZero & 1) == 1) { res[0] ^= nums[i]; } else { res[1] ^= nums[i]; } } return res; } // \u5f97\u5230\u4e00\u4e2a\u6570\u7ec4\u7ecf\u8fc7\u5f02\u6216\u8fd0\u7b97\u7684\u7ed3\u679c xor // \u5f02\u6216 \u7684\u82f1\u6587\u7ffb\u8bd1\u5c31\u662f xor private int xor(int[] nums) { int xor = 0; for (int i = 0; i < nums.length; i++) { xor ^= nums[i]; } return xor; } // \u5f97\u5230\u4e00\u4e2a\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4ece\u53f3\u5230\u5de6\u7b2c 1 \u4e2a\u975e\u96f6\u7684\u4f4d\u6570\u662f\u7b2c\u51e0\u4f4d private int binaryFirstNotZero(int num) { int index = 0; // \u8fd9\u91cc\u7684 1 \u628a\u5b83\u770b\u6210\u4e8c\u8fdb\u5236\u7684 1\uff0c\u5373 00000001 while ((num & 1) == 0 && index < 32) { num >>>= 1; index++; } // \u8d70\u5230\u8fd9\u91cc\u6ee1\u8db3 (num & 1) == 1 return index; } public static void main(String[] args) { int[] nums = {2, 4, 3, 6, 3, 2, 5, 5}; Solution solution = new Solution(); int[] res = solution.findNumbersAppearanceOnce(nums); System.out.println(Arrays.toString(res)); int[] nums2 = {2, 4, 3, 6, 3, 2, 5, 5}; int[] res2 = solution.findNumbersAppearanceOnce(nums2); System.out.println(Arrays.toString(res2)); int[] nums3 = {4, 6}; int[] res3 = solution.findNumbersAppearanceOnce(nums3); System.out.println(Arrays.toString(res3)); int[] nums4 = {4, 6, 1, 1, 1, 1}; int[] res4 = solution.findNumbersAppearanceOnce(nums4); System.out.println(Arrays.toString(res4)); } }","title":"\u7b2c 56-1 \u9898\uff1a\u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u4e24\u4e2a\u6570\u5b57"},{"location":"56/#0-n-1","text":"\u4f20\u9001\u95e8\uff1a 0 \u5230 n-1 \u4e2d\u7f3a\u5931\u7684\u6570\u5b57 \u3002 \u4e00\u4e2a\u957f\u5ea6\u4e3a n-1 \u7684\u9012\u589e\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u6570\u5b57\u90fd\u662f\u552f\u4e00\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u6570\u5b57\u90fd\u5728\u8303\u56f4 0 \u5230 n-1 \u4e4b\u5185\u3002 \u5728\u8303\u56f4 0 \u5230 n-1 \u7684 n \u4e2a\u6570\u5b57\u4e2d\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u4e0d\u5728\u8be5\u6570\u7ec4\u4e2d\uff0c\u8bf7\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\u3002 \u6837\u4f8b ``` \u8f93\u5165\uff1a[0,1,2,4] \u8f93\u51fa\uff1a3 ``` \u601d\u8def\uff1a\u5178\u578b\u7684\u4f7f\u7528\u201c\u4e8c\u5206\u6cd5\u201d\u89e3\u51b3\u7684\u95ee\u9898\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getMissingNumber(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" size = len(nums) l = 0 r = size while l < r: mid = l + (r - l) // 2 if nums[mid] > mid: # [0,1,2,3,4,6] # mid \u6709\u53ef\u80fd\u662f\u8981\u6c42\u7684\u6570 r = mid else: assert nums[mid] <= mid l = mid + 1 return l if __name__ == '__main__': solution = Solution() nums = [0, 1, 2, 4] result = solution.getMissingNumber(nums) print(result)","title":"0 \u5230 n-1 \u4e2d\u7f3a\u5931\u7684\u6570\u5b57"},{"location":"56/#_1","text":"\u4f20\u9001\u95e8\uff1a \u6570\u7ec4\u4e2d\u6570\u503c\u548c\u4e0b\u6807\u76f8\u7b49\u7684\u5143\u7d20 \u3002 \u5047\u8bbe\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u7684\u6570\u7ec4\u91cc\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u6574\u6570\u5e76\u4e14\u662f\u552f\u4e00\u7684\u3002 \u8bf7\u7f16\u7a0b\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u6570\u503c\u7b49\u4e8e\u5176\u4e0b\u6807\u7684\u5143\u7d20\u3002 \u4f8b\u5982\uff0c\u5728\u6570\u7ec4 $[-3, -1, 1, 3, 5]$ \u4e2d\uff0c\u6570\u5b57 $3$ \u548c\u5b83\u7684\u4e0b\u6807\u76f8\u7b49\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a$[-3, -1, 1, 3, 5]$ \u8f93\u51fa\uff1a$3$ \u6ce8\u610f \uff1a\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de $-1$\u3002 \u601d\u8def\uff1a\u5178\u578b\u7684\u4f7f\u7528\u201c\u4e8c\u5206\u6cd5\u201d\u89e3\u51b3\u7684\u95ee\u9898\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getNumberSameAsIndex(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" # \u4f7f\u7528\u4e8c\u5206\u6cd5 size = len(nums) l = 0 r = size - 1 while l < r: mid = l + (r - l) // 2 if nums[mid] < mid: l = mid + 1 else: assert nums[mid] >= mid r = mid return l if nums[l] == l else -1","title":"\u6570\u7ec4\u4e2d\u6570\u503c\u548c\u4e0b\u6807\u76f8\u7b49\u7684\u5143\u7d20"},{"location":"56/#56-2","text":"\u4f20\u9001\u95e8\uff1a \u6570\u7ec4\u4e2d\u552f\u4e00\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u3002 \u5728\u4e00\u4e2a\u6570\u7ec4\u4e2d\u9664\u4e86\u4e00\u4e2a\u6570\u5b57\u53ea\u51fa\u73b0\u4e00\u6b21\u4e4b\u5916\uff0c\u5176\u4ed6\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e09\u6b21\u3002 \u8bf7\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5b57\u4e00\u5b9a\u5b58\u5728\u3002 \u601d\u8003\u9898\uff1a \u5982\u679c\u8981\u6c42\u53ea\u4f7f\u7528 $O(n)$ \u7684\u65f6\u95f4\u548c\u989d\u5916 $O(1)$ \u7684\u7a7a\u95f4\uff0c\u8be5\u600e\u4e48\u505a\u5462\uff1f \u6837\u4f8b\uff1a ``` \u8f93\u5165\uff1a[1,1,1,2,2,2,3,4,4,4] \u8f93\u51fa\uff1a3 ``` \u601d\u8def\uff1a\u9650\u5236\u5728 $O(1)$ \u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u90a3\u5c31\u53ea\u6709\u901a\u8fc7\u4e8c\u8fdb\u5236\uff0c\u4e00\u4f4d\u4e00\u4f4d\u53bb\u770b\u4e86\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def findNumberAppearingOnce(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" res = 0 for i in range(32): count = 0 for num in nums: # \u4e0d\u8981\u5fd8\u8bb0 & 1 if (num >> i) & 1: count += 1 if count % 3: res += 1 << i return res if __name__ == '__main__': nums = [1, 0, 0, 0, 2, 1, 1] solution = Solution() result = solution.findNumberAppearingOnce(nums) print(result) MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 56-2 \u9898\uff1a\u6570\u7ec4\u4e2d\u552f\u4e00\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57"},{"location":"57-2/","text":"\u5251\u6307 Offer 57 - II. \u548c\u4e3as\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217 \u5251\u6307 Offer 57 - II. \u548c\u4e3as\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 57 - II. \u548c\u4e3as\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217"},{"location":"57-2/#offer-57-ii-s","text":"\u5251\u6307 Offer 57 - II. \u548c\u4e3as\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 57 - II. \u548c\u4e3as\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217"},{"location":"57/","text":"\u5251\u6307 Offer 57. \u548c\u4e3as\u7684\u4e24\u4e2a\u6570\u5b57 \u5251\u6307 Offer 57. \u548c\u4e3as\u7684\u4e24\u4e2a\u6570\u5b57 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 57. \u548c\u4e3as\u7684\u4e24\u4e2a\u6570\u5b57"},{"location":"57/#offer-57-s","text":"\u5251\u6307 Offer 57. \u548c\u4e3as\u7684\u4e24\u4e2a\u6570\u5b57 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 57. \u548c\u4e3as\u7684\u4e24\u4e2a\u6570\u5b57"},{"location":"58-2/","text":"\u5251\u6307 Offer 58 - II. \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 \u5251\u6307 Offer 58 - II. \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 \uff1b \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7b2c 58-2 \u9898\uff1a\u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 \u4f20\u9001\u95e8\uff1a \u5b57\u7b26\u4e32\u7684\u5de6\u65cb\u8f6c\u64cd\u4f5c\u662f\u628a\u5b57\u7b26\u4e32\u524d\u9762\u7684\u82e5\u5e72\u4e2a\u5b57\u7b26\u8f6c\u79fb\u5230\u5b57\u7b26\u4e32\u7684\u5c3e\u90e8\u3002 \u8bf7\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5b9e\u73b0\u5b57\u7b26\u4e32\u5de6\u65cb\u8f6c\u64cd\u4f5c\u7684\u529f\u80fd\u3002 \u6bd4\u5982\u8f93\u5165\u5b57\u7b26\u4e32 \"abcdefg\" \u548c\u6570\u5b572\uff0c\u8be5\u51fd\u6570\u5c06\u8fd4\u56de\u5de6\u65cb\u8f6c2\u4f4d\u5f97\u5230\u7684\u7ed3\u679c \"cdefgab\" \u3002 \u6ce8\u610f\uff1a \u6570\u636e\u4fdd\u8bc1n\u5c0f\u4e8e\u7b49\u4e8e\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002 \u6837\u4f8b ``` \u8f93\u5165\uff1a\"abcdefg\" , n=2 \u8f93\u51fa\uff1a\"cdefgab\" ``` \u601d\u8def\uff1a\u201cabcdefg\u201d \u65cb\u8f6c\u4ee5\u540e\uff0c\u201cgfedcba\u201d\uff0c\u5728\u5012\u6570\u7b2c 2 \u4f4d\u524d\u540e\uff0c\u518d\u7ffb\u8f6c\u4e00\u4e0b\uff0c\u5f97\u201ccdefgab\u201d\u3002\u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u8981\u5206\u6790\u6e05\u695a\uff0c\u6ce8\u610f\uff1a\u79fb\u52a8\u7684\u4f4d\u6570\u8981\u53d6\u4f59\u6570\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def leftRotateString(self, s, n): \"\"\" :type s: str :type n: int :rtype: str \"\"\" size = len(s) # \u7279\u5224 if size == 0 or n % size == 0: return s n = n % size arr = list(s) self.__reverse(arr, 0, size - 1) self.__reverse(arr, 0, size - 1 - n) self.__reverse(arr, size - n, size - 1) return ''.join(arr) def __reverse(self, arr, left, right): if left >= right: return while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 Java \u4ee3\u7801\uff1a public class Solution { private void reverseString(char[] charArr, int start, int end) { int l = start; int r = end; while (l < r) { swap(charArr, l, r); l++; r--; } } private void swap(char[] charArr, int index1, int index2) { if (index1 == index2) { return; } char temp = charArr[index1]; charArr[index1] = charArr[index2]; charArr[index2] = temp; } public String LeftRotateString(String str, int n) { int len = str.length(); if (len == 0 || n < 0) { return \"\"; } if (len == 1) { return str; } // \u8fd9\u91cc\u8981\u6ce8\u610f\u4e86 n = len - n % len; char[] charArr = str.toCharArray(); reverseString(charArr, 0, len - 1); reverseString(charArr, 0, n - 1); reverseString(charArr, n, len - 1); return String.valueOf(charArr); } public static void main(String[] args) { String str = \"abcXYZdef\"; Solution solution = new Solution(); String leftRotateString = solution.LeftRotateString(str, 3); System.out.println(leftRotateString); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 58 - II. \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32"},{"location":"58-2/#offer-58-ii","text":"\u5251\u6307 Offer 58 - II. \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 \uff1b \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002","title":"\u5251\u6307 Offer 58 - II. \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32"},{"location":"58-2/#58-2","text":"\u4f20\u9001\u95e8\uff1a \u5b57\u7b26\u4e32\u7684\u5de6\u65cb\u8f6c\u64cd\u4f5c\u662f\u628a\u5b57\u7b26\u4e32\u524d\u9762\u7684\u82e5\u5e72\u4e2a\u5b57\u7b26\u8f6c\u79fb\u5230\u5b57\u7b26\u4e32\u7684\u5c3e\u90e8\u3002 \u8bf7\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5b9e\u73b0\u5b57\u7b26\u4e32\u5de6\u65cb\u8f6c\u64cd\u4f5c\u7684\u529f\u80fd\u3002 \u6bd4\u5982\u8f93\u5165\u5b57\u7b26\u4e32 \"abcdefg\" \u548c\u6570\u5b572\uff0c\u8be5\u51fd\u6570\u5c06\u8fd4\u56de\u5de6\u65cb\u8f6c2\u4f4d\u5f97\u5230\u7684\u7ed3\u679c \"cdefgab\" \u3002 \u6ce8\u610f\uff1a \u6570\u636e\u4fdd\u8bc1n\u5c0f\u4e8e\u7b49\u4e8e\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002 \u6837\u4f8b ``` \u8f93\u5165\uff1a\"abcdefg\" , n=2 \u8f93\u51fa\uff1a\"cdefgab\" ``` \u601d\u8def\uff1a\u201cabcdefg\u201d \u65cb\u8f6c\u4ee5\u540e\uff0c\u201cgfedcba\u201d\uff0c\u5728\u5012\u6570\u7b2c 2 \u4f4d\u524d\u540e\uff0c\u518d\u7ffb\u8f6c\u4e00\u4e0b\uff0c\u5f97\u201ccdefgab\u201d\u3002\u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u8981\u5206\u6790\u6e05\u695a\uff0c\u6ce8\u610f\uff1a\u79fb\u52a8\u7684\u4f4d\u6570\u8981\u53d6\u4f59\u6570\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def leftRotateString(self, s, n): \"\"\" :type s: str :type n: int :rtype: str \"\"\" size = len(s) # \u7279\u5224 if size == 0 or n % size == 0: return s n = n % size arr = list(s) self.__reverse(arr, 0, size - 1) self.__reverse(arr, 0, size - 1 - n) self.__reverse(arr, size - n, size - 1) return ''.join(arr) def __reverse(self, arr, left, right): if left >= right: return while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 Java \u4ee3\u7801\uff1a public class Solution { private void reverseString(char[] charArr, int start, int end) { int l = start; int r = end; while (l < r) { swap(charArr, l, r); l++; r--; } } private void swap(char[] charArr, int index1, int index2) { if (index1 == index2) { return; } char temp = charArr[index1]; charArr[index1] = charArr[index2]; charArr[index2] = temp; } public String LeftRotateString(String str, int n) { int len = str.length(); if (len == 0 || n < 0) { return \"\"; } if (len == 1) { return str; } // \u8fd9\u91cc\u8981\u6ce8\u610f\u4e86 n = len - n % len; char[] charArr = str.toCharArray(); reverseString(charArr, 0, len - 1); reverseString(charArr, 0, n - 1); reverseString(charArr, n, len - 1); return String.valueOf(charArr); } public static void main(String[] args) { String str = \"abcXYZdef\"; Solution solution = new Solution(); String leftRotateString = solution.LeftRotateString(str, 3); System.out.println(leftRotateString); } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 58-2 \u9898\uff1a\u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32"},{"location":"58/","text":"\u5251\u6307 Offer 58 - I. \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f \u5251\u6307 Offer 58 - I. \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f \uff1b AcWing\uff1a\u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7b2c 58-1 \u9898\uff1a\u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f\u5217 \u4f20\u9001\u95e8 \u8f93\u5165\u4e00\u4e2a\u82f1\u6587\u53e5\u5b50\uff0c\u7ffb\u8f6c\u53e5\u5b50\u4e2d\u5355\u8bcd\u7684\u987a\u5e8f\uff0c\u4f46\u5355\u8bcd\u5185\u5b57\u7b26\u7684\u987a\u5e8f\u4e0d\u53d8\u3002 \u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6807\u70b9\u7b26\u53f7\u548c\u666e\u901a\u5b57\u6bcd\u4e00\u6837\u5904\u7406\u3002 \u4f8b\u5982\u8f93\u5165\u5b57\u7b26\u4e32 \"I am a student.\" \uff0c\u5219\u8f93\u51fa \"student. a am I\" \u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a \"I am a student.\" \u8f93\u51fa\uff1a \"student. a am I\" \u601d\u8def\uff1a\u5b9e\u73b0\u4e00\u4e2a\u8f85\u52a9\u7684\u65b9\u6cd5\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u7684\u6307\u5b9a\u533a\u95f4\u8fdb\u884c\u7ffb\u8f6c\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def reverseWords(self, s): \"\"\" :type s: str :rtype: str \"\"\" size = len(s) arr = list(s) self.__reverse(arr, 0, size - 1) begin = 0 index = 0 while index < size: if arr[index] == ' ': self.__reverse(arr, begin, index - 1) begin = index + 1 index += 1 # \u6700\u540e\u8fd8\u8981\u53cd\u8f6c\u4e00\u4e0b self.__reverse(arr, begin, size - 1) return ''.join(arr) def __reverse(self, arr, left, right): if left >= right: return while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 Java \u4ee3\u7801\uff1a public class Solution { /** * \u8f85\u52a9\u51fd\u6570\uff1a\u7ffb\u8f6c\u5b57\u7b26\u6570\u7ec4\u6307\u5b9a\u533a\u95f4\u5185\u7684\u5b57\u7b26 * * @param str * @param start * @param end */ private void reverseString(char[] str, int start, int end) { int l = start; int r = end; while (l < r) { swap(str, l, r); l++; r--; } } /** * \u8f85\u52a9\u51fd\u6570\uff1a\u4ea4\u6362\u5b57\u7b26\u6570\u7ec4\u6307\u5b9a\u7d22\u5f15\u7684\u5b57\u7b26 * * @param str * @param index1 * @param index2 */ private void swap(char[] str, int index1, int index2) { if (index1 == index2) { return; } char temp = str[index1]; str[index1] = str[index2]; str[index2] = temp; } public String ReverseSentence(String str) { int len = str.length(); if (len == 0 || len == 1) { return str; } char[] charArr = str.toCharArray(); reverseString(charArr, 0, len - 1); int start = 0; for (int i = 0; i < len; i++) { if (charArr[i] == ' ') { reverseString(charArr, start, i - 1); start = i + 1; } } // \u6700\u540e\u8fd8\u8981\u8bb0\u5f97\u53cd\u8f6c\u4e00\u4e0b reverseString(charArr, start, len - 1); return String.valueOf(charArr); } public static void main(String[] args) { String str = \"write your code here\"; Solution solution = new Solution(); String reverseSentence = solution.ReverseSentence(str); System.out.println(reverseSentence); } } \u603b\u7ed3\uff1a\u522b\u628a\u95ee\u9898\u60f3\u590d\u6742\u4e86\uff0c\u6709\u70b9\u8010\u5fc3\uff0c\u8fd9\u4e9b\u95ee\u9898\u5176\u5b9e\u5e76\u6ca1\u6709\u90a3\u4e48\u96be\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 58 - I. \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f"},{"location":"58/#offer-58-i","text":"\u5251\u6307 Offer 58 - I. \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f \uff1b AcWing\uff1a\u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002","title":"\u5251\u6307 Offer 58 - I. \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f"},{"location":"58/#58-1","text":"\u4f20\u9001\u95e8 \u8f93\u5165\u4e00\u4e2a\u82f1\u6587\u53e5\u5b50\uff0c\u7ffb\u8f6c\u53e5\u5b50\u4e2d\u5355\u8bcd\u7684\u987a\u5e8f\uff0c\u4f46\u5355\u8bcd\u5185\u5b57\u7b26\u7684\u987a\u5e8f\u4e0d\u53d8\u3002 \u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6807\u70b9\u7b26\u53f7\u548c\u666e\u901a\u5b57\u6bcd\u4e00\u6837\u5904\u7406\u3002 \u4f8b\u5982\u8f93\u5165\u5b57\u7b26\u4e32 \"I am a student.\" \uff0c\u5219\u8f93\u51fa \"student. a am I\" \u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a \"I am a student.\" \u8f93\u51fa\uff1a \"student. a am I\" \u601d\u8def\uff1a\u5b9e\u73b0\u4e00\u4e2a\u8f85\u52a9\u7684\u65b9\u6cd5\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u7684\u6307\u5b9a\u533a\u95f4\u8fdb\u884c\u7ffb\u8f6c\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def reverseWords(self, s): \"\"\" :type s: str :rtype: str \"\"\" size = len(s) arr = list(s) self.__reverse(arr, 0, size - 1) begin = 0 index = 0 while index < size: if arr[index] == ' ': self.__reverse(arr, begin, index - 1) begin = index + 1 index += 1 # \u6700\u540e\u8fd8\u8981\u53cd\u8f6c\u4e00\u4e0b self.__reverse(arr, begin, size - 1) return ''.join(arr) def __reverse(self, arr, left, right): if left >= right: return while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 Java \u4ee3\u7801\uff1a public class Solution { /** * \u8f85\u52a9\u51fd\u6570\uff1a\u7ffb\u8f6c\u5b57\u7b26\u6570\u7ec4\u6307\u5b9a\u533a\u95f4\u5185\u7684\u5b57\u7b26 * * @param str * @param start * @param end */ private void reverseString(char[] str, int start, int end) { int l = start; int r = end; while (l < r) { swap(str, l, r); l++; r--; } } /** * \u8f85\u52a9\u51fd\u6570\uff1a\u4ea4\u6362\u5b57\u7b26\u6570\u7ec4\u6307\u5b9a\u7d22\u5f15\u7684\u5b57\u7b26 * * @param str * @param index1 * @param index2 */ private void swap(char[] str, int index1, int index2) { if (index1 == index2) { return; } char temp = str[index1]; str[index1] = str[index2]; str[index2] = temp; } public String ReverseSentence(String str) { int len = str.length(); if (len == 0 || len == 1) { return str; } char[] charArr = str.toCharArray(); reverseString(charArr, 0, len - 1); int start = 0; for (int i = 0; i < len; i++) { if (charArr[i] == ' ') { reverseString(charArr, start, i - 1); start = i + 1; } } // \u6700\u540e\u8fd8\u8981\u8bb0\u5f97\u53cd\u8f6c\u4e00\u4e0b reverseString(charArr, start, len - 1); return String.valueOf(charArr); } public static void main(String[] args) { String str = \"write your code here\"; Solution solution = new Solution(); String reverseSentence = solution.ReverseSentence(str); System.out.println(reverseSentence); } } \u603b\u7ed3\uff1a\u522b\u628a\u95ee\u9898\u60f3\u590d\u6742\u4e86\uff0c\u6709\u70b9\u8010\u5fc3\uff0c\u8fd9\u4e9b\u95ee\u9898\u5176\u5b9e\u5e76\u6ca1\u6709\u90a3\u4e48\u96be\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 58-1 \u9898\uff1a\u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f\u5217"},{"location":"59-2/","text":"\u5251\u6307 Offer 59 - II. \u961f\u5217\u7684\u6700\u5927\u503c \u5251\u6307 Offer 59 - II. \u961f\u5217\u7684\u6700\u5927\u503c","title":"\u5251\u6307 Offer 59 - II. \u961f\u5217\u7684\u6700\u5927\u503c"},{"location":"59-2/#offer-59-ii","text":"\u5251\u6307 Offer 59 - II. \u961f\u5217\u7684\u6700\u5927\u503c","title":"\u5251\u6307 Offer 59 - II. \u961f\u5217\u7684\u6700\u5927\u503c"},{"location":"59/","text":"\u5251\u6307 Offer 59 - I. \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c \u5251\u6307 Offer 59 - I. \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c","title":"\u5251\u6307 Offer 59 - I. \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c"},{"location":"59/#offer-59-i","text":"\u5251\u6307 Offer 59 - I. \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c","title":"\u5251\u6307 Offer 59 - I. \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c"},{"location":"60/","text":"\u5251\u6307 Offer 60. n\u4e2a\u9ab0\u5b50\u7684\u70b9\u6570 \u5251\u6307 Offer 60. n\u4e2a\u9ab0\u5b50\u7684\u70b9\u6570 \uff1b \u6251\u514b\u724c\u7684\u987a\u5b50 \u3002","title":"\u5251\u6307 Offer 60. n\u4e2a\u9ab0\u5b50\u7684\u70b9\u6570"},{"location":"60/#offer-60-n","text":"\u5251\u6307 Offer 60. n\u4e2a\u9ab0\u5b50\u7684\u70b9\u6570 \uff1b \u6251\u514b\u724c\u7684\u987a\u5b50 \u3002","title":"\u5251\u6307 Offer 60. n\u4e2a\u9ab0\u5b50\u7684\u70b9\u6570"},{"location":"61-68/","text":"61-68 \u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09 \u9898\u89e3\uff08Python \u8bed\u8a00\u5b9e\u73b0\uff09\u7b2c 61-68 \u9898 \u7b2c 61 \u9898\uff1a\u6251\u514b\u724c\u987a\u5b50\uff08\u638c\u63e1\u4f4d\u8fd0\u7b97\u5360\u4f4d\u7684\u6280\u5de7\uff09 \u4f20\u9001\u95e8\uff1a \u6251\u514b\u724c\u7684\u987a\u5b50 \u3002 \u4ece\u6251\u514b\u724c\u4e2d\u968f\u673a\u62bd 5 \u5f20\u724c\uff0c\u5224\u65ad\u662f\u4e0d\u662f\u4e00\u4e2a\u987a\u5b50\uff0c\u5373\u8fd9 5 \u5f20\u724c\u662f\u4e0d\u662f\u8fde\u7eed\u7684\u3002 2\uff5e10 \u4e3a\u6570\u5b57\u672c\u8eab\uff0cA \u4e3a 1 \uff0cJ \u4e3a 11\uff0cQ \u4e3a 12\uff0cK \u4e3a 13\uff0c\u5927\u5c0f\u738b\u53ef\u4ee5\u770b\u505a\u4efb\u610f\u6570\u5b57\u3002 \u4e3a\u4e86\u65b9\u4fbf\uff0c\u5927\u5c0f\u738b\u5747\u4ee50\u6765\u8868\u793a\uff0c\u5e76\u4e14\u5047\u8bbe\u8fd9\u526f\u724c\u4e2d\u5927\u5c0f\u738b\u5747\u6709\u4e24\u5f20\u3002 \u6837\u4f8b1\uff1a \u8f93\u5165\uff1a [8,9,10,11,12] \u8f93\u51fa\uff1atrue \u6837\u4f8b2\uff1a \u8f93\u5165\uff1a [0,8,9,11,12] \u8f93\u51fa\uff1atrue \u601d\u8def\uff1a\u57fa\u672c\u601d\u8def\u5c31\u662f\u628a\u4e0d\u7b26\u5408\u9898\u76ee\u8981\u6c42\u7684\u60c5\u51b5\u5168\u90e8\u6392\u9664\u6389\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u6b63\u786e\u7684\u4e86\u3002 python \u4ee3\u7801\uff1a class Solution(object): def isContinuous(self, numbers): \"\"\" :type numbers: List[int] :rtype: bool \"\"\" size = len(numbers) if size != 5: return False # \u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u90fd\u8bbe\u7f6e\u6210\u4e00\u4e2a\u4e0d\u53ef\u80fd\u53d6\u5230\u7684\u503c min_val = 14 max_val = -1 flag = 0 for num in numbers: if not 0 <= num <= 13: return False if num == 0: continue # \u53f3\u79fb\uff1a\u770b\u770b\u8fd9\u4e00\u4f4d\u662f\u4e0d\u662f\u7528\u8fc7\u4e86 if (flag >> num) & 1 == 1: return False # \u5de6\u79fb\uff1a\u8868\u793a\u8fd9\u4e00\u4f4d\u6211\u73b0\u5728\u8981\u5360\u7528 flag = flag | (1 << num) min_val = min(min_val, num) max_val = max(max_val, num) if max_val - min_val >= 5: return False return True Python \u4ee3\u7801\uff1a class Solution: def IsContinuous(self, numbers): # write code here if len(numbers) < 5: return False max_num = -1 min_num = 14 flag = 0 for number in numbers: if number < 0 or number > 13: return False if number == 0: continue if (flag >> number) & 1 == 1: return False flag |= 1 << number if number < min_num: min_num = number if number > max_num: max_num = number if max_num - min_num >= 5: return False return True Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { public boolean isContinuous(int[] numbers) { int len = numbers.length; if (len != 5) { return false; } Arrays.sort(numbers); // \"0\" \u7684\u4e2a\u6570 int zeroCount = 0; // \u5f53\u524d\u6570\u4e0e\u540e\u4e00\u4e2a\u6570\u7684\u8ddd\u79bb\uff0c\u8ddd\u79bb\u4e3a 1\uff0c\u8868\u793a\u662f\u987a\u5b50 int diffDistance = 0; for (int i = 0; i < 4; i++) { if (numbers[i] == 0) { zeroCount++; continue; } if (numbers[i] == numbers[i + 1]) { return false; } else { diffDistance += (numbers[i + 1] - numbers[i] - 1); } } return zeroCount >= diffDistance; } } Java \u4ee3\u7801\uff1a private boolean isOrderly(int[] number) { //1\u3001\u975e\u7a7a\u5224\u65ad if (number == null){ return false; } //2\u3001\u8ba1\u7b97 0 \u7684\u4e2a\u6570 int zero = 0; for (int num : number) { if (num == 0) { zero++; } } //3\u3001\u5c06\u6570\u7ec4\u6392\u5e8f Arrays.sort(number); //4\u3001\u6392\u5e8f\u5b8c\u6210\u4e4b\u540e \u4ece\u975e\u96f6\u6570\u636e\u8fdb\u884c\u4e24\u4e24\u5224\u65ad int small = zero; int big = small + 1; int numberGap = 0; //5\u3001\u6392\u9664\u4e00\u79cd\u60c5\u51b5 \u76f8\u90bb\u6570\u636e\u4e0d\u76f8\u7b49\u60c5\u51b5 //\u8fdb\u884c\u5faa\u73af\u7684\u57fa\u7840\u6761\u4ef6 while (big < number.length) { if (number[small] == number[big]) { return false;//\u6709\u5bf9\u5b50\u7684\u5b58\u5728 } //\u7edf\u8ba1\u76f8\u90bb\u4e4b\u95f4\u7684\u7a7a\u683c numberGap += number[big] - number[small] - 1; //\u6240\u6709\u7684\u6570\u636e\u8fdb\u884c\u540e\u79fb\u4e00\u4f4d small = big; big++; } //\u5224\u65ad\u6240\u6709\u7684\u95f4\u9694\u4e0e0\u7684\u4e2a\u6570 \u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e\u5219\u662f\u6709\u5e8f\u7684 \u5426\u5219\u5219\u662f\u65e0\u5e8f\u7684 return numberGap <= zero; } Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { public boolean isContinuous(int[] numbers) { int len = numbers.length; if (len != 5) { return false; } Arrays.sort(numbers); // \"0\" \u7684\u4e2a\u6570 int zeroCount = 0; // \u5f53\u524d\u6570\u4e0e\u540e\u4e00\u4e2a\u6570\u7684\u8ddd\u79bb\uff0c\u8ddd\u79bb\u4e3a 1\uff0c\u8868\u793a\u662f\u987a\u5b50 int diffDistance = 0; for (int i = 0; i < 4; i++) { if (numbers[i] == 0) { zeroCount++; continue; } if (numbers[i] == numbers[i + 1]) { return false; } else { diffDistance += (numbers[i + 1] - numbers[i] - 1); } } return zeroCount >= diffDistance; } } \u7b2c 62 \u9898\uff1a\u5b69\u5b50\u4eec\u7684\u6e38\u620f\uff08\u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\uff09 \u4f20\u9001\u95e8\uff1a \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 0, 1, \u2026, n-1 \u8fd9 n \u4e2a\u6570\u5b57 (n>0) \u6392\u6210\u4e00\u4e2a\u5706\u5708\uff0c\u4ece\u6570\u5b57 0 \u5f00\u59cb\u6bcf\u6b21\u4ece\u8fd9\u4e2a\u5706\u5708\u91cc\u5220\u9664\u7b2c m \u4e2a\u6570\u5b57\u3002 \u6c42\u51fa\u8fd9\u4e2a\u5706\u5708\u91cc\u5269\u4e0b\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a n=5 , m=3 \u8f93\u51fa\uff1a3 \u601d\u8def1\uff1a\u4f7f\u7528\u73af\u5f62\u94fe\u8868\u6a21\u62df\u7ea6\u745f\u592b\u73af\u3002\u6ce8\u610f\u7279\u4f8b\uff0c\u5373 $n==0$ \u6210\u7acb\uff0c\u6ca1\u6709\u6570\u5b57\u7684\u65f6\u5019\uff0c\u8fd4\u56de $ -1$ \u5373\u53ef\u3002 Python \u5199\u6cd5\uff1a\u8bb0\u4f4f\u8fd9\u79cd\u5199\u6cd5\uff0c\u4e24\u4e2a\u8981\u70b9\u3002 class Solution: def lastRemaining(self, n, m): # \u7279\u5224 if n == 0 and m == 0: return -1 l = [i for i in range(n)] bt = 0 while len(l) > 1: # \u5728\u8fd9\u4e00\u884c\u6a21\u62df\u7ea6\u745f\u592b\u73af\u64cd\u4f5c # 1\u3001m - 1 \uff1a\u56e0\u4e3a\u5f53\u524d\u6570\u5b57\u7b97 1 \u4e2a\uff0c\u8d70 m - 1 \u6b65 # 2\u3001len(l)\uff1a\u6bcf\u6b21\u5220\u53bb\u4e00\u4e2a\u6570\uff0c\u6240\u4ee5\u5f97\u52a8\u6001\u53d6 bt = (bt + m - 1) % len(l) l.pop(bt) return l[0] Java \u4ee3\u7801\uff1a import java.util.LinkedList; public class Solution { // \u7ea6\u745f\u592b\u73af\u95ee\u9898 // \u5176\u5b9e\u5e76\u4e0d\u4e00\u5b9a\u8981\u6784\u9020\u51fa\u4e00\u4e2a\u771f\u7684\u5faa\u73af\u94fe\u8868 public int LastRemaining_Solution(int n, int m) { // \u8fd9\u91cc\u7528\u94fe\u8868\u662f\u4e3a\u4e86\u63d0\u5347\u6027\u80fd\uff0c\u5982\u679c\u7528 ArrayList \u5728\u5220\u9664\u64cd\u4f5c\u4e2d\uff0c\u5c31\u4f1a\u6709\u5927\u91cf\u7684\u6027\u80fd\u6d88\u8017 LinkedList<Integer> list = new LinkedList<>(); int bt = 0; for (int i = 0; i < n; i++) { list.addLast(i); } while (list.size() > 1) { bt = (bt + m - 1) % list.size(); list.remove(bt); } // \u601d\u8003\u4e3a\u4ec0\u4e48\u4f1a\u6709\u6700\u540e\u8fd9\u4e2a\u5224\u65ad return list.size() == 1 ? list.get(0) : -1; } } Java \u4ee3\u7801\uff1a import java.util.LinkedList; public class Solution { // \u7ea6\u745f\u592b\u73af\u95ee\u9898 // \u5176\u5b9e\u5e76\u4e0d\u4e00\u5b9a\u8981\u6784\u9020\u51fa\u4e00\u4e2a\u771f\u7684\u5faa\u73af\u94fe\u8868 public int LastRemaining_Solution(int n, int m) { // \u5148\u5904\u7406\u6781\u7aef\u8f93\u5165 if (n <= 1) { return -1; } // \u8fd9\u91cc\u7528\u94fe\u8868\u662f\u4e3a\u4e86\u63d0\u5347\u6027\u80fd\uff0c\u5982\u679c\u7528 ArrayList \u5728\u5220\u9664\u64cd\u4f5c\u4e2d\uff0c\u5c31\u4f1a\u6709\u5927\u91cf\u7684\u6027\u80fd\u6d88\u8017 LinkedList<Integer> list = new LinkedList<>(); int bt = 0; for (int i = 0; i < n; i++) { list.addLast(i); } while (list.size() > 1) { // \u8868\u793a\u7684\u662f\u7d22\u5f15\u7684\u503c bt = (bt + m - 1) % list.size(); // \u4e0b\u9762\u8fd9\u4e00\u884c\u4ee3\u7801\u53ef\u4ee5\u5e2e\u52a9\u8c03\u8bd5 // System.out.println(bt + \" \" + list); // bt \u662f\u94fe\u8868\u7684\u7d22\u5f15 list.remove(bt); } // \u601d\u8003\u4e3a\u4ec0\u4e48\u4f1a\u6709\u6700\u540e\u8fd9\u4e2a\u5224\u65ad return list.get(0); } // \u6d4b\u8bd5\u7528\u4f8b\uff1a n = 6\uff0c[0,1,2,3,4,5]\uff0cm=3 public static void main(String[] args) { Solution solution = new Solution(); int n = 6; int m = 3; int lastRemainingSolution = solution.LastRemaining_Solution(n, m); System.out.println(lastRemainingSolution); } } \u601d\u8def2\uff1a\u4e66\u4e0a\u8bf4\u7684\uff0c\u4f7f\u7528\u6570\u5b66\u65b9\u6cd5\u3002 \u7b2c 63 \u9898\uff1a\u80a1\u7968\u7684\u6700\u5927\u5229\u6da6 \u4f20\u9001\u95e8\uff1a \u80a1\u7968\u7684\u6700\u5927\u5229\u6da6 \u3002 \u5047\u8bbe\u628a\u67d0\u80a1\u7968\u7684\u4ef7\u683c\u6309\u7167\u65f6\u95f4\u5148\u540e\u987a\u5e8f\u5b58\u50a8\u5728\u6570\u7ec4\u4e2d\uff0c\u8bf7\u95ee\u4e70\u5356\u4ea4\u6613\u8be5\u80a1\u7968\u53ef\u80fd\u83b7\u5f97\u7684\u5229\u6da6\u662f\u591a\u5c11\uff1f \u4f8b\u5982\u4e00\u53ea\u80a1\u7968\u5728\u67d0\u4e9b\u65f6\u95f4\u8282\u70b9\u7684\u4ef7\u683c\u4e3a [9, 11, 8, 5, 7, 12, 16, 14] \u3002 \u5982\u679c\u6211\u4eec\u80fd\u5728\u4ef7\u683c\u4e3a 5 \u7684\u65f6\u5019\u4e70\u5165\u5e76\u5728\u4ef7\u683c\u4e3a 16 \u65f6\u5356\u51fa\uff0c\u5219\u80fd\u6536\u83b7\u6700\u5927\u7684\u5229\u6da6 11\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [9, 11, 8, 5, 7, 12, 16, 14] \u8f93\u51fa\uff1a11 \u601d\u8def\uff1a\u5728\u8fc7\u5f80\u7684\u80a1\u4ef7\u4e2d\u627e\u5230\u6700\u4f4e\u4ef7\uff0c\u201c\u5f53\u524d\u80a1\u4ef7 - \u6700\u4f4e\u4ef7\u201d\u4e3a\u83b7\u5229\u3002\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u627e\u5230\u8fd9\u4e2a\u83b7\u5229\u7684\u6700\u5927\u503c\u5373\u53ef\u3002\u7531\u4e8e\u53ea\u5141\u8bb8\u505a\u4e00\u6b21\u80a1\u7968\u4e70\u5356\u4ea4\u6613\uff0c\u679a\u4e3e\u6bcf\u4e00\u5929\u4f5c\u4e3a\u5356\u51fa\u7684\u65e5\u5b50\uff0c\u4e70\u5165\u65e5\u5b50\u4e00\u5b9a\u5728\u5356\u51fa\u65e5\u5b50\u4e4b\u524d\uff0c\u4e3a\u4e86\u83b7\u5229\u6700\u591a\uff0c\u5e0c\u671b\u4e70\u5165\u7684\u65e5\u5b50\u7684\u80a1\u7968\u4ef7\u683c\u5c3d\u53ef\u80fd\u4f4e\u3002\u7528 minnum \u8bb0\u5f55\u7b2c $0$ \u5230 \u7b2c $i$ \u5929\u7684\u6700\u4f4e\u4ef7\u683c\uff0c\u5219\u5728\u7b2c $i$ \u5929\u5356\u51fa\u7684\u6700\u5927\u83b7\u5229\u4e3a nums[i] - minnum \uff0c\u679a\u4e3e $i$ \u627e\u5230\u6700\u5927\u83b7\u5229\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def maxDiff(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" l = len(nums) if l == 0: return 0 min_val = nums[0] max_profit = 0 for i in range(1, l): min_val = min(min_val, nums[i]) max_profit = max(max_profit, nums[i] - min_val) return max_profit \u540c LeetCode \u7b2c 121 \u9898\u3002 \u4f20\u9001\u95e8\uff1a 121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u5982\u679c\u4f60\u6700\u591a\u53ea\u5141\u8bb8\u5b8c\u6210\u4e00\u7b14\u4ea4\u6613\uff08\u5373\u4e70\u5165\u548c\u5356\u51fa\u4e00\u652f\u80a1\u7968\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u80a1\u7968\u524d\u5356\u51fa\u80a1\u7968\u3002 \u793a\u4f8b 1: \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 5 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u6700\u5927\u5229\u6da6 = 6-1 = 5 \u3002 \u6ce8\u610f\u5229\u6da6\u4e0d\u80fd\u662f 7-1 = 6, \u56e0\u4e3a\u5356\u51fa\u4ef7\u683c\u9700\u8981\u5927\u4e8e\u4e70\u5165\u4ef7\u683c\u3002 \u793a\u4f8b 2: \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 Java \u4ee3\u7801\uff1a public class Solution2 { // \u7559\u610f\u8fd9\u4e2a\u89e3\u6cd5\u7684\u8bed\u4e49 public int maxProfit(int[] prices) { int buy = Integer.MIN_VALUE; int sell = 0; for (int price : prices) { // \u5728\u5f53\u524d\u4ee5\u53ca\u4e4b\u524d\u5982\u679c\u6267\u884c\u4e86\u4e70\u64cd\u4f5c\uff0c\u80fd\u591f\u5f97\u5230\u7684\u5229\u6da6\u7684\u6700\u5927\u503c buy = Math.max(buy, -price); // \u5728\u5f53\u524d\u4ee5\u53ca\u4e4b\u524d\u5982\u679c\u6267\u884c\u4e86\u5356\u64cd\u4f5c\uff0c\u80fd\u591f\u5f97\u5230\u7684\u5229\u6da6\u7684\u6700\u5927\u503c sell = Math.max(sell, buy + price); } return sell; } public static void main(String[] args) { int[] prices = {7, 1, 5, 3, 6, 4}; Solution2 solution2 = new Solution2(); int maxProfit = solution2.maxProfit(prices); System.out.println(maxProfit); } } \u533a\u522b\u4e8e LeetCode \u7b2c 122 \u9898\u3002 \u4f20\u9001\u95e8\uff1a 122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09\u3002 \u6ce8\u610f\uff1a \u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002 \u793a\u4f8b 1: \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 7 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 3 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u968f\u540e\uff0c\u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 6-3 = 3 \u3002 \u793a\u4f8b 2: \u8f93\u5165: [1,2,3,4,5] \u8f93\u51fa: 4 \u89e3\u91ca: \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002 \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002 \u793a\u4f8b 3: \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 \u53c2\u8003\u8d44\u6599\uff1a\u4ece\u96f6\u5f00\u59cb\u5b66\u8d2a\u5fc3\u7b97\u6cd5 - CSDN\u535a\u5ba2 https://blog.csdn.net/qq_32400847/article/details/51336300 \u7b2c 64 \u9898\uff1a\u6c42 1 + 2 + 3 + ... + n \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u6c42 1 + 2 + 3 + ... + n \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u6c42 1+2+\u2026+n \uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u4e58\u9664\u6cd5\u3001for\u3001while\u3001if\u3001else\u3001switch\u3001case \u7b49\u5173\u952e\u5b57\u53ca\u6761\u4ef6\u5224\u65ad\u8bed\u53e5\uff08A?B:C\uff09\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a10 \u8f93\u51fa\uff1a55 Java \u4ee3\u7801\uff1a \u5206\u6790\uff1a\u7b49\u5dee\u6570\u5217\u6c42\u548c\u7684\u901a\u9879\u516c\u5f0f\u5982\u4e0b\uff1a $$ s=\\cfrac{n(n+1)}{2} = \\cfrac{n^2+n}{2} $$ \u5c06\u4e0a\u9762\u7684\u516c\u5f0f\u4e2d\u7684\u8fd0\u7b97\u6362\u6210\u53ea\u7528\u52a0\u6cd5\u3001\u4e58\u65b9\u8fd0\u7b97\u3001\u4f4d\u8fd0\u7b97\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getSum(self, n): \"\"\" :type n: int :rtype: int \"\"\" return (n ** 2 + n) >> 1 \u7b2c 65 \u9898\uff1a\u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \u4f20\u9001\u95e8\uff1a \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6c42\u4e24\u4e2a\u6574\u6570\u4e4b\u548c\uff0c\u8981\u6c42\u5728\u51fd\u6570\u4f53\u5185\u4e0d\u5f97\u4f7f\u7528\uff0b\u3001\uff0d\u3001\u00d7\u3001\u00f7 \u56db\u5219\u8fd0\u7b97\u7b26\u53f7\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a num1 = 1 , num2 = 2 \u8f93\u51fa\uff1a3 \u601d\u8def\uff1a\u4e0d\u7528\u52a0\u51cf\u4e58\u9664\uff0c\u90a3\u5c31\u53ea\u80fd\u7528\u4f4d\u8fd0\u7b97\u4e86\u3002 \u4e0b\u9762\u662f\u4ea4\u6362\u4e24\u4e2a\u6570\u7684\u7279\u6b8a\u5199\u6cd5\uff0c\u4e86\u89e3\u4e00\u4e0b\u3002 Python \u4ee3\u7801\uff1a\u5728 Python \u5185\u90e8\u5bf9\u6574\u6570\u7684\u5904\u7406\u5206\u4e3a\u666e\u901a\u6574\u6570\u548c\u957f\u6574\u6570\uff0c\u666e\u901a\u6574\u6570\u957f\u5ea6\u4e3a\u673a\u5668\u4f4d\u957f\uff0c\u901a\u5e38\u90fd\u662f $32$ \u4f4d\uff0c\u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\u7684\u6574\u6570\u5c31\u81ea\u52a8\u5f53\u957f\u6574\u6570\u5904\u7406\uff0c\u800c\u957f\u6574\u6570\u7684\u8303\u56f4\u51e0\u4e4e\u5b8c\u5168\u6ca1\u9650\u5236\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def add(self, num1, num2): \"\"\" :type num1: int :type num2: int :rtype: int \"\"\" while num2 != 0: # \u4e0d\u8fdb\u4f4d\u52a0\u6cd5 temp = num1 ^ num2 # \u52a0\u6cd5\u8fdb\u4f4d num2 = (num1 & num2) << 1 # \u628a\u9ad8\u4e8e 32 \u4f4d\u7684 1 \u5168\u90e8\u53d8\u6210 0 num1 = temp & 0xFFFFFFFF return num1 if num1 >> 31 == 0 else num1 - (1 << 32) \u8bf4\u660e\uff1aPython \u4e2d int \u7c7b\u578b\u7684\u6700\u5927\u503c\u662f 0x7fffffff \u3002 Python \u4ee3\u7801\uff1a\u4e0e\u4e0a\u9762\u7684\u5199\u6cd5\u7b49\u4ef7 class Solution(object): def add(self, num1, num2): \"\"\" :type num1: int :type num2: int :rtype: int \"\"\" while True: # \u4e0d\u8fdb\u4f4d\u52a0\u6cd5 s = num1 ^ num2 # \u8ba1\u7b97\u8fdb\u4f4d carry = num1 & num2 # \u624b\u52a8\u628a\u9ad8\u4e8e 32 \u4f4d\u7684\u90e8\u5206\u53d8\u6210 0 num1 = s & 0xFFFFFFFF num2 = carry << 1 if carry == 0: break # \u5982\u679c\u662f\u6b63\u6570\u548c 0 \uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u6b63\u6570\u597d\u4e86 if num1 >> 31 == 0: return num1 # \u5982\u679c\u662f\u8d1f\u6570 return num1 - (1 << 32) Java \u4ee3\u7801\uff1a public class Solution { public int Add(int num1, int num2) { int sum = 0; while (true) { // \u8ba1\u7b97\u4e2a\u4f4d sum = num1 ^ num2; int carry = num1 & num2; if (carry == 0) { break; } num1 = sum; // \u8ba1\u7b97\u8fdb\u4f4d num2 = carry << 1; } return sum; } public static void main(String[] args) { Solution solution = new Solution(); int add = solution.Add(14, 15); System.out.println(add); } } \u8fd8\u53ef\u4ee5\u7528\u201c\u5168\u52a0\u5668\u201d\u5b9e\u73b0\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def add(self, num1, num2): \"\"\" :type num1: int :type num2: int :rtype: int \"\"\" # \u7279\u5224 if num1 == 0 or num2 == 0: return max(num1, num2) res = 0 # \u8fdb\u4f4d carry = 0 for i in range(32): a = num1 & (1 << i) b = num2 & (1 << i) # \u4e0d\u8fdb\u4f4d\u7684\u548c s_ = (a ^ b) ^ carry # \u4e0b\u9762\u8ba1\u7b97\u8fdb\u4f4d\uff0c\u4e09\u8005\u4e4b\u4e2d\uff0c\u4efb\u610f\u4e24\u8005\u540c\u4e3a 1 \u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u8fdb\u4f4d carry = (a & b) | (a & carry) | (b & carry) carry <<= 1 res += s_ if res >> 31 == 0: return res return res - (1 << 32) Java \u4ee3\u7801\uff1a public class Solution { public int Add(int num1, int num2) { int sum = 0; while (true) { sum = num1 ^ num2; int carry = num1 & num2; if (carry == 0) { break; } num1 = sum; num2 = carry << 1; } return sum; } public static void main(String[] args) { Solution solution = new Solution(); int add = solution.Add(14, 15); System.out.println(add); } } Java \u4ee3\u7801\uff1a public class Solution2 { // \u4e66\u4e0a\u7684\u5199\u6cd5 public int Add(int num1, int num2) { int sum = 0; int carry = 0; do { sum = num1 ^ num2; carry = num1 & num2; num1 = sum; num2 = carry << 1; } while (carry != 0); return sum; } } \u7b2c 66 \u9898\uff1a\u6784\u5efa\u4e58\u79ef\u6570\u7ec4 \u4f20\u9001\u95e8\uff1a \u6784\u5efa\u4e58\u79ef\u6570\u7ec4 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 A[0, 1, \u2026, n-1] \uff0c\u8bf7\u6784\u5efa\u4e00\u4e2a\u6570\u7ec4 B[0, 1, \u2026, n-1] \uff0c\u5176\u4e2d B \u4e2d\u7684\u5143\u7d20 B[i] = A[0] \u00d7 A[1] \u00d7 \u2026 \u00d7 A[i - 1] \u00d7 A[i + 1] \u00d7 \u2026 \u00d7 A[n - 1] \u3002 \u4e0d\u80fd\u4f7f\u7528\u9664\u6cd5\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1, 2, 3, 4, 5] \u8f93\u51fa\uff1a [120, 60, 40, 30, 24] \u601d\u8003\u9898 \uff1a \u80fd\u4e0d\u80fd\u53ea\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\uff1f\uff08\u9664\u4e86\u8f93\u51fa\u7684\u6570\u7ec4\u4e4b\u5916\uff09 \u601d\u8def\uff1a\u4f7f\u7528\u77e9\u9635\u6cd5\u6c42\u89e3\uff0c\u5c06\u77e9\u9635\u5206\u4e3a\u4e0a\u4e09\u89d2\u77e9\u9635\u548c\u4e0b\u4e09\u89d2\u77e9\u9635\uff0c\u5206\u522b\u6c42\u4e58\u79ef\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def multiply(self, A): \"\"\" :type A: List[int] :rtype: List[int] \"\"\" l = len(A) if l == 0: return [] b = [None for _ in range(l)] b[0] = 1 # \u8ba1\u7b97\u4e0b\u4e09\u89d2\u8fde\u4e58\u7684\u7ed3\u679c for i in range(1, l): b[i] = b[i - 1] * A[i - 1] temp = 1 for i in range(l - 2, -1, -1): temp *= A[i + 1] b[i] *= temp return b Python \u4ee3\u7801\uff1a # 66\u3001\u6784\u5efa\u4e58\u79ef\u6570\u7ec4 class Solution(object): def multiply(self, A): \"\"\" :type A: List[int] :rtype: List[int] \"\"\" l = len(A) if l == 0: return [] b = [1 for _ in range(l)] temp = 1 for index in range(l): b[index] *= temp temp *= A[index] temp = 1 for index in range(l - 1, -1, -1): b[index] *= temp temp *= A[index] return b Java \u4ee3\u7801\uff1a C++ \u4ee3\u7801\uff1a class Solution { public: vector<int> multiply(const vector<int>& A) { vector<int>left(A.size(),1); vector<int>right(A.size(),1); for(int i = 1;i<A.size();i++){ left[i] = A[i-1]*left[i-1]; } for(int i = A.size()-2;i>=0;i--){ right[i] = A[i+1]*right[i+1]; } vector<int>B(A.size(),0); for(int i = 0;i<A.size();i++){ B[i] = left[i]*right[i]; } return B; } }; \u4f5c\u8005\uff1acornerCao \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/AcWing/content/759/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u7b2c 67 \u9898\uff1a\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 \u4f20\u9001\u95e8\uff1a \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u4f60\u5199\u4e00\u4e2a\u51fd\u6570StrToInt\uff0c\u5b9e\u73b0\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u8fd9\u4e2a\u529f\u80fd\u3002 \u5f53\u7136\uff0c\u4e0d\u80fd\u4f7f\u7528atoi\u6216\u8005\u5176\u4ed6\u7c7b\u4f3c\u7684\u5e93\u51fd\u6570\u3002 \u6837\u4f8b\uff1a ``` \u8f93\u5165\uff1a\"123\" \u8f93\u51fa\uff1a123 ``` \u6ce8\u610f : \u4f60\u7684\u51fd\u6570\u5e94\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\uff1a \u5ffd\u7565\u6240\u6709\u884c\u9996\u7a7a\u683c\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\uff0c\u53ef\u4ee5\u662f \u2018+/\u2212+/\u2212\u2019 \u8868\u793a\u662f\u6b63\u6570\u6216\u8005\u8d1f\u6570\uff0c\u7d27\u968f\u5176\u540e\u627e\u5230\u6700\u957f\u7684\u4e00\u4e32\u8fde\u7eed\u6570\u5b57\uff0c\u5c06\u5176\u89e3\u6790\u6210\u4e00\u4e2a\u6574\u6570\uff1b \u6574\u6570\u540e\u53ef\u80fd\u6709\u4efb\u610f\u975e\u6570\u5b57\u5b57\u7b26\uff0c\u8bf7\u5c06\u5176\u5ffd\u7565\uff1b \u4ece\u524d\u5f80\u540e\u904d\u5386\u65f6\uff0c\u5982\u679c\u7b2c\u4e00\u6bb5\u8fde\u7eed\u975e\u7a7a\u683c\u5b57\u7b26\u4e32\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684\u6574\u6570\u8868\u793a\uff0c\u5219\u8fd4\u56de0\uff1b \u5982\u679c\u6574\u6570\u5927\u4e8eINT_MAX(2^31 \u2212 1)\uff0c\u8bf7\u8fd4\u56deINT_MAX\uff1b\u5982\u679c\u6574\u6570\u5c0f\u4e8eINT_MIN(\u22122^31) \uff0c\u8bf7\u8fd4\u56deINT_MIN\uff1b Java \u4ee3\u7801\uff1a \u540c LeetCode \u7b2c 8 \u9898\u3002 \u4f20\u9001\u95e8\uff1a 8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi) \u3002 \u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a atoi \u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u3002 \u9996\u5148\uff0c\u8be5\u51fd\u6570\u4f1a\u6839\u636e\u9700\u8981\u4e22\u5f03\u65e0\u7528\u7684\u5f00\u5934\u7a7a\u683c\u5b57\u7b26\uff0c\u76f4\u5230\u5bfb\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u7684\u5b57\u7b26\u4e3a\u6b62\u3002 \u5f53\u6211\u4eec\u5bfb\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e3a\u6b63\u6216\u8005\u8d1f\u53f7\u65f6\uff0c\u5219\u5c06\u8be5\u7b26\u53f7\u4e0e\u4e4b\u540e\u9762\u5c3d\u53ef\u80fd\u591a\u7684\u8fde\u7eed\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u4f5c\u4e3a\u8be5\u6574\u6570\u7684\u6b63\u8d1f\u53f7\uff1b\u5047\u5982\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u4e0e\u4e4b\u540e\u8fde\u7eed\u7684\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u6574\u6570\u3002 \u8be5\u5b57\u7b26\u4e32\u9664\u4e86\u6709\u6548\u7684\u6574\u6570\u90e8\u5206\u4e4b\u540e\u4e5f\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4f59\u7684\u5b57\u7b26\uff0c\u8fd9\u4e9b\u5b57\u7b26\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u5b83\u4eec\u5bf9\u4e8e\u51fd\u6570\u4e0d\u5e94\u8be5\u9020\u6210\u5f71\u54cd\u3002 \u6ce8\u610f\uff1a\u5047\u5982\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u6574\u6570\u5b57\u7b26\u3001\u5b57\u7b26\u4e32\u4e3a\u7a7a\u6216\u5b57\u7b26\u4e32\u4ec5\u5305\u542b\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5219\u4f60\u7684\u51fd\u6570\u4e0d\u9700\u8981\u8fdb\u884c\u8f6c\u6362\u3002 \u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u82e5\u51fd\u6570\u4e0d\u80fd\u8fdb\u884c\u6709\u6548\u7684\u8f6c\u6362\u65f6\uff0c\u8bf7\u8fd4\u56de 0\u3002 \u8bf4\u660e\uff1a \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u5927\u5c0f\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u90a3\u4e48\u5176\u6570\u503c\u8303\u56f4\u4e3a [\u2212231, 231 \u2212 1]\u3002\u5982\u679c\u6570\u503c\u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\uff0cqing\u8fd4\u56de INT_MAX (231 \u2212 1) \u6216 INT_MIN (\u2212231) \u3002 \u793a\u4f8b 1: \u8f93\u5165: \"42\" \u8f93\u51fa: 42 \u793a\u4f8b 2: \u8f93\u5165: \" -42\" \u8f93\u51fa: -42 \u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26\u4e3a '-', \u5b83\u662f\u4e00\u4e2a\u8d1f\u53f7\u3002 \u6211\u4eec\u5c3d\u53ef\u80fd\u5c06\u8d1f\u53f7\u4e0e\u540e\u9762\u6240\u6709\u8fde\u7eed\u51fa\u73b0\u7684\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u6700\u540e\u5f97\u5230 -42 \u3002 \u793a\u4f8b 3: \u8f93\u5165: \"4193 with words\" \u8f93\u51fa: 4193 \u89e3\u91ca: \u8f6c\u6362\u622a\u6b62\u4e8e\u6570\u5b57 '3' \uff0c\u56e0\u4e3a\u5b83\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u4e3a\u6570\u5b57\u3002 \u793a\u4f8b 4: \u8f93\u5165: \"words and 987\" \u8f93\u51fa: 0 \u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f 'w', \u4f46\u5b83\u4e0d\u662f\u6570\u5b57\u6216\u6b63\u3001\u8d1f\u53f7\u3002 \u56e0\u6b64\u65e0\u6cd5\u6267\u884c\u6709\u6548\u7684\u8f6c\u6362\u3002 \u793a\u4f8b 5: \u8f93\u5165: \"-91283472332\" \u8f93\u51fa: -2147483648 \u89e3\u91ca: \u6570\u5b57 \"-91283472332\" \u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u3002 \u56e0\u6b64\u8fd4\u56de INT_MIN (\u2212231) \u3002 Python \u4ee3\u7801\uff1aPython \u4ee3\u7801\u6bd4\u8f83\u7279\u522b\uff0c\u8981\u6ce8\u610f\uff0c\u7b26\u53f7\u4f4d\u4e0d\u5728\u7b2c $32$ \u4f4d\u4e0a class Solution(object): def strToInt(self, str): \"\"\" :type str: str :rtype: int \"\"\" # \u53bb\u6389\u5de6\u53f3\u7a7a\u683c s = str.strip() l = len(s) if l == 0: return 0 # \u904d\u5386\u6307\u9488 index = 0 # \u7b26\u53f7 sign = 1 # \u7b2c 1 \u4f4d\u7b26\u53f7\u4f4d s_sign = s[0] # \u6700\u7ec8\u7ed3\u679c res = 0 INT_MIN = -1 << 31 INT_MAX = (1 << 31) - 1 # \u7b26\u53f7\u4f4d\u662f\u6b63\u6216\u8d1f\u53f7\u7684\u65f6\u5019 index \u90fd\u52a0 1 if s_sign == '+': index += 1 elif s_sign == '-': index += 1 sign = -1 for i in range(index, l): c = s[i] if c.isdigit(): cint = ord(c) - ord('0') res = res * 10 + cint if res * sign > INT_MAX: break else: break res *= sign if res > INT_MAX: return INT_MAX elif res < INT_MIN: return INT_MIN return res if __name__ == '__main__': solution = Solution() str = '2147483647' result = solution.strToInt(str) print(result) \u7b2c 68 \u9898\uff1a\u6811\u4e2d\u4e24\u4e2a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 \u4f20\u9001\u95e8\uff1a \u6811\u4e2d\u4e24\u4e2a\u7ed3\u70b9\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148 \u3002 \u7ed9\u51fa\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8f93\u5165\u4e24\u4e2a\u6811\u8282\u70b9\uff0c\u6c42\u5b83\u4eec\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148\u3002 \u4e00\u4e2a\u6811\u8282\u70b9\u7684\u7956\u5148\u8282\u70b9\u5305\u62ec\u5b83\u672c\u8eab\u3002 \u6ce8\u610f\uff1a \u8f93\u5165\u7684\u4e8c\u53c9\u6811\u4e0d\u4e3a\u7a7a\uff1b \u8f93\u5165\u7684\u4e24\u4e2a\u8282\u70b9\u4e00\u5b9a\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u662f\u4e8c\u53c9\u6811\u4e2d\u7684\u8282\u70b9\uff1b \u6837\u4f8b\uff1a \u4e8c\u53c9\u6811 [8, 12, 2, null, null, 6, 4, null, null, null, null] \u5982\u4e0b\u56fe\u6240\u793a\uff1a 8 / \\ 12 2 / \\ 6 4 1. \u5982\u679c\u8f93\u5165\u7684\u6811\u8282\u70b9\u4e3a 2 \u548c 12\uff0c\u5219\u8f93\u51fa\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148\u4e3a\u6811\u8282\u70b9 8 \u3002 \u5982\u679c\u8f93\u5165\u7684\u6811\u8282\u70b9\u4e3a 2 \u548c 6 \uff0c\u5219\u8f93\u51fa\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148\u4e3a\u6811\u8282\u70b9 2 \u3002 \u540c LeetCode \u7b2c 236 \u9898\uff1a\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002 \u4f20\u9001\u95e8\uff1a 236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002 \u767e\u5ea6\u767e\u79d1 \u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\u4e3a\uff1a\u201c\u5bf9\u4e8e\u6709\u6839\u6811 T \u7684\u4e24\u4e2a\u7ed3\u70b9 p\u3001q\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e3a\u4e00\u4e2a\u7ed3\u70b9 x\uff0c\u6ee1\u8db3 x \u662f p\u3001q \u7684\u7956\u5148\u4e14 x \u7684\u6df1\u5ea6\u5c3d\u53ef\u80fd\u5927\uff08 \u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148 \uff09\u3002\u201d \u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u6811: root = [3,5,1,6,2,0,8,null,null,7,4] \u793a\u4f8b 1: \u8f93\u5165: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1 \u8f93\u51fa: 3 \u89e3\u91ca: \u8282\u70b9 5 \u548c\u8282\u70b9 1 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 3\u3002 \u793a\u4f8b 2: \u8f93\u5165: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4 \u8f93\u51fa: 5 \u89e3\u91ca: \u8282\u70b9 5 \u548c\u8282\u70b9 4 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 5\u3002\u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u4e3a\u8282\u70b9\u672c\u8eab\u3002 \u8bf4\u660e: \u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\u3002 p\u3001q \u4e3a\u4e0d\u540c\u8282\u70b9\u4e14\u5747\u5b58\u5728\u4e8e\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\u4e2d\u3002 \u5206\u6790\uff1a1\u3001\u5982\u679c\u6709\u6307\u5411\u7236\u7ed3\u70b9\u7684\u6307\u9488\uff1b2\u3001\u6ca1\u6709\u6307\u5411\u7236\u7ed3\u70b9\u7684\u6307\u9488\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def lowestCommonAncestor(self, root, p, q): \"\"\" :type root: TreeNode :type p: TreeNode :type q: TreeNode :rtype: TreeNode \"\"\" if root is None: return None if root == p or root == q: return root left = self.lowestCommonAncestor(root.left, p, q) right = self.lowestCommonAncestor(root.right, p, q) if left and right: return root if left is None: return right if right is None: return left return None Java \u4ee3\u7801\uff1a \u53c2\u8003\u8d44\u6599\uff1a B \u7ad9 UP \u4e3b\u201c\u5927\u96ea\u83dc\u201d\u76f4\u64ad\uff1ahttps://www.acwing.com/activity/content/introduction/5/\u3002 \u300a\u5251\u6307offer\u300b\u9762\u8bd5\u9898\u7684Python\u5b9e\u73b0 \u5251\u6307Offer\u7cfb\u5217\u5237\u9898\u7b14\u8bb0\u6c47\u603b https://blog.csdn.net/c406495762/article/details/79247243#%E9%93%BE%E8%A1%A8-8%E9%81%93 https://github.com/gatieme/CodingInterviews \u5251\u6307Offer\u7cfb\u5217\u5237\u9898\u7b14\u8bb0\u6c47\u603b \u3002 \u7b2c 2 \u7248 Java \u5b9e\u73b0\u4ee3\u7801\u4ed3\u5e93\uff1a https://github.com/cris1313/SwordForOffer \u767d\u591c\u884c515 https://blog.csdn.net/baiye_xing/article/details/78428561 \u5251\u6307Offer\u2014\u2014\u7f16\u7a0b\u9898\u7684Java\u5b9e\u73b0\uff08\u66f4\u65b0\u5b8c\u6bd5\u2026\u2026\uff09 https://blog.csdn.net/u011464124/article/details/76706011 \u5251\u6307offer\u9898\u76eejava\u5b9e\u73b0 https://www.cnblogs.com/ysw-go/p/6272551.html \u6781\u5ba2\u5b66\u9662 http://wiki.jikexueyuan.com/project/for-offer/question-twenty-seven.html https://blog.csdn.net/column/details/codingintervieww.html> \u9898\u76ee\uff1aString \u7a7a\u5b57\u7b26\u4e32\u66ff\u6362\uff1a\u4ece\u540e\u5411\u524d\u66ff\u6362\uff0c\u8fb9\u590d\u5236\uff0c\u8fb9\u8986\u76d6\uff0c\u4e0d\u8981\u601d\u7ef4\u5b9a\u52bf \u5355\u94fe\u8868\u95ee\u9898\u5e94\u8be5\u5f15\u8d77\u91cd\u89c6\uff1a\u94fe\u8868\u95ee\u9898\u5982\u679c\u4e0d\u60f3\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u90a3\u4e48\u5c31\u8ba9\u9012\u5f52\u53bb\u5b8c\u6210\uff01 \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868\uff1a\uff081\uff09\u7528\u6808\uff082\uff09\u9012\u5f52\u548c\u6808\u5bc6\u4e0d\u53ef\u5206\uff08\u9012\u5f52\u6df1\u5ea6\u5f88\u6df1\u7684\u65f6\u5019\uff0c\u4e0d\u8981\u8fd9\u4e48\u505a\uff09 \u7b2c 8 \u9898\uff1a\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 Java \u4ee3\u7801\uff1a 57_1\u3001\u961f\u5217\u7684\u6700\u5927\u503c \u4f20\u9001\u95e8\uff1a \u3002 \u53c2\u8003\u8d44\u6599 1\u3001\u5251\u6307Offer\u7cfb\u5217\u5237\u9898\u7b14\u8bb0\u6c47\u603b https://blog.csdn.net/c406495762/article/details/79247243#%E9%93%BE%E8%A1%A8-8%E9%81%93 \u8fd9\u7bc7\u4f5c\u8005\u7684 GitHub\uff1ahttps://github.com/Jack-Cherish/LeetCode 2\u3001https://github.com/gatieme/CodingInterviews \uff08\u672c\u8282\u5b8c\uff09","title":"61 68"},{"location":"61-68/#offer-2-python-61-68","text":"","title":"\u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09 \u9898\u89e3\uff08Python \u8bed\u8a00\u5b9e\u73b0\uff09\u7b2c 61-68 \u9898"},{"location":"61-68/#61","text":"\u4f20\u9001\u95e8\uff1a \u6251\u514b\u724c\u7684\u987a\u5b50 \u3002 \u4ece\u6251\u514b\u724c\u4e2d\u968f\u673a\u62bd 5 \u5f20\u724c\uff0c\u5224\u65ad\u662f\u4e0d\u662f\u4e00\u4e2a\u987a\u5b50\uff0c\u5373\u8fd9 5 \u5f20\u724c\u662f\u4e0d\u662f\u8fde\u7eed\u7684\u3002 2\uff5e10 \u4e3a\u6570\u5b57\u672c\u8eab\uff0cA \u4e3a 1 \uff0cJ \u4e3a 11\uff0cQ \u4e3a 12\uff0cK \u4e3a 13\uff0c\u5927\u5c0f\u738b\u53ef\u4ee5\u770b\u505a\u4efb\u610f\u6570\u5b57\u3002 \u4e3a\u4e86\u65b9\u4fbf\uff0c\u5927\u5c0f\u738b\u5747\u4ee50\u6765\u8868\u793a\uff0c\u5e76\u4e14\u5047\u8bbe\u8fd9\u526f\u724c\u4e2d\u5927\u5c0f\u738b\u5747\u6709\u4e24\u5f20\u3002 \u6837\u4f8b1\uff1a \u8f93\u5165\uff1a [8,9,10,11,12] \u8f93\u51fa\uff1atrue \u6837\u4f8b2\uff1a \u8f93\u5165\uff1a [0,8,9,11,12] \u8f93\u51fa\uff1atrue \u601d\u8def\uff1a\u57fa\u672c\u601d\u8def\u5c31\u662f\u628a\u4e0d\u7b26\u5408\u9898\u76ee\u8981\u6c42\u7684\u60c5\u51b5\u5168\u90e8\u6392\u9664\u6389\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u6b63\u786e\u7684\u4e86\u3002 python \u4ee3\u7801\uff1a class Solution(object): def isContinuous(self, numbers): \"\"\" :type numbers: List[int] :rtype: bool \"\"\" size = len(numbers) if size != 5: return False # \u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u90fd\u8bbe\u7f6e\u6210\u4e00\u4e2a\u4e0d\u53ef\u80fd\u53d6\u5230\u7684\u503c min_val = 14 max_val = -1 flag = 0 for num in numbers: if not 0 <= num <= 13: return False if num == 0: continue # \u53f3\u79fb\uff1a\u770b\u770b\u8fd9\u4e00\u4f4d\u662f\u4e0d\u662f\u7528\u8fc7\u4e86 if (flag >> num) & 1 == 1: return False # \u5de6\u79fb\uff1a\u8868\u793a\u8fd9\u4e00\u4f4d\u6211\u73b0\u5728\u8981\u5360\u7528 flag = flag | (1 << num) min_val = min(min_val, num) max_val = max(max_val, num) if max_val - min_val >= 5: return False return True Python \u4ee3\u7801\uff1a class Solution: def IsContinuous(self, numbers): # write code here if len(numbers) < 5: return False max_num = -1 min_num = 14 flag = 0 for number in numbers: if number < 0 or number > 13: return False if number == 0: continue if (flag >> number) & 1 == 1: return False flag |= 1 << number if number < min_num: min_num = number if number > max_num: max_num = number if max_num - min_num >= 5: return False return True Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { public boolean isContinuous(int[] numbers) { int len = numbers.length; if (len != 5) { return false; } Arrays.sort(numbers); // \"0\" \u7684\u4e2a\u6570 int zeroCount = 0; // \u5f53\u524d\u6570\u4e0e\u540e\u4e00\u4e2a\u6570\u7684\u8ddd\u79bb\uff0c\u8ddd\u79bb\u4e3a 1\uff0c\u8868\u793a\u662f\u987a\u5b50 int diffDistance = 0; for (int i = 0; i < 4; i++) { if (numbers[i] == 0) { zeroCount++; continue; } if (numbers[i] == numbers[i + 1]) { return false; } else { diffDistance += (numbers[i + 1] - numbers[i] - 1); } } return zeroCount >= diffDistance; } } Java \u4ee3\u7801\uff1a private boolean isOrderly(int[] number) { //1\u3001\u975e\u7a7a\u5224\u65ad if (number == null){ return false; } //2\u3001\u8ba1\u7b97 0 \u7684\u4e2a\u6570 int zero = 0; for (int num : number) { if (num == 0) { zero++; } } //3\u3001\u5c06\u6570\u7ec4\u6392\u5e8f Arrays.sort(number); //4\u3001\u6392\u5e8f\u5b8c\u6210\u4e4b\u540e \u4ece\u975e\u96f6\u6570\u636e\u8fdb\u884c\u4e24\u4e24\u5224\u65ad int small = zero; int big = small + 1; int numberGap = 0; //5\u3001\u6392\u9664\u4e00\u79cd\u60c5\u51b5 \u76f8\u90bb\u6570\u636e\u4e0d\u76f8\u7b49\u60c5\u51b5 //\u8fdb\u884c\u5faa\u73af\u7684\u57fa\u7840\u6761\u4ef6 while (big < number.length) { if (number[small] == number[big]) { return false;//\u6709\u5bf9\u5b50\u7684\u5b58\u5728 } //\u7edf\u8ba1\u76f8\u90bb\u4e4b\u95f4\u7684\u7a7a\u683c numberGap += number[big] - number[small] - 1; //\u6240\u6709\u7684\u6570\u636e\u8fdb\u884c\u540e\u79fb\u4e00\u4f4d small = big; big++; } //\u5224\u65ad\u6240\u6709\u7684\u95f4\u9694\u4e0e0\u7684\u4e2a\u6570 \u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e\u5219\u662f\u6709\u5e8f\u7684 \u5426\u5219\u5219\u662f\u65e0\u5e8f\u7684 return numberGap <= zero; } Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { public boolean isContinuous(int[] numbers) { int len = numbers.length; if (len != 5) { return false; } Arrays.sort(numbers); // \"0\" \u7684\u4e2a\u6570 int zeroCount = 0; // \u5f53\u524d\u6570\u4e0e\u540e\u4e00\u4e2a\u6570\u7684\u8ddd\u79bb\uff0c\u8ddd\u79bb\u4e3a 1\uff0c\u8868\u793a\u662f\u987a\u5b50 int diffDistance = 0; for (int i = 0; i < 4; i++) { if (numbers[i] == 0) { zeroCount++; continue; } if (numbers[i] == numbers[i + 1]) { return false; } else { diffDistance += (numbers[i + 1] - numbers[i] - 1); } } return zeroCount >= diffDistance; } }","title":"\u7b2c 61 \u9898\uff1a\u6251\u514b\u724c\u987a\u5b50\uff08\u638c\u63e1\u4f4d\u8fd0\u7b97\u5360\u4f4d\u7684\u6280\u5de7\uff09"},{"location":"61-68/#62","text":"\u4f20\u9001\u95e8\uff1a \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 0, 1, \u2026, n-1 \u8fd9 n \u4e2a\u6570\u5b57 (n>0) \u6392\u6210\u4e00\u4e2a\u5706\u5708\uff0c\u4ece\u6570\u5b57 0 \u5f00\u59cb\u6bcf\u6b21\u4ece\u8fd9\u4e2a\u5706\u5708\u91cc\u5220\u9664\u7b2c m \u4e2a\u6570\u5b57\u3002 \u6c42\u51fa\u8fd9\u4e2a\u5706\u5708\u91cc\u5269\u4e0b\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a n=5 , m=3 \u8f93\u51fa\uff1a3 \u601d\u8def1\uff1a\u4f7f\u7528\u73af\u5f62\u94fe\u8868\u6a21\u62df\u7ea6\u745f\u592b\u73af\u3002\u6ce8\u610f\u7279\u4f8b\uff0c\u5373 $n==0$ \u6210\u7acb\uff0c\u6ca1\u6709\u6570\u5b57\u7684\u65f6\u5019\uff0c\u8fd4\u56de $ -1$ \u5373\u53ef\u3002 Python \u5199\u6cd5\uff1a\u8bb0\u4f4f\u8fd9\u79cd\u5199\u6cd5\uff0c\u4e24\u4e2a\u8981\u70b9\u3002 class Solution: def lastRemaining(self, n, m): # \u7279\u5224 if n == 0 and m == 0: return -1 l = [i for i in range(n)] bt = 0 while len(l) > 1: # \u5728\u8fd9\u4e00\u884c\u6a21\u62df\u7ea6\u745f\u592b\u73af\u64cd\u4f5c # 1\u3001m - 1 \uff1a\u56e0\u4e3a\u5f53\u524d\u6570\u5b57\u7b97 1 \u4e2a\uff0c\u8d70 m - 1 \u6b65 # 2\u3001len(l)\uff1a\u6bcf\u6b21\u5220\u53bb\u4e00\u4e2a\u6570\uff0c\u6240\u4ee5\u5f97\u52a8\u6001\u53d6 bt = (bt + m - 1) % len(l) l.pop(bt) return l[0] Java \u4ee3\u7801\uff1a import java.util.LinkedList; public class Solution { // \u7ea6\u745f\u592b\u73af\u95ee\u9898 // \u5176\u5b9e\u5e76\u4e0d\u4e00\u5b9a\u8981\u6784\u9020\u51fa\u4e00\u4e2a\u771f\u7684\u5faa\u73af\u94fe\u8868 public int LastRemaining_Solution(int n, int m) { // \u8fd9\u91cc\u7528\u94fe\u8868\u662f\u4e3a\u4e86\u63d0\u5347\u6027\u80fd\uff0c\u5982\u679c\u7528 ArrayList \u5728\u5220\u9664\u64cd\u4f5c\u4e2d\uff0c\u5c31\u4f1a\u6709\u5927\u91cf\u7684\u6027\u80fd\u6d88\u8017 LinkedList<Integer> list = new LinkedList<>(); int bt = 0; for (int i = 0; i < n; i++) { list.addLast(i); } while (list.size() > 1) { bt = (bt + m - 1) % list.size(); list.remove(bt); } // \u601d\u8003\u4e3a\u4ec0\u4e48\u4f1a\u6709\u6700\u540e\u8fd9\u4e2a\u5224\u65ad return list.size() == 1 ? list.get(0) : -1; } } Java \u4ee3\u7801\uff1a import java.util.LinkedList; public class Solution { // \u7ea6\u745f\u592b\u73af\u95ee\u9898 // \u5176\u5b9e\u5e76\u4e0d\u4e00\u5b9a\u8981\u6784\u9020\u51fa\u4e00\u4e2a\u771f\u7684\u5faa\u73af\u94fe\u8868 public int LastRemaining_Solution(int n, int m) { // \u5148\u5904\u7406\u6781\u7aef\u8f93\u5165 if (n <= 1) { return -1; } // \u8fd9\u91cc\u7528\u94fe\u8868\u662f\u4e3a\u4e86\u63d0\u5347\u6027\u80fd\uff0c\u5982\u679c\u7528 ArrayList \u5728\u5220\u9664\u64cd\u4f5c\u4e2d\uff0c\u5c31\u4f1a\u6709\u5927\u91cf\u7684\u6027\u80fd\u6d88\u8017 LinkedList<Integer> list = new LinkedList<>(); int bt = 0; for (int i = 0; i < n; i++) { list.addLast(i); } while (list.size() > 1) { // \u8868\u793a\u7684\u662f\u7d22\u5f15\u7684\u503c bt = (bt + m - 1) % list.size(); // \u4e0b\u9762\u8fd9\u4e00\u884c\u4ee3\u7801\u53ef\u4ee5\u5e2e\u52a9\u8c03\u8bd5 // System.out.println(bt + \" \" + list); // bt \u662f\u94fe\u8868\u7684\u7d22\u5f15 list.remove(bt); } // \u601d\u8003\u4e3a\u4ec0\u4e48\u4f1a\u6709\u6700\u540e\u8fd9\u4e2a\u5224\u65ad return list.get(0); } // \u6d4b\u8bd5\u7528\u4f8b\uff1a n = 6\uff0c[0,1,2,3,4,5]\uff0cm=3 public static void main(String[] args) { Solution solution = new Solution(); int n = 6; int m = 3; int lastRemainingSolution = solution.LastRemaining_Solution(n, m); System.out.println(lastRemainingSolution); } } \u601d\u8def2\uff1a\u4e66\u4e0a\u8bf4\u7684\uff0c\u4f7f\u7528\u6570\u5b66\u65b9\u6cd5\u3002","title":"\u7b2c 62 \u9898\uff1a\u5b69\u5b50\u4eec\u7684\u6e38\u620f\uff08\u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\uff09"},{"location":"61-68/#63","text":"\u4f20\u9001\u95e8\uff1a \u80a1\u7968\u7684\u6700\u5927\u5229\u6da6 \u3002 \u5047\u8bbe\u628a\u67d0\u80a1\u7968\u7684\u4ef7\u683c\u6309\u7167\u65f6\u95f4\u5148\u540e\u987a\u5e8f\u5b58\u50a8\u5728\u6570\u7ec4\u4e2d\uff0c\u8bf7\u95ee\u4e70\u5356\u4ea4\u6613\u8be5\u80a1\u7968\u53ef\u80fd\u83b7\u5f97\u7684\u5229\u6da6\u662f\u591a\u5c11\uff1f \u4f8b\u5982\u4e00\u53ea\u80a1\u7968\u5728\u67d0\u4e9b\u65f6\u95f4\u8282\u70b9\u7684\u4ef7\u683c\u4e3a [9, 11, 8, 5, 7, 12, 16, 14] \u3002 \u5982\u679c\u6211\u4eec\u80fd\u5728\u4ef7\u683c\u4e3a 5 \u7684\u65f6\u5019\u4e70\u5165\u5e76\u5728\u4ef7\u683c\u4e3a 16 \u65f6\u5356\u51fa\uff0c\u5219\u80fd\u6536\u83b7\u6700\u5927\u7684\u5229\u6da6 11\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [9, 11, 8, 5, 7, 12, 16, 14] \u8f93\u51fa\uff1a11 \u601d\u8def\uff1a\u5728\u8fc7\u5f80\u7684\u80a1\u4ef7\u4e2d\u627e\u5230\u6700\u4f4e\u4ef7\uff0c\u201c\u5f53\u524d\u80a1\u4ef7 - \u6700\u4f4e\u4ef7\u201d\u4e3a\u83b7\u5229\u3002\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u627e\u5230\u8fd9\u4e2a\u83b7\u5229\u7684\u6700\u5927\u503c\u5373\u53ef\u3002\u7531\u4e8e\u53ea\u5141\u8bb8\u505a\u4e00\u6b21\u80a1\u7968\u4e70\u5356\u4ea4\u6613\uff0c\u679a\u4e3e\u6bcf\u4e00\u5929\u4f5c\u4e3a\u5356\u51fa\u7684\u65e5\u5b50\uff0c\u4e70\u5165\u65e5\u5b50\u4e00\u5b9a\u5728\u5356\u51fa\u65e5\u5b50\u4e4b\u524d\uff0c\u4e3a\u4e86\u83b7\u5229\u6700\u591a\uff0c\u5e0c\u671b\u4e70\u5165\u7684\u65e5\u5b50\u7684\u80a1\u7968\u4ef7\u683c\u5c3d\u53ef\u80fd\u4f4e\u3002\u7528 minnum \u8bb0\u5f55\u7b2c $0$ \u5230 \u7b2c $i$ \u5929\u7684\u6700\u4f4e\u4ef7\u683c\uff0c\u5219\u5728\u7b2c $i$ \u5929\u5356\u51fa\u7684\u6700\u5927\u83b7\u5229\u4e3a nums[i] - minnum \uff0c\u679a\u4e3e $i$ \u627e\u5230\u6700\u5927\u83b7\u5229\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def maxDiff(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" l = len(nums) if l == 0: return 0 min_val = nums[0] max_profit = 0 for i in range(1, l): min_val = min(min_val, nums[i]) max_profit = max(max_profit, nums[i] - min_val) return max_profit \u540c LeetCode \u7b2c 121 \u9898\u3002 \u4f20\u9001\u95e8\uff1a 121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u5982\u679c\u4f60\u6700\u591a\u53ea\u5141\u8bb8\u5b8c\u6210\u4e00\u7b14\u4ea4\u6613\uff08\u5373\u4e70\u5165\u548c\u5356\u51fa\u4e00\u652f\u80a1\u7968\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u80a1\u7968\u524d\u5356\u51fa\u80a1\u7968\u3002 \u793a\u4f8b 1: \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 5 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u6700\u5927\u5229\u6da6 = 6-1 = 5 \u3002 \u6ce8\u610f\u5229\u6da6\u4e0d\u80fd\u662f 7-1 = 6, \u56e0\u4e3a\u5356\u51fa\u4ef7\u683c\u9700\u8981\u5927\u4e8e\u4e70\u5165\u4ef7\u683c\u3002 \u793a\u4f8b 2: \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 Java \u4ee3\u7801\uff1a public class Solution2 { // \u7559\u610f\u8fd9\u4e2a\u89e3\u6cd5\u7684\u8bed\u4e49 public int maxProfit(int[] prices) { int buy = Integer.MIN_VALUE; int sell = 0; for (int price : prices) { // \u5728\u5f53\u524d\u4ee5\u53ca\u4e4b\u524d\u5982\u679c\u6267\u884c\u4e86\u4e70\u64cd\u4f5c\uff0c\u80fd\u591f\u5f97\u5230\u7684\u5229\u6da6\u7684\u6700\u5927\u503c buy = Math.max(buy, -price); // \u5728\u5f53\u524d\u4ee5\u53ca\u4e4b\u524d\u5982\u679c\u6267\u884c\u4e86\u5356\u64cd\u4f5c\uff0c\u80fd\u591f\u5f97\u5230\u7684\u5229\u6da6\u7684\u6700\u5927\u503c sell = Math.max(sell, buy + price); } return sell; } public static void main(String[] args) { int[] prices = {7, 1, 5, 3, 6, 4}; Solution2 solution2 = new Solution2(); int maxProfit = solution2.maxProfit(prices); System.out.println(maxProfit); } } \u533a\u522b\u4e8e LeetCode \u7b2c 122 \u9898\u3002 \u4f20\u9001\u95e8\uff1a 122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09\u3002 \u6ce8\u610f\uff1a \u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002 \u793a\u4f8b 1: \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 7 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 3 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u968f\u540e\uff0c\u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 6-3 = 3 \u3002 \u793a\u4f8b 2: \u8f93\u5165: [1,2,3,4,5] \u8f93\u51fa: 4 \u89e3\u91ca: \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002 \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002 \u793a\u4f8b 3: \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 \u53c2\u8003\u8d44\u6599\uff1a\u4ece\u96f6\u5f00\u59cb\u5b66\u8d2a\u5fc3\u7b97\u6cd5 - CSDN\u535a\u5ba2 https://blog.csdn.net/qq_32400847/article/details/51336300","title":"\u7b2c 63 \u9898\uff1a\u80a1\u7968\u7684\u6700\u5927\u5229\u6da6"},{"location":"61-68/#64-1-2-3-n","text":"\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u6c42 1 + 2 + 3 + ... + n \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u6c42 1+2+\u2026+n \uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u4e58\u9664\u6cd5\u3001for\u3001while\u3001if\u3001else\u3001switch\u3001case \u7b49\u5173\u952e\u5b57\u53ca\u6761\u4ef6\u5224\u65ad\u8bed\u53e5\uff08A?B:C\uff09\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a10 \u8f93\u51fa\uff1a55 Java \u4ee3\u7801\uff1a \u5206\u6790\uff1a\u7b49\u5dee\u6570\u5217\u6c42\u548c\u7684\u901a\u9879\u516c\u5f0f\u5982\u4e0b\uff1a $$ s=\\cfrac{n(n+1)}{2} = \\cfrac{n^2+n}{2} $$ \u5c06\u4e0a\u9762\u7684\u516c\u5f0f\u4e2d\u7684\u8fd0\u7b97\u6362\u6210\u53ea\u7528\u52a0\u6cd5\u3001\u4e58\u65b9\u8fd0\u7b97\u3001\u4f4d\u8fd0\u7b97\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getSum(self, n): \"\"\" :type n: int :rtype: int \"\"\" return (n ** 2 + n) >> 1","title":"\u7b2c 64 \u9898\uff1a\u6c42 1 + 2 + 3 + ... + n"},{"location":"61-68/#65","text":"\u4f20\u9001\u95e8\uff1a \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6c42\u4e24\u4e2a\u6574\u6570\u4e4b\u548c\uff0c\u8981\u6c42\u5728\u51fd\u6570\u4f53\u5185\u4e0d\u5f97\u4f7f\u7528\uff0b\u3001\uff0d\u3001\u00d7\u3001\u00f7 \u56db\u5219\u8fd0\u7b97\u7b26\u53f7\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a num1 = 1 , num2 = 2 \u8f93\u51fa\uff1a3 \u601d\u8def\uff1a\u4e0d\u7528\u52a0\u51cf\u4e58\u9664\uff0c\u90a3\u5c31\u53ea\u80fd\u7528\u4f4d\u8fd0\u7b97\u4e86\u3002 \u4e0b\u9762\u662f\u4ea4\u6362\u4e24\u4e2a\u6570\u7684\u7279\u6b8a\u5199\u6cd5\uff0c\u4e86\u89e3\u4e00\u4e0b\u3002 Python \u4ee3\u7801\uff1a\u5728 Python \u5185\u90e8\u5bf9\u6574\u6570\u7684\u5904\u7406\u5206\u4e3a\u666e\u901a\u6574\u6570\u548c\u957f\u6574\u6570\uff0c\u666e\u901a\u6574\u6570\u957f\u5ea6\u4e3a\u673a\u5668\u4f4d\u957f\uff0c\u901a\u5e38\u90fd\u662f $32$ \u4f4d\uff0c\u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\u7684\u6574\u6570\u5c31\u81ea\u52a8\u5f53\u957f\u6574\u6570\u5904\u7406\uff0c\u800c\u957f\u6574\u6570\u7684\u8303\u56f4\u51e0\u4e4e\u5b8c\u5168\u6ca1\u9650\u5236\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def add(self, num1, num2): \"\"\" :type num1: int :type num2: int :rtype: int \"\"\" while num2 != 0: # \u4e0d\u8fdb\u4f4d\u52a0\u6cd5 temp = num1 ^ num2 # \u52a0\u6cd5\u8fdb\u4f4d num2 = (num1 & num2) << 1 # \u628a\u9ad8\u4e8e 32 \u4f4d\u7684 1 \u5168\u90e8\u53d8\u6210 0 num1 = temp & 0xFFFFFFFF return num1 if num1 >> 31 == 0 else num1 - (1 << 32) \u8bf4\u660e\uff1aPython \u4e2d int \u7c7b\u578b\u7684\u6700\u5927\u503c\u662f 0x7fffffff \u3002 Python \u4ee3\u7801\uff1a\u4e0e\u4e0a\u9762\u7684\u5199\u6cd5\u7b49\u4ef7 class Solution(object): def add(self, num1, num2): \"\"\" :type num1: int :type num2: int :rtype: int \"\"\" while True: # \u4e0d\u8fdb\u4f4d\u52a0\u6cd5 s = num1 ^ num2 # \u8ba1\u7b97\u8fdb\u4f4d carry = num1 & num2 # \u624b\u52a8\u628a\u9ad8\u4e8e 32 \u4f4d\u7684\u90e8\u5206\u53d8\u6210 0 num1 = s & 0xFFFFFFFF num2 = carry << 1 if carry == 0: break # \u5982\u679c\u662f\u6b63\u6570\u548c 0 \uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u6b63\u6570\u597d\u4e86 if num1 >> 31 == 0: return num1 # \u5982\u679c\u662f\u8d1f\u6570 return num1 - (1 << 32) Java \u4ee3\u7801\uff1a public class Solution { public int Add(int num1, int num2) { int sum = 0; while (true) { // \u8ba1\u7b97\u4e2a\u4f4d sum = num1 ^ num2; int carry = num1 & num2; if (carry == 0) { break; } num1 = sum; // \u8ba1\u7b97\u8fdb\u4f4d num2 = carry << 1; } return sum; } public static void main(String[] args) { Solution solution = new Solution(); int add = solution.Add(14, 15); System.out.println(add); } } \u8fd8\u53ef\u4ee5\u7528\u201c\u5168\u52a0\u5668\u201d\u5b9e\u73b0\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def add(self, num1, num2): \"\"\" :type num1: int :type num2: int :rtype: int \"\"\" # \u7279\u5224 if num1 == 0 or num2 == 0: return max(num1, num2) res = 0 # \u8fdb\u4f4d carry = 0 for i in range(32): a = num1 & (1 << i) b = num2 & (1 << i) # \u4e0d\u8fdb\u4f4d\u7684\u548c s_ = (a ^ b) ^ carry # \u4e0b\u9762\u8ba1\u7b97\u8fdb\u4f4d\uff0c\u4e09\u8005\u4e4b\u4e2d\uff0c\u4efb\u610f\u4e24\u8005\u540c\u4e3a 1 \u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u8fdb\u4f4d carry = (a & b) | (a & carry) | (b & carry) carry <<= 1 res += s_ if res >> 31 == 0: return res return res - (1 << 32) Java \u4ee3\u7801\uff1a public class Solution { public int Add(int num1, int num2) { int sum = 0; while (true) { sum = num1 ^ num2; int carry = num1 & num2; if (carry == 0) { break; } num1 = sum; num2 = carry << 1; } return sum; } public static void main(String[] args) { Solution solution = new Solution(); int add = solution.Add(14, 15); System.out.println(add); } } Java \u4ee3\u7801\uff1a public class Solution2 { // \u4e66\u4e0a\u7684\u5199\u6cd5 public int Add(int num1, int num2) { int sum = 0; int carry = 0; do { sum = num1 ^ num2; carry = num1 & num2; num1 = sum; num2 = carry << 1; } while (carry != 0); return sum; } }","title":"\u7b2c 65 \u9898\uff1a\u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5"},{"location":"61-68/#66","text":"\u4f20\u9001\u95e8\uff1a \u6784\u5efa\u4e58\u79ef\u6570\u7ec4 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 A[0, 1, \u2026, n-1] \uff0c\u8bf7\u6784\u5efa\u4e00\u4e2a\u6570\u7ec4 B[0, 1, \u2026, n-1] \uff0c\u5176\u4e2d B \u4e2d\u7684\u5143\u7d20 B[i] = A[0] \u00d7 A[1] \u00d7 \u2026 \u00d7 A[i - 1] \u00d7 A[i + 1] \u00d7 \u2026 \u00d7 A[n - 1] \u3002 \u4e0d\u80fd\u4f7f\u7528\u9664\u6cd5\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1, 2, 3, 4, 5] \u8f93\u51fa\uff1a [120, 60, 40, 30, 24] \u601d\u8003\u9898 \uff1a \u80fd\u4e0d\u80fd\u53ea\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\uff1f\uff08\u9664\u4e86\u8f93\u51fa\u7684\u6570\u7ec4\u4e4b\u5916\uff09 \u601d\u8def\uff1a\u4f7f\u7528\u77e9\u9635\u6cd5\u6c42\u89e3\uff0c\u5c06\u77e9\u9635\u5206\u4e3a\u4e0a\u4e09\u89d2\u77e9\u9635\u548c\u4e0b\u4e09\u89d2\u77e9\u9635\uff0c\u5206\u522b\u6c42\u4e58\u79ef\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def multiply(self, A): \"\"\" :type A: List[int] :rtype: List[int] \"\"\" l = len(A) if l == 0: return [] b = [None for _ in range(l)] b[0] = 1 # \u8ba1\u7b97\u4e0b\u4e09\u89d2\u8fde\u4e58\u7684\u7ed3\u679c for i in range(1, l): b[i] = b[i - 1] * A[i - 1] temp = 1 for i in range(l - 2, -1, -1): temp *= A[i + 1] b[i] *= temp return b Python \u4ee3\u7801\uff1a # 66\u3001\u6784\u5efa\u4e58\u79ef\u6570\u7ec4 class Solution(object): def multiply(self, A): \"\"\" :type A: List[int] :rtype: List[int] \"\"\" l = len(A) if l == 0: return [] b = [1 for _ in range(l)] temp = 1 for index in range(l): b[index] *= temp temp *= A[index] temp = 1 for index in range(l - 1, -1, -1): b[index] *= temp temp *= A[index] return b Java \u4ee3\u7801\uff1a C++ \u4ee3\u7801\uff1a class Solution { public: vector<int> multiply(const vector<int>& A) { vector<int>left(A.size(),1); vector<int>right(A.size(),1); for(int i = 1;i<A.size();i++){ left[i] = A[i-1]*left[i-1]; } for(int i = A.size()-2;i>=0;i--){ right[i] = A[i+1]*right[i+1]; } vector<int>B(A.size(),0); for(int i = 0;i<A.size();i++){ B[i] = left[i]*right[i]; } return B; } }; \u4f5c\u8005\uff1acornerCao \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/AcWing/content/759/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u7b2c 66 \u9898\uff1a\u6784\u5efa\u4e58\u79ef\u6570\u7ec4"},{"location":"61-68/#67","text":"\u4f20\u9001\u95e8\uff1a \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u4f60\u5199\u4e00\u4e2a\u51fd\u6570StrToInt\uff0c\u5b9e\u73b0\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u8fd9\u4e2a\u529f\u80fd\u3002 \u5f53\u7136\uff0c\u4e0d\u80fd\u4f7f\u7528atoi\u6216\u8005\u5176\u4ed6\u7c7b\u4f3c\u7684\u5e93\u51fd\u6570\u3002 \u6837\u4f8b\uff1a ``` \u8f93\u5165\uff1a\"123\" \u8f93\u51fa\uff1a123 ``` \u6ce8\u610f : \u4f60\u7684\u51fd\u6570\u5e94\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\uff1a \u5ffd\u7565\u6240\u6709\u884c\u9996\u7a7a\u683c\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\uff0c\u53ef\u4ee5\u662f \u2018+/\u2212+/\u2212\u2019 \u8868\u793a\u662f\u6b63\u6570\u6216\u8005\u8d1f\u6570\uff0c\u7d27\u968f\u5176\u540e\u627e\u5230\u6700\u957f\u7684\u4e00\u4e32\u8fde\u7eed\u6570\u5b57\uff0c\u5c06\u5176\u89e3\u6790\u6210\u4e00\u4e2a\u6574\u6570\uff1b \u6574\u6570\u540e\u53ef\u80fd\u6709\u4efb\u610f\u975e\u6570\u5b57\u5b57\u7b26\uff0c\u8bf7\u5c06\u5176\u5ffd\u7565\uff1b \u4ece\u524d\u5f80\u540e\u904d\u5386\u65f6\uff0c\u5982\u679c\u7b2c\u4e00\u6bb5\u8fde\u7eed\u975e\u7a7a\u683c\u5b57\u7b26\u4e32\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684\u6574\u6570\u8868\u793a\uff0c\u5219\u8fd4\u56de0\uff1b \u5982\u679c\u6574\u6570\u5927\u4e8eINT_MAX(2^31 \u2212 1)\uff0c\u8bf7\u8fd4\u56deINT_MAX\uff1b\u5982\u679c\u6574\u6570\u5c0f\u4e8eINT_MIN(\u22122^31) \uff0c\u8bf7\u8fd4\u56deINT_MIN\uff1b Java \u4ee3\u7801\uff1a \u540c LeetCode \u7b2c 8 \u9898\u3002 \u4f20\u9001\u95e8\uff1a 8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi) \u3002 \u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a atoi \u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u3002 \u9996\u5148\uff0c\u8be5\u51fd\u6570\u4f1a\u6839\u636e\u9700\u8981\u4e22\u5f03\u65e0\u7528\u7684\u5f00\u5934\u7a7a\u683c\u5b57\u7b26\uff0c\u76f4\u5230\u5bfb\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u7684\u5b57\u7b26\u4e3a\u6b62\u3002 \u5f53\u6211\u4eec\u5bfb\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e3a\u6b63\u6216\u8005\u8d1f\u53f7\u65f6\uff0c\u5219\u5c06\u8be5\u7b26\u53f7\u4e0e\u4e4b\u540e\u9762\u5c3d\u53ef\u80fd\u591a\u7684\u8fde\u7eed\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u4f5c\u4e3a\u8be5\u6574\u6570\u7684\u6b63\u8d1f\u53f7\uff1b\u5047\u5982\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u4e0e\u4e4b\u540e\u8fde\u7eed\u7684\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u6574\u6570\u3002 \u8be5\u5b57\u7b26\u4e32\u9664\u4e86\u6709\u6548\u7684\u6574\u6570\u90e8\u5206\u4e4b\u540e\u4e5f\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4f59\u7684\u5b57\u7b26\uff0c\u8fd9\u4e9b\u5b57\u7b26\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u5b83\u4eec\u5bf9\u4e8e\u51fd\u6570\u4e0d\u5e94\u8be5\u9020\u6210\u5f71\u54cd\u3002 \u6ce8\u610f\uff1a\u5047\u5982\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u6574\u6570\u5b57\u7b26\u3001\u5b57\u7b26\u4e32\u4e3a\u7a7a\u6216\u5b57\u7b26\u4e32\u4ec5\u5305\u542b\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5219\u4f60\u7684\u51fd\u6570\u4e0d\u9700\u8981\u8fdb\u884c\u8f6c\u6362\u3002 \u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u82e5\u51fd\u6570\u4e0d\u80fd\u8fdb\u884c\u6709\u6548\u7684\u8f6c\u6362\u65f6\uff0c\u8bf7\u8fd4\u56de 0\u3002 \u8bf4\u660e\uff1a \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u5927\u5c0f\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u90a3\u4e48\u5176\u6570\u503c\u8303\u56f4\u4e3a [\u2212231, 231 \u2212 1]\u3002\u5982\u679c\u6570\u503c\u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\uff0cqing\u8fd4\u56de INT_MAX (231 \u2212 1) \u6216 INT_MIN (\u2212231) \u3002 \u793a\u4f8b 1: \u8f93\u5165: \"42\" \u8f93\u51fa: 42 \u793a\u4f8b 2: \u8f93\u5165: \" -42\" \u8f93\u51fa: -42 \u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26\u4e3a '-', \u5b83\u662f\u4e00\u4e2a\u8d1f\u53f7\u3002 \u6211\u4eec\u5c3d\u53ef\u80fd\u5c06\u8d1f\u53f7\u4e0e\u540e\u9762\u6240\u6709\u8fde\u7eed\u51fa\u73b0\u7684\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u6700\u540e\u5f97\u5230 -42 \u3002 \u793a\u4f8b 3: \u8f93\u5165: \"4193 with words\" \u8f93\u51fa: 4193 \u89e3\u91ca: \u8f6c\u6362\u622a\u6b62\u4e8e\u6570\u5b57 '3' \uff0c\u56e0\u4e3a\u5b83\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u4e3a\u6570\u5b57\u3002 \u793a\u4f8b 4: \u8f93\u5165: \"words and 987\" \u8f93\u51fa: 0 \u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f 'w', \u4f46\u5b83\u4e0d\u662f\u6570\u5b57\u6216\u6b63\u3001\u8d1f\u53f7\u3002 \u56e0\u6b64\u65e0\u6cd5\u6267\u884c\u6709\u6548\u7684\u8f6c\u6362\u3002 \u793a\u4f8b 5: \u8f93\u5165: \"-91283472332\" \u8f93\u51fa: -2147483648 \u89e3\u91ca: \u6570\u5b57 \"-91283472332\" \u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u3002 \u56e0\u6b64\u8fd4\u56de INT_MIN (\u2212231) \u3002 Python \u4ee3\u7801\uff1aPython \u4ee3\u7801\u6bd4\u8f83\u7279\u522b\uff0c\u8981\u6ce8\u610f\uff0c\u7b26\u53f7\u4f4d\u4e0d\u5728\u7b2c $32$ \u4f4d\u4e0a class Solution(object): def strToInt(self, str): \"\"\" :type str: str :rtype: int \"\"\" # \u53bb\u6389\u5de6\u53f3\u7a7a\u683c s = str.strip() l = len(s) if l == 0: return 0 # \u904d\u5386\u6307\u9488 index = 0 # \u7b26\u53f7 sign = 1 # \u7b2c 1 \u4f4d\u7b26\u53f7\u4f4d s_sign = s[0] # \u6700\u7ec8\u7ed3\u679c res = 0 INT_MIN = -1 << 31 INT_MAX = (1 << 31) - 1 # \u7b26\u53f7\u4f4d\u662f\u6b63\u6216\u8d1f\u53f7\u7684\u65f6\u5019 index \u90fd\u52a0 1 if s_sign == '+': index += 1 elif s_sign == '-': index += 1 sign = -1 for i in range(index, l): c = s[i] if c.isdigit(): cint = ord(c) - ord('0') res = res * 10 + cint if res * sign > INT_MAX: break else: break res *= sign if res > INT_MAX: return INT_MAX elif res < INT_MIN: return INT_MIN return res if __name__ == '__main__': solution = Solution() str = '2147483647' result = solution.strToInt(str) print(result)","title":"\u7b2c 67 \u9898\uff1a\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570"},{"location":"61-68/#68","text":"\u4f20\u9001\u95e8\uff1a \u6811\u4e2d\u4e24\u4e2a\u7ed3\u70b9\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148 \u3002 \u7ed9\u51fa\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8f93\u5165\u4e24\u4e2a\u6811\u8282\u70b9\uff0c\u6c42\u5b83\u4eec\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148\u3002 \u4e00\u4e2a\u6811\u8282\u70b9\u7684\u7956\u5148\u8282\u70b9\u5305\u62ec\u5b83\u672c\u8eab\u3002 \u6ce8\u610f\uff1a \u8f93\u5165\u7684\u4e8c\u53c9\u6811\u4e0d\u4e3a\u7a7a\uff1b \u8f93\u5165\u7684\u4e24\u4e2a\u8282\u70b9\u4e00\u5b9a\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u662f\u4e8c\u53c9\u6811\u4e2d\u7684\u8282\u70b9\uff1b \u6837\u4f8b\uff1a \u4e8c\u53c9\u6811 [8, 12, 2, null, null, 6, 4, null, null, null, null] \u5982\u4e0b\u56fe\u6240\u793a\uff1a 8 / \\ 12 2 / \\ 6 4 1. \u5982\u679c\u8f93\u5165\u7684\u6811\u8282\u70b9\u4e3a 2 \u548c 12\uff0c\u5219\u8f93\u51fa\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148\u4e3a\u6811\u8282\u70b9 8 \u3002 \u5982\u679c\u8f93\u5165\u7684\u6811\u8282\u70b9\u4e3a 2 \u548c 6 \uff0c\u5219\u8f93\u51fa\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148\u4e3a\u6811\u8282\u70b9 2 \u3002 \u540c LeetCode \u7b2c 236 \u9898\uff1a\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002 \u4f20\u9001\u95e8\uff1a 236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002 \u767e\u5ea6\u767e\u79d1 \u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\u4e3a\uff1a\u201c\u5bf9\u4e8e\u6709\u6839\u6811 T \u7684\u4e24\u4e2a\u7ed3\u70b9 p\u3001q\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e3a\u4e00\u4e2a\u7ed3\u70b9 x\uff0c\u6ee1\u8db3 x \u662f p\u3001q \u7684\u7956\u5148\u4e14 x \u7684\u6df1\u5ea6\u5c3d\u53ef\u80fd\u5927\uff08 \u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148 \uff09\u3002\u201d \u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u6811: root = [3,5,1,6,2,0,8,null,null,7,4] \u793a\u4f8b 1: \u8f93\u5165: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1 \u8f93\u51fa: 3 \u89e3\u91ca: \u8282\u70b9 5 \u548c\u8282\u70b9 1 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 3\u3002 \u793a\u4f8b 2: \u8f93\u5165: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4 \u8f93\u51fa: 5 \u89e3\u91ca: \u8282\u70b9 5 \u548c\u8282\u70b9 4 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 5\u3002\u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u4e3a\u8282\u70b9\u672c\u8eab\u3002 \u8bf4\u660e: \u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\u3002 p\u3001q \u4e3a\u4e0d\u540c\u8282\u70b9\u4e14\u5747\u5b58\u5728\u4e8e\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\u4e2d\u3002 \u5206\u6790\uff1a1\u3001\u5982\u679c\u6709\u6307\u5411\u7236\u7ed3\u70b9\u7684\u6307\u9488\uff1b2\u3001\u6ca1\u6709\u6307\u5411\u7236\u7ed3\u70b9\u7684\u6307\u9488\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def lowestCommonAncestor(self, root, p, q): \"\"\" :type root: TreeNode :type p: TreeNode :type q: TreeNode :rtype: TreeNode \"\"\" if root is None: return None if root == p or root == q: return root left = self.lowestCommonAncestor(root.left, p, q) right = self.lowestCommonAncestor(root.right, p, q) if left and right: return root if left is None: return right if right is None: return left return None Java \u4ee3\u7801\uff1a \u53c2\u8003\u8d44\u6599\uff1a B \u7ad9 UP \u4e3b\u201c\u5927\u96ea\u83dc\u201d\u76f4\u64ad\uff1ahttps://www.acwing.com/activity/content/introduction/5/\u3002 \u300a\u5251\u6307offer\u300b\u9762\u8bd5\u9898\u7684Python\u5b9e\u73b0 \u5251\u6307Offer\u7cfb\u5217\u5237\u9898\u7b14\u8bb0\u6c47\u603b https://blog.csdn.net/c406495762/article/details/79247243#%E9%93%BE%E8%A1%A8-8%E9%81%93 https://github.com/gatieme/CodingInterviews \u5251\u6307Offer\u7cfb\u5217\u5237\u9898\u7b14\u8bb0\u6c47\u603b \u3002 \u7b2c 2 \u7248 Java \u5b9e\u73b0\u4ee3\u7801\u4ed3\u5e93\uff1a https://github.com/cris1313/SwordForOffer \u767d\u591c\u884c515 https://blog.csdn.net/baiye_xing/article/details/78428561 \u5251\u6307Offer\u2014\u2014\u7f16\u7a0b\u9898\u7684Java\u5b9e\u73b0\uff08\u66f4\u65b0\u5b8c\u6bd5\u2026\u2026\uff09 https://blog.csdn.net/u011464124/article/details/76706011 \u5251\u6307offer\u9898\u76eejava\u5b9e\u73b0 https://www.cnblogs.com/ysw-go/p/6272551.html \u6781\u5ba2\u5b66\u9662 http://wiki.jikexueyuan.com/project/for-offer/question-twenty-seven.html https://blog.csdn.net/column/details/codingintervieww.html> \u9898\u76ee\uff1aString \u7a7a\u5b57\u7b26\u4e32\u66ff\u6362\uff1a\u4ece\u540e\u5411\u524d\u66ff\u6362\uff0c\u8fb9\u590d\u5236\uff0c\u8fb9\u8986\u76d6\uff0c\u4e0d\u8981\u601d\u7ef4\u5b9a\u52bf \u5355\u94fe\u8868\u95ee\u9898\u5e94\u8be5\u5f15\u8d77\u91cd\u89c6\uff1a\u94fe\u8868\u95ee\u9898\u5982\u679c\u4e0d\u60f3\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u90a3\u4e48\u5c31\u8ba9\u9012\u5f52\u53bb\u5b8c\u6210\uff01 \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868\uff1a\uff081\uff09\u7528\u6808\uff082\uff09\u9012\u5f52\u548c\u6808\u5bc6\u4e0d\u53ef\u5206\uff08\u9012\u5f52\u6df1\u5ea6\u5f88\u6df1\u7684\u65f6\u5019\uff0c\u4e0d\u8981\u8fd9\u4e48\u505a\uff09 \u7b2c 8 \u9898\uff1a\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 Java \u4ee3\u7801\uff1a 57_1\u3001\u961f\u5217\u7684\u6700\u5927\u503c \u4f20\u9001\u95e8\uff1a \u3002","title":"\u7b2c 68 \u9898\uff1a\u6811\u4e2d\u4e24\u4e2a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"},{"location":"61-68/#_1","text":"1\u3001\u5251\u6307Offer\u7cfb\u5217\u5237\u9898\u7b14\u8bb0\u6c47\u603b https://blog.csdn.net/c406495762/article/details/79247243#%E9%93%BE%E8%A1%A8-8%E9%81%93 \u8fd9\u7bc7\u4f5c\u8005\u7684 GitHub\uff1ahttps://github.com/Jack-Cherish/LeetCode 2\u3001https://github.com/gatieme/CodingInterviews \uff08\u672c\u8282\u5b8c\uff09","title":"\u53c2\u8003\u8d44\u6599"},{"location":"61/","text":"\u5251\u6307 Offer 61. \u6251\u514b\u724c\u4e2d\u7684\u987a\u5b50 \u5251\u6307 Offer 61. \u6251\u514b\u724c\u4e2d\u7684\u987a\u5b50 \u4ece\u6251\u514b\u724c\u4e2d\u968f\u673a\u62bd 5 \u5f20\u724c\uff0c\u5224\u65ad\u662f\u4e0d\u662f\u4e00\u4e2a\u987a\u5b50\uff0c\u5373\u8fd9 5 \u5f20\u724c\u662f\u4e0d\u662f\u8fde\u7eed\u7684\u3002 2\uff5e10 \u4e3a\u6570\u5b57\u672c\u8eab\uff0cA \u4e3a 1 \uff0cJ \u4e3a 11\uff0cQ \u4e3a 12\uff0cK \u4e3a 13\uff0c\u5927\u5c0f\u738b\u53ef\u4ee5\u770b\u505a\u4efb\u610f\u6570\u5b57\u3002 \u4e3a\u4e86\u65b9\u4fbf\uff0c\u5927\u5c0f\u738b\u5747\u4ee50\u6765\u8868\u793a\uff0c\u5e76\u4e14\u5047\u8bbe\u8fd9\u526f\u724c\u4e2d\u5927\u5c0f\u738b\u5747\u6709\u4e24\u5f20\u3002 \u6837\u4f8b1\uff1a \u8f93\u5165\uff1a [8,9,10,11,12] \u8f93\u51fa\uff1atrue \u6837\u4f8b2\uff1a \u8f93\u5165\uff1a [0,8,9,11,12] \u8f93\u51fa\uff1atrue \u601d\u8def\uff1a\u57fa\u672c\u601d\u8def\u5c31\u662f\u628a\u4e0d\u7b26\u5408\u9898\u76ee\u8981\u6c42\u7684\u60c5\u51b5\u5168\u90e8\u6392\u9664\u6389\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u6b63\u786e\u7684\u4e86\u3002 python \u4ee3\u7801\uff1a class Solution(object): def isContinuous(self, numbers): \"\"\" :type numbers: List[int] :rtype: bool \"\"\" size = len(numbers) if size != 5: return False # \u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u90fd\u8bbe\u7f6e\u6210\u4e00\u4e2a\u4e0d\u53ef\u80fd\u53d6\u5230\u7684\u503c min_val = 14 max_val = -1 flag = 0 for num in numbers: if not 0 <= num <= 13: return False if num == 0: continue # \u53f3\u79fb\uff1a\u770b\u770b\u8fd9\u4e00\u4f4d\u662f\u4e0d\u662f\u7528\u8fc7\u4e86 if (flag >> num) & 1 == 1: return False # \u5de6\u79fb\uff1a\u8868\u793a\u8fd9\u4e00\u4f4d\u6211\u73b0\u5728\u8981\u5360\u7528 flag = flag | (1 << num) min_val = min(min_val, num) max_val = max(max_val, num) if max_val - min_val >= 5: return False return True Python \u4ee3\u7801\uff1a class Solution: def IsContinuous(self, numbers): # write code here if len(numbers) < 5: return False max_num = -1 min_num = 14 flag = 0 for number in numbers: if number < 0 or number > 13: return False if number == 0: continue if (flag >> number) & 1 == 1: return False flag |= 1 << number if number < min_num: min_num = number if number > max_num: max_num = number if max_num - min_num >= 5: return False return True Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { public boolean isContinuous(int[] numbers) { int len = numbers.length; if (len != 5) { return false; } Arrays.sort(numbers); // \"0\" \u7684\u4e2a\u6570 int zeroCount = 0; // \u5f53\u524d\u6570\u4e0e\u540e\u4e00\u4e2a\u6570\u7684\u8ddd\u79bb\uff0c\u8ddd\u79bb\u4e3a 1\uff0c\u8868\u793a\u662f\u987a\u5b50 int diffDistance = 0; for (int i = 0; i < 4; i++) { if (numbers[i] == 0) { zeroCount++; continue; } if (numbers[i] == numbers[i + 1]) { return false; } else { diffDistance += (numbers[i + 1] - numbers[i] - 1); } } return zeroCount >= diffDistance; } } Java \u4ee3\u7801\uff1a private boolean isOrderly(int[] number) { //1\u3001\u975e\u7a7a\u5224\u65ad if (number == null){ return false; } //2\u3001\u8ba1\u7b97 0 \u7684\u4e2a\u6570 int zero = 0; for (int num : number) { if (num == 0) { zero++; } } //3\u3001\u5c06\u6570\u7ec4\u6392\u5e8f Arrays.sort(number); //4\u3001\u6392\u5e8f\u5b8c\u6210\u4e4b\u540e \u4ece\u975e\u96f6\u6570\u636e\u8fdb\u884c\u4e24\u4e24\u5224\u65ad int small = zero; int big = small + 1; int numberGap = 0; //5\u3001\u6392\u9664\u4e00\u79cd\u60c5\u51b5 \u76f8\u90bb\u6570\u636e\u4e0d\u76f8\u7b49\u60c5\u51b5 //\u8fdb\u884c\u5faa\u73af\u7684\u57fa\u7840\u6761\u4ef6 while (big < number.length) { if (number[small] == number[big]) { return false;//\u6709\u5bf9\u5b50\u7684\u5b58\u5728 } //\u7edf\u8ba1\u76f8\u90bb\u4e4b\u95f4\u7684\u7a7a\u683c numberGap += number[big] - number[small] - 1; //\u6240\u6709\u7684\u6570\u636e\u8fdb\u884c\u540e\u79fb\u4e00\u4f4d small = big; big++; } //\u5224\u65ad\u6240\u6709\u7684\u95f4\u9694\u4e0e0\u7684\u4e2a\u6570 \u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e\u5219\u662f\u6709\u5e8f\u7684 \u5426\u5219\u5219\u662f\u65e0\u5e8f\u7684 return numberGap <= zero; } Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { public boolean isContinuous(int[] numbers) { int len = numbers.length; if (len != 5) { return false; } Arrays.sort(numbers); // \"0\" \u7684\u4e2a\u6570 int zeroCount = 0; // \u5f53\u524d\u6570\u4e0e\u540e\u4e00\u4e2a\u6570\u7684\u8ddd\u79bb\uff0c\u8ddd\u79bb\u4e3a 1\uff0c\u8868\u793a\u662f\u987a\u5b50 int diffDistance = 0; for (int i = 0; i < 4; i++) { if (numbers[i] == 0) { zeroCount++; continue; } if (numbers[i] == numbers[i + 1]) { return false; } else { diffDistance += (numbers[i + 1] - numbers[i] - 1); } } return zeroCount >= diffDistance; } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 61. \u6251\u514b\u724c\u4e2d\u7684\u987a\u5b50"},{"location":"61/#offer-61","text":"\u5251\u6307 Offer 61. \u6251\u514b\u724c\u4e2d\u7684\u987a\u5b50 \u4ece\u6251\u514b\u724c\u4e2d\u968f\u673a\u62bd 5 \u5f20\u724c\uff0c\u5224\u65ad\u662f\u4e0d\u662f\u4e00\u4e2a\u987a\u5b50\uff0c\u5373\u8fd9 5 \u5f20\u724c\u662f\u4e0d\u662f\u8fde\u7eed\u7684\u3002 2\uff5e10 \u4e3a\u6570\u5b57\u672c\u8eab\uff0cA \u4e3a 1 \uff0cJ \u4e3a 11\uff0cQ \u4e3a 12\uff0cK \u4e3a 13\uff0c\u5927\u5c0f\u738b\u53ef\u4ee5\u770b\u505a\u4efb\u610f\u6570\u5b57\u3002 \u4e3a\u4e86\u65b9\u4fbf\uff0c\u5927\u5c0f\u738b\u5747\u4ee50\u6765\u8868\u793a\uff0c\u5e76\u4e14\u5047\u8bbe\u8fd9\u526f\u724c\u4e2d\u5927\u5c0f\u738b\u5747\u6709\u4e24\u5f20\u3002 \u6837\u4f8b1\uff1a \u8f93\u5165\uff1a [8,9,10,11,12] \u8f93\u51fa\uff1atrue \u6837\u4f8b2\uff1a \u8f93\u5165\uff1a [0,8,9,11,12] \u8f93\u51fa\uff1atrue \u601d\u8def\uff1a\u57fa\u672c\u601d\u8def\u5c31\u662f\u628a\u4e0d\u7b26\u5408\u9898\u76ee\u8981\u6c42\u7684\u60c5\u51b5\u5168\u90e8\u6392\u9664\u6389\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u6b63\u786e\u7684\u4e86\u3002 python \u4ee3\u7801\uff1a class Solution(object): def isContinuous(self, numbers): \"\"\" :type numbers: List[int] :rtype: bool \"\"\" size = len(numbers) if size != 5: return False # \u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u90fd\u8bbe\u7f6e\u6210\u4e00\u4e2a\u4e0d\u53ef\u80fd\u53d6\u5230\u7684\u503c min_val = 14 max_val = -1 flag = 0 for num in numbers: if not 0 <= num <= 13: return False if num == 0: continue # \u53f3\u79fb\uff1a\u770b\u770b\u8fd9\u4e00\u4f4d\u662f\u4e0d\u662f\u7528\u8fc7\u4e86 if (flag >> num) & 1 == 1: return False # \u5de6\u79fb\uff1a\u8868\u793a\u8fd9\u4e00\u4f4d\u6211\u73b0\u5728\u8981\u5360\u7528 flag = flag | (1 << num) min_val = min(min_val, num) max_val = max(max_val, num) if max_val - min_val >= 5: return False return True Python \u4ee3\u7801\uff1a class Solution: def IsContinuous(self, numbers): # write code here if len(numbers) < 5: return False max_num = -1 min_num = 14 flag = 0 for number in numbers: if number < 0 or number > 13: return False if number == 0: continue if (flag >> number) & 1 == 1: return False flag |= 1 << number if number < min_num: min_num = number if number > max_num: max_num = number if max_num - min_num >= 5: return False return True Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { public boolean isContinuous(int[] numbers) { int len = numbers.length; if (len != 5) { return false; } Arrays.sort(numbers); // \"0\" \u7684\u4e2a\u6570 int zeroCount = 0; // \u5f53\u524d\u6570\u4e0e\u540e\u4e00\u4e2a\u6570\u7684\u8ddd\u79bb\uff0c\u8ddd\u79bb\u4e3a 1\uff0c\u8868\u793a\u662f\u987a\u5b50 int diffDistance = 0; for (int i = 0; i < 4; i++) { if (numbers[i] == 0) { zeroCount++; continue; } if (numbers[i] == numbers[i + 1]) { return false; } else { diffDistance += (numbers[i + 1] - numbers[i] - 1); } } return zeroCount >= diffDistance; } } Java \u4ee3\u7801\uff1a private boolean isOrderly(int[] number) { //1\u3001\u975e\u7a7a\u5224\u65ad if (number == null){ return false; } //2\u3001\u8ba1\u7b97 0 \u7684\u4e2a\u6570 int zero = 0; for (int num : number) { if (num == 0) { zero++; } } //3\u3001\u5c06\u6570\u7ec4\u6392\u5e8f Arrays.sort(number); //4\u3001\u6392\u5e8f\u5b8c\u6210\u4e4b\u540e \u4ece\u975e\u96f6\u6570\u636e\u8fdb\u884c\u4e24\u4e24\u5224\u65ad int small = zero; int big = small + 1; int numberGap = 0; //5\u3001\u6392\u9664\u4e00\u79cd\u60c5\u51b5 \u76f8\u90bb\u6570\u636e\u4e0d\u76f8\u7b49\u60c5\u51b5 //\u8fdb\u884c\u5faa\u73af\u7684\u57fa\u7840\u6761\u4ef6 while (big < number.length) { if (number[small] == number[big]) { return false;//\u6709\u5bf9\u5b50\u7684\u5b58\u5728 } //\u7edf\u8ba1\u76f8\u90bb\u4e4b\u95f4\u7684\u7a7a\u683c numberGap += number[big] - number[small] - 1; //\u6240\u6709\u7684\u6570\u636e\u8fdb\u884c\u540e\u79fb\u4e00\u4f4d small = big; big++; } //\u5224\u65ad\u6240\u6709\u7684\u95f4\u9694\u4e0e0\u7684\u4e2a\u6570 \u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e\u5219\u662f\u6709\u5e8f\u7684 \u5426\u5219\u5219\u662f\u65e0\u5e8f\u7684 return numberGap <= zero; } Java \u4ee3\u7801\uff1a import java.util.Arrays; public class Solution { public boolean isContinuous(int[] numbers) { int len = numbers.length; if (len != 5) { return false; } Arrays.sort(numbers); // \"0\" \u7684\u4e2a\u6570 int zeroCount = 0; // \u5f53\u524d\u6570\u4e0e\u540e\u4e00\u4e2a\u6570\u7684\u8ddd\u79bb\uff0c\u8ddd\u79bb\u4e3a 1\uff0c\u8868\u793a\u662f\u987a\u5b50 int diffDistance = 0; for (int i = 0; i < 4; i++) { if (numbers[i] == 0) { zeroCount++; continue; } if (numbers[i] == numbers[i + 1]) { return false; } else { diffDistance += (numbers[i + 1] - numbers[i] - 1); } } return zeroCount >= diffDistance; } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 61. \u6251\u514b\u724c\u4e2d\u7684\u987a\u5b50"},{"location":"62/","text":"\u5251\u6307 Offer 62. \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57 \u5251\u6307 Offer 62. \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57 \uff1b \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7b2c 62 \u9898\uff1a\u5b69\u5b50\u4eec\u7684\u6e38\u620f\uff08\u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\uff09 \u4f20\u9001\u95e8\uff1a 0, 1, \u2026, n-1 \u8fd9 n \u4e2a\u6570\u5b57 (n>0) \u6392\u6210\u4e00\u4e2a\u5706\u5708\uff0c\u4ece\u6570\u5b57 0 \u5f00\u59cb\u6bcf\u6b21\u4ece\u8fd9\u4e2a\u5706\u5708\u91cc\u5220\u9664\u7b2c m \u4e2a\u6570\u5b57\u3002 \u6c42\u51fa\u8fd9\u4e2a\u5706\u5708\u91cc\u5269\u4e0b\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a n=5 , m=3 \u8f93\u51fa\uff1a3 \u601d\u8def1\uff1a\u4f7f\u7528\u73af\u5f62\u94fe\u8868\u6a21\u62df\u7ea6\u745f\u592b\u73af\u3002\u6ce8\u610f\u7279\u4f8b\uff0c\u5373 $n==0$ \u6210\u7acb\uff0c\u6ca1\u6709\u6570\u5b57\u7684\u65f6\u5019\uff0c\u8fd4\u56de $ -1$ \u5373\u53ef\u3002 Python \u5199\u6cd5\uff1a\u8bb0\u4f4f\u8fd9\u79cd\u5199\u6cd5\uff0c\u4e24\u4e2a\u8981\u70b9\u3002 class Solution: def lastRemaining(self, n, m): # \u7279\u5224 if n == 0 and m == 0: return -1 l = [i for i in range(n)] bt = 0 while len(l) > 1: # \u5728\u8fd9\u4e00\u884c\u6a21\u62df\u7ea6\u745f\u592b\u73af\u64cd\u4f5c # 1\u3001m - 1 \uff1a\u56e0\u4e3a\u5f53\u524d\u6570\u5b57\u7b97 1 \u4e2a\uff0c\u8d70 m - 1 \u6b65 # 2\u3001len(l)\uff1a\u6bcf\u6b21\u5220\u53bb\u4e00\u4e2a\u6570\uff0c\u6240\u4ee5\u5f97\u52a8\u6001\u53d6 bt = (bt + m - 1) % len(l) l.pop(bt) return l[0] Java \u4ee3\u7801\uff1a import java.util.LinkedList; public class Solution { // \u7ea6\u745f\u592b\u73af\u95ee\u9898 // \u5176\u5b9e\u5e76\u4e0d\u4e00\u5b9a\u8981\u6784\u9020\u51fa\u4e00\u4e2a\u771f\u7684\u5faa\u73af\u94fe\u8868 public int LastRemaining_Solution(int n, int m) { // \u8fd9\u91cc\u7528\u94fe\u8868\u662f\u4e3a\u4e86\u63d0\u5347\u6027\u80fd\uff0c\u5982\u679c\u7528 ArrayList \u5728\u5220\u9664\u64cd\u4f5c\u4e2d\uff0c\u5c31\u4f1a\u6709\u5927\u91cf\u7684\u6027\u80fd\u6d88\u8017 LinkedList<Integer> list = new LinkedList<>(); int bt = 0; for (int i = 0; i < n; i++) { list.addLast(i); } while (list.size() > 1) { bt = (bt + m - 1) % list.size(); list.remove(bt); } // \u601d\u8003\u4e3a\u4ec0\u4e48\u4f1a\u6709\u6700\u540e\u8fd9\u4e2a\u5224\u65ad return list.size() == 1 ? list.get(0) : -1; } } Java \u4ee3\u7801\uff1a import java.util.LinkedList; public class Solution { // \u7ea6\u745f\u592b\u73af\u95ee\u9898 // \u5176\u5b9e\u5e76\u4e0d\u4e00\u5b9a\u8981\u6784\u9020\u51fa\u4e00\u4e2a\u771f\u7684\u5faa\u73af\u94fe\u8868 public int LastRemaining_Solution(int n, int m) { // \u5148\u5904\u7406\u6781\u7aef\u8f93\u5165 if (n <= 1) { return -1; } // \u8fd9\u91cc\u7528\u94fe\u8868\u662f\u4e3a\u4e86\u63d0\u5347\u6027\u80fd\uff0c\u5982\u679c\u7528 ArrayList \u5728\u5220\u9664\u64cd\u4f5c\u4e2d\uff0c\u5c31\u4f1a\u6709\u5927\u91cf\u7684\u6027\u80fd\u6d88\u8017 LinkedList<Integer> list = new LinkedList<>(); int bt = 0; for (int i = 0; i < n; i++) { list.addLast(i); } while (list.size() > 1) { // \u8868\u793a\u7684\u662f\u7d22\u5f15\u7684\u503c bt = (bt + m - 1) % list.size(); // \u4e0b\u9762\u8fd9\u4e00\u884c\u4ee3\u7801\u53ef\u4ee5\u5e2e\u52a9\u8c03\u8bd5 // System.out.println(bt + \" \" + list); // bt \u662f\u94fe\u8868\u7684\u7d22\u5f15 list.remove(bt); } // \u601d\u8003\u4e3a\u4ec0\u4e48\u4f1a\u6709\u6700\u540e\u8fd9\u4e2a\u5224\u65ad return list.get(0); } // \u6d4b\u8bd5\u7528\u4f8b\uff1a n = 6\uff0c[0,1,2,3,4,5]\uff0cm=3 public static void main(String[] args) { Solution solution = new Solution(); int n = 6; int m = 3; int lastRemainingSolution = solution.LastRemaining_Solution(n, m); System.out.println(lastRemainingSolution); } } \u601d\u8def2\uff1a\u4e66\u4e0a\u8bf4\u7684\uff0c\u4f7f\u7528\u6570\u5b66\u65b9\u6cd5\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 62. \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57"},{"location":"62/#offer-62","text":"\u5251\u6307 Offer 62. \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57 \uff1b \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002","title":"\u5251\u6307 Offer 62. \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57"},{"location":"62/#62","text":"\u4f20\u9001\u95e8\uff1a 0, 1, \u2026, n-1 \u8fd9 n \u4e2a\u6570\u5b57 (n>0) \u6392\u6210\u4e00\u4e2a\u5706\u5708\uff0c\u4ece\u6570\u5b57 0 \u5f00\u59cb\u6bcf\u6b21\u4ece\u8fd9\u4e2a\u5706\u5708\u91cc\u5220\u9664\u7b2c m \u4e2a\u6570\u5b57\u3002 \u6c42\u51fa\u8fd9\u4e2a\u5706\u5708\u91cc\u5269\u4e0b\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a n=5 , m=3 \u8f93\u51fa\uff1a3 \u601d\u8def1\uff1a\u4f7f\u7528\u73af\u5f62\u94fe\u8868\u6a21\u62df\u7ea6\u745f\u592b\u73af\u3002\u6ce8\u610f\u7279\u4f8b\uff0c\u5373 $n==0$ \u6210\u7acb\uff0c\u6ca1\u6709\u6570\u5b57\u7684\u65f6\u5019\uff0c\u8fd4\u56de $ -1$ \u5373\u53ef\u3002 Python \u5199\u6cd5\uff1a\u8bb0\u4f4f\u8fd9\u79cd\u5199\u6cd5\uff0c\u4e24\u4e2a\u8981\u70b9\u3002 class Solution: def lastRemaining(self, n, m): # \u7279\u5224 if n == 0 and m == 0: return -1 l = [i for i in range(n)] bt = 0 while len(l) > 1: # \u5728\u8fd9\u4e00\u884c\u6a21\u62df\u7ea6\u745f\u592b\u73af\u64cd\u4f5c # 1\u3001m - 1 \uff1a\u56e0\u4e3a\u5f53\u524d\u6570\u5b57\u7b97 1 \u4e2a\uff0c\u8d70 m - 1 \u6b65 # 2\u3001len(l)\uff1a\u6bcf\u6b21\u5220\u53bb\u4e00\u4e2a\u6570\uff0c\u6240\u4ee5\u5f97\u52a8\u6001\u53d6 bt = (bt + m - 1) % len(l) l.pop(bt) return l[0] Java \u4ee3\u7801\uff1a import java.util.LinkedList; public class Solution { // \u7ea6\u745f\u592b\u73af\u95ee\u9898 // \u5176\u5b9e\u5e76\u4e0d\u4e00\u5b9a\u8981\u6784\u9020\u51fa\u4e00\u4e2a\u771f\u7684\u5faa\u73af\u94fe\u8868 public int LastRemaining_Solution(int n, int m) { // \u8fd9\u91cc\u7528\u94fe\u8868\u662f\u4e3a\u4e86\u63d0\u5347\u6027\u80fd\uff0c\u5982\u679c\u7528 ArrayList \u5728\u5220\u9664\u64cd\u4f5c\u4e2d\uff0c\u5c31\u4f1a\u6709\u5927\u91cf\u7684\u6027\u80fd\u6d88\u8017 LinkedList<Integer> list = new LinkedList<>(); int bt = 0; for (int i = 0; i < n; i++) { list.addLast(i); } while (list.size() > 1) { bt = (bt + m - 1) % list.size(); list.remove(bt); } // \u601d\u8003\u4e3a\u4ec0\u4e48\u4f1a\u6709\u6700\u540e\u8fd9\u4e2a\u5224\u65ad return list.size() == 1 ? list.get(0) : -1; } } Java \u4ee3\u7801\uff1a import java.util.LinkedList; public class Solution { // \u7ea6\u745f\u592b\u73af\u95ee\u9898 // \u5176\u5b9e\u5e76\u4e0d\u4e00\u5b9a\u8981\u6784\u9020\u51fa\u4e00\u4e2a\u771f\u7684\u5faa\u73af\u94fe\u8868 public int LastRemaining_Solution(int n, int m) { // \u5148\u5904\u7406\u6781\u7aef\u8f93\u5165 if (n <= 1) { return -1; } // \u8fd9\u91cc\u7528\u94fe\u8868\u662f\u4e3a\u4e86\u63d0\u5347\u6027\u80fd\uff0c\u5982\u679c\u7528 ArrayList \u5728\u5220\u9664\u64cd\u4f5c\u4e2d\uff0c\u5c31\u4f1a\u6709\u5927\u91cf\u7684\u6027\u80fd\u6d88\u8017 LinkedList<Integer> list = new LinkedList<>(); int bt = 0; for (int i = 0; i < n; i++) { list.addLast(i); } while (list.size() > 1) { // \u8868\u793a\u7684\u662f\u7d22\u5f15\u7684\u503c bt = (bt + m - 1) % list.size(); // \u4e0b\u9762\u8fd9\u4e00\u884c\u4ee3\u7801\u53ef\u4ee5\u5e2e\u52a9\u8c03\u8bd5 // System.out.println(bt + \" \" + list); // bt \u662f\u94fe\u8868\u7684\u7d22\u5f15 list.remove(bt); } // \u601d\u8003\u4e3a\u4ec0\u4e48\u4f1a\u6709\u6700\u540e\u8fd9\u4e2a\u5224\u65ad return list.get(0); } // \u6d4b\u8bd5\u7528\u4f8b\uff1a n = 6\uff0c[0,1,2,3,4,5]\uff0cm=3 public static void main(String[] args) { Solution solution = new Solution(); int n = 6; int m = 3; int lastRemainingSolution = solution.LastRemaining_Solution(n, m); System.out.println(lastRemainingSolution); } } \u601d\u8def2\uff1a\u4e66\u4e0a\u8bf4\u7684\uff0c\u4f7f\u7528\u6570\u5b66\u65b9\u6cd5\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 62 \u9898\uff1a\u5b69\u5b50\u4eec\u7684\u6e38\u620f\uff08\u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\uff09"},{"location":"63/","text":"\u5251\u6307 Offer 63. \u80a1\u7968\u7684\u6700\u5927\u5229\u6da6 \u5251\u6307 Offer 63. \u80a1\u7968\u7684\u6700\u5927\u5229\u6da6 \uff1b \u4f20\u9001\u95e8\uff1a \u80a1\u7968\u7684\u6700\u5927\u5229\u6da6 \u3002 \u5047\u8bbe\u628a\u67d0\u80a1\u7968\u7684\u4ef7\u683c\u6309\u7167\u65f6\u95f4\u5148\u540e\u987a\u5e8f\u5b58\u50a8\u5728\u6570\u7ec4\u4e2d\uff0c\u8bf7\u95ee\u4e70\u5356\u4ea4\u6613\u8be5\u80a1\u7968\u53ef\u80fd\u83b7\u5f97\u7684\u5229\u6da6\u662f\u591a\u5c11\uff1f \u4f8b\u5982\u4e00\u53ea\u80a1\u7968\u5728\u67d0\u4e9b\u65f6\u95f4\u8282\u70b9\u7684\u4ef7\u683c\u4e3a [9, 11, 8, 5, 7, 12, 16, 14] \u3002 \u5982\u679c\u6211\u4eec\u80fd\u5728\u4ef7\u683c\u4e3a 5 \u7684\u65f6\u5019\u4e70\u5165\u5e76\u5728\u4ef7\u683c\u4e3a 16 \u65f6\u5356\u51fa\uff0c\u5219\u80fd\u6536\u83b7\u6700\u5927\u7684\u5229\u6da6 11\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [9, 11, 8, 5, 7, 12, 16, 14] \u8f93\u51fa\uff1a11 \u601d\u8def\uff1a\u5728\u8fc7\u5f80\u7684\u80a1\u4ef7\u4e2d\u627e\u5230\u6700\u4f4e\u4ef7\uff0c\u201c\u5f53\u524d\u80a1\u4ef7 - \u6700\u4f4e\u4ef7\u201d\u4e3a\u83b7\u5229\u3002\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u627e\u5230\u8fd9\u4e2a\u83b7\u5229\u7684\u6700\u5927\u503c\u5373\u53ef\u3002\u7531\u4e8e\u53ea\u5141\u8bb8\u505a\u4e00\u6b21\u80a1\u7968\u4e70\u5356\u4ea4\u6613\uff0c\u679a\u4e3e\u6bcf\u4e00\u5929\u4f5c\u4e3a\u5356\u51fa\u7684\u65e5\u5b50\uff0c\u4e70\u5165\u65e5\u5b50\u4e00\u5b9a\u5728\u5356\u51fa\u65e5\u5b50\u4e4b\u524d\uff0c\u4e3a\u4e86\u83b7\u5229\u6700\u591a\uff0c\u5e0c\u671b\u4e70\u5165\u7684\u65e5\u5b50\u7684\u80a1\u7968\u4ef7\u683c\u5c3d\u53ef\u80fd\u4f4e\u3002\u7528 minnum \u8bb0\u5f55\u7b2c $0$ \u5230 \u7b2c $i$ \u5929\u7684\u6700\u4f4e\u4ef7\u683c\uff0c\u5219\u5728\u7b2c $i$ \u5929\u5356\u51fa\u7684\u6700\u5927\u83b7\u5229\u4e3a nums[i] - minnum \uff0c\u679a\u4e3e $i$ \u627e\u5230\u6700\u5927\u83b7\u5229\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def maxDiff(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" l = len(nums) if l == 0: return 0 min_val = nums[0] max_profit = 0 for i in range(1, l): min_val = min(min_val, nums[i]) max_profit = max(max_profit, nums[i] - min_val) return max_profit \u540c LeetCode \u7b2c 121 \u9898\u3002 \u4f20\u9001\u95e8\uff1a 121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u5982\u679c\u4f60\u6700\u591a\u53ea\u5141\u8bb8\u5b8c\u6210\u4e00\u7b14\u4ea4\u6613\uff08\u5373\u4e70\u5165\u548c\u5356\u51fa\u4e00\u652f\u80a1\u7968\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u80a1\u7968\u524d\u5356\u51fa\u80a1\u7968\u3002 \u793a\u4f8b 1: \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 5 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u6700\u5927\u5229\u6da6 = 6-1 = 5 \u3002 \u6ce8\u610f\u5229\u6da6\u4e0d\u80fd\u662f 7-1 = 6, \u56e0\u4e3a\u5356\u51fa\u4ef7\u683c\u9700\u8981\u5927\u4e8e\u4e70\u5165\u4ef7\u683c\u3002 \u793a\u4f8b 2: \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 Java \u4ee3\u7801\uff1a public class Solution2 { // \u7559\u610f\u8fd9\u4e2a\u89e3\u6cd5\u7684\u8bed\u4e49 public int maxProfit(int[] prices) { int buy = Integer.MIN_VALUE; int sell = 0; for (int price : prices) { // \u5728\u5f53\u524d\u4ee5\u53ca\u4e4b\u524d\u5982\u679c\u6267\u884c\u4e86\u4e70\u64cd\u4f5c\uff0c\u80fd\u591f\u5f97\u5230\u7684\u5229\u6da6\u7684\u6700\u5927\u503c buy = Math.max(buy, -price); // \u5728\u5f53\u524d\u4ee5\u53ca\u4e4b\u524d\u5982\u679c\u6267\u884c\u4e86\u5356\u64cd\u4f5c\uff0c\u80fd\u591f\u5f97\u5230\u7684\u5229\u6da6\u7684\u6700\u5927\u503c sell = Math.max(sell, buy + price); } return sell; } public static void main(String[] args) { int[] prices = {7, 1, 5, 3, 6, 4}; Solution2 solution2 = new Solution2(); int maxProfit = solution2.maxProfit(prices); System.out.println(maxProfit); } } \u533a\u522b\u4e8e LeetCode \u7b2c 122 \u9898\u3002 \u4f20\u9001\u95e8\uff1a 122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09\u3002 \u6ce8\u610f\uff1a \u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002 \u793a\u4f8b 1: \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 7 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 3 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u968f\u540e\uff0c\u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 6-3 = 3 \u3002 \u793a\u4f8b 2: \u8f93\u5165: [1,2,3,4,5] \u8f93\u51fa: 4 \u89e3\u91ca: \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002 \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002 \u793a\u4f8b 3: \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 \u53c2\u8003\u8d44\u6599\uff1a\u4ece\u96f6\u5f00\u59cb\u5b66\u8d2a\u5fc3\u7b97\u6cd5 - CSDN\u535a\u5ba2 https://blog.csdn.net/qq_32400847/article/details/51336300 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 63. \u80a1\u7968\u7684\u6700\u5927\u5229\u6da6"},{"location":"63/#offer-63","text":"\u5251\u6307 Offer 63. \u80a1\u7968\u7684\u6700\u5927\u5229\u6da6 \uff1b \u4f20\u9001\u95e8\uff1a \u80a1\u7968\u7684\u6700\u5927\u5229\u6da6 \u3002 \u5047\u8bbe\u628a\u67d0\u80a1\u7968\u7684\u4ef7\u683c\u6309\u7167\u65f6\u95f4\u5148\u540e\u987a\u5e8f\u5b58\u50a8\u5728\u6570\u7ec4\u4e2d\uff0c\u8bf7\u95ee\u4e70\u5356\u4ea4\u6613\u8be5\u80a1\u7968\u53ef\u80fd\u83b7\u5f97\u7684\u5229\u6da6\u662f\u591a\u5c11\uff1f \u4f8b\u5982\u4e00\u53ea\u80a1\u7968\u5728\u67d0\u4e9b\u65f6\u95f4\u8282\u70b9\u7684\u4ef7\u683c\u4e3a [9, 11, 8, 5, 7, 12, 16, 14] \u3002 \u5982\u679c\u6211\u4eec\u80fd\u5728\u4ef7\u683c\u4e3a 5 \u7684\u65f6\u5019\u4e70\u5165\u5e76\u5728\u4ef7\u683c\u4e3a 16 \u65f6\u5356\u51fa\uff0c\u5219\u80fd\u6536\u83b7\u6700\u5927\u7684\u5229\u6da6 11\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [9, 11, 8, 5, 7, 12, 16, 14] \u8f93\u51fa\uff1a11 \u601d\u8def\uff1a\u5728\u8fc7\u5f80\u7684\u80a1\u4ef7\u4e2d\u627e\u5230\u6700\u4f4e\u4ef7\uff0c\u201c\u5f53\u524d\u80a1\u4ef7 - \u6700\u4f4e\u4ef7\u201d\u4e3a\u83b7\u5229\u3002\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u627e\u5230\u8fd9\u4e2a\u83b7\u5229\u7684\u6700\u5927\u503c\u5373\u53ef\u3002\u7531\u4e8e\u53ea\u5141\u8bb8\u505a\u4e00\u6b21\u80a1\u7968\u4e70\u5356\u4ea4\u6613\uff0c\u679a\u4e3e\u6bcf\u4e00\u5929\u4f5c\u4e3a\u5356\u51fa\u7684\u65e5\u5b50\uff0c\u4e70\u5165\u65e5\u5b50\u4e00\u5b9a\u5728\u5356\u51fa\u65e5\u5b50\u4e4b\u524d\uff0c\u4e3a\u4e86\u83b7\u5229\u6700\u591a\uff0c\u5e0c\u671b\u4e70\u5165\u7684\u65e5\u5b50\u7684\u80a1\u7968\u4ef7\u683c\u5c3d\u53ef\u80fd\u4f4e\u3002\u7528 minnum \u8bb0\u5f55\u7b2c $0$ \u5230 \u7b2c $i$ \u5929\u7684\u6700\u4f4e\u4ef7\u683c\uff0c\u5219\u5728\u7b2c $i$ \u5929\u5356\u51fa\u7684\u6700\u5927\u83b7\u5229\u4e3a nums[i] - minnum \uff0c\u679a\u4e3e $i$ \u627e\u5230\u6700\u5927\u83b7\u5229\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def maxDiff(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" l = len(nums) if l == 0: return 0 min_val = nums[0] max_profit = 0 for i in range(1, l): min_val = min(min_val, nums[i]) max_profit = max(max_profit, nums[i] - min_val) return max_profit \u540c LeetCode \u7b2c 121 \u9898\u3002 \u4f20\u9001\u95e8\uff1a 121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u5982\u679c\u4f60\u6700\u591a\u53ea\u5141\u8bb8\u5b8c\u6210\u4e00\u7b14\u4ea4\u6613\uff08\u5373\u4e70\u5165\u548c\u5356\u51fa\u4e00\u652f\u80a1\u7968\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u80a1\u7968\u524d\u5356\u51fa\u80a1\u7968\u3002 \u793a\u4f8b 1: \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 5 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u6700\u5927\u5229\u6da6 = 6-1 = 5 \u3002 \u6ce8\u610f\u5229\u6da6\u4e0d\u80fd\u662f 7-1 = 6, \u56e0\u4e3a\u5356\u51fa\u4ef7\u683c\u9700\u8981\u5927\u4e8e\u4e70\u5165\u4ef7\u683c\u3002 \u793a\u4f8b 2: \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 Java \u4ee3\u7801\uff1a public class Solution2 { // \u7559\u610f\u8fd9\u4e2a\u89e3\u6cd5\u7684\u8bed\u4e49 public int maxProfit(int[] prices) { int buy = Integer.MIN_VALUE; int sell = 0; for (int price : prices) { // \u5728\u5f53\u524d\u4ee5\u53ca\u4e4b\u524d\u5982\u679c\u6267\u884c\u4e86\u4e70\u64cd\u4f5c\uff0c\u80fd\u591f\u5f97\u5230\u7684\u5229\u6da6\u7684\u6700\u5927\u503c buy = Math.max(buy, -price); // \u5728\u5f53\u524d\u4ee5\u53ca\u4e4b\u524d\u5982\u679c\u6267\u884c\u4e86\u5356\u64cd\u4f5c\uff0c\u80fd\u591f\u5f97\u5230\u7684\u5229\u6da6\u7684\u6700\u5927\u503c sell = Math.max(sell, buy + price); } return sell; } public static void main(String[] args) { int[] prices = {7, 1, 5, 3, 6, 4}; Solution2 solution2 = new Solution2(); int maxProfit = solution2.maxProfit(prices); System.out.println(maxProfit); } } \u533a\u522b\u4e8e LeetCode \u7b2c 122 \u9898\u3002 \u4f20\u9001\u95e8\uff1a 122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09\u3002 \u6ce8\u610f\uff1a \u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002 \u793a\u4f8b 1: \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 7 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 3 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u968f\u540e\uff0c\u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 6-3 = 3 \u3002 \u793a\u4f8b 2: \u8f93\u5165: [1,2,3,4,5] \u8f93\u51fa: 4 \u89e3\u91ca: \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002 \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002 \u793a\u4f8b 3: \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 \u53c2\u8003\u8d44\u6599\uff1a\u4ece\u96f6\u5f00\u59cb\u5b66\u8d2a\u5fc3\u7b97\u6cd5 - CSDN\u535a\u5ba2 https://blog.csdn.net/qq_32400847/article/details/51336300 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 63. \u80a1\u7968\u7684\u6700\u5927\u5229\u6da6"},{"location":"64/","text":"\u5251\u6307 Offer 64. \u6c421+2+\u2026+n \u5251\u6307 Offer 64. \u6c421+2+\u2026+n \uff1b \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u6c42 1 + 2 + 3 + ... + n \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7b2c 64 \u9898\uff1a\u6c42 1 + 2 + 3 + ... + n \u6c42 1+2+\u2026+n \uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u4e58\u9664\u6cd5\u3001for\u3001while\u3001if\u3001else\u3001switch\u3001case \u7b49\u5173\u952e\u5b57\u53ca\u6761\u4ef6\u5224\u65ad\u8bed\u53e5\uff08A?B:C\uff09\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a10 \u8f93\u51fa\uff1a55 Java \u4ee3\u7801\uff1a \u5206\u6790\uff1a\u7b49\u5dee\u6570\u5217\u6c42\u548c\u7684\u901a\u9879\u516c\u5f0f\u5982\u4e0b\uff1a $$ s=\\cfrac{n(n+1)}{2} = \\cfrac{n^2+n}{2} $$ \u5c06\u4e0a\u9762\u7684\u516c\u5f0f\u4e2d\u7684\u8fd0\u7b97\u6362\u6210\u53ea\u7528\u52a0\u6cd5\u3001\u4e58\u65b9\u8fd0\u7b97\u3001\u4f4d\u8fd0\u7b97\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getSum(self, n): \"\"\" :type n: int :rtype: int \"\"\" return (n ** 2 + n) >> 1 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 64. \u6c421+2+\u2026+n"},{"location":"64/#offer-64-12n","text":"\u5251\u6307 Offer 64. \u6c421+2+\u2026+n \uff1b \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u6c42 1 + 2 + 3 + ... + n \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002","title":"\u5251\u6307 Offer 64. \u6c421+2+\u2026+n"},{"location":"64/#64-1-2-3-n","text":"\u6c42 1+2+\u2026+n \uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u4e58\u9664\u6cd5\u3001for\u3001while\u3001if\u3001else\u3001switch\u3001case \u7b49\u5173\u952e\u5b57\u53ca\u6761\u4ef6\u5224\u65ad\u8bed\u53e5\uff08A?B:C\uff09\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a10 \u8f93\u51fa\uff1a55 Java \u4ee3\u7801\uff1a \u5206\u6790\uff1a\u7b49\u5dee\u6570\u5217\u6c42\u548c\u7684\u901a\u9879\u516c\u5f0f\u5982\u4e0b\uff1a $$ s=\\cfrac{n(n+1)}{2} = \\cfrac{n^2+n}{2} $$ \u5c06\u4e0a\u9762\u7684\u516c\u5f0f\u4e2d\u7684\u8fd0\u7b97\u6362\u6210\u53ea\u7528\u52a0\u6cd5\u3001\u4e58\u65b9\u8fd0\u7b97\u3001\u4f4d\u8fd0\u7b97\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def getSum(self, n): \"\"\" :type n: int :rtype: int \"\"\" return (n ** 2 + n) >> 1 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u7b2c 64 \u9898\uff1a\u6c42 1 + 2 + 3 + ... + n"},{"location":"65/","text":"\u5251\u6307 Offer 65. \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \u5251\u6307 Offer 65. \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \uff1b \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6c42\u4e24\u4e2a\u6574\u6570\u4e4b\u548c\uff0c\u8981\u6c42\u5728\u51fd\u6570\u4f53\u5185\u4e0d\u5f97\u4f7f\u7528\uff0b\u3001\uff0d\u3001\u00d7\u3001\u00f7 \u56db\u5219\u8fd0\u7b97\u7b26\u53f7\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a num1 = 1 , num2 = 2 \u8f93\u51fa\uff1a3 \u601d\u8def\uff1a\u4e0d\u7528\u52a0\u51cf\u4e58\u9664\uff0c\u90a3\u5c31\u53ea\u80fd\u7528\u4f4d\u8fd0\u7b97\u4e86\u3002 \u4e0b\u9762\u662f\u4ea4\u6362\u4e24\u4e2a\u6570\u7684\u7279\u6b8a\u5199\u6cd5\uff0c\u4e86\u89e3\u4e00\u4e0b\u3002 Python \u4ee3\u7801\uff1a\u5728 Python \u5185\u90e8\u5bf9\u6574\u6570\u7684\u5904\u7406\u5206\u4e3a\u666e\u901a\u6574\u6570\u548c\u957f\u6574\u6570\uff0c\u666e\u901a\u6574\u6570\u957f\u5ea6\u4e3a\u673a\u5668\u4f4d\u957f\uff0c\u901a\u5e38\u90fd\u662f $32$ \u4f4d\uff0c\u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\u7684\u6574\u6570\u5c31\u81ea\u52a8\u5f53\u957f\u6574\u6570\u5904\u7406\uff0c\u800c\u957f\u6574\u6570\u7684\u8303\u56f4\u51e0\u4e4e\u5b8c\u5168\u6ca1\u9650\u5236\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def add(self, num1, num2): \"\"\" :type num1: int :type num2: int :rtype: int \"\"\" while num2 != 0: # \u4e0d\u8fdb\u4f4d\u52a0\u6cd5 temp = num1 ^ num2 # \u52a0\u6cd5\u8fdb\u4f4d num2 = (num1 & num2) << 1 # \u628a\u9ad8\u4e8e 32 \u4f4d\u7684 1 \u5168\u90e8\u53d8\u6210 0 num1 = temp & 0xFFFFFFFF return num1 if num1 >> 31 == 0 else num1 - (1 << 32) \u8bf4\u660e\uff1aPython \u4e2d int \u7c7b\u578b\u7684\u6700\u5927\u503c\u662f 0x7fffffff \u3002 Python \u4ee3\u7801\uff1a\u4e0e\u4e0a\u9762\u7684\u5199\u6cd5\u7b49\u4ef7 class Solution(object): def add(self, num1, num2): \"\"\" :type num1: int :type num2: int :rtype: int \"\"\" while True: # \u4e0d\u8fdb\u4f4d\u52a0\u6cd5 s = num1 ^ num2 # \u8ba1\u7b97\u8fdb\u4f4d carry = num1 & num2 # \u624b\u52a8\u628a\u9ad8\u4e8e 32 \u4f4d\u7684\u90e8\u5206\u53d8\u6210 0 num1 = s & 0xFFFFFFFF num2 = carry << 1 if carry == 0: break # \u5982\u679c\u662f\u6b63\u6570\u548c 0 \uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u6b63\u6570\u597d\u4e86 if num1 >> 31 == 0: return num1 # \u5982\u679c\u662f\u8d1f\u6570 return num1 - (1 << 32) Java \u4ee3\u7801\uff1a public class Solution { public int Add(int num1, int num2) { int sum = 0; while (true) { // \u8ba1\u7b97\u4e2a\u4f4d sum = num1 ^ num2; int carry = num1 & num2; if (carry == 0) { break; } num1 = sum; // \u8ba1\u7b97\u8fdb\u4f4d num2 = carry << 1; } return sum; } public static void main(String[] args) { Solution solution = new Solution(); int add = solution.Add(14, 15); System.out.println(add); } } \u8fd8\u53ef\u4ee5\u7528\u201c\u5168\u52a0\u5668\u201d\u5b9e\u73b0\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def add(self, num1, num2): \"\"\" :type num1: int :type num2: int :rtype: int \"\"\" # \u7279\u5224 if num1 == 0 or num2 == 0: return max(num1, num2) res = 0 # \u8fdb\u4f4d carry = 0 for i in range(32): a = num1 & (1 << i) b = num2 & (1 << i) # \u4e0d\u8fdb\u4f4d\u7684\u548c s_ = (a ^ b) ^ carry # \u4e0b\u9762\u8ba1\u7b97\u8fdb\u4f4d\uff0c\u4e09\u8005\u4e4b\u4e2d\uff0c\u4efb\u610f\u4e24\u8005\u540c\u4e3a 1 \u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u8fdb\u4f4d carry = (a & b) | (a & carry) | (b & carry) carry <<= 1 res += s_ if res >> 31 == 0: return res return res - (1 << 32) Java \u4ee3\u7801\uff1a public class Solution { public int Add(int num1, int num2) { int sum = 0; while (true) { sum = num1 ^ num2; int carry = num1 & num2; if (carry == 0) { break; } num1 = sum; num2 = carry << 1; } return sum; } public static void main(String[] args) { Solution solution = new Solution(); int add = solution.Add(14, 15); System.out.println(add); } } Java \u4ee3\u7801\uff1a public class Solution2 { // \u4e66\u4e0a\u7684\u5199\u6cd5 public int Add(int num1, int num2) { int sum = 0; int carry = 0; do { sum = num1 ^ num2; carry = num1 & num2; num1 = sum; num2 = carry << 1; } while (carry != 0); return sum; } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 65. \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5"},{"location":"65/#offer-65","text":"\u5251\u6307 Offer 65. \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \uff1b \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6c42\u4e24\u4e2a\u6574\u6570\u4e4b\u548c\uff0c\u8981\u6c42\u5728\u51fd\u6570\u4f53\u5185\u4e0d\u5f97\u4f7f\u7528\uff0b\u3001\uff0d\u3001\u00d7\u3001\u00f7 \u56db\u5219\u8fd0\u7b97\u7b26\u53f7\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a num1 = 1 , num2 = 2 \u8f93\u51fa\uff1a3 \u601d\u8def\uff1a\u4e0d\u7528\u52a0\u51cf\u4e58\u9664\uff0c\u90a3\u5c31\u53ea\u80fd\u7528\u4f4d\u8fd0\u7b97\u4e86\u3002 \u4e0b\u9762\u662f\u4ea4\u6362\u4e24\u4e2a\u6570\u7684\u7279\u6b8a\u5199\u6cd5\uff0c\u4e86\u89e3\u4e00\u4e0b\u3002 Python \u4ee3\u7801\uff1a\u5728 Python \u5185\u90e8\u5bf9\u6574\u6570\u7684\u5904\u7406\u5206\u4e3a\u666e\u901a\u6574\u6570\u548c\u957f\u6574\u6570\uff0c\u666e\u901a\u6574\u6570\u957f\u5ea6\u4e3a\u673a\u5668\u4f4d\u957f\uff0c\u901a\u5e38\u90fd\u662f $32$ \u4f4d\uff0c\u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\u7684\u6574\u6570\u5c31\u81ea\u52a8\u5f53\u957f\u6574\u6570\u5904\u7406\uff0c\u800c\u957f\u6574\u6570\u7684\u8303\u56f4\u51e0\u4e4e\u5b8c\u5168\u6ca1\u9650\u5236\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def add(self, num1, num2): \"\"\" :type num1: int :type num2: int :rtype: int \"\"\" while num2 != 0: # \u4e0d\u8fdb\u4f4d\u52a0\u6cd5 temp = num1 ^ num2 # \u52a0\u6cd5\u8fdb\u4f4d num2 = (num1 & num2) << 1 # \u628a\u9ad8\u4e8e 32 \u4f4d\u7684 1 \u5168\u90e8\u53d8\u6210 0 num1 = temp & 0xFFFFFFFF return num1 if num1 >> 31 == 0 else num1 - (1 << 32) \u8bf4\u660e\uff1aPython \u4e2d int \u7c7b\u578b\u7684\u6700\u5927\u503c\u662f 0x7fffffff \u3002 Python \u4ee3\u7801\uff1a\u4e0e\u4e0a\u9762\u7684\u5199\u6cd5\u7b49\u4ef7 class Solution(object): def add(self, num1, num2): \"\"\" :type num1: int :type num2: int :rtype: int \"\"\" while True: # \u4e0d\u8fdb\u4f4d\u52a0\u6cd5 s = num1 ^ num2 # \u8ba1\u7b97\u8fdb\u4f4d carry = num1 & num2 # \u624b\u52a8\u628a\u9ad8\u4e8e 32 \u4f4d\u7684\u90e8\u5206\u53d8\u6210 0 num1 = s & 0xFFFFFFFF num2 = carry << 1 if carry == 0: break # \u5982\u679c\u662f\u6b63\u6570\u548c 0 \uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u6b63\u6570\u597d\u4e86 if num1 >> 31 == 0: return num1 # \u5982\u679c\u662f\u8d1f\u6570 return num1 - (1 << 32) Java \u4ee3\u7801\uff1a public class Solution { public int Add(int num1, int num2) { int sum = 0; while (true) { // \u8ba1\u7b97\u4e2a\u4f4d sum = num1 ^ num2; int carry = num1 & num2; if (carry == 0) { break; } num1 = sum; // \u8ba1\u7b97\u8fdb\u4f4d num2 = carry << 1; } return sum; } public static void main(String[] args) { Solution solution = new Solution(); int add = solution.Add(14, 15); System.out.println(add); } } \u8fd8\u53ef\u4ee5\u7528\u201c\u5168\u52a0\u5668\u201d\u5b9e\u73b0\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def add(self, num1, num2): \"\"\" :type num1: int :type num2: int :rtype: int \"\"\" # \u7279\u5224 if num1 == 0 or num2 == 0: return max(num1, num2) res = 0 # \u8fdb\u4f4d carry = 0 for i in range(32): a = num1 & (1 << i) b = num2 & (1 << i) # \u4e0d\u8fdb\u4f4d\u7684\u548c s_ = (a ^ b) ^ carry # \u4e0b\u9762\u8ba1\u7b97\u8fdb\u4f4d\uff0c\u4e09\u8005\u4e4b\u4e2d\uff0c\u4efb\u610f\u4e24\u8005\u540c\u4e3a 1 \u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u8fdb\u4f4d carry = (a & b) | (a & carry) | (b & carry) carry <<= 1 res += s_ if res >> 31 == 0: return res return res - (1 << 32) Java \u4ee3\u7801\uff1a public class Solution { public int Add(int num1, int num2) { int sum = 0; while (true) { sum = num1 ^ num2; int carry = num1 & num2; if (carry == 0) { break; } num1 = sum; num2 = carry << 1; } return sum; } public static void main(String[] args) { Solution solution = new Solution(); int add = solution.Add(14, 15); System.out.println(add); } } Java \u4ee3\u7801\uff1a public class Solution2 { // \u4e66\u4e0a\u7684\u5199\u6cd5 public int Add(int num1, int num2) { int sum = 0; int carry = 0; do { sum = num1 ^ num2; carry = num1 & num2; num1 = sum; num2 = carry << 1; } while (carry != 0); return sum; } } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 65. \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5"},{"location":"66/","text":"\u5251\u6307 Offer 66. \u6784\u5efa\u4e58\u79ef\u6570\u7ec4 \u5251\u6307 Offer 66. \u6784\u5efa\u4e58\u79ef\u6570\u7ec4 \uff1b \u6784\u5efa\u4e58\u79ef\u6570\u7ec4 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 A[0, 1, \u2026, n-1] \uff0c\u8bf7\u6784\u5efa\u4e00\u4e2a\u6570\u7ec4 B[0, 1, \u2026, n-1] \uff0c\u5176\u4e2d B \u4e2d\u7684\u5143\u7d20 B[i] = A[0] \u00d7 A[1] \u00d7 \u2026 \u00d7 A[i - 1] \u00d7 A[i + 1] \u00d7 \u2026 \u00d7 A[n - 1] \u3002 \u4e0d\u80fd\u4f7f\u7528\u9664\u6cd5\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1, 2, 3, 4, 5] \u8f93\u51fa\uff1a [120, 60, 40, 30, 24] \u601d\u8003\u9898 \uff1a \u80fd\u4e0d\u80fd\u53ea\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\uff1f\uff08\u9664\u4e86\u8f93\u51fa\u7684\u6570\u7ec4\u4e4b\u5916\uff09 \u601d\u8def\uff1a\u4f7f\u7528\u77e9\u9635\u6cd5\u6c42\u89e3\uff0c\u5c06\u77e9\u9635\u5206\u4e3a\u4e0a\u4e09\u89d2\u77e9\u9635\u548c\u4e0b\u4e09\u89d2\u77e9\u9635\uff0c\u5206\u522b\u6c42\u4e58\u79ef\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def multiply(self, A): \"\"\" :type A: List[int] :rtype: List[int] \"\"\" l = len(A) if l == 0: return [] b = [None for _ in range(l)] b[0] = 1 # \u8ba1\u7b97\u4e0b\u4e09\u89d2\u8fde\u4e58\u7684\u7ed3\u679c for i in range(1, l): b[i] = b[i - 1] * A[i - 1] temp = 1 for i in range(l - 2, -1, -1): temp *= A[i + 1] b[i] *= temp return b Python \u4ee3\u7801\uff1a # 66\u3001\u6784\u5efa\u4e58\u79ef\u6570\u7ec4 class Solution(object): def multiply(self, A): \"\"\" :type A: List[int] :rtype: List[int] \"\"\" l = len(A) if l == 0: return [] b = [1 for _ in range(l)] temp = 1 for index in range(l): b[index] *= temp temp *= A[index] temp = 1 for index in range(l - 1, -1, -1): b[index] *= temp temp *= A[index] return b Java \u4ee3\u7801\uff1a C++ \u4ee3\u7801\uff1a class Solution { public: vector<int> multiply(const vector<int>& A) { vector<int>left(A.size(),1); vector<int>right(A.size(),1); for(int i = 1;i<A.size();i++){ left[i] = A[i-1]*left[i-1]; } for(int i = A.size()-2;i>=0;i--){ right[i] = A[i+1]*right[i+1]; } vector<int>B(A.size(),0); for(int i = 0;i<A.size();i++){ B[i] = left[i]*right[i]; } return B; } }; \u4f5c\u8005\uff1acornerCao \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/AcWing/content/759/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 66. \u6784\u5efa\u4e58\u79ef\u6570\u7ec4"},{"location":"66/#offer-66","text":"\u5251\u6307 Offer 66. \u6784\u5efa\u4e58\u79ef\u6570\u7ec4 \uff1b \u6784\u5efa\u4e58\u79ef\u6570\u7ec4 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 A[0, 1, \u2026, n-1] \uff0c\u8bf7\u6784\u5efa\u4e00\u4e2a\u6570\u7ec4 B[0, 1, \u2026, n-1] \uff0c\u5176\u4e2d B \u4e2d\u7684\u5143\u7d20 B[i] = A[0] \u00d7 A[1] \u00d7 \u2026 \u00d7 A[i - 1] \u00d7 A[i + 1] \u00d7 \u2026 \u00d7 A[n - 1] \u3002 \u4e0d\u80fd\u4f7f\u7528\u9664\u6cd5\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a [1, 2, 3, 4, 5] \u8f93\u51fa\uff1a [120, 60, 40, 30, 24] \u601d\u8003\u9898 \uff1a \u80fd\u4e0d\u80fd\u53ea\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\uff1f\uff08\u9664\u4e86\u8f93\u51fa\u7684\u6570\u7ec4\u4e4b\u5916\uff09 \u601d\u8def\uff1a\u4f7f\u7528\u77e9\u9635\u6cd5\u6c42\u89e3\uff0c\u5c06\u77e9\u9635\u5206\u4e3a\u4e0a\u4e09\u89d2\u77e9\u9635\u548c\u4e0b\u4e09\u89d2\u77e9\u9635\uff0c\u5206\u522b\u6c42\u4e58\u79ef\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def multiply(self, A): \"\"\" :type A: List[int] :rtype: List[int] \"\"\" l = len(A) if l == 0: return [] b = [None for _ in range(l)] b[0] = 1 # \u8ba1\u7b97\u4e0b\u4e09\u89d2\u8fde\u4e58\u7684\u7ed3\u679c for i in range(1, l): b[i] = b[i - 1] * A[i - 1] temp = 1 for i in range(l - 2, -1, -1): temp *= A[i + 1] b[i] *= temp return b Python \u4ee3\u7801\uff1a # 66\u3001\u6784\u5efa\u4e58\u79ef\u6570\u7ec4 class Solution(object): def multiply(self, A): \"\"\" :type A: List[int] :rtype: List[int] \"\"\" l = len(A) if l == 0: return [] b = [1 for _ in range(l)] temp = 1 for index in range(l): b[index] *= temp temp *= A[index] temp = 1 for index in range(l - 1, -1, -1): b[index] *= temp temp *= A[index] return b Java \u4ee3\u7801\uff1a C++ \u4ee3\u7801\uff1a class Solution { public: vector<int> multiply(const vector<int>& A) { vector<int>left(A.size(),1); vector<int>right(A.size(),1); for(int i = 1;i<A.size();i++){ left[i] = A[i-1]*left[i-1]; } for(int i = A.size()-2;i>=0;i--){ right[i] = A[i+1]*right[i+1]; } vector<int>B(A.size(),0); for(int i = 0;i<A.size();i++){ B[i] = left[i]*right[i]; } return B; } }; \u4f5c\u8005\uff1acornerCao \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/AcWing/content/759/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 66. \u6784\u5efa\u4e58\u79ef\u6570\u7ec4"},{"location":"67/","text":"\u5251\u6307 Offer 67. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 \u5251\u6307 Offer 67. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 \uff1b \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u4f60\u5199\u4e00\u4e2a\u51fd\u6570StrToInt\uff0c\u5b9e\u73b0\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u8fd9\u4e2a\u529f\u80fd\u3002 \u5f53\u7136\uff0c\u4e0d\u80fd\u4f7f\u7528atoi\u6216\u8005\u5176\u4ed6\u7c7b\u4f3c\u7684\u5e93\u51fd\u6570\u3002 \u6837\u4f8b\uff1a ``` \u8f93\u5165\uff1a\"123\" \u8f93\u51fa\uff1a123 ``` \u6ce8\u610f : \u4f60\u7684\u51fd\u6570\u5e94\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\uff1a \u5ffd\u7565\u6240\u6709\u884c\u9996\u7a7a\u683c\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\uff0c\u53ef\u4ee5\u662f \u2018+/\u2212+/\u2212\u2019 \u8868\u793a\u662f\u6b63\u6570\u6216\u8005\u8d1f\u6570\uff0c\u7d27\u968f\u5176\u540e\u627e\u5230\u6700\u957f\u7684\u4e00\u4e32\u8fde\u7eed\u6570\u5b57\uff0c\u5c06\u5176\u89e3\u6790\u6210\u4e00\u4e2a\u6574\u6570\uff1b \u6574\u6570\u540e\u53ef\u80fd\u6709\u4efb\u610f\u975e\u6570\u5b57\u5b57\u7b26\uff0c\u8bf7\u5c06\u5176\u5ffd\u7565\uff1b \u4ece\u524d\u5f80\u540e\u904d\u5386\u65f6\uff0c\u5982\u679c\u7b2c\u4e00\u6bb5\u8fde\u7eed\u975e\u7a7a\u683c\u5b57\u7b26\u4e32\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684\u6574\u6570\u8868\u793a\uff0c\u5219\u8fd4\u56de0\uff1b \u5982\u679c\u6574\u6570\u5927\u4e8eINT_MAX(2^31 \u2212 1)\uff0c\u8bf7\u8fd4\u56deINT_MAX\uff1b\u5982\u679c\u6574\u6570\u5c0f\u4e8eINT_MIN(\u22122^31) \uff0c\u8bf7\u8fd4\u56deINT_MIN\uff1b Java \u4ee3\u7801\uff1a \u540c LeetCode \u7b2c 8 \u9898\u3002 \u4f20\u9001\u95e8\uff1a 8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi) \u3002 \u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a atoi \u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u3002 \u9996\u5148\uff0c\u8be5\u51fd\u6570\u4f1a\u6839\u636e\u9700\u8981\u4e22\u5f03\u65e0\u7528\u7684\u5f00\u5934\u7a7a\u683c\u5b57\u7b26\uff0c\u76f4\u5230\u5bfb\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u7684\u5b57\u7b26\u4e3a\u6b62\u3002 \u5f53\u6211\u4eec\u5bfb\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e3a\u6b63\u6216\u8005\u8d1f\u53f7\u65f6\uff0c\u5219\u5c06\u8be5\u7b26\u53f7\u4e0e\u4e4b\u540e\u9762\u5c3d\u53ef\u80fd\u591a\u7684\u8fde\u7eed\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u4f5c\u4e3a\u8be5\u6574\u6570\u7684\u6b63\u8d1f\u53f7\uff1b\u5047\u5982\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u4e0e\u4e4b\u540e\u8fde\u7eed\u7684\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u6574\u6570\u3002 \u8be5\u5b57\u7b26\u4e32\u9664\u4e86\u6709\u6548\u7684\u6574\u6570\u90e8\u5206\u4e4b\u540e\u4e5f\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4f59\u7684\u5b57\u7b26\uff0c\u8fd9\u4e9b\u5b57\u7b26\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u5b83\u4eec\u5bf9\u4e8e\u51fd\u6570\u4e0d\u5e94\u8be5\u9020\u6210\u5f71\u54cd\u3002 \u6ce8\u610f\uff1a\u5047\u5982\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u6574\u6570\u5b57\u7b26\u3001\u5b57\u7b26\u4e32\u4e3a\u7a7a\u6216\u5b57\u7b26\u4e32\u4ec5\u5305\u542b\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5219\u4f60\u7684\u51fd\u6570\u4e0d\u9700\u8981\u8fdb\u884c\u8f6c\u6362\u3002 \u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u82e5\u51fd\u6570\u4e0d\u80fd\u8fdb\u884c\u6709\u6548\u7684\u8f6c\u6362\u65f6\uff0c\u8bf7\u8fd4\u56de 0\u3002 \u8bf4\u660e\uff1a \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u5927\u5c0f\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u90a3\u4e48\u5176\u6570\u503c\u8303\u56f4\u4e3a [\u2212231, 231 \u2212 1]\u3002\u5982\u679c\u6570\u503c\u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\uff0cqing\u8fd4\u56de INT_MAX (231 \u2212 1) \u6216 INT_MIN (\u2212231) \u3002 \u793a\u4f8b 1: \u8f93\u5165: \"42\" \u8f93\u51fa: 42 \u793a\u4f8b 2: \u8f93\u5165: \" -42\" \u8f93\u51fa: -42 \u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26\u4e3a '-', \u5b83\u662f\u4e00\u4e2a\u8d1f\u53f7\u3002 \u6211\u4eec\u5c3d\u53ef\u80fd\u5c06\u8d1f\u53f7\u4e0e\u540e\u9762\u6240\u6709\u8fde\u7eed\u51fa\u73b0\u7684\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u6700\u540e\u5f97\u5230 -42 \u3002 \u793a\u4f8b 3: \u8f93\u5165: \"4193 with words\" \u8f93\u51fa: 4193 \u89e3\u91ca: \u8f6c\u6362\u622a\u6b62\u4e8e\u6570\u5b57 '3' \uff0c\u56e0\u4e3a\u5b83\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u4e3a\u6570\u5b57\u3002 \u793a\u4f8b 4: \u8f93\u5165: \"words and 987\" \u8f93\u51fa: 0 \u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f 'w', \u4f46\u5b83\u4e0d\u662f\u6570\u5b57\u6216\u6b63\u3001\u8d1f\u53f7\u3002 \u56e0\u6b64\u65e0\u6cd5\u6267\u884c\u6709\u6548\u7684\u8f6c\u6362\u3002 \u793a\u4f8b 5: \u8f93\u5165: \"-91283472332\" \u8f93\u51fa: -2147483648 \u89e3\u91ca: \u6570\u5b57 \"-91283472332\" \u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u3002 \u56e0\u6b64\u8fd4\u56de INT_MIN (\u2212231) \u3002 Python \u4ee3\u7801\uff1aPython \u4ee3\u7801\u6bd4\u8f83\u7279\u522b\uff0c\u8981\u6ce8\u610f\uff0c\u7b26\u53f7\u4f4d\u4e0d\u5728\u7b2c $32$ \u4f4d\u4e0a class Solution(object): def strToInt(self, str): \"\"\" :type str: str :rtype: int \"\"\" # \u53bb\u6389\u5de6\u53f3\u7a7a\u683c s = str.strip() l = len(s) if l == 0: return 0 # \u904d\u5386\u6307\u9488 index = 0 # \u7b26\u53f7 sign = 1 # \u7b2c 1 \u4f4d\u7b26\u53f7\u4f4d s_sign = s[0] # \u6700\u7ec8\u7ed3\u679c res = 0 INT_MIN = -1 << 31 INT_MAX = (1 << 31) - 1 # \u7b26\u53f7\u4f4d\u662f\u6b63\u6216\u8d1f\u53f7\u7684\u65f6\u5019 index \u90fd\u52a0 1 if s_sign == '+': index += 1 elif s_sign == '-': index += 1 sign = -1 for i in range(index, l): c = s[i] if c.isdigit(): cint = ord(c) - ord('0') res = res * 10 + cint if res * sign > INT_MAX: break else: break res *= sign if res > INT_MAX: return INT_MAX elif res < INT_MIN: return INT_MIN return res if __name__ == '__main__': solution = Solution() str = '2147483647' result = solution.strToInt(str) print(result) MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 67. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570"},{"location":"67/#offer-67","text":"\u5251\u6307 Offer 67. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 \uff1b \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 \uff1b \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002 \u8bf7\u4f60\u5199\u4e00\u4e2a\u51fd\u6570StrToInt\uff0c\u5b9e\u73b0\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u8fd9\u4e2a\u529f\u80fd\u3002 \u5f53\u7136\uff0c\u4e0d\u80fd\u4f7f\u7528atoi\u6216\u8005\u5176\u4ed6\u7c7b\u4f3c\u7684\u5e93\u51fd\u6570\u3002 \u6837\u4f8b\uff1a ``` \u8f93\u5165\uff1a\"123\" \u8f93\u51fa\uff1a123 ``` \u6ce8\u610f : \u4f60\u7684\u51fd\u6570\u5e94\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\uff1a \u5ffd\u7565\u6240\u6709\u884c\u9996\u7a7a\u683c\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\uff0c\u53ef\u4ee5\u662f \u2018+/\u2212+/\u2212\u2019 \u8868\u793a\u662f\u6b63\u6570\u6216\u8005\u8d1f\u6570\uff0c\u7d27\u968f\u5176\u540e\u627e\u5230\u6700\u957f\u7684\u4e00\u4e32\u8fde\u7eed\u6570\u5b57\uff0c\u5c06\u5176\u89e3\u6790\u6210\u4e00\u4e2a\u6574\u6570\uff1b \u6574\u6570\u540e\u53ef\u80fd\u6709\u4efb\u610f\u975e\u6570\u5b57\u5b57\u7b26\uff0c\u8bf7\u5c06\u5176\u5ffd\u7565\uff1b \u4ece\u524d\u5f80\u540e\u904d\u5386\u65f6\uff0c\u5982\u679c\u7b2c\u4e00\u6bb5\u8fde\u7eed\u975e\u7a7a\u683c\u5b57\u7b26\u4e32\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684\u6574\u6570\u8868\u793a\uff0c\u5219\u8fd4\u56de0\uff1b \u5982\u679c\u6574\u6570\u5927\u4e8eINT_MAX(2^31 \u2212 1)\uff0c\u8bf7\u8fd4\u56deINT_MAX\uff1b\u5982\u679c\u6574\u6570\u5c0f\u4e8eINT_MIN(\u22122^31) \uff0c\u8bf7\u8fd4\u56deINT_MIN\uff1b Java \u4ee3\u7801\uff1a \u540c LeetCode \u7b2c 8 \u9898\u3002 \u4f20\u9001\u95e8\uff1a 8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi) \u3002 \u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a atoi \u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u3002 \u9996\u5148\uff0c\u8be5\u51fd\u6570\u4f1a\u6839\u636e\u9700\u8981\u4e22\u5f03\u65e0\u7528\u7684\u5f00\u5934\u7a7a\u683c\u5b57\u7b26\uff0c\u76f4\u5230\u5bfb\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u7684\u5b57\u7b26\u4e3a\u6b62\u3002 \u5f53\u6211\u4eec\u5bfb\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e3a\u6b63\u6216\u8005\u8d1f\u53f7\u65f6\uff0c\u5219\u5c06\u8be5\u7b26\u53f7\u4e0e\u4e4b\u540e\u9762\u5c3d\u53ef\u80fd\u591a\u7684\u8fde\u7eed\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u4f5c\u4e3a\u8be5\u6574\u6570\u7684\u6b63\u8d1f\u53f7\uff1b\u5047\u5982\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u4e0e\u4e4b\u540e\u8fde\u7eed\u7684\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u6574\u6570\u3002 \u8be5\u5b57\u7b26\u4e32\u9664\u4e86\u6709\u6548\u7684\u6574\u6570\u90e8\u5206\u4e4b\u540e\u4e5f\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4f59\u7684\u5b57\u7b26\uff0c\u8fd9\u4e9b\u5b57\u7b26\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u5b83\u4eec\u5bf9\u4e8e\u51fd\u6570\u4e0d\u5e94\u8be5\u9020\u6210\u5f71\u54cd\u3002 \u6ce8\u610f\uff1a\u5047\u5982\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u6574\u6570\u5b57\u7b26\u3001\u5b57\u7b26\u4e32\u4e3a\u7a7a\u6216\u5b57\u7b26\u4e32\u4ec5\u5305\u542b\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5219\u4f60\u7684\u51fd\u6570\u4e0d\u9700\u8981\u8fdb\u884c\u8f6c\u6362\u3002 \u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u82e5\u51fd\u6570\u4e0d\u80fd\u8fdb\u884c\u6709\u6548\u7684\u8f6c\u6362\u65f6\uff0c\u8bf7\u8fd4\u56de 0\u3002 \u8bf4\u660e\uff1a \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u5927\u5c0f\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u90a3\u4e48\u5176\u6570\u503c\u8303\u56f4\u4e3a [\u2212231, 231 \u2212 1]\u3002\u5982\u679c\u6570\u503c\u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\uff0cqing\u8fd4\u56de INT_MAX (231 \u2212 1) \u6216 INT_MIN (\u2212231) \u3002 \u793a\u4f8b 1: \u8f93\u5165: \"42\" \u8f93\u51fa: 42 \u793a\u4f8b 2: \u8f93\u5165: \" -42\" \u8f93\u51fa: -42 \u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26\u4e3a '-', \u5b83\u662f\u4e00\u4e2a\u8d1f\u53f7\u3002 \u6211\u4eec\u5c3d\u53ef\u80fd\u5c06\u8d1f\u53f7\u4e0e\u540e\u9762\u6240\u6709\u8fde\u7eed\u51fa\u73b0\u7684\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u6700\u540e\u5f97\u5230 -42 \u3002 \u793a\u4f8b 3: \u8f93\u5165: \"4193 with words\" \u8f93\u51fa: 4193 \u89e3\u91ca: \u8f6c\u6362\u622a\u6b62\u4e8e\u6570\u5b57 '3' \uff0c\u56e0\u4e3a\u5b83\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u4e3a\u6570\u5b57\u3002 \u793a\u4f8b 4: \u8f93\u5165: \"words and 987\" \u8f93\u51fa: 0 \u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f 'w', \u4f46\u5b83\u4e0d\u662f\u6570\u5b57\u6216\u6b63\u3001\u8d1f\u53f7\u3002 \u56e0\u6b64\u65e0\u6cd5\u6267\u884c\u6709\u6548\u7684\u8f6c\u6362\u3002 \u793a\u4f8b 5: \u8f93\u5165: \"-91283472332\" \u8f93\u51fa: -2147483648 \u89e3\u91ca: \u6570\u5b57 \"-91283472332\" \u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u3002 \u56e0\u6b64\u8fd4\u56de INT_MIN (\u2212231) \u3002 Python \u4ee3\u7801\uff1aPython \u4ee3\u7801\u6bd4\u8f83\u7279\u522b\uff0c\u8981\u6ce8\u610f\uff0c\u7b26\u53f7\u4f4d\u4e0d\u5728\u7b2c $32$ \u4f4d\u4e0a class Solution(object): def strToInt(self, str): \"\"\" :type str: str :rtype: int \"\"\" # \u53bb\u6389\u5de6\u53f3\u7a7a\u683c s = str.strip() l = len(s) if l == 0: return 0 # \u904d\u5386\u6307\u9488 index = 0 # \u7b26\u53f7 sign = 1 # \u7b2c 1 \u4f4d\u7b26\u53f7\u4f4d s_sign = s[0] # \u6700\u7ec8\u7ed3\u679c res = 0 INT_MIN = -1 << 31 INT_MAX = (1 << 31) - 1 # \u7b26\u53f7\u4f4d\u662f\u6b63\u6216\u8d1f\u53f7\u7684\u65f6\u5019 index \u90fd\u52a0 1 if s_sign == '+': index += 1 elif s_sign == '-': index += 1 sign = -1 for i in range(index, l): c = s[i] if c.isdigit(): cint = ord(c) - ord('0') res = res * 10 + cint if res * sign > INT_MAX: break else: break res *= sign if res > INT_MAX: return INT_MAX elif res < INT_MIN: return INT_MIN return res if __name__ == '__main__': solution = Solution() str = '2147483647' result = solution.strToInt(str) print(result) MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 67. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570"},{"location":"68-2/","text":"\u5251\u6307 Offer 68 - II. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 \u5251\u6307 Offer 68 - II. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 \uff1b \u6811\u4e2d\u4e24\u4e2a\u7ed3\u70b9\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148 \u3002 \u7ed9\u51fa\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8f93\u5165\u4e24\u4e2a\u6811\u8282\u70b9\uff0c\u6c42\u5b83\u4eec\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148\u3002 \u4e00\u4e2a\u6811\u8282\u70b9\u7684\u7956\u5148\u8282\u70b9\u5305\u62ec\u5b83\u672c\u8eab\u3002 \u6ce8\u610f\uff1a \u8f93\u5165\u7684\u4e8c\u53c9\u6811\u4e0d\u4e3a\u7a7a\uff1b \u8f93\u5165\u7684\u4e24\u4e2a\u8282\u70b9\u4e00\u5b9a\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u662f\u4e8c\u53c9\u6811\u4e2d\u7684\u8282\u70b9\uff1b \u6837\u4f8b\uff1a \u4e8c\u53c9\u6811 [8, 12, 2, null, null, 6, 4, null, null, null, null] \u5982\u4e0b\u56fe\u6240\u793a\uff1a 8 / \\ 12 2 / \\ 6 4 1. \u5982\u679c\u8f93\u5165\u7684\u6811\u8282\u70b9\u4e3a 2 \u548c 12\uff0c\u5219\u8f93\u51fa\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148\u4e3a\u6811\u8282\u70b9 8 \u3002 \u5982\u679c\u8f93\u5165\u7684\u6811\u8282\u70b9\u4e3a 2 \u548c 6 \uff0c\u5219\u8f93\u51fa\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148\u4e3a\u6811\u8282\u70b9 2 \u3002 \u540c LeetCode \u7b2c 236 \u9898\uff1a\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002 \u4f20\u9001\u95e8\uff1a 236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002 \u767e\u5ea6\u767e\u79d1 \u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\u4e3a\uff1a\u201c\u5bf9\u4e8e\u6709\u6839\u6811 T \u7684\u4e24\u4e2a\u7ed3\u70b9 p\u3001q\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e3a\u4e00\u4e2a\u7ed3\u70b9 x\uff0c\u6ee1\u8db3 x \u662f p\u3001q \u7684\u7956\u5148\u4e14 x \u7684\u6df1\u5ea6\u5c3d\u53ef\u80fd\u5927\uff08 \u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148 \uff09\u3002\u201d \u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u6811: root = [3,5,1,6,2,0,8,null,null,7,4] \u793a\u4f8b 1: \u8f93\u5165: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1 \u8f93\u51fa: 3 \u89e3\u91ca: \u8282\u70b9 5 \u548c\u8282\u70b9 1 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 3\u3002 \u793a\u4f8b 2: \u8f93\u5165: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4 \u8f93\u51fa: 5 \u89e3\u91ca: \u8282\u70b9 5 \u548c\u8282\u70b9 4 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 5\u3002\u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u4e3a\u8282\u70b9\u672c\u8eab\u3002 \u8bf4\u660e: \u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\u3002 p\u3001q \u4e3a\u4e0d\u540c\u8282\u70b9\u4e14\u5747\u5b58\u5728\u4e8e\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\u4e2d\u3002 \u5206\u6790\uff1a1\u3001\u5982\u679c\u6709\u6307\u5411\u7236\u7ed3\u70b9\u7684\u6307\u9488\uff1b2\u3001\u6ca1\u6709\u6307\u5411\u7236\u7ed3\u70b9\u7684\u6307\u9488\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def lowestCommonAncestor(self, root, p, q): \"\"\" :type root: TreeNode :type p: TreeNode :type q: TreeNode :rtype: TreeNode \"\"\" if root is None: return None if root == p or root == q: return root left = self.lowestCommonAncestor(root.left, p, q) right = self.lowestCommonAncestor(root.right, p, q) if left and right: return root if left is None: return right if right is None: return left return None Java \u4ee3\u7801\uff1a MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 68 - II. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"},{"location":"68-2/#offer-68-ii","text":"\u5251\u6307 Offer 68 - II. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 \uff1b \u6811\u4e2d\u4e24\u4e2a\u7ed3\u70b9\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148 \u3002 \u7ed9\u51fa\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8f93\u5165\u4e24\u4e2a\u6811\u8282\u70b9\uff0c\u6c42\u5b83\u4eec\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148\u3002 \u4e00\u4e2a\u6811\u8282\u70b9\u7684\u7956\u5148\u8282\u70b9\u5305\u62ec\u5b83\u672c\u8eab\u3002 \u6ce8\u610f\uff1a \u8f93\u5165\u7684\u4e8c\u53c9\u6811\u4e0d\u4e3a\u7a7a\uff1b \u8f93\u5165\u7684\u4e24\u4e2a\u8282\u70b9\u4e00\u5b9a\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u662f\u4e8c\u53c9\u6811\u4e2d\u7684\u8282\u70b9\uff1b \u6837\u4f8b\uff1a \u4e8c\u53c9\u6811 [8, 12, 2, null, null, 6, 4, null, null, null, null] \u5982\u4e0b\u56fe\u6240\u793a\uff1a 8 / \\ 12 2 / \\ 6 4 1. \u5982\u679c\u8f93\u5165\u7684\u6811\u8282\u70b9\u4e3a 2 \u548c 12\uff0c\u5219\u8f93\u51fa\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148\u4e3a\u6811\u8282\u70b9 8 \u3002 \u5982\u679c\u8f93\u5165\u7684\u6811\u8282\u70b9\u4e3a 2 \u548c 6 \uff0c\u5219\u8f93\u51fa\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148\u4e3a\u6811\u8282\u70b9 2 \u3002 \u540c LeetCode \u7b2c 236 \u9898\uff1a\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002 \u4f20\u9001\u95e8\uff1a 236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002 \u767e\u5ea6\u767e\u79d1 \u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\u4e3a\uff1a\u201c\u5bf9\u4e8e\u6709\u6839\u6811 T \u7684\u4e24\u4e2a\u7ed3\u70b9 p\u3001q\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e3a\u4e00\u4e2a\u7ed3\u70b9 x\uff0c\u6ee1\u8db3 x \u662f p\u3001q \u7684\u7956\u5148\u4e14 x \u7684\u6df1\u5ea6\u5c3d\u53ef\u80fd\u5927\uff08 \u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148 \uff09\u3002\u201d \u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u6811: root = [3,5,1,6,2,0,8,null,null,7,4] \u793a\u4f8b 1: \u8f93\u5165: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1 \u8f93\u51fa: 3 \u89e3\u91ca: \u8282\u70b9 5 \u548c\u8282\u70b9 1 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 3\u3002 \u793a\u4f8b 2: \u8f93\u5165: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4 \u8f93\u51fa: 5 \u89e3\u91ca: \u8282\u70b9 5 \u548c\u8282\u70b9 4 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 5\u3002\u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u4e3a\u8282\u70b9\u672c\u8eab\u3002 \u8bf4\u660e: \u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\u3002 p\u3001q \u4e3a\u4e0d\u540c\u8282\u70b9\u4e14\u5747\u5b58\u5728\u4e8e\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\u4e2d\u3002 \u5206\u6790\uff1a1\u3001\u5982\u679c\u6709\u6307\u5411\u7236\u7ed3\u70b9\u7684\u6307\u9488\uff1b2\u3001\u6ca1\u6709\u6307\u5411\u7236\u7ed3\u70b9\u7684\u6307\u9488\u3002 Python \u4ee3\u7801\uff1a class Solution(object): def lowestCommonAncestor(self, root, p, q): \"\"\" :type root: TreeNode :type p: TreeNode :type q: TreeNode :rtype: TreeNode \"\"\" if root is None: return None if root == p or root == q: return root left = self.lowestCommonAncestor(root.left, p, q) right = self.lowestCommonAncestor(root.right, p, q) if left and right: return root if left is None: return right if right is None: return left return None Java \u4ee3\u7801\uff1a MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u5251\u6307 Offer 68 - II. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"},{"location":"68/","text":"\u5251\u6307 Offer 68 - I. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 \u5251\u6307 Offer 68 - I. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","title":"\u5251\u6307 Offer 68 - I. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"},{"location":"68/#offer-68-i","text":"\u5251\u6307 Offer 68 - I. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","title":"\u5251\u6307 Offer 68 - I. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"}]}